let atList = ["origamiAt", "airplaneAt", "envelopeAt", "sardinesAt", "refractionAt", "starsAt", "mountainAt", 
  "mothAt", "firebirdAt", "spiralAt", "finger_gunAt", "vineAt", "triangleAt", "flaskAt", "pencilAt", "forestAt", 
  "elephantAt", "coreAt", "orbitAt", "lensAt", "theoremAt", "floppyAt", "spiderAt", "shoesAt", "bee_hiveAt", 
  "mushroomAt", "catAt", "birdAt", "functionAt", "coneAt", "urnAt", "venn_diagramAt", "monsterAt", "frameAt",
   "pantsAt", "tvAt", "duckrabbitAt", "fishAt", "cactusAt", "umbrellaAt", "flameAt", "bulbAt", "deadlockAt",
   "mazeAt", "transomAt", "cameraAt", "bicycleAt", "cigarettesAt", "phoneAt", "wife_beaterAt", "clickbaitAt", "two_ingredient_brownieAt",
  "appleAt", "bridgeAt", "bugAt", "mailboxAt", "jumpropeAt",  "observatoryAt", "heronAt", "crazy_wallAt", 
  "houseAt", "falling_chairAt", "birdhouseAt", "factoryAt","phaseAt", "mirrorAt", "blind_eyeAt", "gateAt", 
  "leafAt", "userAt", "heartAt", "glassAt", "prayerAt", "body_of_waterAt",
  "thoughtAt", "skullAt", "lampAt", "chairAt", "cubeAt", "full_cupAt", "mouseAt", "uapAt", "flipflopAt", 
  "chatAt", "gas_station_shrubberyAt", "misheard_lyricsAt", "plate_tectonicsAt", "negative_spaceAt",
  "stairsAt", "treeAt", "slideAt", "ladderAt", "swingAt", "cakeAt", "nice_thingsAt", "fossilAt", "tissue_boxAt",
  "piechartAt", "too_expensive_burgerAt", 'get_off_my_lawnAt',"virusAt", "two_car_garageAt","flat_tireAt",
  "big_fishAt", "greenwashingAt", "bribeAt", "entanglementAt", "unread_spreadAt", "ghost_in_the_machineAt",
  'bandaidAt', "witch_huntAt", "racetrackAt", "heirloomAt", "rainAt", "cloudsAt","sailboatAt", 
  "doorAt", "sunAt","waveAt", "lighthouseAt", "sofaAt", "windowAt", "conference_room_bAt","talkAt",
  "medicationAt","paint_brushAt", "hammerAt","pencil_sharpenerAt","clickAt", "stumpAt","walk_it_backAt",
  "shopping_listAt","paper_bagAt","press_the_buttonAt","seedAt","thread_the_needleAt","too_many_thingsAt",
  "rainbowAt","flock_of_birdsAt","aiAt","antsAt","keyAt","alarm_clockAt","herdAt","fish_hookAt","checkpointAt","coat_hangerAt","teak_rat_sculptureAt",
  "icebergAt","screwAt","nailAt","pillAt","vinylAt","compassAt","islandAt","toy_drumAt","almost_hanged_manAt",
  "eclipseAt","tidesAt","power_linesAt","cubicleAt","furniture_at_nightAt","indicate_by_pointingAt","plastic_owlAt","stone_axeAt",
  "butterfly_effectAt","UIAt","sketchbookAt","traffic_lightAt","doomscrollingAt","combAt","groupthinkAt",
  "platformAt","covid_testAt","end_of_the_worldAt","razor_wireAt","wrack_lineAt","bag_clipAt","figure_headAt","fortAt","red_flagAt",
  "mobile_appAt","heads_or_tailsAt","surface_areaAt","ingredientsAt","snakeAt","jackknifeAt","viewfinderAt","beansAt",
  "redactedAt","securityAt","watering_canAt","i_chingAt","la_sandíaAt","la_campanaAt","la_peraAt","la_coronaAt","ice_creamAt","tapeAt","selectionAt","anchorAt","cometAt",
  "batten_down_the_hatchesAt","card_tableAt","goedkeuringskrulAt", "don_apos_t_care_about_why_you_switched_browsersAt","zodiacAt","story_diagramAt","coordinatesAt","number_lineAt","sisyphusAt","timelineAt", "votiveAt","disruptorAt","tearsAt","light_switchAt","tarjetas_rojasAt","thumbs_upAt","trope_detective_pursuing_suspectAt","streetlight_effectAt","bokeh_At", "trash_dayAt","kioskAt","gone_silentAt","wind_chimesAt","price_of_a_dozen_eggsAt","bicycles_are_everywhereAt","gigoAt","washing_machineAt","voidAt", "banned_bookAt","space_invaderAt","routerAt","bombAt","dungeonAt","overhead_projectorAt","maskAt","morulaAt","peace_symbolAt","bedAt","black_boxAt",
  "data_centerAt","poker_faceAt",

  "oblique_stratagiesAt","random_walkAt",  "ceci_n_apos_est_pas_une_carteAt","object_permanenceAt","rules_of_pokerAt", "spandrelAt","संसारAt","walled_gardenAt","is_it_prime_q_At","judgmentalAt","one_trick_ponyAt","about_to_walk_off_a_cliffAt","tech_broAt","müller_hyph_lyer_illusionAt","_19th_century_capitalism_themed_cardAt","datura_stramoniumAt", "stochastic_parrotAt", "eye_contactAt","load_cellAt", "trompe_l_apos_oeilAt","vaccineAt","evAt","knot_theoryAt","four_color_theoremAt","hierophantAt","free_readingAt","lubbers_sp__lp_alt_rp_At","wokeAt","bubbleAt","flash_cardAt","mtg_cardAt","unoAt","six_of_heartsAt","sufferingAt","lubbersAt","halfCardsAt","narcissusAt","undoingAt","relicAt","untitled_drawing_appAt","acAt","triple_deckerAt","tofuAt","crossroadsAt","burnerAt","constancyAt","last_matchAt","crossword_puzzleAt","orreryAt","draw_your_own_cardAt","picture_thisAt","densityAt","have_we_learned_nothing_yet_q_At", "promisesAt","lureAt","turbulenceAt", "reductionAt","ironing_boardAt", "anendophasiaAt","ten_of_cuisenaire_rodsAt","ten_of_ironingAt","indeterminate_of_swordsAt","pre_hyph_complianceAt","horse_shoeAt","magnetAt","contentAt","sensitiveAt","big_footAt","cognitive_dissonanceAt","fertilityAt","exitAt", "nonexistent_filesAt","schröder_apos_s_staircaseAt","marginaliaAt", "requirementsAt","doom_on_a_tarot_cardAt","toy_soldierAt","hidden_variablesAt","entscheidungsproblemAt","backPatternAt","vitruvian_manAt","_3DAt","schrödinger_apos_s_catAt","what_is_a_concentration_camp_q_At","special_interestsAt","stygian_blueAt", "day_dayAt","mary_apos_s_roomAt","chinese_roomAt","matrix_multiplicationAt","meditationAt","metalAt","quantity_has_a_quality_all_its_ownAt","meridiansAt","no_signalAt","garden_pathAt","captchaAt", "cookie_policyAt","subscription_requiredAt","el_viaje_del_héroeAt", "small_handsAt","tacoAt","where_your_sleeves_meet_your_waistbandAt","krebs_cycleAt","key_exchangeAt","numerologyAt","slide_ruleAt","is_he_dead_yet_q_At","illusion_of_controlAt","palm_readingAt","printerAt","turntableAt","reading_tea_leavesAt","no_kingsAt","tin_foil_hatAt","spell_checkAt","hands_offAt","cancerAt","elementaryAt","gunAt","disappearedAt","symbolic_fencingAt","calculatorAt","empty_roomsAt","dissatisfactionAt","rock_paper_scissorsAt","color_modelAt","volvelleAt", "wheel_of_consumptionAt","iglooAt","knock_knockAt","canceledAt","ikebanaAt","optimal_dishwasher_loadingAt","reactorAt","knife_drawerAt","off_with_their_headsAt","mid_century_modernAt","ishihara_testAt","phrenologyAt","don_apos_t_happy_com_be_worryAt","unpluggedAt","right_over_my_headAt","chainsawAt", "algorithmAt","victoryAt","fifty_minute_hourAt","taintAt","square_peg_in_a_round_holeAt","brain_wormAt","life_cycleAt","fridgeAt","mute_swanAt","salamanderAt","pooAt","fig_leafAt","cul_de_sacAt","no_such_thing_as_a_free_lunchAt","need_helpAt","climate_changeAt", "flashlightAt","credit_cardAt","image_not_foundAt","got_your_noseAt","fallout_shelterAt", "world_upside_downAt","periodic_tableAt","disco_ballAt","mulletAt","pitted_olive_that_yet_has_a_pitAt","lobotomyAt","toaster_falling_into_bathtubAt","erasedAt","water_cycleAt", "sol_lewittAt","rothkoAt","newspeakAt","spinelessAt","babylonAt","rentre_chez_toi_com_ta_mère_a_fait_des_gaufresAt","didn_apos_t_finish_her_drinkAt","under_thumbAt","inner_earAt","bending_the_knee_kissing_the_ringAt","asciiAt","starAt","blue_screen_of_deathAt","surveillance_capitalismAt","art_promptAt","finger_trickAt","toilet_paperAt","render_harmlessAt","uphill_both_waysAt","propagandaAt","palindromeAt","infinityAt","comedianAt","butterAt","participationAt","check_engine_lightAt","dnaAt","tail_wagging_the_dogAt","enlightenmentAt","buffleheadsAt", "trees_on_the_hillsideAt","on_the_spectrumAt", "mittensAt","casseroleAt","snitches_get_stitchesAt","misprintAt","resistanceAt","zero_knowledge_proofAt","razorAt","not_my_circus_not_my_monkeysAt","hurricaneAt","i_apos_m_with_stupidAt","liberal_eliteAt","patriarchyAt","cellular_automataAt","local_maximaAt", "scotomaAt","snailAt","reciprocalAt","tree_hugging_communistAt","synapseAt","cat_doorAt","your_better_halfAt","cone_of_shameAt","traumaAt","convenience_store_sushiAt","red_lineAt","people_are_sayingAt","tidally_lockedAt","swimming_in_circlesAt","flowAt","concept_of_a_planAt","bomberAt","nimbyAt","sanewashingAt","artspeakAt","mass_shootingAt","hunter_bidens_laptopAt","dyslexiaAt","rear_viewAt","bobberAt","double_slitAt","burdenAt","sunporchAt","jogo_do_bichoAt","bathtub_madonnaAt","did_you_even_read_my_email_q_At","automatic_writingAt","scratchy_sweaterAt","ramenAt", "like_and_followAt","like_pulling_teethAt","agoraphobiaAt","flying_dreamAt","acrophobiaAt","accidentAt","a_trapAt","up_lateAt","soundingsAt","pants_on_fireAt","house_on_fireAt","colanderAt","deer_in_the_headlightsAt","meteor_showerAt","auroraAt","night_drivingAt","full_moonAt","asteriskAt","pat_yourself_on_the_backAt","gray_areaAt","crazy_cat_ladyAt","frogAt","transducerAt","synecdocheAt", "counterfactualAt","koanAt","pareidoliaAt","red_shirtAt","lithomancyAt","trope_they_re_shutting_down_the_x_filesAt","you_make_a_better_door_than_a_windowAt","swimming_poolAt", "sigilAt","bothsidesismAt","psychicAt","magic_8_ballAt", "mixtapeAt","homunculus_has_left_the_buildingAt","palimpsestAt","too_far_awayAt","lazy_evaluationAt","stay_in_your_laneAt","holy_days_of_obligationAt","late_stage_capitalismAt","ouroborosAt","traveling_salesmanAt","no_longer_supportedAt", "P_versus_NPAt","field_guideAt","empty_signifierAt","fallen_idolAt","idling_black_pickup_with_tinted_windowsAt","empty_tableAt","tankAt","stainAt","unhingedAt","splashdownAt","stageAt","foundationalismAt","stone_of_madnessAt","anosognosiaAt","jailAt","philosopherAt","serverAt","paperclipAt","fox_and_hareAt","kilroyAt", "copy_and_pasteAt","person_man_woman_camera_tvAt","endless_shrimpAt","chiralityAt","tracesAt","topologyAt","soldAt","perfectly_normal_cowboy_bootsAt","dogcowAt","upendedAt","self_referenceAt", "representationAt","geminiAt","punch_cardAt","invisible_handAt","unknown_birdAt", "dormerAt","skates_purseAt","shopping_cartAt","tickAt","incomingAt","passwordAt","snowmanAt", "calendarAt","gliderAt","hang_manAt","octopusAt","reel_to_reelAt","flyover_statesAt","coffee_makerAt","big_cityAt","joineryAt","missingAt","hexAt",/*"unoAt","fourofdiamondsAt",*/"space_intentionally_left_blankAt","regexAt","one_of_suitsAt","galleryAt","le_crépusculeAt","pongAt", "meanAt","quantum_tunnellingAt","mona_lisaAt", "divide_by_zeroAt","your_pointy_elbowsAt","workAt","doll_houseAt","pixelAt","game_pieceAt","gameAt","windAt","steering_wheelAt", "urgentAt", "holeAt","evidenceAt", "solar_systemAt","suburbsAt","empty_setAt","nowAt","scattered_leavesAt","cabin_air_filterAt","tape_dispenserAt","running_with_scissorsAt","free_palletsAt","whaleAt","bacteriophageAt","stone_wallAt","eyeglassesAt","blast_radiusAt","winter_stickAt","dreyAt","oocyteAt","bird_cageAt","parking_lotAt","lemonAt","dieAt","riverAt","progress_indicatorAt","postcardAt", "keyholeAt", "puzzle_pieceAt", "monitorAt", "impossibleAt", "uphillAt", "connect_the_dotsAt","dog_whistleAt"]  
let noDraw = ["rules_of_pokerAt","n_of_clubsAt","about_to_walk_off_a_cliffAt","tcardAt","spiral_boundAt","six_of_heartsAt","tarjetas_rojasAt","credit_cardAt","image_not_foundAt","misprintAt","fourofdiamondsAt","unoAt"]
let noCaption = ["tcardAt","spiral_boundAt"]
let autoDraw = ["rules_of_pokerAt","n_of_clubsAt","about_to_walk_off_a_cliffAt","trompe_l_apos_oeilAt","free_readingAt","flash_cardAt","mtg_cardAt","unoAt","six_of_heartsAt", "halfCardsAt"]
let apostrophy = ["skates_purseAt","hunter_bidens_laptopAt"]
let noThe = ["oblique_stratagiesAt","poker_faceAt","ceci_n_apos_est_pas_une_pipeAt","ceci_n_apos_est_pas_une_carteAt","object_permanenceAt","संसारAt","is_it_prime_q_At","judgmentalAt", "batten_down_the_hatchesAt", "_19th_century_capitalism_themed_cardAt","datura_stramoniumAt","goedkeuringskrulAt","eye_contactAt","trompe_l_apos_oeilAt","knot_theoryAt","wokeAt","sufferingAt","halfCardsAt","narcissusAt","untitled_drawing_appAt","tofuAt","constancyAt","draw_your_own_cardAt","picture_thisAt","densityAt","have_we_learned_nothing_yet_q_At", "promisesAt","turbulenceAt", "reductionAt","anendophasiaAt","pre_hyph_complianceAt","sensitiveAt","big_footAt","cognitive_dissonanceAt","transparent__lp_not_rp_At","fertilityAt","schröder_apos_s_staircaseAt","doom_on_a_tarot_cardAt","hidden_variablesAt","entscheidungsproblemAt","_3DAt","schrödinger_apos_s_catAt","what_is_a_concentration_camp_q_At","special_interestsAt","stygian_blueAt","day_dayAt","mary_apos_s_roomAt","matrix_multiplicationAt","meditationAt","metalAt","quantity_has_a_quality_all_its_ownAt","no_signalAt","don_apos_t_care_about_why_you_switched_browsersAt","zodiacAt","subscription_requiredAt","sisyphusAt","el_viaje_del_héroeAt","where_your_sleeves_meet_your_waistbandAt","key_exchangeAt","numerologyAt","is_he_dead_yet_q_At","palm_readingAt","reading_tea_leavesAt","no_kingsAt","hands_offAt","cancerAt","elementaryAt","gunAt","disappearedAt","symbolic_fencingAt","empty_roomsAt","dissatisfactionAt","rock_paper_scissorsAt","votiveAt","knock_knockAt","canceledAt","ikebanaAt","optimal_dishwasher_loadingAt","off_with_their_headsAt","mid_century_modernAt","phrenologyAt","don_apos_t_happy_com_be_worryAt","unpluggedAt","right_over_my_headAt","victoryAt","tarjetas_rojasAt","taintAt","square_peg_in_a_round_holeAt","thumbs_upAt","trope_detective_pursuing_suspectAt","pooAt","no_such_thing_as_a_free_lunchAt","need_helpAt","climate_changeAt","image_not_foundAt","got_your_noseAt","tearsAt","toaster_falling_into_bathtubAt","erasedAt","sol_lewittAt","albersAt","newspeakAt","babylonAt","rentre_chez_toi_com_ta_mère_a_fait_des_gaufresAt","didn_apos_t_finish_her_drinkAt","under_thumbAt","bending_the_knee_kissing_the_ringAt","surveillance_capitalismAt","toilet_paperAt","render_harmlessAt","uphill_both_waysAt","propagandaAt","infinityAt","butterAt","participationAt","dnaAt","enlightenmentAt","buffleheadsAt","trees_on_the_hillsideAt","on_the_spectrumAt","bokeh_At","trash_dayAt","snitches_get_stitchesAt","gone_silentAt","resistanceAt","bicycles_are_everywhereAt","gigoAt","not_my_circus_not_my_monkeysAt","i_apos_m_with_stupidAt","patriarchyAt","your_better_halfAt","traumaAt","convenience_store_sushiAt","people_are_sayingAt","swimming_in_circlesAt","flowAt","concept_of_a_planAt","nimbyAt","sanewashingAt","artspeakAt","hunter_bidens_laptopAt","dyslexiaAt","jogo_do_bichoAt","did_you_even_read_my_email_q_At","like_and_followAt","like_pulling_teethAt","agoraphobiaAt","flying_dreamAt","acrophobiaAt","a_trapAt","up_lateAt","soundingsAt","pants_on_fireAt","house_on_fireAt","deer_in_the_headlightsAt","night_drivingAt","pat_yourself_on_the_backAt","synecdocheAt","pareidoliaAt","lithomancyAt","trope_they_re_shutting_down_the_x_filesAt","you_make_a_better_door_than_a_windowAt","La_macetaAt","bothsidesismAt","psychicAt","lazy_evaluationAt","stay_in_your_laneAt","holy_days_of_obligationAt","late_stage_capitalismAt","P_versus_NPAt","idling_black_pickup_with_tinted_windowsAt","unhingedAt","foundationalismAt","anosognosiaAt","jailAt","fox_and_hareAt","kilroyAt", "redactedAt","copy_and_pasteAt","la_coronaAt","la_campanaAt","la_peraAt","la_sandíaAt","heads_or_tailsAt","doomscrollingAt","surface_areaAt","person_man_woman_camera_tvAt","chiralityAt","tracesAt","topologyAt","soldAt","upendedAt","self_referenceAt","representationAt","geminiAt","hang_manAt","space_intentionally_left_blankAt","le_crépusculeAt","pongAt","quantum_tunnellingAt","divide_by_zeroAt","your_pointy_elbowsAt","workAt","urgentAt","nowAt","scattered_leavesAt","running_with_scissorsAt","too_many_thingsAt","flock_of_birdsAt","aiAt","walk_it_backAt","thread_the_needleAt","indicate_by_pointingAt","press_the_buttonAt","conference_room_bAt", "ghost_in_the_machineAt", "gas_station_shrubberyAt", "greenwashingAt", "refractionAt", "clickbaotAt",  "plate_tectonicsAt",
"furniture_at_nightAt", "misheard_lyriclet f = randomPsAt", "negative_spaceAt","nice_thingsAt", "talkAt", "connect_the_dotsAt", "entanglementAt",'get_off_my_lawnAt']
let shortlist = ["local_maximaAt","calendarAt","nowAt"]

function recent () { // last 10
  let keys = Object.keys(defs)
  return (keys.slice(keys.length-3, keys.length))
} 

function cardnumber (name) {
  let keys = Object.keys(defs)
  return keys.indexOf(name)+1
}

function printableCard (f,I) {
  if (!I)
    I = false
  if (document.getElementById("canvassizes").value !== "3.5X5") {
    document.getElementById("canvassizes").value = "3.5X5"
    resizeCanvas()
  }
  if (!f)
    f = randomPick(atList)
  tarotcard(0,0,3.5*96,5*96,f,cardnumber(f),true,I)
  if(document.getElementById("palettechoice").value === "dos")
    loadPalette()
}
  
function fillcard () {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let mode = document.getElementById("mode").value
  let r = 13
  let W = canvas.width, H = canvas.height
  let x = 0, y = 0
  let w = W/2*1.2, h = w*1.58 - 30
  x+=W/2-w/2, y+=H/2-h/2
 // ctx.save()
    if (w < 2 * r) r = w / 2;
    if (h < 2 * r) r = h / 2;
    ctx.beginPath();
    ctx.moveTo(x+r, y);
    ctx.arcTo(x+w, y,   x+w, y+h, r); // across to right
    ctx.arcTo(x+w, y+h, x,   y+h, r);
    ctx.arcTo(x,   y+h, x,   y,   r);
    ctx.arcTo(x,   y,   x+w, y,   r);
    ctx.closePath()
  ctx.fillStyle = "#ffffee"
  ctx.globalCompositeOperation = "destination-over"
  ctx.fillRect(0,0,canvas.width,canvas.height)
  ctx.globalCompositeOperation = mode
}

let HALF = false

function tarotcard (x,y,w,h,f,n,INVERT, two) {
  //console.log(f)
  if (autoDraw.includes(f)) {
    if (f === "halfCardsAt")
      halfCardsAt(x,y,w,h,f,n,INVERT, two)
    else
      window [f] (x,y,w,INVERT)
    return
  }
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = canvas.height, W = canvas.width
  h = 1.5*w
  let colors = shuffle(getCurrentPalette())
  let up = true
  let r = 13, invert = false
  let fontsize = w/20
  BRIGHT = true
 /* if (IU != undefined) {
    up = IU
    BRIGHT = IU
  }*/
  up = true
  BRIGHT = true
  let pal = sortByBrightness(colors)
 // if (IU === undefined) {
    if (Math.random() > 0.5) {
      up = false
      pal = sortByBrightness(pal)
    }
    if (INVERT && INVERT[0] === 1) {
      up = false
      BRIGHT = false
      pal = sortByBrightness(pal)
    } else
    if (INVERT && INVERT[0] === 0) {
      up = true
      BRIGHT = true
      pal = sortByBrightness(pal)
    }
 // }
  let u = "u"
  if (up === false)
    u = "i"
  let brightness = brightnessOf10 (ctx,canvas.width/2,canvas.height*0.8,10)
  let fillindex = randomPick([...Array(Math.floor(pal.length/2)).keys()])
  ctx.fillStyle = pal[fillindex]
  ctx.strokeStyle = randomPick(pal.slice(pal.length/2))
  ctx.lineWidth = 9
  ctx.shadowBlur = 10
  ctx.shadowColor = "#444444"
  ctx.shadowOffsetX = 2
  ctx.shadowOffsetY  = w * 0.026
  if (u === "i" && !two) {
    ctx.shadowOffsetX = -2
    ctx.shadowOffsetY  = -(w * 0.026)
  }
  if (INVERT && INVERT[0] == 1 ) { // always positive fro small cards
    ctx.shadowOffsetX = 2
    ctx.shadowOffsetY  = w * 0.026
  }
  ctx.lineWidth = fontsize*0.9
  if (w === 3*96 || w === 3.5*96) {
    ctx.lineWidth = 24
    r = 24
  }
  if (f === "voidAt") {
    ctx.fillStyle = "#000000"
    ctx.strokeStyle = "#202020"
    ctx.shadowColor = "#000000"
  }
  if (!noDraw.includes(f))
    roundedRect (x, y, w, h, r, ctx)
  ctx.shadowBlur = 0
  ctx.shadowOffsetX = 0
  ctx.shadowOffsetY  = 0
if (INVERT === undefined) {
  INVERT = [up]
}
  if (noDraw.includes(f))
    window[f](x,y,w,ctx.strokeStyle,INVERT[0])
  roundedRectFrame (x, y, w, h, r, ctx)
  let xp = x, yp = y+h/5
  x = x + w/2 - (w*0.8)/2
  let sf = ctx.fillStyle
  let ss = ctx.strokeStyle
  // draw the icon
  ctx.fillStyle = sf
  ctx.strokeStyle = ss
  if (!up /*&& !IU*/) {
    invert = true
    if (!noDraw.includes(f))
      window[f](x,y+h/4, w*0.8,ctx.strokeStyle, invert)
  } else {
    if (!noDraw.includes(f))
      window[f](x,y+h/4, w*0.8,ctx.strokeStyle, invert)
  }
  x = xp
  ctx.fillStyle = ctx.strokeStyle
  let prefix = "THE "
  if (noThe.includes(f))
    prefix = ""
  let text = prefix+capitalize(f.slice(0,-2))
  if (f === "_3DAt" || f === "backPatternAt" || noCaption.includes(f))
    text = ""
  if (diffTitle[f]) {
    text = differentTitle(f)
  }
  if (INVERT && INVERT[0] && altTitles[f]) {
    text = capitalize(altTitles[f])
  }
  if (apostrophy.includes(f)) {
    text = text.replace(/s_/g, "'s_")
  }
  text = text.replace(/_sp_/gi, " ") // not needed
  text = text.replace(/_lp_/gi, "(")
  text = text.replace(/_rp_/gi, ")")
  text = text.replace(/_apos_/gi, "'")
  text = text.replace(/__/gi, " / ")
  text = text.replace(/_RE_/gi, "'RE_")
  text = text.replace(/_q_/gi, "?")
  text = text.replace(/_com_/gi, ", ")
  text = text.replace(/_hyph_/gi, "-")
  text = text.replace(/TROPE/gi, "TROPE:")
  text = text.replace(/_/g, " ")
  text = text.toUpperCase()
  nw = text.split(" ").length
  //if (nw > 2)
    fontsize *= 0.9
  let face = "sans serif"
  ctx.font = "800 "+(fontsize)+"pt " + face
  let width = ctx.measureText(text).width
  let split = findSplitPoint(text.split(" "), (w - r*2)-4, fontsize)
  let chunks = []
  if (split === 0) {
    ctx.fillText(text, x+w/2-width/2+0, y+h-fontsize*1.2)
  } else {
    let words = text.split(" ")
    chunks.push(words.slice(0,split).join(" "))
    chunks.push(words.slice(split,nw).join(" "))
    width = ctx.measureText(chunks[0]).width
    ctx.fillText(chunks[0], x+w/2-width/2+0, y+h-fontsize*3.2)
    width = ctx.measureText(chunks[1]).width
    ctx.fillText(chunks[1] , x+w/2-width/2+0, y+h-fontsize*1.2)
  }
  ctx.lineWidth = 2
  // up or down
  ctx.strokeStyle = ctx.fillStyle
  text = up? "\u{1F829}": "\u{1F82B}"
  if (f === "backPatternAt")
    text = ""
  width = ctx.measureText(text).width
  if ((w !== 3*96 && w !== 3.5*96) && !noDraw.includes(f))
    ctx.fillText(text, x+w-40-fontsize/2, y+fontsize*2)
  text = n // card number
  if (f === "backPatternAt")
    text = ""
  width = ctx.measureText(text).width
    ctx.fillText(text, x+w/2-width/2, y+fontsize*2)
  if (!INVERT) // prevents double caption & caption at top in twoides
    cardcaption(f,u,x,y,w,h)

  if (!two) 
    cardcaption(f,u,x,y,w,h)
  return invert
}

function findSplitPoint(words, W, fontsize) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  ctx.font = "800 "+(fontsize)+"pt sans serif"
  W *= 0.75
  let i = 1, w = 0, t = "", ALL = true
  for (; i < words.length; i++) {
    t = words.slice(0,i).join(" ")
    w = ctx.measureText(t).width
    if (w > W) {
      ALL = false
      break;
    }
  }
  if (ALL)
    i = 0
  //if(!ALL)
 //   console.log(words, ALL, i-1)
  return i
}

function cardcaption (f,u,x,y,w,h) { // "u" or "i" text
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let brightness = brightnessOf10 (ctx,canvas.width/2,canvas.height*0.8,10)
  ctx.fillStyle = "#ffffff"
  if (brightness > 5)
    ctx.fillStyle = "#000000"
  ctx.font = "500 "+(16)+"pt sans serif" 
  let text = (defs[f] && defs[f][u].split(",") || "")// format as in psychicAt
  let maxi = text.length
  let maxw = w *0.8, STRIKE = false, si = 0, se = 0
  y -= 22
  let res = [] // push the lines to res. then measure width and center
  let i = 0, x2 = x
  i = 0
  for (; i < maxi; i++) {
    text[i] = text[i].replace(/\\c/g, ",") // "\\c" for comma
    let j = 0
    let words = text[i].split(" ")
    let str = ""
    for (; j < words.length; j++) {
      let width = ctx.measureText(words[j]+" ").width
      str += words[j]+" "
      x2 += width
      if (x2 > x+maxw) {
        res.push(str)
        str = ""
        x2 = x
      }
    }
    res.push(str)
    x2 = x
  }
  i = 0, x2 = x
  for (; i < res.length; i++) {
    let width = ctx.measureText(res[i].trim()).width
    if (res[i].length > 0) {
      ctx.fillText(res[i], x2 + w/2-width/2, y+h+100)
      y += 22
    }
  }
}

function titleize (f, INVERT) {
  let prefix = "THE "
  if (noThe.includes(f))
    prefix = ""
  let text = prefix+capitalize(f.slice(0,-2))
  if (f === "_3DAt")
    text = ""
  if (diffTitle[f]) {
    text = differentTitle(f)
  }
  if (INVERT && INVERT[0] && altTitles[f]) {
    text = capitalize(altTitles[f])
  }
  if (apostrophy.includes(f)) {
    text = text.replace(/s_/g, "'s_")
  }
  text = text.replace(/_apos_/gi, "'")
  text = text.replace(/__/gi, " / ")
  text = text.replace(/_RE_/gi, "'RE_")
  text = text.replace(/_q_/gi, "?")
  text = text.replace(/_com_/gi, ", ")
  text = text.replace(/_hyph_/gi, "-")
  text = text.replace(/TROPE/gi, "TROPE:")
  text = text.replace(/_/g, " ")
  text = text.toUpperCase()
  return text
}

function cardNamePrint (f) {
  let prefix = "THE "
  if (noThe.includes(f))
    prefix = ""
  let text = prefix+capitalize(f.slice(0,-2))
 // if (INVERT[0] && altTitles[f]) {
 //   text = capitalize(altTitles[f])
  //}
  if (apostrophy.includes(f)) {
    text = text.replace(/s_/g, "'s_")
  }
  text = text.replace(/_apos_/gi, "'")
  text = text.replace(/__/gi, " / ")
  text = text.replace(/_RE_/gi, "'RE_")
  text = text.replace(/_q_/gi, "?")
  text = text.replace(/_com_/gi, ", ")
  text = text.replace(/_hyph_/gi, "-")
  text = text.replace(/TROPE/gi, "TROPE:")
  text = text.replace(/_/g, " ")
  text = text.toUpperCase()
  return text
}

function threecards () {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let W = canvas.width, H = canvas.height
  let x = 0, y = 0
  let w = W/3.2, h = H/2 - 30
  let funcs = shuffle(atList)
// funcs =  shuffle(recent())//shuffle(["free_readingAt","six_of_heartsAt","spiral_boundAt","flash_cardAt"])

  ctx.fillStyle = randomPick(getCurrentPalette())
  ctx.fillRect(0,0,W,H)
  ctx.fillStyle = randomPick(getCurrentPalette())
  let a = document.getElementById("opacity").value
  document.getElementById("opacity").value *= 0.7
  wavyPaper()
  document.getElementById("opacity").value = a
  tint()
  // cardcaption (funcs[0],"i",x+3*W/4-w/2,y+H/2-h/2,x+w,y+h) 
  // (x,y,w,h,f,n,IU,INVERT)
  tarotcard(x+12, y+156 +pet(49), w, h, funcs[0], cardnumber(funcs[0]), [(Math.random() > 0.5)? 1: 0])
  if(document.getElementById("palettechoice").value === "dos")
    loadPalette()
  tarotcard(x+2*W/3+4, y+156+pet(49), w, h, funcs[2], cardnumber(funcs[2]), [(Math.random() > 0.5)? 1: 0])
  if(document.getElementById("palettechoice").value === "dos")
    loadPalette()
  tarotcard(x+1*W/3+8, y+156+pet(49), w, h, funcs[1], cardnumber(funcs[1]), [(Math.random() > 0.5)? 1: 0]) 
  if(document.getElementById("palettechoice").value === "dos")
    loadPalette()
}

function bigcard () {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let W = canvas.width, H = canvas.height
  W = 848, H= 1205
  x = 0, y = 0
  w = W/2*1.2, h = w*1.58 - 30
  let funcs = shuffle(atList)
  if(document.getElementById("palettechoice").value === "dos")
    loadPalette()
 ctx.clearRect(0,0,W,H)
  let I = tarotcard(x+W/10, y+H/10, W*0.8, H*0.8, funcs[0], cardnumber(funcs[0]),undefined, false) 
  if (I) {
    rc()
    rc()
  }
}

function twosides () {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let W = canvas.width, H = canvas.height
  ctx.fillStyle = randomPick(getCurrentPalette())
  wavyPaper()
  tint()
  x = 0, y = 0
  w = W/2*0.84, h = w*1.5//8 - 10
  let funcs = shuffle(recent())//shuffle(atList)
  if (document.getElementById("palettechoice").value === "dos")
    loadPalette()
  tarotcard(x+W/4-w/2, y+H/2-h/2-10, w, h, funcs[0], cardnumber(funcs[0]), [0], true) 
  if (funcs[0] !== "halfCardsAt")
  if (!autoDraw.includes(funcs[0]))
    tarotcard(x+3*W/4-w/2, y+H/2-h/2 + 1, w, h, "blankCard", "0", [0],  true)  // for the shadow
  cardcaption(funcs[0],"u",x+W/4-w/2, y+H/2-h/2,x+w,y+h)
  rc()
  rc()
  tarotcard(x+W/4-w/2, y+H/2-h/2, w, h, funcs[0], cardnumber(funcs[0]), [1],  true) 
  rc()
  rc()
  cardcaption(funcs[0],"i",x+3*W/4-w/2,y+H/2-h/2,x+w,y+h)
}

function leadingzero (d) {
  if (d < 10)
    return "0"+d
  else
    return d
}

const title_author = {
  "Half of a Yellow Sun":"Chimamanda Ngozi Adichie",
  "Gender Queer: A Memoir":"Maia Kobabe",
  "Finding Cinderella":"Colleen Hoover",
  "Homegoing":"Yaa Gyasi",
  "Beloved":"Toni Morrison",
  "City of Thieves":"David Benioff",
  "Burned":"Ellen Hopkins",
  "Beartown":"Fredrik Backman",
  "All the Bright Places":"Jennifer Niven",
  "All Boys Aren’t Blue":"George M. Johnson",
  "The Bluest Eye":"Toni Morrison",
  "Flamer":"Mike Curato",
  "Looking for Alaska":"John Green",
  "The Perks of Being a Wallflower":"Stephen Chbossix_of_heartsAtautoDrky",
  "Lawn Boy":"Jonathan Evison",
  "The Absolutely True Diary of a Part-Time Indian":"Sherman Alexie",
  "Out of Darkness":"Ashley Hope Perez",
  "Crank":"Ellen Hopkins",
  "Me and Earl and the Dying Girl":"Jesse Andrews",
  "This Book is Gay":"Juno Dawson",
  "  Sold":"Patricia McCormick"
}

function tech_broAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, WAVEY = false
  let cs = W/32, d = 0, i = 0, maxi = 1
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  if (WAVEY) {
    d = cs/2, maxi = 9
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/150
  }
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  x += 3*cs
  for (; i < maxi; i++) { // WAVEY
  //1
  ctx.beginPath()
  ctx.moveTo(x+12*cs+pet(d/2), y+24*cs+pet(d/2))
  cpx = x+20*cs
  cpy = y+24*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20*cs+pet(d), y+24*cs+pet(d))
  cpx = x+20*cs
  cpy = y+14*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*cs+pet(d), y+13*cs+pet(d))
  cpx = x+12*cs
  cpy = y+14*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*cs+pet(d), y+24*cs+pet(d))
  ctx.lineTo(x+15*cs+pet(d), y+24*cs+pet(d))
  ctx.lineTo(x+15*cs+pet(d), y+30*cs+pet(d))
  ctx.lineTo(x+13*cs+pet(d/2), y+30*cs+pet(d/2))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+17*cs+pet(d/2), y+24*cs+pet(d/2))
  ctx.lineTo(x+17*cs+pet(d), y+30*cs+pet(d))
  ctx.lineTo(x+19*cs+pet(d/2), y+30*cs+pet(d/2))
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+14*cs+pet(d/2), y+16*cs+pet(d/2))
  ctx.lineTo(x+7*cs+pet(d/2), y+9*cs+pet(d/2))
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+16*cs+pet(d/2), y+13*cs+pet(d/2))
  cpx = x+18*cs
  cpy = y+13*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*cs+pet(d), y+10*cs+pet(d))
  cpx = x+18*cs
  cpy = y+9*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*cs+pet(d), y+9*cs+pet(d))
  cpx = x+15*cs
  cpy = y+9*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+15*cs+pet(d), y+12*cs+pet(d))
  cpx = x+15*cs
  cpy = y+13*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+16*cs+pet(d/2), y+13*cs+pet(d/2))
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+7*cs+pet(d/2), y+11*cs+pet(d/2))
  ctx.lineTo(x+7*cs+pet(d/2), y+7*cs+pet(d/2))
  ctx.stroke()
  //8
  ctx.beginPath()
  ctx.moveTo(x+7*cs+pet(d/2), y+7*cs+pet(d/2))
  cpx = x+10*cs
  cpy = y+7*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+10*cs+pet(d), y+4*cs+pet(d))
  cpx = x+10*cs
  cpy = y+1*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+7*cs+pet(d), y+1*cs+pet(d))
  cpx = x+4*cs
  cpy = y+1*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+4*cs+pet(d), y+4*cs+pet(d))
  cpx = x+4*cs
  cpy = y+7*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+7*cs+pet(d/2), y+7*cs+pet(d/2))
  ctx.stroke()
  //9
  ctx.beginPath()
  ctx.moveTo(x+0*cs+pet(d/2), y+24*cs+pet(d/2))
  ctx.lineTo(x+8*cs+pet(d), y+24*cs+pet(d))
  ctx.lineTo(x+11*cs+pet(d), y+22*cs+pet(d))
  ctx.lineTo(x+11*cs+pet(d), y+24*cs+pet(d))
  ctx.lineTo(x+8*cs+pet(d), y+26*cs+pet(d))
  ctx.lineTo(x+0*cs+pet(d), y+26*cs+pet(d))
  ctx.moveTo(x+0*cs+pet(d), y+24*cs+pet(d))
  ctx.lineTo(x+8*cs+pet(d), y+24*cs+pet(d))
  ctx.lineTo(x+8*cs+pet(d/2), y+26*cs+pet(d/2))
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+7*cs+pet(d/2), y+26*cs+pet(d/2))
  ctx.lineTo(x+7*cs+pet(d), y+31*cs+pet(d))
  ctx.lineTo(x+8*cs+pet(d), y+31*cs+pet(d))
  ctx.lineTo(x+8*cs+pet(d/2), y+26*cs+pet(d/2))
  ctx.stroke()

  //11
  ctx.beginPath()
  ctx.moveTo(x+11*cs+pet(d/2), y+24*cs+pet(d/2))
  ctx.lineTo(x+11*cs+pet(d), y+28*cs+pet(d))
  ctx.lineTo(x+10*cs+pet(d), y+28*cs+pet(d))
  ctx.lineTo(x+10*cs+pet(d/2), y+25*cs+pet(d/2))
  ctx.stroke()

  //12
  ctx.beginPath()
  ctx.moveTo(x+19*cs+pet(d/2), y+16*cs+pet(d/2))
  ctx.lineTo(x+22*cs+pet(d/2), y+21*cs+pet(d/2))
  ctx.stroke()

  //14
  ctx.beginPath()
  ctx.moveTo(x+0*cs+pet(d/2), y+22*cs+pet(d/2))
  cpx = x+6*cs
  cpy = y+22*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+6*cs+pet(d/2), y+22*cs+pet(d/2))
  ctx.stroke()

  //15
  ctx.beginPath()
  ctx.moveTo(x+7*cs+pet(d/2), y+22*cs+pet(d/2))
  cpx = x+11*cs
  cpy = y+22*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+11*cs+pet(d/2), y+22*cs+pet(d/2))
  ctx.stroke()
 
  bitcoinAt(x+4.6*cs+pet(d/2), y+1.5*cs+pet(d/2), cs*5, color)
  metaAt(x+14.5*cs+pet(d/2), y+5*cs+pet(d/2), cs*4, color)
  let v =  document.getElementById("featuresize").value
  document.getElementById("featuresize").value /= 2
  hunter_bidens_laptopAt(x+1*cs+pet(d/2), y+17*cs+pet(d/2), cs*8, color)
  ailogoAt(x+13.5*cs+pet(d/2), y+16*cs+pet(d/2), cs*5, color)
  document.getElementById("featuresize").value = v

  } //WAVEY
  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function ailogo2At (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, WAVEY = false
  let cs = W/32, d = 0, i = 0, maxi = 1
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  if (WAVEY) {
    d = cs/2, maxi = 9
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/150
  }
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  for (; i < maxi; i++) { // WAVEY

  //2
  ctx.beginPath()
  ctx.moveTo(x+0*cs+pet(d/2), y+28*cs+pet(d/2))
  cpx = x+6*cs
  cpy = y+28*cs
  ctx.lineTo(x+6*cs+pet(d), y+28*cs+pet(d))
  ctx.lineTo(x+8*cs+pet(d), y+20*cs+pet(d))
  ctx.lineTo(x+14*cs+pet(d), y+20*cs+pet(d))
  ctx.lineTo(x+16*cs+pet(d), y+28*cs+pet(d))
  ctx.lineTo(x+22*cs+pet(d), y+28*cs+pet(d))
  ctx.lineTo(x+20*cs+pet(d), y+20*cs+pet(d))
  ctx.lineTo(x+15*cs+pet(d), y+2*cs+pet(d))
  ctx.lineTo(x+7*cs+pet(d), y+2*cs+pet(d))
  ctx.lineTo(x+0*cs+pet(d/2), y+28*cs+pet(d/2))
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+9*cs+pet(d/2), y+16*cs+pet(d/2))
  ctx.lineTo(x+13*cs+pet(d), y+16*cs+pet(d))
  ctx.lineTo(x+11*cs+pet(d), y+9*cs+pet(d))
  ctx.lineTo(x+9*cs+pet(d/2), y+16*cs+pet(d/2))
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+17*cs+pet(d/2), y+2*cs+pet(d/2))
  ctx.lineTo(x+24*cs+pet(d), y+28*cs+pet(d))
  ctx.lineTo(x+30*cs+pet(d), y+28*cs+pet(d))
  ctx.lineTo(x+23*cs+pet(d), y+2*cs+pet(d))
  ctx.lineTo(x+17*cs+pet(d/2), y+2*cs+pet(d/2))
  ctx.stroke()

  } //WAVEY
  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function bitcoinAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, WAVEY = false
  let cs = W/32, d = 0, i = 0, maxi = 1
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  if (WAVEY) {
    d = cs/2, maxi = 9
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/150
  }
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  for (; i < maxi; i++) { // WAVEY
  //1
  ctx.beginPath()
  ctx.moveTo(x+11*cs+pet(d/2), y+5*cs+pet(d/2))
  ctx.lineTo(x+4*cs+pet(d), y+5*cs+pet(d))
  ctx.lineTo(x+4*cs+pet(d), y+8*cs+pet(d))
  ctx.lineTo(x+5*cs+pet(d), y+8*cs+pet(d))
  cpx = x+6*cs
  cpy = y+8*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+6*cs+pet(d), y+10*cs+pet(d))
  cpx = x+6*cs
  cpy = y+21*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+6*cs+pet(d), y+21*cs+pet(d))
  
  cpx = x+6*cs
  cpy = y+23*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+4*cs+pet(d/2), y+23*cs+pet(d/2))

  ctx.lineTo(x+4*cs+pet(d), y+23*cs+pet(d))
  cpx = x+4*cs
  cpy = y+26*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+4*cs+pet(d), y+26*cs+pet(d))
  ctx.lineTo(x+11*cs+pet(d), y+26*cs+pet(d))
  ctx.lineTo(x+11*cs+pet(d), y+30*cs+pet(d))
  ctx.lineTo(x+14*cs+pet(d), y+30*cs+pet(d))
  ctx.lineTo(x+14*cs+pet(d), y+26*cs+pet(d))
  ctx.lineTo(x+16*cs+pet(d), y+26*cs+pet(d))
  ctx.lineTo(x+16*cs+pet(d), y+30*cs+pet(d))
  ctx.lineTo(x+19*cs+pet(d), y+30*cs+pet(d))
  ctx.lineTo(x+19*cs+pet(d), y+26*cs+pet(d))
  cpx = x+26*cs
  cpy = y+26*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+26*cs+pet(d), y+20*cs+pet(d))
  cpx = x+26*cs
  cpy = y+15*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+22*cs+pet(d), y+15*cs+pet(d))
  cpx = x+26*cs
  cpy = y+15*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+26*cs+pet(d), y+10*cs+pet(d))
  cpx = x+26*cs
  cpy = y+5*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+19*cs+pet(d), y+5*cs+pet(d))
  ctx.lineTo(x+19*cs+pet(d), y+1*cs+pet(d))
  ctx.lineTo(x+16*cs+pet(d), y+1*cs+pet(d))
  ctx.lineTo(x+16*cs+pet(d), y+5*cs+pet(d))
  ctx.lineTo(x+14*cs+pet(d), y+5*cs+pet(d))
  ctx.lineTo(x+14*cs+pet(d), y+1*cs+pet(d))
  ctx.lineTo(x+11*cs+pet(d), y+1*cs+pet(d))
  ctx.lineTo(x+11*cs+pet(d/2), y+5*cs+pet(d/2))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+11*cs+pet(d/2), y+8*cs+pet(d/2))
  ctx.lineTo(x+11*cs+pet(d), y+13*cs+pet(d))
  ctx.lineTo(x+16*cs+pet(d), y+13*cs+pet(d))
  cpx = x+20*cs
  cpy = y+13*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20*cs+pet(d), y+10*cs+pet(d))
  cpx = x+20*cs
  cpy = y+7*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*cs+pet(d), y+7*cs+pet(d))
  ctx.lineTo(x+11*cs+pet(d), y+7*cs+pet(d))
  ctx.lineTo(x+11*cs+pet(d/2), y+8*cs+pet(d/2))
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+11*cs+pet(d/2), y+17*cs+pet(d/2))
  cpx = x+11*cs
  cpy = y+23*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+11*cs+pet(d), y+23*cs+pet(d))
  cpx = x+16*cs
  cpy = y+23*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*cs+pet(d), y+23*cs+pet(d))
  cpx = x+20*cs
  cpy = y+23*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20*cs+pet(d), y+20*cs+pet(d))
  cpx = x+20*cs
  cpy = y+17*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*cs+pet(d), y+17*cs+pet(d))
  cpx = x+11*cs
  cpy = y+17*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+11*cs+pet(d/2), y+17*cs+pet(d/2))
  ctx.stroke()


  } //WAVEY
  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}
function metaAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, WAVEY = false
  let cs = W/24, d = 0, i = 0, maxi = 1
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/20
  if (WAVEY) {
    d = cs/2, maxi = 9
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/150
  }
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  for (; i < maxi; i++) { // WAVEY
  //1
  ctx.beginPath()
  ctx.moveTo(x+12*cs+pet(d/2), y+10*cs+pet(d/2))
  cpx = x+8*cs
  cpy = y+19*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+5*cs+pet(d), y+19*cs+pet(d))
  cpx = x+2*cs
  cpy = y+19*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+2*cs+pet(d), y+15*cs+pet(d))
  cpx = x+3*cs
  cpy = y+6*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+7*cs+pet(d), y+6*cs+pet(d))
  cpx = x+10*cs
  cpy = y+6*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*cs+pet(d), y+10*cs+pet(d))
  cpx = x+16*cs
  cpy = y+19*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+19*cs+pet(d), y+19*cs+pet(d))
  cpx = x+22*cs
  cpy = y+20*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+22*cs+pet(d), y+15*cs+pet(d))
  cpx = x+21*cs
  cpy = y+6*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+17*cs+pet(d), y+6*cs+pet(d))
  cpx = x+14*cs
  cpy = y+6*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+12*cs+pet(d/2), y+10*cs+pet(d/2))
 // ctx.stroke()
    //5
  ctx.beginPath()
  ctx.moveTo(x+12*cs+pet(d/2), y+10*cs+pet(d/2))
  cpx = x+16*cs
  cpy = y+19*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20*cs+pet(d), y+19*cs+pet(d))
  cpx = x+23*cs
  cpy = y+19*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+22*cs+pet(d), y+15*cs+pet(d))
  cpx = x+20*cs
  cpy = y+6*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+17*cs+pet(d), y+6*cs+pet(d))
  cpx = x+14*cs
  cpy = y+6*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*cs+pet(d), y+10*cs+pet(d))
  cpx = x+8*cs
  cpy = y+19*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+5*cs+pet(d), y+19*cs+pet(d))
  cpx = x+2*cs
  cpy = y+19*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+2*cs+pet(d), y+15*cs+pet(d))
  cpx = x+4*cs
  cpy = y+6*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+7*cs+pet(d), y+6*cs+pet(d))
  cpx = x+10*cs
  cpy = y+6*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+12*cs+pet(d/2), y+10*cs+pet(d/2))
  ctx.stroke()
  } //WAVEY
  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function brickpatternAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, WAVEY = false
  let cs = W/24, d = 0, i = 0, maxi = 1
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  if (WAVEY) {
    d = cs/2, maxi = 9
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/150
  }
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let xoff = cs*2, yoff = cs, x0 = x, y0 = y, k = yoff
  let n = H/cs * W/(xoff)
  for (; i < n; i++) {
    //ctx.globalAlpha = Math.random()
    ctx.strokeRect(x-k,y, xoff, yoff)
    x += xoff
    if (x > x0+W-xoff) {
      x = x0
      y += yoff
      if (k === 0)
        k = yoff
      else
        k = 0
    }
  }
  ctx.globalAlpha = 1
  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function oblique_stratagiesAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, WAVEY = false
  let cs = W/24, d = 0, i = 0, maxi = 1
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/25

  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "butt"
  ctx.lineJoin = "miter"

  let ob = randomPick(oblique)
  let obs = ob.split(" ")
  let fs = W*0.09
  ctx.font = "italic "+fs+"pt Garamond"
  let w = ctx.measureText(ob).width
 // ctx.fillText(ob, x+W/2-w/2, y+H/2)
  let x0 = x, y0 = y
  let len = obs.length
  y -= (len * fs/1.5)
 // x += W/2//+= (len * fs/10)
  for (; i < obs.length; i++) {
    ctx.fillText(obs[i].replaceAll("_"," "), x+W/3+cs, y+H/2)
    x -= fs/1.5
    y += fs*1.5
  }
  x = x0
  y = y0

  ctx.globalAlpha /= 3
  //1
  ctx.beginPath()
  ctx.moveTo(x+1*cs+pet(d/2), y+22*cs+pet(d/2))
  ctx.lineTo(x+12*cs+pet(d), y+22*cs+pet(d))
  ctx.lineTo(x+17*cs+pet(d), y+9*cs+pet(d))
  ctx.lineTo(x+6*cs+pet(d), y+9*cs+pet(d))
  ctx.lineTo(x+1*cs+pet(d/2), y+22*cs+pet(d/2))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+13*cs+pet(d/2), y+2*cs+pet(d/2))
  ctx.lineTo(x+24*cs+pet(d), y+2*cs+pet(d))
  ctx.lineTo(x+17*cs+pet(d/2), y+9*cs+pet(d/2))
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+12*cs+pet(d/2), y+22*cs+pet(d/2))
  ctx.lineTo(x+19*cs+pet(d), y+15*cs+pet(d))
  ctx.lineTo(x+24*cs+pet(d/2), y+2*cs+pet(d/2))
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+6*cs+pet(d/2), y+9*cs+pet(d/2))
  ctx.lineTo(x+13*cs+pet(d/2), y+2*cs+pet(d/2))
  ctx.stroke()

  ctx.setLineDash([cs])
  //5
  ctx.beginPath()
  ctx.moveTo(x+1*cs+pet(d/2), y+22*cs+pet(d/2))
  ctx.lineTo(x+9*cs+pet(d), y+15*cs+pet(d))
  ctx.lineTo(x+19*cs+pet(d/2), y+15*cs+pet(d/2))
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+9*cs+pet(d/2), y+15*cs+pet(d/2))
  ctx.lineTo(x+13*cs+pet(d/2), y+2*cs+pet(d/2))
  ctx.stroke()
  ctx.setLineDash([])
  ctx.globalAlpha *= 3
  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function random_walkAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, WAVEY = false
  let cs = W/24, d = 0, i = 0, maxi = 1
  y -= 8*cs
  ctx.lineWidth = 2 

  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "miter"
  let y0 = y, x0 = x, sx = x+12*cs+pet(d/2), sy = y, ct = 0, off = cs/2

  ctx.beginPath()
  ctx.arc(sx, sy, off/1.5, 0, 2*Math.PI)
  ctx.closePath()
  ctx.fill()

  ctx.beginPath()
  ctx.moveTo(sx, sy)
  while (sy < y0+W*1.6 && ct < 4000) {
    if (ct%2 === 0) {
      sy += (Math.random() < 0.57)? off: -off;
      if (sy < y0)
        sy = y0
      ctx.lineTo(sx, sy)
    } else {
      sx += (Math.random() < 0.5)?off: -off;
      if (sx > x0+W)
        sx = x0+W
      if (sx < x0)
        sx = x0
      ctx.lineTo(sx, sy)
    }
    ct++
  } 
  ctx.stroke()
  ctx.beginPath()
  ctx.arc(sx, sy, off/1.5, 0, 2*Math.PI)
  ctx.closePath()
  ctx.fill()

  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function data_centerAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, WAVEY = false
  let cs = W/32, d = 0, i = 0, maxi = 1
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  if (WAVEY) {
    d = cs/2, maxi = 9
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/150
  }
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  for (; i < maxi; i++) { // WAVEY
  //1
  ctx.beginPath()
  ctx.moveTo(x+0*cs+pet(d/2), y+26*cs+pet(d/2))
  ctx.lineTo(x+32*cs+pet(d/2), y+26*cs+pet(d/2))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+10*cs+pet(d/2), y+24*cs+pet(d/2))
  ctx.lineTo(x+22*cs+pet(d), y+24*cs+pet(d))
  ctx.lineTo(x+26*cs+pet(d), y+20*cs+pet(d))
  ctx.lineTo(x+26*cs+pet(d), y+10*cs+pet(d))
  ctx.lineTo(x+14*cs+pet(d), y+10*cs+pet(d))
  ctx.lineTo(x+10*cs+pet(d), y+14*cs+pet(d))
  ctx.lineTo(x+10*cs+pet(d/2), y+24*cs+pet(d/2))
  ctx.closePath()
  ctx.fill()

  //3
  ctx.beginPath()
  ctx.moveTo(x+24*cs+pet(d/2), y+16*cs+pet(d/2))
  ctx.lineTo(x+29*cs+pet(d), y+16*cs+pet(d))
  cpx = x+30*cs
  cpy = y+16*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+30*cs+pet(d), y+17*cs+pet(d))
  cpx = x+30*cs
  cpy = y+24*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+30*cs+pet(d), y+24*cs+pet(d))
  cpx = x+29*cs
  cpy = y+24*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+29*cs+pet(d), y+24*cs+pet(d))
  cpx = x+29*cs
  cpy = y+18*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+29*cs+pet(d), y+18*cs+pet(d))
  cpx = x+29*cs
  cpy = y+17*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+28*cs+pet(d), y+17*cs+pet(d))
  cpx = x+24*cs
  cpy = y+17*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+24*cs+pet(d/2), y+17*cs+pet(d/2))
  ctx.fillStyle = savedF
  ctx.fill()
  ctx.fillStyle = color
  ctx.stroke()

  //15
  ctx.beginPath()
  ctx.moveTo(x+0*cs+pet(d/2), y+26*cs+pet(d/2))
  ctx.lineTo(x+32*cs+pet(d), y+26*cs+pet(d))
  ctx.lineTo(x+32*cs+pet(d), y+32*cs+pet(d))
  ctx.lineTo(x+0*cs+pet(d/2), y+32*cs+pet(d/2))
  ctx.globalAlpha /= 3
  ctx.fill()
  ctx.globalAlpha *= 3

  //4
  ctx.beginPath()
  ctx.moveTo(x+29*cs+pet(d/2), y+26*cs+pet(d/2))
  ctx.lineTo(x+29*cs+pet(d), y+29*cs+pet(d))
  ctx.lineTo(x+30*cs+pet(d), y+29*cs+pet(d))
  ctx.lineTo(x+30*cs+pet(d/2), y+26*cs+pet(d/2))
  ctx.fillStyle = savedF
  ctx.fill()
  ctx.fillStyle = color
  ctx.stroke()

  //5 tower bits
  let x0 = x
  document.getElementById("featuresize").value *= 0.5
  pylonAt(x+0.5*cs+pet(d/2), y+13.25*cs+pet(d/2),cs*9,color)
  document.getElementById("featuresize").value /= 0.5
  //1
  ctx.beginPath()
  ctx.moveTo(x+0*cs+pet(d/2), y+16*cs+pet(d/2))
  cpx = x+1*cs
  cpy = y+17*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+2*cs+pet(d/2), y+16*cs+pet(d/2))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+8*cs+pet(d/2), y+16*cs+pet(d/2))
  cpx = x+9*cs
  cpy = y+17*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+10*cs+pet(d/2), y+16*cs+pet(d/2))
  ctx.stroke()
  y -= cs/4
  ctx.beginPath()
  ctx.moveTo(x+0*cs+pet(d/2), y+18*cs+pet(d/2))
  cpx = x+1*cs
  cpy = y+19*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+2*cs+pet(d/2), y+18*cs+pet(d/2))
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+8*cs+pet(d/2), y+18*cs+pet(d/2))
  cpx = x+9*cs
  cpy = y+19*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+10*cs+pet(d/2), y+18*cs+pet(d/2))
  ctx.stroke()
  y += cs/4
  //10
  ctx.beginPath()
  ctx.moveTo(x+0*cs+pet(d/2), y+8*cs+pet(d/2))
  cpx = x+32*cs
  cpy = y+8*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+32*cs+pet(d), y+8*cs+pet(d))
  cpx = x+32*cs
  cpy = y+4*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+32*cs+pet(d), y+4*cs+pet(d))
  cpx = x+29*cs
  cpy = y+2*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+24*cs+pet(d), y+5*cs+pet(d))
  cpx = x+18*cs
  cpy = y+3*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+15*cs+pet(d), y+5*cs+pet(d))
  cpx = x+11*cs
  cpy = y+1*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+6*cs+pet(d), y+1*cs+pet(d))
  cpx = x+1*cs
  cpy = y+1*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+0*cs+pet(d/2), y+4*cs+pet(d/2))
  ctx.globalAlpha /= 3
  ctx.fill()
  ctx.globalAlpha *= 3

  x0 = x
  let j = 0, y0 = y
  y -= cs/2
  for (; j < 4; j++) {
    //11
    ctx.beginPath()
    ctx.moveTo(x+12*cs+pet(d/2), y+10*cs+pet(d/2))
    cpx = x+13*cs
    cpy = y+9*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*cs+pet(d), y+8*cs+pet(d))
    cpx = x+11*cs
    cpy = y+7*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*cs+pet(d), y+6*cs+pet(d))
    cpx = x+13*cs
    cpy = y+5*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*cs+pet(d), y+4*cs+pet(d))
    cpx = x+11*cs
    cpy = y+3*cs
    ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+12*cs+pet(d/2), y+2*cs+pet(d/2))
    ctx.stroke()
      /14
    ctx.beginPath()
    ctx.moveTo(x+14*cs+pet(d/2), y+9*cs+pet(d/2))
    cpx = x+15*cs
    cpy = y+8*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+14*cs+pet(d), y+7*cs+pet(d))
    cpx = x+13*cs
    cpy = y+6*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+14*cs+pet(d), y+5*cs+pet(d))
    cpx = x+15*cs
    cpy = y+4*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+14*cs+pet(d), y+3*cs+pet(d))
    cpx = x+13*cs
    cpy = y+2*cs
    ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+14*cs+pet(d/2), y+1*cs+pet(d/2))
    ctx.stroke()
    x += cs*4
  }
  x = x0, y = y0
  //12
  ctx.beginPath()
  ctx.moveTo(x+29*cs+pet(d/2), y+27*cs+pet(d/2))
  cpx = x+28*cs
  cpy = y+28*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+27*cs+pet(d), y+27*cs+pet(d))
  cpx = x+26*cs
  cpy = y+28*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+25*cs+pet(d), y+27*cs+pet(d))
  cpx = x+24*cs
  cpy = y+28*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+23*cs+pet(d), y+27*cs+pet(d))
  cpx = x+22*cs
  cpy = y+28*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+21*cs+pet(d), y+27*cs+pet(d))
  cpx = x+20*cs
  cpy = y+28*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+19*cs+pet(d), y+27*cs+pet(d))
  cpx = x+18*cs
  cpy = y+28*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+17*cs+pet(d), y+27*cs+pet(d))
  cpx = x+16*cs
  cpy = y+28*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+15*cs+pet(d), y+27*cs+pet(d))
  cpx = x+14*cs
  cpy = y+28*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+13*cs+pet(d), y+27*cs+pet(d))
  cpx = x+12*cs
  cpy = y+28*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+11*cs+pet(d), y+27*cs+pet(d))
  cpx = x+10*cs
  cpy = y+28*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+9*cs+pet(d), y+27*cs+pet(d))
  cpx = x+8*cs
  cpy = y+28*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+7*cs+pet(d), y+27*cs+pet(d))
  cpx = x+6*cs
  cpy = y+28*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+5*cs+pet(d), y+27*cs+pet(d))
  cpx = x+4*cs
  cpy = y+28*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+3*cs+pet(d), y+27*cs+pet(d))
  cpx = x+2*cs
  cpy = y+28*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+1*cs+pet(d/2), y+27*cs+pet(d/2))
  ctx.stroke()

  //13
  ctx.beginPath()
  ctx.moveTo(x+30*cs+pet(d/2), y+27*cs+pet(d/2))
  cpx = x+31*cs
  cpy = y+28*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+32*cs+pet(d/2), y+27*cs+pet(d/2))
  ctx.stroke()

   ctx.beginPath()
  ctx.moveTo(x+1*cs+pet(d/2), y+27*cs+pet(d/2))
  cpx = x+1*cs
  cpy = y+27.5*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+0*cs+pet(d/2), y+27.5*cs+pet(d/2))
  ctx.stroke()

  ctx.fillStyle = savedF
  ctx.font = "800 "+(W*0.06)+"pt Arial"
  ctx.fillText("DATA",x+11*cs+pet(d/2), y+18*cs+pet(d/2))
  ctx.fillText("CENTER",x+11*cs+pet(d/2), y+21*cs+pet(d/2))
  ctx.fillStyle = color
  ctx.fillText("POTABLE WATER",x+5*cs+pet(d/2), y+30.5*cs+pet(d/2))
 
  } //WAVEY
  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function pylonAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, WAVEY = false
  let cs = W/24, d = 0, i = 0, maxi = 1
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  if (WAVEY) {
    d = cs/2, maxi = 9
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/150
  }
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  for (; i < maxi; i++) { // WAVEY
  //1
  ctx.beginPath()
  ctx.moveTo(x+8*cs+pet(d/2), y+24*cs+pet(d/2))
  ctx.lineTo(x+12*cs+pet(d), y+0*cs+pet(d))
  ctx.lineTo(x+16*cs+pet(d), y+24*cs+pet(d))
  ctx.lineTo(x+9*cs+pet(d), y+18*cs+pet(d))
  ctx.lineTo(x+15*cs+pet(d), y+18*cs+pet(d))
  ctx.lineTo(x+8*cs+pet(d/2), y+24*cs+pet(d/2))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+15*cs+pet(d/2), y+18*cs+pet(d/2))
  ctx.lineTo(x+9.7*cs+pet(d), y+14*cs+pet(d))
  ctx.lineTo(x+14.3*cs+pet(d), y+14*cs+pet(d))
  ctx.lineTo(x+9*cs+pet(d/2), y+18*cs+pet(d/2))
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+14.3*cs+pet(d/2), y+14*cs+pet(d/2))
  ctx.lineTo(x+10.3*cs+pet(d), y+10*cs+pet(d))
  ctx.lineTo(x+13.7*cs+pet(d), y+10*cs+pet(d))
  ctx.lineTo(x+9.7*cs+pet(d/2), y+14*cs+pet(d/2))
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+13.7*cs+pet(d/2), y+10*cs+pet(d/2))
  ctx.lineTo(x+10.8*cs+pet(d), y+7*cs+pet(d))
  ctx.lineTo(x+13.2*cs+pet(d), y+7*cs+pet(d))
  ctx.lineTo(x+10.3*cs+pet(d/2), y+10*cs+pet(d/2))
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+11.1*cs+pet(d/2), y+5*cs+pet(d/2))
  ctx.lineTo(x+12.9*cs+pet(d/2), y+5*cs+pet(d/2))
  ctx.stroke()
  
  //10
  ctx.beginPath()
  ctx.moveTo(x+13.2*cs+pet(d/2), y+7*cs+pet(d/2))
  ctx.lineTo(x+11.1*cs+pet(d), y+5*cs+pet(d))
  ctx.lineTo(x+12.9*cs+pet(d), y+5*cs+pet(d))
  ctx.lineTo(x+10.8*cs+pet(d/2), y+7*cs+pet(d/2))
  ctx.stroke()
  //6
  ctx.beginPath()
  ctx.moveTo(x+10.3*cs+pet(d/2), y+10*cs+pet(d/2))
  ctx.lineTo(x+4*cs+pet(d), y+12*cs+pet(d))
  ctx.lineTo(x+10*cs+pet(d/2), y+12*cs+pet(d/2))
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+13.7*cs+pet(d/2), y+10*cs+pet(d/2))
  ctx.lineTo(x+20*cs+pet(d), y+12*cs+pet(d))
  ctx.lineTo(x+14*cs+pet(d/2), y+12*cs+pet(d/2))
  ctx.stroke()

  //11
  ctx.beginPath()
  ctx.moveTo(x+13*cs+pet(d/2), y+5*cs+pet(d/2))
  ctx.lineTo(x+20*cs+pet(d), y+7*cs+pet(d))
  ctx.lineTo(x+13*cs+pet(d/2), y+7*cs+pet(d/2))
  ctx.stroke()

  //12
  ctx.beginPath()
  ctx.moveTo(x+11*cs+pet(d/2), y+5*cs+pet(d/2))
  ctx.lineTo(x+4*cs+pet(d), y+7*cs+pet(d))
  ctx.lineTo(x+11*cs+pet(d/2), y+7*cs+pet(d/2))
  ctx.stroke()

  } //WAVEY
  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function poker_faceAt (x,y,W,color,INVERT) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, WAVEY = false
  let cs = W/32, d = 0, i = 0, maxi = 1
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50

  ctx.strokeStyle = color
  ctx.fillStyle = color

  ctx.beginPath()
  ctx.moveTo(x+5*cs+pet(d/2), y+36*cs+pet(d/2))
  cpx = x+5*cs
  cpy = y+29*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+5*cs+pet(d), y+29*cs+pet(d))
  cpx = x+3*cs
  cpy = y+29*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+3*cs+pet(d), y+24*cs+pet(d))
  cpx = x+3*cs
  cpy = y+21*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+4*cs+pet(d), y+21*cs+pet(d))
  cpx = x+5*cs
  cpy = y+21*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+5*cs+pet(d), y+21*cs+pet(d))
  cpx = x+5*cs
  cpy = y+14*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+5*cs+pet(d), y+14*cs+pet(d))
  cpx = x+5*cs
  cpy = y+6*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*cs+pet(d), y+6*cs+pet(d))
  cpx = x+27*cs
  cpy = y+6*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+27*cs+pet(d), y+15*cs+pet(d))
  cpx = x+27*cs
  cpy = y+20*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+27*cs+pet(d), y+20*cs+pet(d))
  cpx = x+27*cs
  cpy = y+21*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+28*cs+pet(d), y+21*cs+pet(d))
  cpx = x+29*cs
  cpy = y+21*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+29*cs+pet(d), y+24*cs+pet(d))
  cpx = x+29*cs
  cpy = y+29*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+27*cs+pet(d), y+29*cs+pet(d))
  cpx = x+27*cs
  cpy = y+32*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+27*cs+pet(d/2), y+36*cs+pet(d/2))
  ctx.stroke()
  //2
  ctx.beginPath()
  ctx.moveTo(x+8*cs+pet(d/2), y+22*cs+pet(d/2))
  cpx = x+11*cs
  cpy = y+23*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+14*cs+pet(d/2), y+22*cs+pet(d/2))
  ctx.stroke()
  //3
  ctx.beginPath()
  ctx.moveTo(x+18*cs+pet(d/2), y+22*cs+pet(d/2))
  cpx = x+21*cs
  cpy = y+23*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+24*cs+pet(d/2), y+22*cs+pet(d/2))
  ctx.stroke()
  //4
  ctx.beginPath()
  ctx.moveTo(x+16*cs+pet(d/2), y+22*cs+pet(d/2))
  cpx = x+16*cs
  cpy = y+23*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*cs+pet(d), y+28*cs+pet(d))
  cpx = x+18*cs
  cpy = y+29*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+17*cs+pet(d), y+29*cs+pet(d))
  cpx = x+13*cs
  cpy = y+29*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+13*cs+pet(d/2), y+29*cs+pet(d/2))
  ctx.stroke()
  //5
  ctx.beginPath()
  ctx.moveTo(x+12*cs+pet(d/2), y+31*cs+pet(d/2))
  ctx.lineTo(x+19*cs+pet(d/2), y+31*cs+pet(d/2))
  ctx.stroke()
  let f = randomPick(atList)
  let v = document.getElementById("featuresize").value
  document.getElementById("featuresize").value /= 2
  ctx.save()
  ctx.beginPath()
  ctx.moveTo(x, y)
  ctx.lineTo(x+W, y)
  ctx.lineTo(x+W, y+W*1.5*0.45)
  ctx.lineTo(x, y+W*1.5*0.45)
  ctx.closePath()
  ctx.clip()
  tarotcard(x+cs*10, y+cs, W*0.38, W*1.5*0.38, f, cardnumber(f), [INVERT])
  ctx.restore()
  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
  document.getElementById("featuresize").value = v
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  pointingAt(x+1.5*cs,y+10*cs, W*0.5, color, savedF)
  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function pointingAt (x,y,W,color, fillcolor) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle
  ctx.strokeStyle = color
  ctx.fillStyle = fillcolor
  ctx.lineCap = "round"
  ctx.lineJoin = "miter"
  let cs = W/24
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, d = 0, angle = 80

   //1
  ctx.beginPath()
  p = rotatePoint(x+8*cs+pet(d), y+29*cs+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+8*cs+pet(d), y+28*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  cpx = x+5*cs+pet(d)
  cpy = y+23*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+6*cs+pet(d), y+20*cs+pet(d),cx,cy,angle)
  cpx = x+6*cs+pet(d)
  cpy = y+17*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+8*cs+pet(d), y+15*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+8*cs+pet(d)
  cpy = y+4*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+8*cs+pet(d), y+4*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+8*cs+pet(d)
  cpy = y+2*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+10*cs+pet(d), y+2*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+12*cs+pet(d)
  cpy = y+2*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*cs+pet(d), y+4*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+12*cs+pet(d)
  cpy = y+15*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*cs+pet(d), y+15*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+14*cs+pet(d)
  cpy = y+14*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+16*cs+pet(d), y+16*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+18*cs+pet(d)
  cpy = y+15*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+20*cs+pet(d), y+17*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+22*cs+pet(d)
  cpy = y+16*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+23*cs+pet(d), y+18*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+24*cs+pet(d)
  cpy = y+20*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+23*cs+pet(d), y+22*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+23*cs+pet(d)
  cpy = y+28*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+21*cs+pet(d), y+28*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
 
  p = rotatePoint(x+21*cs+pet(d), y+31*cs+pet(d),cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.fill()
  ctx.stroke()

  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function ceci_n_apos_est_pas_une_pipeAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, WAVEY = false
  let cs = W/32, d = 0, i = 0, maxi = 1
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  if (WAVEY) {
    d = cs/2, maxi = 9
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/150
  }
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  for (; i < maxi; i++) { // WAVEY
  //1
  ctx.beginPath()
  ctx.moveTo(x+2*cs+pet(d/2), y+8*cs+pet(d/2))
  cpx = x+1*cs
  cpy = y+12*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+1.4*cs+pet(d), y+15*cs+pet(d))
  cpx = x+3*cs
  cpy = y+21*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*cs+pet(d), y+21*cs+pet(d))
  cpx = x+16*cs
  cpy = y+19.5*cs //
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+20*cs+pet(d/2), y+14*cs+pet(d/2))
  cpx = x+23.5*cs
  cpy = y+10*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+30*cs+pet(d), y+9*cs+pet(d))
  cpx = x+31*cs
  cpy = y+10*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+31*cs+pet(d), y+9*cs+pet(d))
  cpx = x+31*cs
  cpy = y+7.8*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+30*cs+pet(d), y+8*cs+pet(d))
  cpx = x+22*cs
  cpy = y+8*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*cs+pet(d), y+11*cs+pet(d))
  cpx = x+12*cs
  cpy = y+15.5*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+11*cs+pet(d), y+15.5*cs+pet(d))
  cpx = x+10*cs
  cpy = y+15*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+10*cs+pet(d), y+14*cs+pet(d))
  cpx = x+10.5*cs
  cpy = y+11*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+9.5*cs+pet(d), y+8*cs+pet(d))
  cpx = x+6*cs
  cpy = y+6.5*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+2*cs+pet(d/2), y+8*cs+pet(d/2))
  ctx.fillStyle = "#472302ff"
  ctx.fill()
  
  // stem
  ctx.beginPath()
  ctx.moveTo(x+20*cs+pet(d/2), y+14*cs+pet(d/2))
  cpx = x+24*cs
  cpy = y+10*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+30*cs+pet(d), y+9*cs+pet(d))
  cpx = x+31*cs
  cpy = y+8*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+31*cs+pet(d), y+8*cs+pet(d))
  cpx = x+31*cs
  cpy = y+7.5*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+30*cs+pet(d/2), y+8*cs+pet(d/2))
  cpx = x+22*cs
  cpy = y+8*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+18*cs+pet(d/2), y+11*cs+pet(d/2))
  ctx.fillStyle = "#000000"
  ctx.fill()

  // gold connector
  ctx.beginPath()
  ctx.moveTo(x+18*cs+pet(d/2), y+11*cs+pet(d/2))
  cpx = x+19.2*cs
  cpy = y+11.8*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+20*cs+pet(d/2), y+14*cs+pet(d/2))
  ctx.lineWidth = W/60
  ctx.strokeStyle = "#726408ff"
  ctx.stroke()

  // highlights
  ctx.fillStyle = "#ffffff30"
  //12
  ctx.beginPath()
  ctx.moveTo(x+6*cs+pet(d/2), y+10*cs+pet(d/2))
  cpx = x+7*cs
  cpy = y+13*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+7*cs+pet(d), y+17*cs+pet(d))
  cpx = x+7*cs
  cpy = y+19*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+4*cs+pet(d), y+19*cs+pet(d))
  cpx = x+2*cs
  cpy = y+18*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+1.5*cs+pet(d), y+14*cs+pet(d))
  cpx = x+2*cs
  cpy = y+10*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+2*cs+pet(d), y+9*cs+pet(d))
  cpx = x+4*cs
  cpy = y+9*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+6*cs+pet(d/2), y+10*cs+pet(d/2))
  ctx.fill()
  
  //14
  ctx.beginPath()
  ctx.moveTo(x+5*cs+pet(d/2), y+14*cs+pet(d/2))
  cpx = x+5*cs
  cpy = y+10*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+3*cs+pet(d), y+9*cs+pet(d))
  cpx = x+2*cs
  cpy = y+9*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+1*cs+pet(d), y+13*cs+pet(d))
  cpx = x+2*cs
  cpy = y+17*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+3*cs+pet(d), y+17*cs+pet(d))
  cpx = x+5*cs
  cpy = y+18*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+5*cs+pet(d/2), y+14*cs+pet(d/2))
  ctx.fill()
  //13
  ctx.beginPath()
  ctx.moveTo(x+11*cs+pet(d/2), y+15*cs+pet(d/2))
  cpx = x+10*cs
  cpy = y+16*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+11*cs+pet(d), y+17*cs+pet(d))
  cpx = x+13*cs
  cpy = y+17*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*cs+pet(d), y+15*cs+pet(d))
  cpx = x+18*cs
  cpy = y+13*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+22*cs+pet(d), y+10*cs+pet(d))
  cpx = x+26*cs
  cpy = y+9*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+29*cs+pet(d), y+9*cs+pet(d))
  cpx = x+25*cs
  cpy = y+9*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+24*cs+pet(d), y+9*cs+pet(d))
  cpx = x+20*cs
  cpy = y+10*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+15*cs+pet(d), y+13*cs+pet(d))
  cpx = x+13*cs
  cpy = y+15*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+11*cs+pet(d/2), y+15*cs+pet(d/2))
  ctx.fill()
   //15
  ctx.beginPath()
  ctx.moveTo(x+2*cs+pet(d/2), y+8*cs+pet(d/2))
  cpx = x+6*cs
  cpy = y+10*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+10*cs+pet(d), y+8*cs+pet(d))
  cpx = x+6*cs
  cpy = y+9*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+2*cs+pet(d/2), y+8*cs+pet(d/2))
  ctx.fill()

  //1
  ctx.lineCap = 'round'
  ctx.strokeStyle = "#ffffff60"
  ctx.lineWidth = cs
  ctx.beginPath()
  ctx.moveTo(x+3*cs+pet(d/2), y+9*cs+pet(d/2))
  cpx = x+2*cs
  cpy = y+13*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+3*cs+pet(d/2), y+16*cs+pet(d/2))
  ctx.stroke()

  //2
  ctx.lineWidth = cs/2
  ctx.beginPath()
  ctx.moveTo(x+11*cs+pet(d/2), y+16.5*cs+pet(d/2))
  cpx = x+16*cs
  cpy = y+14.6*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+19*cs+pet(d), y+11*cs+pet(d))
  cpx = x+22*cs
  cpy = y+9*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+27*cs+pet(d/2), y+8.6*cs+pet(d/2))
  ctx.stroke()

  } //WAVEY
  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

//ce_n_apos_est_pas_une_carteAt
function ceci_n_apos_est_pas_une_carteAt (x,y,W,color,INVERT) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, WAVEY = false
  let cs = W/24, d = 0, i = 0, maxi = 1
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  if (WAVEY) {
    d = cs/2, maxi = 9
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/150
  }
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let f =  "ceci_n_apos_est_pas_une_pipeAt"
  tarotcard(x+cs*3,y-cs*3,W*0.75,W*1.5*0.75,f,"",INVERT)
  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function object_permanenceAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, WAVEY = false
  let cs = W/24, d = 0, i = 0, maxi = 1
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  if (WAVEY) {
    d = cs/2, maxi = 9
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/150
  }
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  x += 2*cs
  for (; i < maxi; i++) { // WAVEY
  //1
  ctx.beginPath()
  ctx.moveTo(x+0*cs+pet(d/2), y+10*cs+pet(d/2))
  ctx.lineTo(x+0*cs+pet(d), y+20*cs+pet(d))
  ctx.lineTo(x+10*cs+pet(d), y+20*cs+pet(d))
  ctx.lineTo(x+10*cs+pet(d), y+10*cs+pet(d))
  ctx.lineTo(x+0*cs+pet(d), y+10*cs+pet(d))
  ctx.lineTo(x+6*cs+pet(d), y+6*cs+pet(d))
  ctx.lineTo(x+16*cs+pet(d), y+6*cs+pet(d))
  ctx.lineTo(x+10*cs+pet(d/2), y+10*cs+pet(d/2))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+16*cs+pet(d/2), y+6*cs+pet(d/2))
  ctx.lineTo(x+16*cs+pet(d), y+16*cs+pet(d))
  ctx.lineTo(x+10*cs+pet(d/2), y+20*cs+pet(d/2))
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+11*cs+pet(d/2), y+19.2*cs+pet(d/2))
  ctx.lineTo(x+11*cs+pet(d), y+15*cs+pet(d))
  ctx.lineTo(x+11*cs+pet(d), y+13*cs+pet(d))
  ctx.lineTo(x+15*cs+pet(d), y+10.2*cs+pet(d))
  ctx.lineTo(x+15*cs+pet(d), y+16.5*cs+pet(d))
  ctx.globalAlpha /= 3
  ctx.fill()
  ctx.globalAlpha *= 3
  ctx.stroke()

  //12
  ctx.beginPath()
  ctx.moveTo(x+18*cs+pet(d/2), y+19*cs+pet(d/2))
  cpx = x+15*cs
  cpy = y+19*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+15*cs+pet(d), y+18*cs+pet(d))
  cpx = x+15*cs
  cpy = y+17*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*cs+pet(d), y+17*cs+pet(d))
  cpx = x+19*cs
  cpy = y+17*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+19*cs+pet(d), y+18*cs+pet(d))
  cpx = x+19*cs
  cpy = y+19*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+18*cs+pet(d/2), y+19*cs+pet(d/2))
  ctx.globalAlpha /= 3
  ctx.fill()
  ctx.globalAlpha *= 3

  ctx.beginPath()
  ctx.arc(x+18.5*cs+pet(d/2), y+17*cs+pet(d/2), cs*2, 0, 2*Math.PI)
  ctx.fillStyle = savedF
  ctx.fill()
  ctx.fillStyle = color
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+7*cs+pet(d/2), y+9*cs+pet(d/2))
  cpx = x+9*cs
  cpy = y+9*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+10*cs+pet(d), y+8*cs+pet(d))
  cpx = x+10*cs
  cpy = y+7*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*cs+pet(d), y+7*cs+pet(d))
  cpx = x+6*cs
  cpy = y+7*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+5*cs+pet(d), y+8*cs+pet(d))
  cpx = x+5*cs
  cpy = y+9*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+7*cs+pet(d/2), y+9*cs+pet(d/2))
  ctx.globalAlpha /= 3
  ctx.fill()
  ctx.globalAlpha *= 3
  ctx.stroke()
  
  ctx.beginPath()
  ctx.moveTo(x+7.5*cs+pet(d/2), y+1*cs+pet(d/2))
  ctx.lineTo(x+7.5*cs+pet(d/2), y+9*cs+pet(d/2))
  ctx.stroke()

  //8
  ctx.setLineDash([cs/2])
  ctx.beginPath()
  ctx.moveTo(x+7.5*cs+pet(d/2), y+9*cs+pet(d/2))
  ctx.lineTo(x+7.5*cs+pet(d), y+12*cs+pet(d))
  cpx = x+7.5*cs
  cpy = y+16*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+11*cs+pet(d/2), y+16*cs+pet(d/2))
  ctx.stroke()
  ctx.setLineDash([])

  //9
  ctx.beginPath()
  ctx.moveTo(x+11*cs+pet(d/2), y+16*cs+pet(d/2))
  ctx.lineTo(x+14*cs+pet(d/2), y+16*cs+pet(d/2))
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+13*cs+pet(d/2), y+15*cs+pet(d/2))
  ctx.lineTo(x+14*cs+pet(d), y+16*cs+pet(d))
  ctx.lineTo(x+13*cs+pet(d/2), y+17*cs+pet(d/2))
  ctx.stroke()
  

  } //WAVEY
  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function rules_of_pokerAt (x,y,W,color,INVERT) { // nodraw
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W*1.5, cpx, cpy, points = [], cs = W/24
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle
  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  let rules = [
  "\u{2022} "+"Royal flush beats straight flush",
  "\u{2022} "+"Straight flush beats 4 of a kind",
  "\u{2022} "+"Four of a kind beats full house",
  "\u{2022} "+"Full house beats flush",

  "\u{2022} "+"No arcana, no suits, no anachronisms",
  "\u{2022} "+"Simple line drawings",
  "\u{2022} "+"Plain design - nothing faux antique",
  "\u{2022} "+"Things & concepts - not people",
  "\u{2022} "+"Automated, random, reusable, no AI",
  
  "\u{2022} "+"No traditional cards",
  "\u{2022} "+"Don't mock traditional cards",
  "\u{2022} "+"No memes, no pet peeves",
  "\u{2022} "+"Nothing personal",
  "\u{2022} "+"No cruelty, no irony",
  "\u{2022} "+"Don't be Andy Rooney", // don't be ???
  "\u{2022} "+"Interpretations: specifically vague",
  "",
  "\u{2022} "+"Ignore any of the above rules"]

  ctx.shadowBlur = 10
  ctx.shadowColor = "#444444"
  ctx.shadowOffsetX = 2
  ctx.shadowOffsetY  = 12
  if (INVERT && INVERT[0] === 1) {
    ctx.shadowOffsetX = -2
    ctx.shadowOffsetY  = -12
  }
  ctx.fillStyle = color
  roundedRect(x,y,W,H, 10, ctx)
  ctx.shadowBlur = 0
  ctx.shadowOffsetX = 0
  ctx.shadowOffsetY  = 0
  ctx.fillStyle = "#eefcffff"
  let pad=W/40
  roundedRect(x+pad/2,y+pad/2,W-pad,H-pad, 15, ctx)
  ctx.fillStyle = "#3b3205ff"
  let fs = W*0.07
  ctx.font = "800 "+(fs)+"pt Garamond"

  let word = "Rules of Poker"
  let w = ctx.measureText(word).width
  ctx.fillText(word ,x+W/2-w/2, y+cs*4)
  fs = W*0.038
  let i = 0, yoff = fs * 1.75
  ctx.font = "100 "+(fs)+"pt Garamond"
  for (; i < rules.length; i++) {
    ctx.fillText(rules[i] ,x+cs*3, y+cs*7+yoff*i)
  }
  
  let orientation = "u"
  if (INVERT && INVERT[0] === 1)
     orientation = "i"
  //if (W < 450)
 //  cardcaption ("flash_cardAt",orientation,x,y,340,506)
}

function face_blindAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, WAVEY = false
  let cs = W/24, d = 0, i = 0, maxi = 1
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  if (WAVEY) {
    d = cs/2, maxi = 9
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/150
  }
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  for (; i < maxi; i++) { // WAVEY
  //1
  ctx.beginPath()
  ctx.moveTo(x+7*cs+pet(d/2), y+10*cs+pet(d/2))
  cpx = x+5*cs
  cpy = y+10*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+5*cs+pet(d), y+13*cs+pet(d))
  cpx = x+5*cs
  cpy = y+15*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*cs+pet(d), y+15*cs+pet(d))
  cpx = x+10*cs
  cpy = y+14*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+11*cs+pet(d), y+15*cs+pet(d))
  cpx = x+12*cs
  cpy = y+16*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+13*cs+pet(d), y+15*cs+pet(d))
  cpx = x+14*cs
  cpy = y+14*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*cs+pet(d), y+15*cs+pet(d))
  cpx = x+19*cs
  cpy = y+15*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+19*cs+pet(d), y+13*cs+pet(d))
  cpx = x+19*cs
  cpy = y+10*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+17*cs+pet(d), y+10*cs+pet(d))
  cpx = x+16*cs
  cpy = y+10*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+15*cs+pet(d/2), y+6*cs+pet(d/2))
 // ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+12*cs+pet(d/2), y+24*cs+pet(d/2))
  cpx = x+18*cs
  cpy = y+24*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+19*cs+pet(d), y+22*cs+pet(d))
  cpx = x+22*cs
  cpy = y+20*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+22*cs+pet(d), y+12*cs+pet(d))
  cpx = x+22*cs
  cpy = y+6*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+21*cs+pet(d), y+3*cs+pet(d))
  cpx = x+18*cs
  cpy = y+0*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*cs+pet(d), y+0*cs+pet(d))
  cpx = x+6*cs
  cpy = y+0*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+3*cs+pet(d), y+3*cs+pet(d))
  cpx = x+2*cs
  cpy = y+6*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+2*cs+pet(d), y+12*cs+pet(d))
  cpx = x+2*cs
  cpy = y+20*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+5*cs+pet(d), y+22*cs+pet(d))
  cpx = x+5*cs
  cpy = y+24*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+12*cs+pet(d/2), y+24*cs+pet(d/2))
  ctx.stroke()

  let functs = shuffle(["eyeAt","noseAt","mouthAt","eyeAt"])
  //3
  window [functs[0]] (x+5*cs+pet(d/2), y+8*cs+pet(d/2), cs*6, color)
  window [functs[1]] (x+13*cs+pet(d/2), y+8*cs+pet(d/2), cs*6, color)
  window [functs[2]] (x+9*cs+pet(d/2), y+13*cs+pet(d/2), cs*6, color)
  window [functs[3]] (x+9*cs+pet(d/2), y+16*cs+pet(d/2), cs*6, color)
  ctx.stroke()

  } //WAVEY
  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function noseAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, WAVEY = false
  let cs = W/24, d = 0, i = 0, maxi = 1
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  if (WAVEY) {
    d = cs/2, maxi = 9
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/150
  }
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  for (; i < maxi; i++) { // WAVEY
  //1
  ctx.beginPath()
  ctx.moveTo(x+7*cs+pet(d/2), y+10*cs+pet(d/2))
  cpx = x+5*cs
  cpy = y+10*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+5*cs+pet(d), y+13*cs+pet(d))
  cpx = x+5*cs
  cpy = y+15*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*cs+pet(d), y+15*cs+pet(d))
  cpx = x+10*cs
  cpy = y+14*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+11*cs+pet(d), y+15*cs+pet(d))
  cpx = x+12*cs
  cpy = y+16*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+13*cs+pet(d), y+15*cs+pet(d))
  cpx = x+14*cs
  cpy = y+14*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*cs+pet(d), y+15*cs+pet(d))
  cpx = x+19*cs
  cpy = y+15*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+19*cs+pet(d), y+13*cs+pet(d))
  cpx = x+19*cs
  cpy = y+10*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+17*cs+pet(d), y+10*cs+pet(d))
  cpx = x+16*cs
  cpy = y+10*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+15*cs+pet(d/2), y+6*cs+pet(d/2))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+7*cs+pet(d/2), y+10*cs+pet(d/2))
  cpx = x+8*cs
  cpy = y+10*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+9*cs+pet(d/2), y+6*cs+pet(d/2))
  ctx.stroke()

  } //WAVEY
  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function mouthAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, WAVEY = false
  let cs = W/24, d = 0, i = 0, maxi = 1
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  if (WAVEY) {
    d = cs/2, maxi = 9
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/150
  }
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  for (; i < maxi; i++) { // WAVEY
  //1
  ctx.beginPath()
  ctx.moveTo(x+23*cs+pet(d/2), y+12*cs+pet(d/2))
  cpx = x+22*cs
  cpy = y+15*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*cs+pet(d), y+16*cs+pet(d))
  cpx = x+12*cs
  cpy = y+17*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+6*cs+pet(d), y+16*cs+pet(d))
  cpx = x+2*cs
  cpy = y+15*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+1*cs+pet(d), y+12*cs+pet(d))
  cpx = x+7*cs
  cpy = y+11*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*cs+pet(d), y+12*cs+pet(d))
  cpx = x+17*cs
  cpy = y+11*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+23*cs+pet(d/2), y+12*cs+pet(d/2))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+1*cs+pet(d/2), y+12*cs+pet(d/2))
  cpx = x+6*cs
  cpy = y+8*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*cs+pet(d), y+8*cs+pet(d))
  cpx = x+12*cs
  cpy = y+9*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*cs+pet(d), y+8*cs+pet(d))
  cpx = x+18*cs
  cpy = y+8*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+23*cs+pet(d/2), y+12*cs+pet(d/2))
  ctx.stroke()

  } //WAVEY
  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}
function eyeAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, WAVEY = false
  let cs = W/24, d = 0, i = 0, maxi = 1
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  if (WAVEY) {
    d = cs/2, maxi = 9
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/150
  }
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  for (; i < maxi; i++) { // WAVEY
  //3
  ctx.beginPath()
  ctx.moveTo(x+12*cs+pet(d/2), y+15*cs+pet(d/2))
  cpx = x+15*cs
  cpy = y+15*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+15*cs+pet(d), y+12*cs+pet(d))
  cpx = x+15*cs
  cpy = y+9*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*cs+pet(d), y+9*cs+pet(d))
  cpx = x+9*cs
  cpy = y+9*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+9*cs+pet(d), y+12*cs+pet(d))
  cpx = x+9*cs
  cpy = y+15*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+12*cs+pet(d/2), y+15*cs+pet(d/2))
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+2*cs+pet(d/2), y+12*cs+pet(d/2))
  cpx = x+12*cs
  cpy = y+6*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+22*cs+pet(d), y+12*cs+pet(d))
  cpx = x+12*cs
  cpy = y+20*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+2*cs+pet(d/2), y+12*cs+pet(d/2))
  ctx.stroke()

  } //WAVEY
  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}
function spandrelAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, WAVEY = false
  let cs = W/24, d = 0, i = 0, maxi = 1
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  if (WAVEY) {
    d = cs/2, maxi = 9
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/150
  }
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  for (; i < maxi; i++) { // WAVEY
  //1
   ctx.beginPath()
  ctx.moveTo(x+0*cs+pet(d/2), y+6*cs+pet(d/2))
  cpx = x+12*cs
  cpy = y+6*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*cs+pet(d), y+17*cs+pet(d))
  cpx = x+10*cs
  cpy = y+17*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+10*cs+pet(d), y+17*cs+pet(d))
  cpx = x+10*cs
  cpy = y+8*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+0*cs+pet(d/2), y+8*cs+pet(d/2))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+24*cs+pet(d/2), y+6*cs+pet(d/2))
  cpx = x+12*cs
  cpy = y+6*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*cs+pet(d), y+17*cs+pet(d))
  cpx = x+14*cs
  cpy = y+17*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+14*cs+pet(d), y+17*cs+pet(d))
  cpx = x+14*cs
  cpy = y+8*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+24*cs+pet(d/2), y+8*cs+pet(d/2))
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+10*cs+pet(d/2), y+17*cs+pet(d/2))
  ctx.lineTo(x+9*cs+pet(d), y+17*cs+pet(d))
  ctx.lineTo(x+9*cs+pet(d), y+19*cs+pet(d))
  ctx.lineTo(x+15*cs+pet(d), y+19*cs+pet(d))
  ctx.lineTo(x+15*cs+pet(d), y+17*cs+pet(d))
  ctx.lineTo(x+14*cs+pet(d/2), y+17*cs+pet(d/2))
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+10*cs+pet(d/2), y+19*cs+pet(d/2))
  ctx.lineTo(x+10*cs+pet(d/2), y+24*cs+pet(d/2))
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+14*cs+pet(d/2), y+19*cs+pet(d/2))
  ctx.lineTo(x+14*cs+pet(d/2), y+24*cs+pet(d/2))
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+0*cs+pet(d/2), y+6*cs+pet(d/2))
  ctx.lineTo(x+24*cs+pet(d), y+6*cs+pet(d))
  ctx.moveTo(x+24*cs+pet(d), y+4*cs+pet(d))
  ctx.lineTo(x+0*cs+pet(d/2), y+4*cs+pet(d/2))
  ctx.stroke()
   //8
  ctx.beginPath()
  ctx.moveTo(x+0*cs+pet(d/2), y+6*cs+pet(d/2))
  cpx = x+12*cs
  cpy = y+6*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*cs+pet(d), y+17*cs+pet(d))
  cpx = x+12*cs
  cpy = y+6*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+24*cs+pet(d/2), y+6*cs+pet(d/2))
  ctx.globalAlpha /= 3
  ctx.fill()
  ctx.globalAlpha *= 3
  } //WAVEY
  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}
function wooly_bearAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, WAVEY = false
  let cs = W/24, d = 0, i = 0, maxi = 1, x0 = x, y0 = y
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  if (WAVEY) {
    d = cs/2, maxi = 9
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/150
  }
  ctx.strokeStyle = color
  ctx.lineCap = "round"
  ctx.lineJoin = "bevel"
  let x2, y2

   //1
  ctx.beginPath()
  ctx.moveTo(x+8*cs+pet(d/2), y+15*cs+pet(d/2))
  cpx = x+8*cs
  cpy = y+9*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*cs+pet(d), y+9*cs+pet(d))
  cpx = x+6*cs
  cpy = y+9*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+6*cs+pet(d), y+9*cs+pet(d))
  cpx = x+2*cs
  cpy = y+9*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+2*cs+pet(d), y+12*cs+pet(d))
  cpx = x+2*cs
  cpy = y+15*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+5*cs+pet(d), y+15*cs+pet(d))
  cpx = x+8*cs
  cpy = y+15*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+8*cs+pet(d/2), y+15*cs+pet(d/2))
  ctx.fillStyle = "#5e3e07ff"
  ctx.fill()

  //2
  ctx.beginPath()
  ctx.moveTo(x+16*cs+pet(d/2), y+15*cs+pet(d/2))
  cpx = x+18*cs
  cpy = y+15*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*cs+pet(d), y+15*cs+pet(d))
  cpx = x+22*cs
  cpy = y+15*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+22*cs+pet(d), y+12*cs+pet(d))
  cpx = x+22*cs
  cpy = y+9*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*cs+pet(d), y+9*cs+pet(d))
  cpx = x+16*cs
  cpy = y+9*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+16*cs+pet(d/2), y+9*cs+pet(d/2))
  ctx.fill()

  ctx.save()
  //4
  ctx.beginPath()
  ctx.moveTo(x+5*cs+pet(d/2), y+16*cs+pet(d/2))
  ctx.lineTo(x+18*cs+pet(d), y+16*cs+pet(d))
  cpx = x+23*cs
  cpy = y+16*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+23*cs+pet(d), y+12*cs+pet(d))
  cpx = x+23*cs
  cpy = y+8*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*cs+pet(d), y+8*cs+pet(d))
  cpx = x+6*cs
  cpy = y+8*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+6*cs+pet(d), y+8*cs+pet(d))
  cpx = x+1*cs
  cpy = y+8*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+1*cs+pet(d), y+12*cs+pet(d))
  cpx = x+1*cs
  cpy = y+16*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+5*cs+pet(d/2), y+16*cs+pet(d/2))
  ctx.closePath()
  ctx.clip()
  //3
  ctx.beginPath()
  ctx.moveTo(x+8*cs+pet(d/2), y+9*cs+pet(d/2))
  ctx.lineTo(x+8*cs+pet(d), y+15*cs+pet(d))
  ctx.lineTo(x+16*cs+pet(d), y+15*cs+pet(d))
  ctx.lineTo(x+16*cs+pet(d), y+9*cs+pet(d))
  ctx.lineTo(x+8*cs+pet(d/2), y+9*cs+pet(d/2))
  ctx.fillStyle = "#070606ff"
  ctx.fill()
  for (; i < 2000; i++) {
    x = x0+cs*2+Math.random() * cs * 20
    y = y0+cs*9+Math.random() * cs * 6
    if (x < x0+cs*8 || x > x0+cs*16)
      ctx.strokeStyle = "#b2750bff"
    else
      ctx.strokeStyle = "#000000"
    x2 = (x < x0+W/2)? x-7: x+7; // offset from center by x or y
   // y2 = (y < x0+H/2)? y-7: y+7;
    x2 = x+pet(cs*4)
    y2 = y+pet(cs*4)
   // console.log(y2)
    //if (y < y0+H/2)
    //  y2 *= -1
    ctx.beginPath()
    ctx.moveTo(x,y)
    ctx.lineTo(x2+pet(11),y2+pet(11))
    ctx.stroke()
  }
  ctx.restore()
  i = 0, x = x0, y = y0
  for (; i < maxi; i++) { // WAVEY
  //1
  ctx.beginPath()
  ctx.moveTo(x+2*cs+pet(d/2), y+12*cs+pet(d/2))
  cpx = x+2*cs
  cpy = y+9*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+6*cs+pet(d), y+9*cs+pet(d))
  cpx = x+18*cs
  cpy = y+9*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*cs+pet(d), y+9*cs+pet(d))
  cpx = x+22*cs
  cpy = y+9*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+22*cs+pet(d), y+12*cs+pet(d))
  cpx = x+22*cs
  cpy = y+15*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*cs+pet(d), y+15*cs+pet(d))
  cpx = x+6*cs
  cpy = y+15*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+6*cs+pet(d), y+15*cs+pet(d))
  cpx = x+2*cs
  cpy = y+15*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+2*cs+pet(d/2), y+12*cs+pet(d/2))
 // ctx.stroke()

  } //WAVEY
  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function संसारAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, WAVEY = true
  let cs = W/24, d = 0, i = 0, maxi = 1
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  if (WAVEY) {
    d = cs/1.75, maxi = 13
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/150
  }
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  for (; i < maxi; i++) { // WAVEY
  //1

  //1
  ctx.beginPath()
  ctx.moveTo(x+18.5*cs+pet(d/2), y+19*cs+pet(d/2))
  ctx.lineTo(x+4*cs+pet(d/2), y+4*cs+pet(d/2))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+5.7*cs+pet(d/2), y+18.3*cs+pet(d/2))
  ctx.lineTo(x+10*cs+pet(d/2), y+14*cs+pet(d/2))
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+13.3*cs+pet(d/2), y+10.7*cs+pet(d/2))
  ctx.lineTo(x+20*cs+pet(d/2), y+4*cs+pet(d/2))
  ctx.stroke()
  ctx.save()

  ctx.beginPath()
  ctx.moveTo(x+12*cs+pet(d/2), y+2*cs+pet(d/2))
  cpx = x+0*cs
  cpy = y+2*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+0*cs+pet(d), y+12*cs+pet(d))
  cpx = x+0*cs
  cpy = y+22*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*cs+pet(d), y+22*cs+pet(d))
  cpx = x+14*cs
  cpy = y+22*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+14*cs+pet(d), y+22*cs+pet(d))
  cpx = x+4*cs
  cpy = y+22*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+4*cs+pet(d), y+12*cs+pet(d))
  cpx = x+4*cs
  cpy = y+2*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+14*cs+pet(d/2), y+2*cs+pet(d/2))
  ctx.stroke()

  ctx.clip()
  let j = 0, offset = cs*1.0
  for (; j < 21; j++) {
    //6
    ctx.beginPath()
    ctx.moveTo(x+0*cs+pet(d/2), y+3*cs+pet(d/2) + offset*j)
    ctx.lineTo(x+11*cs+pet(d/2), y+3*cs+pet(d/2) + offset*j)
    ctx.stroke()
  }
  ctx.restore()
  ctx.save()
  //2
  ctx.beginPath()
  ctx.moveTo(x+12*cs+pet(d/2), y+22*cs+pet(d/2))
  cpx = x+24*cs
  cpy = y+22*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+24*cs+pet(d), y+12*cs+pet(d))
  cpx = x+24*cs
  cpy = y+2*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*cs+pet(d), y+2*cs+pet(d))
  cpx = x+20*cs
  cpy = y+2*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20*cs+pet(d), y+12*cs+pet(d))
  cpx = x+20*cs
  cpy = y+22*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+12*cs+pet(d/2), y+22*cs+pet(d/2))
  ctx.stroke()

  ctx.clip()
  j = 0
  for (; j < 21; j++) {
    //6
    ctx.beginPath()
    ctx.moveTo(x+0*cs+pet(d/2), y+3*cs+pet(d/2) + offset*j)
    ctx.lineTo(x+11*cs+pet(d/2), y+3*cs+pet(d/2) + offset*j)
   // ctx.stroke()

    //7
    ctx.beginPath()
    ctx.moveTo(x+13*cs+pet(d/2), y+3*cs+pet(d/2) + offset*j)
    ctx.lineTo(x+24*cs+pet(d/2), y+3*cs+pet(d/2) + offset*j)
    ctx.stroke()
  }
  ctx.restore()

  /1
  ctx.beginPath()
  ctx.moveTo(x+8*cs+pet(d/2), y+20*cs+pet(d/2))
  ctx.lineTo(x+9*cs+pet(d), y+18*cs+pet(d))
  ctx.lineTo(x+11*cs+pet(d), y+19*cs+pet(d))
  ctx.lineTo(x+12*cs+pet(d/2), y+16*cs+pet(d/2))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+12*cs+pet(d/2), y+16*cs+pet(d/2))
  ctx.lineTo(x+15*cs+pet(d), y+16*cs+pet(d))
  ctx.lineTo(x+14*cs+pet(d), y+18*cs+pet(d))
  ctx.lineTo(x+16*cs+pet(d/2), y+18*cs+pet(d/2))
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+12*cs+pet(d/2), y+12*cs+pet(d/2))
  ctx.lineTo(x+11*cs+pet(d), y+14*cs+pet(d))
  ctx.lineTo(x+15*cs+pet(d/2), y+14*cs+pet(d/2))
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+10*cs+pet(d/2), y+16*cs+pet(d/2))
  cpx = x+14*cs
  cpy = y+16*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+14*cs+pet(d), y+16*cs+pet(d))
  cpx = x+14*cs
  cpy = y+10*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*cs+pet(d), y+10*cs+pet(d))
  cpx = x+10*cs
  cpy = y+10*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+10*cs+pet(d/2), y+16*cs+pet(d/2))
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+12*cs+pet(d/2), y+10*cs+pet(d/2))
  cpx = x+14*cs
  cpy = y+10*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+14*cs+pet(d), y+8*cs+pet(d))
  cpx = x+14*cs
  cpy = y+7*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+13*cs+pet(d), y+7*cs+pet(d))
  cpx = x+12*cs
  cpy = y+7*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+11*cs+pet(d), y+9*cs+pet(d))
  cpx = x+11*cs
  cpy = y+10*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+12*cs+pet(d/2), y+10*cs+pet(d/2))
  ctx.stroke()

  } //WAVEY
  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function walled_gardenAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, WAVEY = false
  let cs = W/24, d = 0, i = 0, maxi = 1
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  if (WAVEY) {
    d = cs/2, maxi = 9
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/150
  }
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  for (; i < maxi; i++) { // WAVEY
  //1
  ctx.save()
  ctx.beginPath()
  ctx.moveTo(x+8*cs+pet(d/2), y+3*cs+pet(d/2))
  cpx = x+8*cs
  cpy = y+8*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*cs+pet(d), y+8*cs+pet(d))
  cpx = x+16*cs
  cpy = y+8*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*cs+pet(d), y+3*cs+pet(d))
  cpx = x+16*cs
  cpy = y+0*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*cs+pet(d), y+0*cs+pet(d))
  cpx = x+14*cs
  cpy = y+0*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+14*cs+pet(d), y+2*cs+pet(d))
  cpx = x+14*cs
  cpy = y+0*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+13*cs+pet(d), y+0*cs+pet(d))
  cpx = x+12*cs
  cpy = y+0*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*cs+pet(d), y+2*cs+pet(d))
  cpx = x+12*cs
  cpy = y+0*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+11*cs+pet(d), y+0*cs+pet(d))
  cpx = x+10*cs
  cpy = y+0*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+10*cs+pet(d), y+2*cs+pet(d))
  cpx = x+10*cs
  cpy = y+0*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*cs+pet(d), y+0*cs+pet(d))
  cpx = x+8*cs
  cpy = y+3*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+8*cs+pet(d/2), y+3*cs+pet(d/2))
  ctx.stroke()
  ctx.clip()
  brickpatternAt(x,y,W*1.1,color)
  ctx.restore()
  //2
  ctx.save()
  ctx.beginPath()
  ctx.moveTo(x+12*cs+pet(d/2), y+24*cs+pet(d/2))
  cpx = x+0*cs
  cpy = y+24*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+0*cs+pet(d), y+8*cs+pet(d))
  cpx = x+12*cs
  cpy = y+8*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*cs+pet(d), y+24*cs+pet(d))
  cpx = x+12*cs
  cpy = y+8*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+24*cs+pet(d), y+8*cs+pet(d))
  cpx = x+24*cs
  cpy = y+24*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+12*cs+pet(d/2), y+24*cs+pet(d/2))
  ctx.stroke()
  ctx.clip()
  brickpatternAt(x,y,W*1.1,color)
  ctx.restore()

 
  //5
  ctx.beginPath()
  ctx.moveTo(x+12*cs+pet(d/2), y+8*cs+pet(d/2))
  ctx.lineTo(x+12*cs+pet(d/2), y+24*cs+pet(d/2))
  ctx.stroke()

  } //WAVEY
  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function leaningAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, WAVEY = false
  let cs = W/24, d = 0, i = 0, maxi = 1
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  if (WAVEY) {
    d = cs/2, maxi = 9
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/150
  }
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  for (; i < maxi; i++) { // WAVEY
  //1
  ctx.beginPath()
  ctx.moveTo(x+4*cs+pet(d/2), y+17*cs+pet(d/2))
  cpx = x+4*cs
  cpy = y+9*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+10*cs+pet(d), y+6*cs+pet(d))
  cpx = x+13*cs
  cpy = y+5*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+14*cs+pet(d), y+6*cs+pet(d))
  cpx = x+16*cs
  cpy = y+10*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+14*cs+pet(d), y+17*cs+pet(d))
  ctx.lineTo(x+4*cs+pet(d/2), y+17*cs+pet(d/2))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+8*cs+pet(d/2), y+17*cs+pet(d/2))
  ctx.lineTo(x+6*cs+pet(d), y+23*cs+pet(d))
  ctx.lineTo(x+8*cs+pet(d/2), y+23*cs+pet(d/2))
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+11*cs+pet(d/2), y+17*cs+pet(d/2))
  ctx.lineTo(x+9*cs+pet(d), y+23*cs+pet(d))
  ctx.lineTo(x+11*cs+pet(d/2), y+23*cs+pet(d/2))
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+13*cs+pet(d/2), y+9*cs+pet(d/2))
  ctx.lineTo(x+13*cs+pet(d/2), y+18*cs+pet(d/2))
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+14*cs+pet(d/2), y+6*cs+pet(d/2))
  cpx = x+15*cs
  cpy = y+6*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*cs+pet(d), y+4*cs+pet(d))
  cpx = x+17*cs
  cpy = y+1*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+15*cs+pet(d), y+1*cs+pet(d))
  cpx = x+12*cs
  cpy = y+1*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*cs+pet(d), y+4*cs+pet(d))
  cpx = x+12*cs
  cpy = y+6*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+14*cs+pet(d/2), y+6*cs+pet(d/2))
  ctx.stroke()

  } //WAVEY
  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function escalatorAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, WAVEY = false
  let cs = W/24, d = 0, i = 0, maxi = 1

  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  if (WAVEY) {
    d = cs/2, maxi = 9
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/100
  }
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  for (; i < maxi; i++) { // WAVEY
  leaningAt(x+0.2*cs+pet(d/2), y+12.5*cs+pet(d/2), cs*7.4, color)

  //1
  ctx.beginPath()
  ctx.moveTo(x+6*cs+pet(d/2), y+20*cs+pet(d/2))
  ctx.lineTo(x+6*cs+pet(d), y+18*cs+pet(d))
  ctx.lineTo(x+8*cs+pet(d), y+18*cs+pet(d))
  ctx.lineTo(x+8*cs+pet(d), y+16*cs+pet(d))
  ctx.lineTo(x+10*cs+pet(d), y+16*cs+pet(d))
  ctx.lineTo(x+10*cs+pet(d), y+14*cs+pet(d))
  ctx.lineTo(x+12*cs+pet(d), y+14*cs+pet(d))
  ctx.lineTo(x+12*cs+pet(d), y+12*cs+pet(d))
  ctx.lineTo(x+14*cs+pet(d), y+12*cs+pet(d))
  ctx.lineTo(x+14*cs+pet(d), y+10*cs+pet(d))
  ctx.lineTo(x+16*cs+pet(d), y+10*cs+pet(d))
  ctx.lineTo(x+16*cs+pet(d), y+8*cs+pet(d))
  ctx.lineTo(x+18*cs+pet(d), y+8*cs+pet(d))
  ctx.lineTo(x+18*cs+pet(d), y+6*cs+pet(d))
  ctx.lineTo(x+20*cs+pet(d), y+6*cs+pet(d))
  ctx.stroke()

  //1
  //2
  ctx.beginPath()
  ctx.moveTo(x+2*cs+pet(d/2), y+20*cs+pet(d/2))
  ctx.lineTo(x+6*cs+pet(d), y+20*cs+pet(d))
  ctx.lineTo(x+20*cs+pet(d), y+6*cs+pet(d))
  ctx.lineTo(x+22*cs+pet(d), y+6*cs+pet(d))
  cpx = x+24*cs
  cpy = y+6*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+24*cs+pet(d), y+4*cs+pet(d))
  cpx = x+24*cs
  cpy = y+2*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+22*cs+pet(d), y+2*cs+pet(d))
  cpx = x+19*cs
  cpy = y+2*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+19*cs+pet(d), y+2*cs+pet(d))
  cpx = x+18*cs
  cpy = y+2*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+17*cs+pet(d), y+3*cs+pet(d))
  cpx = x+4*cs
  cpy = y+16*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+4*cs+pet(d), y+16*cs+pet(d))
  cpx = x+2*cs
  cpy = y+16*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+2*cs+pet(d), y+16*cs+pet(d))
  cpx = x+0*cs
  cpy = y+16*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+0*cs+pet(d), y+18*cs+pet(d))
  cpx = x+0*cs
  cpy = y+20*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+2*cs+pet(d/2), y+20*cs+pet(d/2))
  ctx.stroke()


  } //WAVEY
  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function hexboltAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, WAVEY = false
  let cs = W/24, d = 0, i = 0, maxi = 1
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  if (WAVEY) {
    d = cs/2, maxi = 9
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/150
  }
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  for (; i < maxi; i++) { // WAVEY
  //1
  //1
  ctx.beginPath()
  ctx.moveTo(x+10*cs+pet(d/2), y+6*cs+pet(d/2))
  ctx.lineTo(x+6*cs+pet(d), y+9*cs+pet(d))
  ctx.lineTo(x+10*cs+pet(d), y+13*cs+pet(d))
  ctx.lineTo(x+16*cs+pet(d), y+13*cs+pet(d))
  ctx.lineTo(x+20*cs+pet(d), y+9*cs+pet(d))
  ctx.lineTo(x+16*cs+pet(d), y+6*cs+pet(d))
  ctx.lineTo(x+10*cs+pet(d/2), y+6*cs+pet(d/2))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+6*cs+pet(d/2), y+9*cs+pet(d/2))
  ctx.lineTo(x+6*cs+pet(d), y+12*cs+pet(d))
  ctx.lineTo(x+10*cs+pet(d), y+16*cs+pet(d))
  ctx.lineTo(x+16*cs+pet(d), y+16*cs+pet(d))
  ctx.lineTo(x+20*cs+pet(d), y+12*cs+pet(d))
  ctx.lineTo(x+20*cs+pet(d/2), y+9*cs+pet(d/2))
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+10*cs+pet(d/2), y+13*cs+pet(d/2))
  ctx.lineTo(x+10*cs+pet(d/2), y+16*cs+pet(d/2))
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+16*cs+pet(d/2), y+13*cs+pet(d/2))
  ctx.lineTo(x+16*cs+pet(d/2), y+16*cs+pet(d/2))
  ctx.stroke()

  } //WAVEY
  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function black_holeAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, WAVEY = true
  let cs = W/24, d = 0, i = 0, maxi = 1
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  if (WAVEY) {
    d = cs*2, maxi = 99
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/150
  }
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  ctx.globalAlpha /=5
  d = 0
  ctx.save()
  ctx.beginPath()
  ctx.arc(x+12*cs, y+12*cs, cs*2, 0, 2*Math.PI)

  ctx.lineTo(x+24*cs, y+12*cs)
  ctx.lineTo(x+24*cs, y+0*cs)
  ctx.lineTo(x+0*cs, y+0*cs)
  ctx.lineTo(x+0*cs, y+24*cs)
  ctx.lineTo(x+24*cs, y+24*cs)
  ctx.lineTo(x+24*cs, y+12*cs)
  ctx.closePath()
  ctx.clip()
  d = cs*2
  for (; i < maxi*2; i++) {
    ctx.beginPath()
    ctx.arc(x+12*cs+pet(19), y+12*cs+pet(19), cs*2+1.4/Math.random()*cs/4, 0, 2*Math.PI)
    ctx.stroke()

  } 
  ctx.restore()
  ctx.save()
  ctx.beginPath()
  ctx.moveTo(x+15*cs, y+12*cs)
  cpx = x+12*cs
  cpy = y+13*cs
  ctx.quadraticCurveTo(cpx, cpy, x+9*cs, y+12*cs)
  ctx.arc(x+12*cs, y+12*cs, cs*3, Math.PI, 2*Math.PI)
  ctx.lineTo(x+24*cs, y+12*cs)
  ctx.lineTo(x+24*cs, y+0*cs)
  ctx.lineTo(x+0*cs, y+0*cs)
  ctx.lineTo(x+0*cs, y+24*cs)
  ctx.lineTo(x+24*cs, y+24*cs)
  ctx.lineTo(x+24*cs, y+12*cs)
  ctx.closePath()
  ctx.clip()
  i = 0
  for (; i < maxi; i++) {
    ctx.beginPath()
    ctx.ellipse(x+12*cs+pet(19), y+12*cs+pet(19), 
                cs*0.9+1/Math.random()*cs/33, 
                cs*9+1.7/Math.random()*cs/20, Math.PI/2.05, 0, 2*Math.PI)
    ctx.stroke()
  } 
  ctx.restore()
  ctx.globalAlpha *=5
  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function load_cellAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, WAVEY = false
  let cs = W/24, d = 0, i = 0, maxi = 1
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  if (WAVEY) {
    d = cs/2, maxi = 9
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/150
  }
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  for (; i < maxi; i++) { // WAVEY
  //1
  ctx.beginPath()
  ctx.moveTo(x+0*cs+pet(d/2), y+10*cs+pet(d/2))
  cpx = x+0*cs
  cpy = y+6*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*cs+pet(d), y+6*cs+pet(d))
  cpx = x+16*cs
  cpy = y+6*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*cs+pet(d), y+10*cs+pet(d))
  cpx = x+16*cs
  cpy = y+14*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*cs+pet(d), y+14*cs+pet(d))
  cpx = x+0*cs
  cpy = y+14*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+0*cs+pet(d), y+10*cs+pet(d))
  cpx = x+0*cs
  cpy = y+18*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+0*cs+pet(d), y+18*cs+pet(d))
  cpx = x+0*cs
  cpy = y+22*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*cs+pet(d), y+22*cs+pet(d))
  cpx = x+16*cs
  cpy = y+22*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*cs+pet(d), y+18*cs+pet(d))
  cpx = x+16*cs
  cpy = y+10*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+16*cs+pet(d/2), y+10*cs+pet(d/2))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+8*cs+pet(d/2), y+10*cs+pet(d/2))
  cpx = x+6*cs
  cpy = y+10*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+6*cs+pet(d), y+9*cs+pet(d))
  cpx = x+6*cs
  cpy = y+8*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*cs+pet(d), y+8*cs+pet(d))
  cpx = x+10*cs
  cpy = y+8*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+10*cs+pet(d), y+9*cs+pet(d))
  cpx = x+10*cs
  cpy = y+10*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+8*cs+pet(d/2), y+10*cs+pet(d/2))
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+6*cs+pet(d/2), y+9*cs+pet(d/2))
  cpx = x+6*cs
  cpy = y+10*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+6*cs+pet(d), y+10*cs+pet(d))
  cpx = x+6*cs
  cpy = y+11*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*cs+pet(d), y+11*cs+pet(d))
  cpx = x+10*cs
  cpy = y+11*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+10*cs+pet(d), y+10*cs+pet(d))
  cpx = x+10*cs
  cpy = y+9*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+10*cs+pet(d/2), y+9*cs+pet(d/2))
 ctx.stroke()

  instronlogoAt(x+4.5*cs, y+14*cs, 7*cs, color)
  //4

  hexboltAt(x+3*cs+pet(d/2), y+6.5*cs+pet(d/2), cs *3, color)
  hexboltAt(x+10*cs+pet(d/2), y+6.5*cs+pet(d/2), cs *3, color)
  hexboltAt(x+0.5*cs+pet(d/2), y+8.5*cs+pet(d/2), cs *3, color)
  hexboltAt(x+12.5*cs+pet(d/2), y+8.5*cs+pet(d/2), cs *3, color)
  hexboltAt(x+3*cs+pet(d/2), y+10.5*cs+pet(d/2), cs *3, color)
  hexboltAt(x+10*cs+pet(d/2), y+10.5*cs+pet(d/2), cs *3, color)

  ctx.beginPath()
  ctx.moveTo(x+4*cs+pet(d/2), y+15*cs+pet(d/2))
  cpx = x+8*cs
  cpy = y+16*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*cs+pet(d), y+15*cs+pet(d))
  ctx.lineTo(x+12*cs+pet(d), y+20*cs+pet(d))
  cpx = x+8*cs
  cpy = y+21*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+4*cs+pet(d), y+20*cs+pet(d))
  ctx.lineTo(x+4*cs+pet(d/2), y+15*cs+pet(d/2))
  ctx.stroke()

  //11
  ctx.beginPath()
  ctx.moveTo(x+16*cs+pet(d/2), y+13*cs+pet(d/2))
  ctx.lineTo(x+18*cs+pet(d), y+13*cs+pet(d))
  ctx.lineTo(x+18*cs+pet(d), y+16*cs+pet(d))
  ctx.lineTo(x+16*cs+pet(d/2), y+16*cs+pet(d/2))
  ctx.stroke()

  //12
  ctx.beginPath()
  ctx.moveTo(x+18*cs+pet(d/2), y+14*cs+pet(d/2))
  cpx = x+21*cs
  cpy = y+14*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+21*cs+pet(d), y+16*cs+pet(d))
  cpx = x+21*cs
  cpy = y+18*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+24*cs+pet(d/2), y+18*cs+pet(d/2))
  ctx.stroke()

  //13
  ctx.beginPath()
  ctx.moveTo(x+18*cs+pet(d/2), y+15*cs+pet(d/2))
  cpx = x+20*cs
  cpy = y+15*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20*cs+pet(d), y+16*cs+pet(d))
  cpx = x+20*cs
  cpy = y+19*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+24*cs+pet(d/2), y+19*cs+pet(d/2))
  ctx.stroke()

  } //WAVEY
  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function instronlogoAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, WAVEY = false
  let cs = W/32, d = 0, i = 0, maxi = 1
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  if (WAVEY) {
    d = cs/2, maxi = 9
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/150
  }
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  for (; i < maxi; i++) { // WAVEY
  //1
  ctx.beginPath()
  ctx.moveTo(x+11*cs+pet(d/2), y+26*cs+pet(d/2))
  ctx.lineTo(x+13*cs+pet(d/2), y+26*cs+pet(d/2))
  ctx.lineTo(x+16*cs+pet(d), y+23*cs+pet(d))
  ctx.lineTo(x+19*cs+pet(d), y+26*cs+pet(d))
  ctx.lineTo(x+21*cs+pet(d), y+26*cs+pet(d))
  ctx.lineTo(x+17.7*cs+pet(d/2), y+22*cs+pet(d/2))

  ctx.lineTo(x+22*cs+pet(d), y+19*cs+pet(d))
  ctx.lineTo(x+26*cs+pet(d), y+26*cs+pet(d))
  ctx.lineTo(x+27*cs+pet(d), y+26*cs+pet(d))
  ctx.lineTo(x+26*cs+pet(d), y+17*cs+pet(d))
  ctx.lineTo(x+32*cs+pet(d), y+12*cs+pet(d))
  ctx.lineTo(x+30*cs+pet(d), y+12*cs+pet(d))
  ctx.lineTo(x+30*cs+pet(d), y+9*cs+pet(d))
  ctx.lineTo(x+27*cs+pet(d), y+9*cs+pet(d))
  ctx.lineTo(x+27*cs+pet(d), y+12*cs+pet(d))
  ctx.lineTo(x+20*cs+pet(d), y+12*cs+pet(d))
  ctx.lineTo(x+19*cs+pet(d), y+10*cs+pet(d))
  ctx.lineTo(x+18*cs+pet(d), y+11*cs+pet(d))
  ctx.lineTo(x+14*cs+pet(d), y+11*cs+pet(d))
  ctx.lineTo(x+13*cs+pet(d), y+10*cs+pet(d))
  ctx.lineTo(x+12*cs+pet(d), y+12*cs+pet(d))
  ctx.lineTo(x+5*cs+pet(d), y+12*cs+pet(d))
  ctx.lineTo(x+5*cs+pet(d), y+9*cs+pet(d))
  ctx.lineTo(x+2*cs+pet(d), y+9*cs+pet(d))
  ctx.lineTo(x+2*cs+pet(d), y+12*cs+pet(d))
  ctx.lineTo(x+0*cs+pet(d), y+12*cs+pet(d))
  ctx.lineTo(x+6*cs+pet(d), y+17*cs+pet(d))
  ctx.lineTo(x+5*cs+pet(d), y+26*cs+pet(d))
  ctx.lineTo(x+6*cs+pet(d), y+26*cs+pet(d))
  ctx.lineTo(x+10*cs+pet(d), y+19*cs+pet(d))
  ctx.lineTo(x+14*cs+pet(d), y+22*cs+pet(d))
  ctx.lineTo(x+11*cs+pet(d/2), y+26*cs+pet(d/2))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+14*cs+pet(d/2), y+12*cs+pet(d/2))
  ctx.lineTo(x+18*cs+pet(d), y+12*cs+pet(d))
  ctx.lineTo(x+19*cs+pet(d), y+13*cs+pet(d))
  ctx.lineTo(x+19*cs+pet(d), y+14*cs+pet(d))
  ctx.lineTo(x+20*cs+pet(d), y+13*cs+pet(d))
  ctx.lineTo(x+23*cs+pet(d), y+14*cs+pet(d))
  ctx.lineTo(x+16*cs+pet(d), y+21*cs+pet(d))
  ctx.lineTo(x+9*cs+pet(d), y+14*cs+pet(d))
  ctx.lineTo(x+12*cs+pet(d), y+13*cs+pet(d))
  ctx.lineTo(x+13*cs+pet(d), y+14*cs+pet(d))
  ctx.lineTo(x+13*cs+pet(d), y+13*cs+pet(d))
  ctx.lineTo(x+14*cs+pet(d/2), y+12*cs+pet(d/2))
  ctx.stroke()

  } //WAVEY
  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function one_fiveAt (N, x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle
  let cs = W/32, d = cs*5, i = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/180
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  for (; i < 1; i++) {
    switch (N) {
      case "1":
    //1
    ctx.beginPath()
    ctx.moveTo(x+10*cs+pet(d/2), y+8*cs+pet(d/2))
    cpx = x+16*cs
    cpy = y+4*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*cs+pet(d), y+0*cs+pet(d))
    cpx = x+16*cs
    cpy = y+18*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+14*cs+pet(d/2), y+32*cs+pet(d/2))
    ctx.stroke()
    ctx.beginPath()
    ctx.moveTo(x+9*cs+pet(d/2), y+32*cs+pet(d/2))
    cpx = x+16*cs
    cpy = y+32*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+21*cs+pet(d/2), y+32*cs+pet(d/2))
    ctx.stroke()
    break;
    case "2":
    ctx.beginPath()
    ctx.moveTo(x+8*cs+pet(d/1), y+12*cs+pet(d/2))
    cpx = x+6*cs
    cpy = y+12*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+6*cs+pet(d), y+10*cs+pet(d))
    cpx = x+8*cs
    cpy = y+1*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+17*cs+pet(d), y+0*cs+pet(d))
    cpx = x+31*cs
    cpy = y+2*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*cs+pet(d), y+18*cs+pet(d))
    cpx = x+9*cs
    cpy = y+24*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+4*cs+pet(d), y+31*cs+pet(d))
    cpx = x+18*cs
    cpy = y+29*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+28*cs+pet(d), y+31*cs+pet(d))
    cpx = x+30*cs
    cpy = y+31*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+31*cs+pet(d/2), y+30*cs+pet(d/2))
    ctx.stroke()
    break;
    case "3":
    ctx.beginPath()
    ctx.moveTo(x+6*cs+pet(d/2), y+8*cs+pet(d/2))
    cpx = x+12*cs
    cpy = y+0*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*cs+pet(d), y+0*cs+pet(d))
    cpx = x+26*cs
    cpy = y+2*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+25*cs+pet(d), y+10*cs+pet(d))
    cpx = x+24*cs
    cpy = y+16*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+14*cs+pet(d), y+16*cs+pet(d))
    cpx = x+25*cs
    cpy = y+16*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+27*cs+pet(d), y+22*cs+pet(d))
    cpx = x+26*cs
    cpy = y+30*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+9*cs+pet(d/2), y+31*cs+pet(d/2))
    ctx.stroke()
    break;
    case "4":
    ctx.beginPath()
    ctx.moveTo(x+14*cs+pet(d/2), y+32*cs+pet(d/2))
    cpx = x+17*cs
    cpy = y+16*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*cs+pet(d), y+1*cs+pet(d))
    cpx = x+12*cs
    cpy = y+9*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+3*cs+pet(d), y+16*cs+pet(d))
    cpx = x+15*cs
    cpy = y+17*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+26*cs+pet(d/2), y+15*cs+pet(d/2))
    ctx.stroke()
    break;
    case "5":
    ctx.beginPath()
    ctx.moveTo(x+26*cs+pet(d/2), y+1*cs+pet(d/2))
    cpx = x+18*cs
    cpy = y+2*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*cs+pet(d), y+1*cs+pet(d))
    cpx = x+8*cs
    cpy = y+7*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+6*cs+pet(d), y+12*cs+pet(d))
    cpx = x+17*cs
    cpy = y+9*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+26*cs+pet(d), y+16*cs+pet(d))
    cpx = x+29*cs
    cpy = y+22*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+25*cs+pet(d), y+26*cs+pet(d))
    cpx = x+18*cs
    cpy = y+31*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+5*cs+pet(d/2), y+30*cs+pet(d/2))
    ctx.stroke()
    break;
    }
  }
  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function glasssphereAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let r = W

  ctx.beginPath()
  //ellipse(x, y, radiusX, radiusY, rotation, startAngle, endAngle)
  ctx.ellipse(x+r*1.0, y+r*1.5, r*1.25, r, Math.PI/2, 0, 2*Math.PI)
  ctx.fillStyle = "#2d464f20"
  ctx.fill()

  ctx.beginPath()
  //ellipse(x, y, radiusX, radiusY, rotation, startAngle, endAngle)
  ctx.ellipse(x+r*1.0, y+r*1.5, r*1.25*1.1, r*1.1, Math.PI/2, 0, 2*Math.PI)
  ctx.fillStyle = "#2d464f10"
  ctx.fill()

  ctx.beginPath()
  //ellipse(x, y, radiusX, radiusY, rotation, startAngle, endAngle)
  ctx.ellipse(x+r*1.0, y+r*1.6, r*0.75, r/2, Math.PI/2, 0, 2*Math.PI)
  ctx.fillStyle = "#cff2feab"
  ctx.fill()

  

  const gradient = ctx.createRadialGradient(x+r, y+r, W*0.3, x+r-W/2, y+r-W/2, W*2);
      gradient.addColorStop(0, '#8edaf860')
      gradient.addColorStop(1, '#ccffff00')
  ctx.beginPath()
  ctx.arc(x+r,y+r,r,0,2*Math.PI)
  ctx.fillStyle = "#000000aa"
  ctx.fill()
  ctx.fillStyle = gradient
  ctx.fill()
  ctx.beginPath() // under glint
  ctx.ellipse(x+r*1.1, y+r*1.5, r/4, r/6, -Math.PI*0.1, 0, 2*Math.PI)
  ctx.fillStyle = "#01444640"
  ctx.fill()
  const gradient2 = ctx.createRadialGradient(x+r, y+r, W/10, x+r+W/2, y+r+W/2, W*2);
      
      gradient2.addColorStop(0, '#eeeeff00')
      gradient2.addColorStop(1, '#aaaaff60')

  ctx.fillStyle = gradient2
  ctx.fill()
  ctx.fillStyle = gradient
  ctx.fill()

  ctx.beginPath()
  //ellipse(x, y, radiusX, radiusY, rotation, startAngle, endAngle)
  ctx.ellipse(x+r*0.9, y+r/2.7, r/3, r/6, -Math.PI*0.05, 0, 2*Math.PI)
  ctx.fillStyle = "#ffffff60"
  ctx.fill()
  ctx.beginPath()
  //ellipse(x, y, radiusX, radiusY, rotation, startAngle, endAngle)
  ctx.ellipse(x+r*0.9, y+r/2.7, r/5, r/10, -Math.PI*0.05, 0, 2*Math.PI)
  ctx.fillStyle = "#ffffff90"
  ctx.fill()
}

function vaccineAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let cs = W/32
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, d = 0, angle = pet(360)

  ctx.beginPath()
  p = rotatePoint(x+15*cs+pet(d), y+7*cs+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+17*cs+pet(d), y+7*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+17*cs+pet(d), y+26*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+15*cs+pet(d), y+26*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+15*cs+pet(d), y+7*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.fillStyle = savedF
  ctx.fill()
  ctx.fillStyle = color
  ctx.stroke()

  ctx.beginPath()
  p = rotatePoint(x+14*cs+pet(d), y+7*cs+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+18*cs+pet(d), y+7*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()
  
  //1
  ctx.beginPath()
  p = rotatePoint(x+14*cs+pet(d), y+1*cs+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+18*cs+pet(d), y+1*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+16*cs+pet(d), y+1*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+16*cs+pet(d), y+18*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.lineWidth *= 3
  ctx.stroke()
  ctx.lineWidth /= 3
  //3
  ctx.beginPath()
  p = rotatePoint(x+15*cs+pet(d), y+18*cs+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+17*cs+pet(d), y+18*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+17*cs+pet(d), y+20*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+15*cs+pet(d), y+20*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.fill()

  //4
  ctx.beginPath()
  p = rotatePoint(x+15*cs+pet(d), y+26*cs+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+16*cs+pet(d), y+29*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+17*cs+pet(d), y+26*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.fill()
  ctx.stroke()

  //5
  ctx.beginPath()
  p = rotatePoint(x+16*cs+pet(d), y+29*cs+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+16*cs+pet(d), y+32*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.lineWidth /= 2
  ctx.stroke()
  ctx.lineWidth *= 2
  //8
  ctx.beginPath()
  p = rotatePoint(x+15*cs+pet(d), y+20*cs+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+17*cs+pet(d), y+20*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+17*cs+pet(d), y+26*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+15*cs+pet(d), y+26*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+15*cs+pet(d), y+20*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.globalAlpha = 0.2
  ctx.fill()
  ctx.globalAlpha = 1
  //6
  let j = 0
  for (; j < 14; j++) {
    ctx.beginPath()
    p = rotatePoint(x+16*cs+pet(d), y+25*cs+pet(d) ,cx,cy,angle)
    if (j === 13)
      p = rotatePoint(x+15*cs+pet(d), y+25*cs+pet(d) ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    p = rotatePoint(x+17*cs+pet(d), y+25*cs+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    ctx.stroke()
    y -= 2+cs
  }

  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function a_diceAt (N, x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, WAVEY = true
  let cs = W/24, d = 0, i = 0, maxi = 1
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  if (WAVEY) {
    d = cs/2, maxi = 9
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/150
  }
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "round"
  ctx.lineJoin = "bevel"
  for (; i < maxi; i++) { // WAVEY
  //1
  ctx.beginPath()
  ctx.moveTo(x+0*cs+pet(d/2), y+0*cs+pet(d/2))
  ctx.lineTo(x+14*cs+pet(d), y+0*cs+pet(d))
  ctx.lineTo(x+14*cs+pet(d), y+14*cs+pet(d))
  ctx.lineTo(x+0*cs+pet(d), y+14*cs+pet(d))
  ctx.lineTo(x+0*cs+pet(d/2), y+0*cs+pet(d/2))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+0*cs+pet(d/2), y+14*cs+pet(d/2))
  ctx.lineTo(x+8*cs+pet(d), y+22*cs+pet(d))
  ctx.lineTo(x+22*cs+pet(d), y+22*cs+pet(d))
  ctx.lineTo(x+22*cs+pet(d), y+8*cs+pet(d))
  ctx.lineTo(x+14*cs+pet(d), y+0*cs+pet(d))
  ctx.lineTo(x+14*cs+pet(d), y+14*cs+pet(d))
  ctx.lineTo(x+22*cs+pet(d/2), y+22*cs+pet(d/2))
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.arc(x+3*cs+pet(d), y+3*cs+pet(d), cs, 0, 2*Math.PI)
  if (N === 6 || N=== 4 || N === 5)
  ctx.fill()

  //4
  ctx.beginPath()
  ctx.arc(x+3*cs+pet(d), y+7*cs+pet(d), cs, 0, 2*Math.PI)
  if (N === 6)
  ctx.fill()

  //5
  ctx.beginPath()
  ctx.arc(x+3*cs+pet(d), y+11*cs+pet(d), cs, 0, 2*Math.PI)
  if (N === 6 || N=== 4 || N === 5 || N === 3 || N === 2)
  ctx.fill()

  //6
  ctx.beginPath()
  ctx.arc(x+11*cs+pet(d), y+11*cs+pet(d), cs, 0, 2*Math.PI)
  if (N === 6 || N=== 4 || N === 5)
  ctx.fill()

  //7
  ctx.beginPath()
  ctx.arc(x+11*cs+pet(d), y+7*cs+pet(d), cs, 0, 2*Math.PI)
  if (N === 6)
  ctx.fill()

  //8
  ctx.beginPath()
  ctx.arc(x+11*cs+pet(d), y+3*cs+pet(d), cs, 0, 2*Math.PI)
  if (N !== 1)
  ctx.fill()

  //9
  ctx.beginPath()
  ctx.arc(x+7*cs+pet(d/2), y+7*cs+pet(d/2), cs, 0, 2*Math.PI)
  if (N === 1 || N === 5 || N === 3)
  ctx.fill()

  } //WAVEY
  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function ____At (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, WAVEY = false
  let cs = W/32, d = 0, i = 0, maxi = 1
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  if (WAVEY) {
    d = cs/2, maxi = 9
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/150
  }
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  for (; i < maxi; i++) { // WAVEY
  //1
  ctx.beginPath()
  ctx.moveTo(x+15*cs+pet(d/2), y+10*cs+pet(d/2))
  cpx = x+12*cs
  cpy = y+10*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+11*cs+pet(d), y+20*cs+pet(d))
  cpx = x+11*cs
  cpy = y+22*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+10*cs+pet(d), y+24*cs+pet(d))
  cpx = x+9*cs
  cpy = y+26*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+11*cs+pet(d), y+26*cs+pet(d))
  cpx = x+13*cs
  cpy = y+26*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+13*cs+pet(d), y+22*cs+pet(d))
  cpx = x+13*cs
  cpy = y+14*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*cs+pet(d), y+10*cs+pet(d))
  cpx = x+15*cs
  cpy = y+10*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+15*cs+pet(d/2), y+10*cs+pet(d/2))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+14*cs+pet(d/2), y+10*cs+pet(d/2))
  cpx = x+8*cs
  cpy = y+10*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+6*cs+pet(d), y+18*cs+pet(d))
  cpx = x+6*cs
  cpy = y+21*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+7*cs+pet(d), y+21*cs+pet(d))
  cpx = x+8*cs
  cpy = y+21*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*cs+pet(d), y+19*cs+pet(d))
  cpx = x+9*cs
  cpy = y+13*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+13*cs+pet(d/2), y+10*cs+pet(d/2))
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+13*cs+pet(d/2), y+10*cs+pet(d/2))
  cpx = x+12*cs
  cpy = y+6*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*cs+pet(d), y+4*cs+pet(d))
  cpx = x+12*cs
  cpy = y+2*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+14*cs+pet(d), y+2*cs+pet(d))
  cpx = x+17*cs
  cpy = y+2*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+17*cs+pet(d), y+6*cs+pet(d))
  cpx = x+17*cs
  cpy = y+8*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+16*cs+pet(d/2), y+10*cs+pet(d/2))
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+15*cs+pet(d/2), y+10*cs+pet(d/2))
  cpx = x+18*cs
  cpy = y+12*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*cs+pet(d), y+17*cs+pet(d))
  cpx = x+16*cs
  cpy = y+20*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+17*cs+pet(d), y+22*cs+pet(d))
  cpx = x+18*cs
  cpy = y+23*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+19*cs+pet(d), y+22*cs+pet(d))
  cpx = x+21*cs
  cpy = y+19*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+21*cs+pet(d), y+15*cs+pet(d))
  cpx = x+19*cs
  cpy = y+11*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+16*cs+pet(d/2), y+10*cs+pet(d/2))
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+9*cs+pet(d/2), y+16*cs+pet(d/2))
  cpx = x+9*cs
  cpy = y+18*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+10*cs+pet(d), y+18*cs+pet(d))
  cpx = x+11*cs
  cpy = y+18*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+11*cs+pet(d), y+16*cs+pet(d))
  cpx = x+11*cs
  cpy = y+14*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+10*cs+pet(d/2), y+13*cs+pet(d/2))
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+13*cs+pet(d/2), y+10*cs+pet(d/2))
  cpx = x+5*cs
  cpy = y+10*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+8*cs+pet(d/2), y+13*cs+pet(d/2))
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+9*cs+pet(d/2), y+15*cs+pet(d/2))
  cpx = x+9*cs
  cpy = y+18*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+10*cs+pet(d), y+18*cs+pet(d))
  cpx = x+11*cs
  cpy = y+18*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+11*cs+pet(d), y+16*cs+pet(d))
  cpx = x+11*cs
  cpy = y+13*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+10*cs+pet(d/2), y+13*cs+pet(d/2))
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+14*cs+pet(d/2), y+14*cs+pet(d/2))
  cpx = x+14*cs
  cpy = y+22*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+15*cs+pet(d), y+23*cs+pet(d))
  cpx = x+17*cs
  cpy = y+26*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*cs+pet(d), y+32*cs+pet(d))
  cpx = x+17*cs
  cpy = y+32*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+17*cs+pet(d), y+32*cs+pet(d))
  cpx = x+18*cs
  cpy = y+26*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*cs+pet(d), y+23*cs+pet(d))
  cpx = x+15*cs
  cpy = y+22*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+15*cs+pet(d), y+13*cs+pet(d))
  cpx = x+15*cs
  cpy = y+12*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+15*cs+pet(d/2), y+12*cs+pet(d/2))
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+16*cs+pet(d/2), y+10*cs+pet(d/2))
  cpx = x+22*cs
  cpy = y+10*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+24*cs+pet(d), y+12*cs+pet(d))
  cpx = x+26*cs
  cpy = y+14*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+26*cs+pet(d), y+18*cs+pet(d))
  cpx = x+26*cs
  cpy = y+20*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+25*cs+pet(d), y+20*cs+pet(d))
  cpx = x+23*cs
  cpy = y+20*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+24*cs+pet(d), y+18*cs+pet(d))
  cpx = x+24*cs
  cpy = y+15*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+22*cs+pet(d), y+12*cs+pet(d))
  cpx = x+20*cs
  cpy = y+11*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+17*cs+pet(d/2), y+10*cs+pet(d/2))
  ctx.stroke()

  // rows of dots offset
  ctx.beginPath()
  ctx.moveTo(x+13*cs+pet(d/2), y+3*cs+pet(d/2))

//  to x+16*cs+pet(d/2), y+9*cs+pet(d/2))
  ctx.stroke()

  } //WAVEY
  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function dig() {
  return ""+randomPick([1,2,3,4,5,6,7,8,9,0])
}
function digital_profileAt (x,y,W,color) { // goedkeuringskrul 
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, WAVEY = true
  let cs = W/24, d = 0, i = 0, maxi = 1
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
 
  /*
  "ip": "173.76.236.213",
  "hostname": "pool-173-76-236-213.bstnma.fios.verizon.net",
  "city": "Mattapoisett",
  "region": "Massachusetts",
  "country": "US",
  "loc": "41.6584,-70.8161",
  "org": "AS701 Verizon Business",
  "postal": "02739",
  "timezone": "America/New_York",
  "readme": "https://ipinfo.io/missingauth"
  */
  funcs = shuffle(copyOf(atList))
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  let p0 = ["Mt. ","", "Ware", "E. ", "W. ", "Nor", "New ", "S. ","N. ", "Water"]
  let p1 = ["ham", " center","brook","field","bridge","wood","isle","land","bay","hurst","burg"," beach","dale", " point"]
  let p2 = ["ham","ton"," neck","ville","shire","town","ford","boro","port","mouth","stock", "sted", "bury"," city"]

  let twn = randomPick(p0)+randomPick(p1)+randomPick(p2)
  ctx.font = (W*0.038)+"pt Courier New"
  ctx.fillText("ip:"+dig()+dig()+dig()+".\u{25AF}\u{25AF}.\u{25AF}\u{25AF}\u{25AF}.\u{25AF}\u{25AF}\u{25AF}", x+0*cs+pet(d/2), y+1*cs+pet(d/2))
  ctx.fillText("city:"+twn.toUpperCase(), x+0*cs+pet(d/2), y+2*cs+pet(d/2))
  ctx.fillText("region:\u{25AF}\u{25AF}\u{25AF}\u{25AF}\u{25AF}", x+0*cs+pet(d/2), y+3*cs+pet(d/2))
  ctx.fillText("country:\u{25AF}\u{25AF}", x+0*cs+pet(d/2), y+4*cs+pet(d/2))
  ctx.fillText("loc:\u{25AF}\u{25AF}.\u{25AF}\u{25AF}\u{25AF}\u{25AF},-\u{25AF}\u{25AF}.\u{25AF}\u{25AF}\u{25AF}\u{25AF}", x+0*cs+pet(d/2), y+5*cs+pet(d/2))

  i = 0
  let v = document.getElementById("featuresize").value
  let top = 20, bump = 2*cs
  for (; i < 24; i++) {
    top = 14+Math.random()*8//randomPick([22, 21, 20,19,18,17, 16, 15, 14])
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
    ctx.strokeStyle = color
    ctx.fillStyle = color
    ctx.beginPath()
    ctx.moveTo(x+0*cs+pet(d/2), y+24*cs+pet(d/2))
    ctx.lineTo(x+0*cs+pet(d), y+top*cs+pet(d))
    ctx.lineTo(x+1*cs+pet(d), y+top*cs+pet(d))
    ctx.lineTo(x+1*cs+pet(d), y+24*cs+pet(d))
    ctx.lineTo(x+0*cs+pet(d/2), y+24*cs+pet(d/2))
    ctx.globalAlpha /= 3
    ctx.fill()
    ctx.globalAlpha *= 3
    ctx.stroke()
    if ((i+3)%5 === 0) {
      ctx.beginPath()
      ctx.moveTo(x+0.5*cs+pet(d/2), y+top*cs+pet(d/2))
      ctx.lineTo(x+0.5*cs+pet(d/2), y+12.5*cs-bump)
      ctx.stroke()
      document.getElementById("featuresize").value = v/2
  console.log(funcs[i])
      window [funcs[i]] (x+0.5*cs-cs*2.5, y+7.5*cs-bump, cs*5, color)
      document.getElementById("featuresize").value = v
      bump = (bump === 0)? 2*cs: 0
    }
    x += cs
  }
  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function müller_hyph_lyer_illusionAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, WAVEY = false
  let cs = W/24, d = 0, i = 0, maxi = 1
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/12
  if (WAVEY) {
    d = cs/2, maxi = 9
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  }
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  for (; i < maxi; i++) { // WAVEY
  //7
  ctx.beginPath()
  ctx.moveTo(x+6*cs+pet(d/2), y+6*cs+pet(d/2))
  ctx.lineTo(x+4*cs+pet(d), y+8*cs+pet(d))
  ctx.lineTo(x+20*cs+pet(d), y+8*cs+pet(d))
  ctx.lineTo(x+18*cs+pet(d/2), y+6*cs+pet(d/2))
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+6*cs+pet(d/2), y+10*cs+pet(d/2))
  ctx.lineTo(x+4*cs+pet(d), y+8*cs+pet(d))
  ctx.lineTo(x+6*cs+pet(d/2), y+6*cs+pet(d/2))
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+18*cs+pet(d/2), y+10*cs+pet(d/2))
  ctx.lineTo(x+20*cs+pet(d), y+8*cs+pet(d))
  ctx.lineTo(x+18*cs+pet(d/2), y+6*cs+pet(d/2))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+4*cs+pet(d/2), y+16*cs+pet(d/2))
  ctx.lineTo(x+20*cs+pet(d/2), y+16*cs+pet(d/2))
  ctx.stroke()

  //3


  //5
  ctx.beginPath()
  ctx.moveTo(x+2*cs+pet(d/2), y+14*cs+pet(d/2))
  ctx.lineTo(x+4*cs+pet(d), y+16*cs+pet(d))
  ctx.lineTo(x+2*cs+pet(d/2), y+18*cs+pet(d/2))
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+22*cs+pet(d/2), y+14*cs+pet(d/2))
  ctx.lineTo(x+20*cs+pet(d), y+16*cs+pet(d))
  ctx.lineTo(x+22*cs+pet(d/2), y+18*cs+pet(d/2))
  ctx.stroke()

  } //WAVEY
  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function scratch_and_sniffAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, WAVEY = false
  let cs = W/24, d = 0, i = 0, maxi = 1
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  if (WAVEY) {
    d = cs/2, maxi = 9
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/150
  }

  let funcs = ["butterAt","mr_coffeeAt", "appleAt", "pooAt", "lemonAt", "cakeAt", "too_expensive_burgerAt", "fishAt"]
  let f = randomPick(funcs)
  console.log(f)
  window [f] (x,y,W,color)


 ctx.shadowBlur = 5
  ctx.shadowColor = "#444444a0"
  ctx.shadowOffsetX = 2
  ctx.shadowOffsetY = 4
  
  ctx.globalAlpha = 1
  ctx.lineWidth *= 1
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
 ctx.beginPath()
  ctx.moveTo(x+6*cs+pet(d/2), y+20*cs+pet(d/2))
  ctx.lineTo(x+18*cs+pet(d), y+20*cs+pet(d))
  ctx.lineTo(x+18*cs+pet(d), y+12*cs+pet(d))
  ctx.lineTo(x+6*cs+pet(d), y+12*cs+pet(d))
  ctx.lineTo(x+6*cs+pet(d/2), y+20*cs+pet(d/2))
  ctx.globalAlpha /= 3
  ctx.fillStyle = color
  ctx.fill()
    ctx.shadowBlur = 0
    ctx.shadowOffsetX = 0
  ctx.shadowOffsetY = 0
    ctx.globalAlpha = 1
  
  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}
function scratch_At (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, WAVEY = true
  let cs = W/24, d = 0, i = 0, maxi = 1
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  if (WAVEY) {
    d = cs*4, maxi = 9
    //ctx.lineWidth = 1 + document.getElementById("featuresize").value/150
  }
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  ctx.globalAlpha = 0.5
  for (; i < maxi; i++) { // WAVEY
  //1
  ctx.beginPath()
  ctx.moveTo(x+3*cs+pet(d/2), y+21*cs+pet(d/2))
  cpx = x+9*cs
  cpy = y+6*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+17*cs+pet(d), y+1*cs+pet(d))
  cpx = x+12*cs
  cpy = y+9*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+9*cs+pet(d), y+22*cs+pet(d))
  cpx = x+12*cs
  cpy = y+13*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+19*cs+pet(d), y+5*cs+pet(d))
  cpx = x+17*cs
  cpy = y+13*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*cs+pet(d), y+22*cs+pet(d))
  cpx = x+19*cs
  cpy = y+14*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+23*cs+pet(d), y+9*cs+pet(d))
  cpx = x+15*cs
  cpy = y+13*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+11*cs+pet(d), y+23*cs+pet(d))
  cpx = x+12*cs
  cpy = y+14*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+13*cs+pet(d), y+1*cs+pet(d))
  cpx = x+8*cs
  cpy = y+10*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+9*cs+pet(d), y+22*cs+pet(d))
  cpx = x+7*cs
  cpy = y+16*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+5*cs+pet(d), y+2*cs+pet(d))
  cpx = x+3*cs
  cpy = y+3*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+3*cs+pet(d), y+19*cs+pet(d))
  cpx = x+4*cs
  cpy = y+10*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+9*cs+pet(d), y+2*cs+pet(d))
  cpx = x+8*cs
  cpy = y+12*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+6*cs+pet(d), y+23*cs+pet(d))
  cpx = x+9*cs
  cpy = y+10*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*cs+pet(d), y+5*cs+pet(d))
  cpx = x+10*cs
  cpy = y+15*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+10*cs+pet(d), y+21*cs+pet(d))
  cpx = x+13*cs
  cpy = y+12*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+15*cs+pet(d), y+5*cs+pet(d))
  cpx = x+15*cs
  cpy = y+11*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+13*cs+pet(d), y+20*cs+pet(d))
  cpx = x+15*cs
  cpy = y+16*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+17*cs+pet(d), y+5*cs+pet(d))
  cpx = x+18*cs
  cpy = y+10*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+17*cs+pet(d), y+18*cs+pet(d))
  cpx = x+18*cs
  cpy = y+11*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*cs+pet(d), y+2*cs+pet(d))
  cpx = x+19*cs
  cpy = y+2*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+21*cs+pet(d/2), y+19*cs+pet(d/2))
  ctx.stroke()

  } //WAVEY
  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function batten_down_the_hatchesAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, WAVEY = false
  let cs = W/24, d = 0, i = 0, maxi = 1
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  if (WAVEY) {
    d = cs/2, maxi = 9
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/150
  }
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "miter"
  x += cs*1.5
  for (; i < maxi; i++) { // WAVEY
  //1
  ctx.beginPath()
  ctx.moveTo(x+0*cs+pet(d/2), y+6*cs+pet(d/2))
  ctx.lineTo(x+16*cs+pet(d), y+6*cs+pet(d))
  ctx.lineTo(x+20*cs+pet(d), y+14*cs+pet(d))
  ctx.lineTo(x+4*cs+pet(d), y+14*cs+pet(d))
  ctx.lineTo(x+0*cs+pet(d/2), y+6*cs+pet(d/2))
  ctx.fillStyle = "#ee0000"
  ctx.fill()
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+0*cs+pet(d/2), y+6*cs+pet(d/2))
  ctx.lineTo(x+0*cs+pet(d), y+16*cs+pet(d))
  ctx.lineTo(x+16*cs+pet(d), y+16*cs+pet(d))
  ctx.lineTo(x+16*cs+pet(d), y+14*cs+pet(d))
  ctx.lineTo(x+4*cs+pet(d), y+14*cs+pet(d))
  ctx.lineTo(x+0*cs+pet(d/2), y+6*cs+pet(d/2))
  ctx.fillStyle = "#fffefe"
  ctx.fill()
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+16*cs+pet(d/2), y+2*cs+pet(d/2))
  cpx = x+20*cs
  cpy = y+2*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+20*cs+pet(d/2), y+9*cs+pet(d/2))
  ctx.strokeStyle = "#000000"
  ctx.lineWidth = cs/3
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+20*cs+pet(d/2), y+10*cs+pet(d/2))
  ctx.lineTo(x+19*cs+pet(d), y+8*cs+pet(d))
  ctx.lineTo(x+21*cs+pet(d), y+8*cs+pet(d))
  ctx.lineTo(x+20*cs+pet(d/2), y+10*cs+pet(d/2))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.fillStyle = "#000000"
  ctx.fill()
 // ctx.stroke()

  } //WAVEY
  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function card_tableAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let cs = W/32
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, d = 0, angle = 180//randomPick([90,180,-90, 0])
  x -= 3*cs

  //2
  ctx.beginPath()
  p = rotatePoint(x+14*cs+pet(d), y+32*cs+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+32*cs+pet(d), y+32*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+32*cs+pet(d), y+14*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+26*cs+pet(d), y+0*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+25*cs+pet(d), y+0*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+31*cs+pet(d), y+14*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+15*cs+pet(d), y+14*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+9*cs+pet(d), y+0*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+8*cs+pet(d), y+0*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+14*cs+pet(d), y+14*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+14*cs+pet(d), y+30*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+14*cs+pet(d), y+30*cs+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+8*cs+pet(d), y+16*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+7*cs+pet(d), y+16*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+14*cs+pet(d), y+32*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.globalAlpha /= 5
  ctx.fill()

  angle = 182
  //2
  ctx.beginPath()
  p = rotatePoint(x+14*cs+pet(d), y+32*cs+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+32*cs+pet(d), y+32*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+32*cs+pet(d), y+14*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+26*cs+pet(d), y+0*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+25*cs+pet(d), y+0*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+31*cs+pet(d), y+14*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+15*cs+pet(d), y+14*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+9*cs+pet(d), y+0*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+8*cs+pet(d), y+0*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+14*cs+pet(d), y+14*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+14*cs+pet(d), y+30*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+14*cs+pet(d), y+30*cs+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+8*cs+pet(d), y+16*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+7*cs+pet(d), y+16*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+14*cs+pet(d), y+32*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.fill()
 
  angle = 178
  //2
  ctx.beginPath()
  p = rotatePoint(x+14*cs+pet(d), y+32*cs+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+32*cs+pet(d), y+32*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+32*cs+pet(d), y+14*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+26*cs+pet(d), y+0*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+25*cs+pet(d), y+0*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+31*cs+pet(d), y+14*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+15*cs+pet(d), y+14*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+9*cs+pet(d), y+0*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+8*cs+pet(d), y+0*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+14*cs+pet(d), y+14*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+14*cs+pet(d), y+30*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+14*cs+pet(d), y+30*cs+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+8*cs+pet(d), y+16*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+7*cs+pet(d), y+16*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+14*cs+pet(d), y+32*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.fill()
  ctx.globalAlpha *= 5
  d = 0
  angle = 180
  ctx.fillStyle = savedF
  //8
  ctx.beginPath()
  p = rotatePoint(x+10*cs+pet(d), y+28*cs+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+28*cs+pet(d), y+28*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+28*cs+pet(d), y+10*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+26*cs+pet(d), y+0*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+25*cs+pet(d), y+0*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+27*cs+pet(d), y+10*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+11*cs+pet(d), y+10*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+9*cs+pet(d), y+0*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+8*cs+pet(d), y+0*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+10*cs+pet(d), y+10*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+10*cs+pet(d), y+25*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+8*cs+pet(d), y+16*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+7*cs+pet(d), y+16*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+10*cs+pet(d), y+28*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.fill()
  ctx.stroke()

  //9
  ctx.beginPath()
  p = rotatePoint(x+28*cs+pet(d), y+10*cs+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+27*cs+pet(d), y+10*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //10
  ctx.beginPath()
  p = rotatePoint(x+11*cs+pet(d), y+10*cs+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+10*cs+pet(d), y+10*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //11
  ctx.beginPath()
  p = rotatePoint(x+10*cs+pet(d), y+25*cs+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+10*cs+pet(d), y+28*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()
  //12
  ctx.beginPath()
  p = rotatePoint(x+12*cs+pet(d), y+12*cs+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+26*cs+pet(d), y+12*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+26*cs+pet(d), y+26*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+12*cs+pet(d), y+26*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+12*cs+pet(d), y+13*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+13*cs+pet(d), y+13*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+13*cs+pet(d), y+25*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+25*cs+pet(d), y+25*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+25*cs+pet(d), y+13*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+12*cs+pet(d), y+13*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+12*cs+pet(d), y+12*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.fillStyle = color
  ctx.fill()

  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function thornAt (x,y,W,color, fillC, a) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "miter"
  let cs = W/32
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, d = 0, angle = a

  //1
  ctx.beginPath()
  p = rotatePoint(x+8*cs+pet(d), y+32*cs+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+16*cs+pet(d), y+0*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+24*cs+pet(d), y+32*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.fillStyle = fillC
  ctx.fill()
  ctx.stroke()

  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function anglexy (cx, cy, ex, ey) {
  var dy = ey - cy;
  var dx = ex - cx;
  var theta = Math.atan2(dy, dx); // range (-PI, PI]
  theta *= 180 / Math.PI; // rads to degs, range (-180, 180]
  //if (theta < 0) theta = 360 + theta; // range [0, 360)
  return theta;
}

function _19th_century_capitalism_themed_cardAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, WAVEY = true
  let cs = W/32, d = 0, i = 0, maxi = 1
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  if (WAVEY) {
    d = cs/2, maxi = 9
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/150
  }
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let x0 = x, xoff = cs*2, j = 0
  for (; i < maxi; i++) { // WAVEY
  //1
  ctx.beginPath()
  ctx.moveTo(x+0*cs+pet(d/2), y+26*cs+pet(d/2))
  cpx = x+0*cs
  cpy = y+28*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+2*cs+pet(d), y+28*cs+pet(d))
  cpx = x+4*cs
  cpy = y+28*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+4*cs+pet(d), y+26*cs+pet(d))
  cpx = x+4*cs
  cpy = y+28*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+6*cs+pet(d), y+28*cs+pet(d))
  cpx = x+8*cs
  cpy = y+28*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*cs+pet(d), y+26*cs+pet(d))
  cpx = x+8*cs
  cpy = y+28*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+10*cs+pet(d), y+28*cs+pet(d))
  cpx = x+12*cs
  cpy = y+28*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*cs+pet(d), y+26*cs+pet(d))
  cpx = x+12*cs
  cpy = y+28*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+14*cs+pet(d), y+28*cs+pet(d))
  cpx = x+16*cs
  cpy = y+28*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*cs+pet(d), y+26*cs+pet(d))
  cpx = x+16*cs
  cpy = y+28*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*cs+pet(d), y+28*cs+pet(d))
  cpx = x+20*cs
  cpy = y+28*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20*cs+pet(d), y+26*cs+pet(d))
  cpx = x+20*cs
  cpy = y+28*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+22*cs+pet(d), y+28*cs+pet(d))
  cpx = x+24*cs
  cpy = y+28*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+24*cs+pet(d), y+26*cs+pet(d))
  cpx = x+24*cs
  cpy = y+28*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+26*cs+pet(d), y+28*cs+pet(d))
  cpx = x+28*cs
  cpy = y+28*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+28*cs+pet(d), y+26*cs+pet(d))
  cpx = x+28*cs
  cpy = y+28*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+30*cs+pet(d), y+28*cs+pet(d))
  cpx = x+32*cs
  cpy = y+28*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+32*cs+pet(d/2), y+26*cs+pet(d/2))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+0*cs+pet(d/2), y+20*cs+pet(d/2))
  ctx.lineTo(x+30*cs+pet(d), y+20*cs+pet(d))
  ctx.lineTo(x+29*cs+pet(d/2), y+28*cs+pet(d/2))
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+0*cs+pet(d/2), y+20*cs+pet(d/2))
  cpx = x+4*cs
  cpy = y+22*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+4*cs+pet(d/2), y+26*cs+pet(d/2))
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+16*cs+pet(d/2), y+20*cs+pet(d/2))
  ctx.lineTo(x+16*cs+pet(d), y+18*cs+pet(d))
  ctx.lineTo(x+11*cs+pet(d/2), y+18*cs+pet(d/2))
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+16*cs+pet(d/2), y+18*cs+pet(d/2))
  ctx.lineTo(x+21*cs+pet(d), y+18*cs+pet(d))
  cpx = x+19*cs
  cpy = y+15*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+21*cs+pet(d), y+12*cs+pet(d))
  cpx = x+11*cs
  cpy = y+12*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+11*cs+pet(d), y+12*cs+pet(d))
  cpx = x+9*cs
  cpy = y+15*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+11*cs+pet(d/2), y+18*cs+pet(d/2))
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+13*cs+pet(d/2), y+11*cs+pet(d/2))
  cpx = x+11*cs
  cpy = y+9*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+13*cs+pet(d), y+7*cs+pet(d))
  cpx = x+19*cs
  cpy = y+7*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+19*cs+pet(d), y+7*cs+pet(d))
  cpx = x+18*cs
  cpy = y+9*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+19*cs+pet(d), y+11*cs+pet(d))
  cpx = x+13*cs
  cpy = y+11*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+13*cs+pet(d/2), y+11*cs+pet(d/2))
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+14*cs+pet(d/2), y+6*cs+pet(d/2))
  cpx = x+13*cs
  cpy = y+4*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+14*cs+pet(d), y+3*cs+pet(d))
  cpx = x+18*cs
  cpy = y+3*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*cs+pet(d), y+3*cs+pet(d))
  cpx = x+17*cs
  cpy = y+4*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*cs+pet(d), y+6*cs+pet(d))
  cpx = x+14*cs
  cpy = y+6*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+14*cs+pet(d/2), y+6*cs+pet(d/2))
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+16*cs+pet(d/2), y+11*cs+pet(d/2))
  ctx.lineTo(x+16*cs+pet(d/2), y+12*cs+pet(d/2))
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+16*cs+pet(d/2), y+6*cs+pet(d/2))
  ctx.lineTo(x+16*cs+pet(d/2), y+7*cs+pet(d/2))
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+16*cs+pet(d/2), y+3*cs+pet(d/2))
  ctx.lineTo(x+16*cs+pet(d), y+0*cs+pet(d))
  cpx = x+18*cs
  cpy = y+1*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20*cs+pet(d), y+1*cs+pet(d))
  cpx = x+17*cs
  cpy = y+1*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+16*cs+pet(d/2), y+2*cs+pet(d/2))
  ctx.stroke()

  //12
  ctx.beginPath()
  ctx.moveTo(x+9*cs+pet(d/2), y+20*cs+pet(d/2))
  ctx.lineTo(x+9*cs+pet(d), y+10*cs+pet(d))
  ctx.lineTo(x+4*cs+pet(d), y+17*cs+pet(d))
  ctx.lineTo(x+9*cs+pet(d/2), y+17*cs+pet(d/2))
  ctx.stroke()

   //48
  ctx.beginPath()
  ctx.moveTo(x+9*cs+pet(d/2), y+10*cs+pet(d/2))
  ctx.lineTo(x+9*cs+pet(d/2), y+8*cs+pet(d/2))
  ctx.stroke()

  //15
  ctx.beginPath()
  ctx.moveTo(x+24*cs+pet(d/2), y+18*cs+pet(d/2))
  cpx = x+22*cs
  cpy = y+18*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+22*cs+pet(d), y+16*cs+pet(d))
  cpx = x+22*cs
  cpy = y+14*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+24*cs+pet(d), y+14*cs+pet(d))
  cpx = x+26*cs
  cpy = y+14*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+26*cs+pet(d), y+16*cs+pet(d))
  cpx = x+26*cs
  cpy = y+18*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+24*cs+pet(d/2), y+18*cs+pet(d/2))
  ctx.stroke()

  //16
  ctx.beginPath()
  ctx.moveTo(x+24*cs+pet(d/2), y+13*cs+pet(d/2))
  ctx.lineTo(x+24*cs+pet(d/2), y+19*cs+pet(d/2))
  ctx.stroke()

  //17
  ctx.beginPath()
  ctx.moveTo(x+21*cs+pet(d/2), y+16*cs+pet(d/2))
  ctx.lineTo(x+27*cs+pet(d/2), y+16*cs+pet(d/2))
  ctx.stroke()

  //18
  ctx.beginPath()
  ctx.moveTo(x+22*cs+pet(d/2), y+14*cs+pet(d/2))
  ctx.lineTo(x+26*cs+pet(d/2), y+18*cs+pet(d/2))
  ctx.stroke()

  //19
  ctx.beginPath()
  ctx.moveTo(x+22*cs+pet(d/2), y+18*cs+pet(d/2))
  ctx.lineTo(x+26*cs+pet(d/2), y+14*cs+pet(d/2))
  ctx.stroke()

  //20
  ctx.beginPath()
  ctx.moveTo(x+23*cs+pet(d/2), y+20*cs+pet(d/2))
  ctx.lineTo(x+23*cs+pet(d), y+19*cs+pet(d))
  ctx.lineTo(x+25*cs+pet(d), y+19*cs+pet(d))
  ctx.lineTo(x+25*cs+pet(d/2), y+20*cs+pet(d/2))
  ctx.stroke()

  //21
  ctx.beginPath()
  ctx.moveTo(x+3*cs+pet(d/2), y+22*cs+pet(d/2))
  ctx.lineTo(x+30*cs+pet(d/2), y+22*cs+pet(d/2))
  ctx.stroke()

  //22
  ctx.beginPath()
  ctx.moveTo(x+4*cs+pet(d/2), y+23*cs+pet(d/2))
  ctx.lineTo(x+29*cs+pet(d/2), y+23*cs+pet(d/2))
  ctx.stroke()

  //23
  ctx.beginPath()
  ctx.moveTo(x+4*cs+pet(d/2), y+24*cs+pet(d/2))
  ctx.lineTo(x+29*cs+pet(d/2), y+24*cs+pet(d/2))
  ctx.stroke()

  //24
  ctx.beginPath()
  ctx.moveTo(x+4*cs+pet(d/2), y+25*cs+pet(d/2))
  ctx.lineTo(x+29*cs+pet(d/2), y+25*cs+pet(d/2))
  ctx.stroke()

  //25
  ctx.beginPath()
  ctx.moveTo(x+4*cs+pet(d/2), y+26*cs+pet(d/2))
  ctx.lineTo(x+29*cs+pet(d/2), y+26*cs+pet(d/2))
  ctx.stroke()

  //26
  ctx.beginPath()
  ctx.moveTo(x+5*cs+pet(d/2), y+27*cs+pet(d/2))
  ctx.lineTo(x+7*cs+pet(d/2), y+27*cs+pet(d/2))
  ctx.stroke()

  //27
  ctx.beginPath()
  ctx.moveTo(x+9*cs+pet(d/2), y+27*cs+pet(d/2))
  ctx.lineTo(x+11*cs+pet(d/2), y+27*cs+pet(d/2))
  ctx.stroke()

  //28
  ctx.beginPath()
  ctx.moveTo(x+13*cs+pet(d/2), y+27*cs+pet(d/2))
  ctx.lineTo(x+15*cs+pet(d/2), y+27*cs+pet(d/2))
  ctx.stroke()

  //29
  ctx.beginPath()
  ctx.moveTo(x+17*cs+pet(d/2), y+27*cs+pet(d/2))
  ctx.lineTo(x+19*cs+pet(d/2), y+27*cs+pet(d/2))
  ctx.stroke()

  //30
  ctx.beginPath()
  ctx.moveTo(x+21*cs+pet(d/2), y+27*cs+pet(d/2))
  ctx.lineTo(x+23*cs+pet(d/2), y+27*cs+pet(d/2))
  ctx.stroke()

  //31
  ctx.beginPath()
  ctx.moveTo(x+25*cs+pet(d/2), y+27*cs+pet(d/2))
  ctx.lineTo(x+27*cs+pet(d/2), y+27*cs+pet(d/2))
  ctx.stroke()

  //32
  ctx.beginPath()
  ctx.moveTo(x+31*cs+pet(d/2), y+19*cs+pet(d/2))
  cpx = x+28*cs
  cpy = y+19*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+28*cs+pet(d), y+19*cs+pet(d))
  cpx = x+27*cs
  cpy = y+19*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+27*cs+pet(d), y+18*cs+pet(d))
  cpx = x+27*cs
  cpy = y+17*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+28*cs+pet(d), y+17*cs+pet(d))
  cpx = x+31*cs
  cpy = y+17*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+31*cs+pet(d), y+17*cs+pet(d))
  cpx = x+32*cs
  cpy = y+18*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+31*cs+pet(d), y+19*cs+pet(d))
  cpx = x+30*cs
  cpy = y+18*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+31*cs+pet(d/2), y+17*cs+pet(d/2))
  ctx.stroke()

  //33
  ctx.beginPath()
  ctx.moveTo(x+27*cs+pet(d/2), y+20*cs+pet(d/2))
  cpx = x+27*cs
  cpy = y+19*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+28*cs+pet(d), y+19*cs+pet(d))
  cpx = x+29*cs
  cpy = y+19*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+29*cs+pet(d/2), y+20*cs+pet(d/2))
  ctx.stroke()

  //42
  ctx.beginPath()
  ctx.moveTo(x+2*cs+pet(d/2), y+20*cs+pet(d/2))
  cpx = x+2*cs
  cpy = y+19*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+3*cs+pet(d), y+19*cs+pet(d))
  cpx = x+4*cs
  cpy = y+19*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+4*cs+pet(d/2), y+20*cs+pet(d/2))
  ctx.stroke()

  //43
  ctx.beginPath()
  ctx.moveTo(x+0*cs+pet(d/2), y+19*cs+pet(d/2))
  cpx = x+3*cs
  cpy = y+19*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+3*cs+pet(d), y+19*cs+pet(d))
  cpx = x+4*cs
  cpy = y+19*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+4*cs+pet(d), y+18*cs+pet(d))
  cpx = x+4*cs
  cpy = y+17*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+3*cs+pet(d), y+17*cs+pet(d))
  cpx = x+0*cs
  cpy = y+17*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+0*cs+pet(d), y+17*cs+pet(d))
  cpx = x+-1*cs
  cpy = y+18*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+0*cs+pet(d), y+19*cs+pet(d))
  cpx = x+1*cs
  cpy = y+18*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+0*cs+pet(d/2), y+17*cs+pet(d/2))
  ctx.stroke()

  //44
  ctx.beginPath()
  ctx.moveTo(x+9*cs+pet(d/2), y+11*cs+pet(d/2))
  cpx = x+11*cs
  cpy = y+11*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+11*cs+pet(d), y+11*cs+pet(d))
  cpx = x+10*cs
  cpy = y+10*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+11*cs+pet(d), y+9*cs+pet(d))
  cpx = x+9*cs
  cpy = y+9*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+9*cs+pet(d/2), y+9*cs+pet(d/2))
  ctx.stroke()
  
  //45
  ctx.beginPath()
  ctx.moveTo(x+0*cs+pet(d/2), y+30*cs+pet(d/2))
  cpx = x+2*cs
  cpy = y+30*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+2*cs+pet(d), y+28*cs+pet(d))
  cpx = x+2*cs
  cpy = y+30*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+4*cs+pet(d), y+30*cs+pet(d))
  cpx = x+6*cs
  cpy = y+30*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+6*cs+pet(d), y+28*cs+pet(d))
  cpx = x+6*cs
  cpy = y+30*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*cs+pet(d), y+30*cs+pet(d))
  cpx = x+10*cs
  cpy = y+30*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+10*cs+pet(d), y+28*cs+pet(d))
  cpx = x+10*cs
  cpy = y+30*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*cs+pet(d), y+30*cs+pet(d))
  cpx = x+14*cs
  cpy = y+30*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+14*cs+pet(d), y+28*cs+pet(d))
  cpx = x+14*cs
  cpy = y+30*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*cs+pet(d), y+30*cs+pet(d))
  cpx = x+18*cs
  cpy = y+30*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*cs+pet(d), y+28*cs+pet(d))
  cpx = x+18*cs
  cpy = y+30*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20*cs+pet(d), y+30*cs+pet(d))
  cpx = x+22*cs
  cpy = y+30*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+22*cs+pet(d), y+28*cs+pet(d))
  cpx = x+22*cs
  cpy = y+30*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+24*cs+pet(d), y+30*cs+pet(d))
  cpx = x+26*cs
  cpy = y+30*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+26*cs+pet(d), y+28*cs+pet(d))
  cpx = x+26*cs
  cpy = y+30*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+28*cs+pet(d), y+30*cs+pet(d))
  cpx = x+30*cs
  cpy = y+30*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+30*cs+pet(d), y+28*cs+pet(d))
  cpx = x+30*cs
  cpy = y+30*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+32*cs+pet(d/2), y+30*cs+pet(d/2))
  ctx.stroke()

  //46
  ctx.beginPath()
  ctx.moveTo(x+0*cs+pet(d/2), y+30*cs+pet(d/2))
  cpx = x+0*cs
  cpy = y+32*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+2*cs+pet(d), y+32*cs+pet(d))
  cpx = x+4*cs
  cpy = y+32*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+4*cs+pet(d), y+30*cs+pet(d))
  cpx = x+4*cs
  cpy = y+32*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+6*cs+pet(d), y+32*cs+pet(d))
  cpx = x+8*cs
  cpy = y+32*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*cs+pet(d), y+30*cs+pet(d))
  cpx = x+8*cs
  cpy = y+32*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+10*cs+pet(d), y+32*cs+pet(d))
  cpx = x+12*cs
  cpy = y+32*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*cs+pet(d), y+30*cs+pet(d))
  cpx = x+12*cs
  cpy = y+32*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+14*cs+pet(d), y+32*cs+pet(d))
  cpx = x+16*cs
  cpy = y+32*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*cs+pet(d), y+30*cs+pet(d))
  cpx = x+16*cs
  cpy = y+32*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*cs+pet(d), y+32*cs+pet(d))
  cpx = x+20*cs
  cpy = y+32*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20*cs+pet(d), y+30*cs+pet(d))
  cpx = x+20*cs
  cpy = y+32*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+22*cs+pet(d), y+32*cs+pet(d))
  cpx = x+24*cs
  cpy = y+32*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+24*cs+pet(d), y+30*cs+pet(d))
  cpx = x+24*cs
  cpy = y+32*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+26*cs+pet(d), y+32*cs+pet(d))
  cpx = x+28*cs
  cpy = y+32*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+28*cs+pet(d), y+30*cs+pet(d))
  cpx = x+28*cs
  cpy = y+32*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+30*cs+pet(d), y+32*cs+pet(d))
  cpx = x+32*cs
  cpy = y+32*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+32*cs+pet(d/2), y+30*cs+pet(d/2))
  ctx.stroke()
  //37
  j = 0
  for (; j < 13; j++) {
    ctx.beginPath()
    ctx.arc(x+4*cs+pet(d/2)+xoff*j, y+21*cs+pet(d/2), d/2+pet(d/3), 0, 2*Math.PI)
    ctx.stroke()
  }
  x = x0
  } //WAVEY
  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function pamphletAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, WAVEY = false
  let cs = W/32, d = 0, i = 0, maxi = 1
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  if (WAVEY) {
    d = cs/2, maxi = 9
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/150
  }
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  for (; i < maxi; i++) { // WAVEY
  //1
  ctx.beginPath()
  ctx.moveTo(x+2*cs+pet(d/2), y+30*cs+pet(d/2))
  cpx = x+6*cs
  cpy = y+29*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+10*cs+pet(d), y+30*cs+pet(d))
  cpx = x+14*cs
  cpy = y+31*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*cs+pet(d), y+30*cs+pet(d))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+2*cs+pet(d/2), y+30*cs+pet(d/2))
  cpx = x+4*cs
  cpy = y+2*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+4*cs+pet(d), y+2*cs+pet(d))
  cpx = x+8*cs
  cpy = y+1*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*cs+pet(d), y+2*cs+pet(d))
  cpx = x+16*cs
  cpy = y+3*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+20*cs+pet(d/2), y+2*cs+pet(d/2))
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+2*cs+pet(d/2), y+30*cs+pet(d/2))
  cpx = x+2*cs
  cpy = y+31*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+2*cs+pet(d), y+31*cs+pet(d))
  cpx = x+6*cs
  cpy = y+30*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+10*cs+pet(d), y+31*cs+pet(d))
  cpx = x+14*cs
  cpy = y+32*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+18*cs+pet(d/2), y+31*cs+pet(d/2))
  ctx.stroke()

   //13
  ctx.beginPath()
  ctx.moveTo(x+19*cs+pet(d/2), y+20*cs+pet(d/2))
  ctx.lineTo(x+18*cs+pet(d/2), y+30*cs+pet(d/2))
  ctx.stroke()

  //14
  ctx.beginPath()
  ctx.moveTo(x+20*cs+pet(d/2), y+2*cs+pet(d/2))
  ctx.lineTo(x+19*cs+pet(d/2), y+14*cs+pet(d/2))
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+19*cs+pet(d/2), y+14*cs+pet(d/2))
  cpx = x+17*cs
  cpy = y+13*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+17*cs+pet(d), y+13*cs+pet(d))
  cpx = x+15*cs
  cpy = y+12*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+14*cs+pet(d), y+14*cs+pet(d))
  cpx = x+14*cs
  cpy = y+16*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*cs+pet(d), y+17*cs+pet(d))
  cpx = x+18*cs
  cpy = y+19*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+19*cs+pet(d), y+21*cs+pet(d))
  cpx = x+21*cs
  cpy = y+24*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+23*cs+pet(d/2), y+25*cs+pet(d/2))
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+19*cs+pet(d/2), y+14*cs+pet(d/2))
  cpx = x+21*cs
  cpy = y+15*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+22*cs+pet(d/2), y+16*cs+pet(d/2))
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+18*cs+pet(d/2), y+28*cs+pet(d/2))
  cpx = x+21*cs
  cpy = y+31*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+24*cs+pet(d), y+31*cs+pet(d))
  cpx = x+28*cs
  cpy = y+31*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+30*cs+pet(d/2), y+32*cs+pet(d/2))
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+20*cs+pet(d/2), y+5*cs+pet(d/2))
  cpx = x+26*cs
  cpy = y+8*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+30*cs+pet(d), y+12*cs+pet(d))
  cpx = x+31*cs
  cpy = y+15*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+32*cs+pet(d/2), y+16*cs+pet(d/2))
  ctx.stroke()
    ctx.font = "800 italic "+(W*0.07)+"pt Garamond"
  //9

  ctx.fillText("Have You",x+6*cs+pet(d/2), y+5*cs+pet(d/2))

  ctx.fillText("Been Saved",x+5*cs+pet(d/2), y+9*cs+pet(d/2))

  ctx.fillText("Much?",x+5*cs+pet(d/2), y+13*cs+pet(d/2))


  //12
  ctx.beginPath()
  ctx.moveTo(x+8*cs+pet(d/2), y+28*cs+pet(d/2))
  ctx.lineTo(x+10*cs+pet(d), y+28*cs+pet(d))
  ctx.lineTo(x+10*cs+pet(d), y+23*cs+pet(d))
  ctx.lineTo(x+13*cs+pet(d), y+23*cs+pet(d))
  ctx.lineTo(x+13*cs+pet(d), y+21*cs+pet(d))
  ctx.lineTo(x+10*cs+pet(d), y+21*cs+pet(d))
  ctx.lineTo(x+10*cs+pet(d), y+18*cs+pet(d))
  ctx.lineTo(x+8*cs+pet(d), y+18*cs+pet(d))
  ctx.lineTo(x+8*cs+pet(d), y+21*cs+pet(d))
  ctx.lineTo(x+5*cs+pet(d), y+21*cs+pet(d))
  ctx.lineTo(x+5*cs+pet(d), y+23*cs+pet(d))
  ctx.lineTo(x+8*cs+pet(d), y+23*cs+pet(d))
  ctx.lineTo(x+8*cs+pet(d/2), y+28*cs+pet(d/2))
  ctx.stroke()

  } //WAVEY
  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function datura_stramoniumAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, WAVEY = true
  let cs = W/32, d = 0, i = 0, maxi = 1
  let x0 = x, y0 = y, cx = x+W/2, cy = y+H/2+cs*2
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  if (WAVEY) {
    d = cs, maxi = 13
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/150
  }
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let y00 = y
  for (; i < maxi; i++) { // WAVEY
    x = x0, y = y00
    ctx.beginPath()
    ctx.moveTo(x+16*cs+pet(d/2), y+2*cs+pet(d/2))
    cpx = x+26*cs
    cpy = y+2*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+26*cs+pet(d), y+22*cs+pet(d))
    cpx = x+26*cs
    cpy = y+28*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20*cs+pet(d), y+28*cs+pet(d))
    cpx = x+12*cs
    cpy = y+28*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*cs+pet(d), y+28*cs+pet(d))
    cpx = x+6*cs
    cpy = y+28*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+6*cs+pet(d), y+22*cs+pet(d))
    cpx = x+6*cs
    cpy = y+2*cs
    ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+16*cs+pet(d/2), y+2*cs+pet(d/2))
    ctx.stroke()

    //2
    ctx.beginPath()
    ctx.moveTo(x+12*cs+pet(d/2), y+28*cs+pet(d/2))
    cpx = x+11*cs
    cpy = y+28*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+11*cs+pet(d), y+30*cs+pet(d))
    cpx = x+21*cs
    cpy = y+30*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+21*cs+pet(d), y+30*cs+pet(d))
    cpx = x+21*cs
    cpy = y+28*cs
    ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+20*cs+pet(d/2), y+28*cs+pet(d/2))
    ctx.stroke()

    //3
    ctx.beginPath()
    ctx.moveTo(x+14*cs+pet(d/2), y+32*cs+pet(d/2))
    ctx.lineTo(x+14*cs+pet(d/2), y+30*cs+pet(d/2))
    ctx.stroke()

    //4
    ctx.beginPath()
    ctx.moveTo(x+18*cs+pet(d/2), y+32*cs+pet(d/2))
    ctx.lineTo(x+18*cs+pet(d/2), y+30*cs+pet(d/2))
    ctx.stroke()
  }
  let angle = 0
  let j = 0
  let xoff = 0
  i = 0
  for (; i < 4; i++) {
    y=y00, y0=y00
    j = 0
    d /= 2
    for (; j < 9; j++) {
      xoff = j*cs/3
      if (j > 7)
        xoff /= 4
      x = x0+7*cs+pet(d)-xoff, y = y0+3*cs+pet(d)
      angle = anglexy(cx,cy, x, y)
      thornAt (x,y,cs*3,color, savedF, angle-270)

      x = x0+10*cs+pet(d)-xoff, y = y0+1*cs+pet(d)
      angle = anglexy(cx,cy, x, y)
      thornAt (x,y,cs*3,color, savedF, angle-270)

      x = x0+13*cs+pet(d)-xoff, y = y0+1*cs+pet(d)
      angle = anglexy(cx,cy, x, y)
      thornAt (x,y,cs*3,color, savedF, angle-270)

      x = x0+16*cs+pet(d)+xoff, y = y0+1*cs+pet(d)
      angle = anglexy(cx,cy, x, y)
      thornAt (x,y,cs*3,color, savedF, angle-270)

      x = x0+19*cs+pet(d)+xoff, y = y0+1*cs+pet(d)
      angle = anglexy(cx,cy, x, y)
      thornAt (x,y,cs*3,color, savedF, angle-270)

      x = x0+22*cs+pet(d)+xoff, y = y0+3*cs+pet(d)
      angle = anglexy(cx,cy, x, y)
      thornAt (x,y,cs*3,color, savedF, angle-270)
      y0 += cs*3
    }
  }
  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function goedkeuringskrulAt (x,y,W,color) { // goedkeuringskrul 
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, WAVEY = true
  let cs = W/32, d = 0, i = 0, maxi = 1
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  if (WAVEY) {
    d = cs/1.1, maxi = 19
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/150
  }
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  for (; i < maxi; i++) { // WAVEY
  //1
  ctx.beginPath()
  ctx.moveTo(x+0*cs+pet(d/2), y+22*cs+pet(d/2))
  cpx = x+8*cs
  cpy = y+14*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+13*cs+pet(d), y+8*cs+pet(d))
  cpx = x+19*cs
  cpy = y+1*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+14*cs+pet(d/1.5), y+0*cs+pet(d/1.5))
  cpx = x+11*cs
  cpy = y+0*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*cs+pet(d/1.5), y+5*cs+pet(d/1.5))
  cpx = x+3*cs
  cpy = y+12*cs
  ctx.quadraticCurveTo(cpx+pet(d*1.5), cpy+pet(d*1.7), x+8*cs+pet(d), y+14*cs+pet(d))
  cpx = x+16*cs
  cpy = y+16*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*cs+pet(d), y+22*cs+pet(d))
  cpx = x+6*cs
  cpy = y+31*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+9*cs+pet(d), y+32*cs+pet(d))
  cpx = x+20*cs
  cpy = y+30*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+31*cs+pet(d/2), y+12*cs+pet(d/2))
  ctx.stroke()

  } //WAVEY
  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}
function stochastic_parrotAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, WAVEY = false
  let cs = W/24, d = 0, i = 0, maxi = 1
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  if (WAVEY) {
    d = cs/2, maxi = 9
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/150
  }
ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let face = "sans serif"
  ctx.font = "800 "+(W/18)+"pt " + face
  ctx.fillText("STOCHASTIC PARROT SAYS:",x, y+23*cs)
  

  // let saying = getSaying(d1,d2) // mnenomic "teacher" 1,1 = 1, 1,2 = 1, ... 6,6 = 36
  for (; i < maxi; i++) { // WAVEY
  //1
  ctx.beginPath()
  ctx.moveTo(x+2*cs+pet(d/2), y+20*cs+pet(d/2))
  cpx = x+4*cs
  cpy = y+16*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+5*cs+pet(d), y+8*cs+pet(d))
  cpx = x+6*cs
  cpy = y+2*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+13*cs+pet(d), y+2*cs+pet(d))
  cpx = x+20*cs
  cpy = y+2*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+20*cs+pet(d/2), y+8*cs+pet(d/2))
  ctx.stroke()
  
  //3
  ctx.beginPath()
  ctx.moveTo(x+18*cs+pet(d/2), y+10*cs+pet(d/2))
  cpx = x+17*cs
  cpy = y+12*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*cs+pet(d), y+13*cs+pet(d))
  cpx = x+18*cs
  cpy = y+14*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+21*cs+pet(d), y+13*cs+pet(d))
  cpx = x+21*cs
  cpy = y+12*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20*cs+pet(d), y+12*cs+pet(d))
  cpx = x+18*cs
  cpy = y+12*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+18*cs+pet(d/2), y+10*cs+pet(d/2))
  ctx.globalAlpha = 0.3
  ctx.fill()
  ctx.globalAlpha = 1
  ctx.stroke()
  //2
  ctx.beginPath()
  ctx.moveTo(x+21*cs+pet(d/2), y+15*cs+pet(d/2))
  cpx = x+22*cs
  cpy = y+14*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+22*cs+pet(d), y+11*cs+pet(d))
  cpx = x+22*cs
  cpy = y+8*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20*cs+pet(d), y+8*cs+pet(d))
  cpx = x+18*cs
  cpy = y+8*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*cs+pet(d), y+10*cs+pet(d))
  cpx = x+18*cs
  cpy = y+12*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20*cs+pet(d), y+12*cs+pet(d))
  cpx = x+21*cs
  cpy = y+12*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+21*cs+pet(d/2), y+15*cs+pet(d/2))
  ctx.fillStyle = savedF
  ctx.fill()
  ctx.globalAlpha = 0.3
  ctx.fillStyle = color
  ctx.fill()
  ctx.globalAlpha = 1
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.arc(x+18*cs+pet(d/2), y+7*cs+pet(d/2), cs/2, 0, 2*Math.PI)
  ctx.fill()

  //5
  ctx.beginPath()
  ctx.arc(x+13*cs+pet(d/2), y+7*cs+pet(d/2), cs, 0, 2*Math.PI)
  ctx.fill()

  ctx.beginPath()
  ctx.arc(x+13*cs+pet(d/2), y+7*cs+pet(d/2), cs*1.5, 0, 2*Math.PI)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+16*cs+pet(d/2), y+13*cs+pet(d/2))
  cpx = x+18*cs
  cpy = y+18*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+18*cs+pet(d/2), y+19*cs+pet(d/2))
  ctx.stroke()

  }
  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function trompe_l_apos_oeilAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "round"
  ctx.lineJoin = "bevel"
  let cs = W/24
  y += W/3
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, d = 0, angle = 15

  ctx.beginPath()
  p = rotatePoint(x+4*cs+pet(d), y+22*cs+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+4*cs+pet(d), y+0*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+20*cs+pet(d), y+0*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  cpx = x+20*cs+pet(d)
  cpy = y+16*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+19.5*cs+pet(d), y+22*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  p = rotatePoint(x+4*cs+pet(d), y+22*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.fillStyle = "#fef6eeff"
  ctx.shadowBlur = 12
  ctx.shadowColor = "#44444450"
  ctx.shadowOffsetX = 2
  ctx.shadowOffsetY = 2
  ctx.fill()
  ctx.shadowBlur = 0
  ctx.shadowOffsetX = 0
  ctx.shadowOffsetY = 0
  //2
  ctx.beginPath()
  p = rotatePoint(x+7*cs+pet(d), y+0*cs+pet(d)+2 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+7*cs+pet(d), y+22*cs+pet(d)-2 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.strokeStyle = "#ee0000"
  ctx.stroke()
  ctx.strokeStyle = "#0067eeee"
  let i = 0, xoff = W/24
  for (; i < 12; i++) {
    ctx.beginPath()
    p = rotatePoint(x+8*cs+pet(d)+i*xoff, y+0*cs+pet(d)+2 ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    cpx = x+8*cs+pet(d)+i*xoff
    cpy = y+16*cs+pet(d)
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+8*cs+pet(d)+i*xoff, y+22*cs+pet(d)-2,cx,cy,angle)
    if (i > 3)
      p = rotatePoint(x+8*cs+pet(d)+i*xoff-i/2, y+22*cs+pet(d)-2,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    ctx.stroke()
  }
  //3
  ctx.beginPath()
  p = rotatePoint(x+4*cs+pet(d), y+22*cs+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+19.5*cs+pet(d), y+22*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  cpx = x+20*cs+pet(d)
  cpy = y+16*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+20*cs+pet(d), y+6*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  p = rotatePoint(x+20*cs+pet(d), y+1*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+21*cs+pet(d), y+2*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  cpx = x+21*cs+pet(d)
  cpy = y+12*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+22*cs+pet(d), y+24*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+12*cs+pet(d)
  cpy = y+23*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+4*cs+pet(d), y+22*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fillStyle = "#33333312"
  ctx.fill()

  //3
  ctx.beginPath()
  p = rotatePoint(x+4*cs+pet(d), y+22*cs+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+19.5*cs+pet(d), y+22*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  cpx = x+20*cs+pet(d)
  cpy = y+16*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+20*cs+pet(d), y+7*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  p = rotatePoint(x+20*cs+pet(d), y+1*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+20.5*cs+pet(d), y+2*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  cpx = x+20.4*cs+pet(d)
  cpy = y+12*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+21*cs+pet(d), y+23*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+12*cs+pet(d)
  cpy = y+23*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+4*cs+pet(d), y+22*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fillStyle = "#33333320"
  ctx.fill()

  ctx.closePath()
  p = rotatePoint(x+5*cs+pet(d), y+0*cs+pet(d),cx,cy,angle)
  let w = W*0.18
  tapeFill(p[0],p[1],0, w, "#488fdbaa")
  ctx.beginPath()
  p = rotatePoint(x+16*cs+pet(d), y+22*cs+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+20*cs+pet(d)
  cpy = y+22*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+19.5*cs+pet(d), y+22*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+20*cs+pet(d)
  cpy = y+16*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+20*cs+pet(d), y+6*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+19*cs+pet(d)
  cpy = y+15*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+16*cs+pet(d), y+22*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fillStyle = "#ffffff60"
  ctx.fill()
  p = rotatePoint(x+6*cs+pet(d), y+7*cs+pet(d) ,cx,cy,angle)

  i = 0, d = cs/2, x-=cs*2, y+=cs*2
  ctx.lineWidth = 2
  ctx.strokeStyle = "#101098dd"
  for (; i < 3; i++) { // WAVEY 
    
  //1
  ctx.beginPath()
  ctx.moveTo(x+14*cs+pet(d/2), y+16*cs+pet(d/2))
  cpx = x+18*cs
  cpy = y+16*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*cs+pet(d), y+12*cs+pet(d))
  cpx = x+18*cs
  cpy = y+8*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+14*cs+pet(d), y+8*cs+pet(d))
  cpx = x+10*cs
  cpy = y+8*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+10*cs+pet(d), y+12*cs+pet(d))
  cpx = x+10*cs
  cpy = y+16*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+14*cs+pet(d/2), y+16*cs+pet(d/2))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+10*cs+pet(d/2), y+11*cs+pet(d/2))
  cpx = x+11*cs
  cpy = y+14*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+13*cs+pet(d/2), y+15*cs+pet(d/2))
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+10*cs+pet(d/2), y+10*cs+pet(d/2))
  cpx = x+11*cs
  cpy = y+13*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+14*cs+pet(d/2), y+14*cs+pet(d/2))
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+11*cs+pet(d/2), y+9*cs+pet(d/2))
  cpx = x+11*cs
  cpy = y+11*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+13*cs+pet(d/2), y+12*cs+pet(d/2))
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+12*cs+pet(d/2), y+8*cs+pet(d/2))
  cpx = x+12*cs
  cpy = y+10*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+13*cs+pet(d/2), y+10*cs+pet(d/2))
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+13*cs+pet(d/2), y+8*cs+pet(d/2))
  cpx = x+13*cs
  cpy = y+9*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+14*cs+pet(d/2), y+9*cs+pet(d/2))
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+10*cs+pet(d/2), y+13*cs+pet(d/2))
  cpx = x+11*cs
  cpy = y+15*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+13*cs+pet(d/2), y+16*cs+pet(d/2))
  ctx.stroke()
  } //WAVEY
  y -= cs*2
  glasssphereAt(x+cs*12, y+cs*2, cs*3, color)
  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function evAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, WAVEY = true
  let cs = W/32, d = 0, i = 0, maxi = 1
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/150
  if (WAVEY) {
    d = cs/2, maxi = 11
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/100
  }
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  for (; i < maxi; i++) { // WAVEY
  //1
  ctx.beginPath()
  ctx.moveTo(x+7*cs+pet(d/2), y+19*cs+pet(d/2))
  ctx.lineTo(x+4*cs+pet(d), y+19*cs+pet(d))
  cpx = x+2*cs
  cpy = y+19*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+2*cs+pet(d), y+18*cs+pet(d))
  cpx = x+2*cs
  cpy = y+17*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+3*cs+pet(d), y+17*cs+pet(d))
  cpx = x+3*cs
  cpy = y+15*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+3*cs+pet(d), y+15*cs+pet(d))
  cpx = x+3*cs
  cpy = y+13*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+9*cs+pet(d), y+13*cs+pet(d))
  cpx = x+13*cs
  cpy = y+10*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+13*cs+pet(d), y+10*cs+pet(d))
  cpx = x+16*cs
  cpy = y+9*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20*cs+pet(d), y+9.8*cs+pet(d))
  cpx = x+26*cs
  cpy = y+10*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+23*cs+pet(d), y+18*cs+pet(d))
  cpx = x+23*cs
  cpy = y+20*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+24*cs+pet(d), y+20*cs+pet(d))
  cpx = x+25*cs
  cpy = y+20*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+26*cs+pet(d/2), y+18.7*cs+pet(d/2))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+11*cs+pet(d/2), y+19*cs+pet(d/2))
  cpx = x+14*cs
  cpy = y+19*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*cs+pet(d/2), y+19*cs+pet(d/2))
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+9*cs+pet(d/2), y+21*cs+pet(d/2))
  cpx = x+11*cs
  cpy = y+21*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+11*cs+pet(d), y+19*cs+pet(d))
  cpx = x+11*cs
  cpy = y+17*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+9*cs+pet(d), y+17*cs+pet(d))
  cpx = x+7*cs
  cpy = y+17*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+7*cs+pet(d), y+19*cs+pet(d))
  cpx = x+7*cs
  cpy = y+21*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+9*cs+pet(d/2), y+21*cs+pet(d/2))
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+16*cs+pet(d/2), y+19*cs+pet(d/2))
  cpx = x+16*cs
  cpy = y+21*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*cs+pet(d), y+21*cs+pet(d))
  cpx = x+20*cs
  cpy = y+21*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20*cs+pet(d), y+19*cs+pet(d))
  cpx = x+20*cs
  cpy = y+17*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*cs+pet(d), y+17*cs+pet(d))
  cpx = x+16*cs
  cpy = y+17*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+16*cs+pet(d/2), y+19*cs+pet(d/2))
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+30*cs+pet(d/2), y+14*cs+pet(d/2))
  ctx.lineTo(x+28.3*cs+pet(d/2), y+15.7*cs+pet(d/2))
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+31*cs+pet(d/2), y+15*cs+pet(d/2))
  ctx.lineTo(x+29.2*cs+pet(d/2), y+16.8*cs+pet(d/2))
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+26*cs+pet(d/2), y+18*cs+pet(d/2))
  cpx = x+26*cs
  cpy = y+16*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+27.5*cs+pet(d), y+15.5*cs+pet(d))
  cpx = x+28*cs
  cpy = y+15*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+29.5*cs+pet(d), y+17*cs+pet(d))
  cpx = x+29*cs
  cpy = y+19*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+27*cs+pet(d), y+19*cs+pet(d))
  cpx = x+26*cs
  cpy = y+19*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+26*cs+pet(d/2), y+18*cs+pet(d/2))
  ctx.stroke()

  } //WAVEY
  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function knot2At (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = W/64
  let cs = W/32, i = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/150
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  for (; i < 9; i++) {
  ctx.beginPath()
  ctx.moveTo(x+12*cs+pet(d), y+10*cs+pet(d))
  cpx = x+6*cs
  cpy = y+11*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+5*cs+pet(d), y+20*cs+pet(d))
  cpx = x+5*cs
  cpy = y+23*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+6*cs+pet(d), y+24*cs+pet(d))
  cpx = x+16*cs
  cpy = y+32*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*cs+pet(d), y+32*cs+pet(d))
  cpx = x+18*cs
  cpy = y+32*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*cs+pet(d), y+30*cs+pet(d))
  cpx = x+16*cs
  cpy = y+28*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+13*cs+pet(d), y+26*cs+pet(d))
  cpx = x+10*cs
  cpy = y+22*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8.5*cs+pet(d), y+21.5*cs+pet(d))
  cpx = x+10*cs
  cpy = y+19*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+11*cs+pet(d/2), y+15*cs+pet(d/2))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+12*cs+pet(d), y+10*cs+pet(d))
  cpx = x+14*cs
  cpy = y+10*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+14*cs+pet(d), y+9*cs+pet(d))
  cpx = x+12*cs
  cpy = y+6*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*cs+pet(d), y+4*cs+pet(d))
  cpx = x+12*cs
  cpy = y+0*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*cs+pet(d), y+0*cs+pet(d))
  cpx = x+20*cs
  cpy = y+0*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20*cs+pet(d), y+4*cs+pet(d))
  cpx = x+20*cs
  cpy = y+8*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*cs+pet(d), y+9*cs+pet(d))
  cpx = x+18*cs
  cpy = y+10*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20*cs+pet(d), y+10*cs+pet(d))
  cpx = x+27*cs
  cpy = y+12*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+27*cs+pet(d), y+22*cs+pet(d))
  cpx = x+25*cs
  cpy = y+27*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*cs+pet(d/2), y+30*cs+pet(d/2))
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+16.5*cs+pet(d), y+28.5*cs+pet(d))
  cpx = x+23.5*cs
  cpy = y+21.0*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+24*cs+pet(d), y+21.5*cs+pet(d))
  cpx = x+22*cs
  cpy = y+18*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+21*cs+pet(d/2), y+15*cs+pet(d/2))
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+16*cs+pet(d/2), y+30*cs+pet(d/2))
  ctx.lineTo(x+7*cs+pet(d),  y+22*cs+pet(d))
  ctx.lineTo(x+10*cs+pet(d), y+13*cs+pet(d))
  ctx.lineTo(x+22*cs+pet(d), y+13*cs+pet(d))
  ctx.lineTo(x+26*cs+pet(d), y+22*cs+pet(d))
  ctx.lineTo(x+18*cs+pet(d/2), y+29*cs+pet(d/2))
  ctx.stroke()

  one_fiveAt("3", x+15*cs, y+10*cs, cs*2, color)
  one_fiveAt("4", x+7*cs, y+15*cs, cs*2, color)
  one_fiveAt("2", x+24*cs, y+15*cs, cs*2, color)
  one_fiveAt("5", x+9*cs, y+24*cs, cs*2, color)
  one_fiveAt("1", x+22*cs, y+24*cs, cs*2, color)

  // fill at each point above
  ctx.fillStyle = color
  ctx.beginPath()
  ctx.arc(x+16*cs+pet(d), y+30*cs+pet(d), cs/3, 0, 2*Math.PI)
  ctx.fill()
  ctx.beginPath()
  ctx.arc(x+7*cs+pet(d), y+22*cs+pet(d), cs/3, 0, 2*Math.PI)
  ctx.fill()
  ctx.beginPath()
  ctx.arc(x+10*cs+pet(d), y+13*cs+pet(d), cs/3, 0, 2*Math.PI)
  ctx.fill()
  ctx.beginPath()
  ctx.arc(x+22*cs+pet(d), y+13*cs+pet(d), cs/3, 0, 2*Math.PI)
  ctx.fill()
  ctx.beginPath()
  ctx.arc(x+26*cs+pet(d), y+22*cs+pet(d), cs/3, 0, 2*Math.PI)
  ctx.fill()
  ctx.beginPath()
  ctx.arc(x+18*cs+pet(d), y+29*cs+pet(d), cs/3, 0, 2*Math.PI)
  ctx.fill()
  }
  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}
function  knot_theoryAt (x,y,W,color,INVERT) {
  if (INVERT)
    knotAt (x,y,W,color)
  else
    knot2At (x,y,W,color)
}

function knotAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = W/64
  let cs = W/32, i = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/150
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  for (; i < 6; i++) {
  ctx.beginPath()
  ctx.moveTo(x+14.5*cs+pet(d/2), y+21.5*cs+pet(d/2))
  ctx.lineTo(x+10*cs+pet(d), y+14*cs+pet(d))
  ctx.lineTo(x+22*cs+pet(d), y+14*cs+pet(d))
  ctx.lineTo(x+13*cs+pet(d), y+28*cs+pet(d))
  ctx.lineTo(x+16*cs+pet(d/2), y+30*cs+pet(d/2))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+17*cs+pet(d/2), y+30*cs+pet(d/2))
  ctx.lineTo(x+19*cs+pet(d), y+28*cs+pet(d))
  ctx.lineTo(x+17*cs+pet(d/2), y+25*cs+pet(d/2))
  ctx.stroke()

  //1
  ctx.beginPath()
  ctx.moveTo(x+13.5*cs+pet(d/2), y+23.5*cs+pet(d/2))
  cpx = x+9*cs
  cpy = y+18*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*cs+pet(d), y+13*cs+pet(d))
  cpx = x+8*cs
  cpy = y+11*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+11*cs+pet(d), y+11*cs+pet(d))
  cpx = x+14*cs
  cpy = y+11*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+14*cs+pet(d), y+9*cs+pet(d))
  cpx = x+12*cs
  cpy = y+7*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*cs+pet(d), y+3*cs+pet(d))
  cpx = x+12*cs
  cpy = y+0*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*cs+pet(d), y+0*cs+pet(d))
  cpx = x+20*cs
  cpy = y+0*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20*cs+pet(d), y+3*cs+pet(d))
  cpx = x+20*cs
  cpy = y+7*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*cs+pet(d), y+9*cs+pet(d))
  cpx = x+18*cs
  cpy = y+11*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+21*cs+pet(d), y+11*cs+pet(d))
  cpx = x+24*cs
  cpy = y+11*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+24*cs+pet(d), y+13*cs+pet(d))
  cpx = x+23*cs
  cpy = y+18*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+15*cs+pet(d), y+27*cs+pet(d))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+19*cs+pet(d/2), y+16*cs+pet(d/2))
  cpx = x+13*cs
  cpy = y+23*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*cs+pet(d), y+27*cs+pet(d))
  cpx = x+12*cs
  cpy = y+31*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+15*cs+pet(d), y+31*cs+pet(d))
  cpx = x+17*cs
  cpy = y+31*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+17*cs+pet(d), y+30*cs+pet(d))
  cpx = x+16*cs
  cpy = y+28*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+15*cs+pet(d/2), y+27*cs+pet(d/2))
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+13*cs+pet(d/2), y+16*cs+pet(d/2))
  cpx = x+14*cs
  cpy = y+18*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+15.5*cs+pet(d/2), y+20.5*cs+pet(d/2))
  ctx.stroke()

  //13
  ctx.beginPath()
  ctx.moveTo(x+16*cs+pet(d/2), y+28*cs+pet(d/2))
  ctx.lineTo(x+17*cs+pet(d), y+27*cs+pet(d))
  ctx.lineTo(x+16*cs+pet(d/2), y+26*cs+pet(d/2))
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+17*cs+pet(d/2), y+31*cs+pet(d/2))
  cpx = x+20*cs
  cpy = y+31*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20*cs+pet(d), y+27*cs+pet(d))
  cpx = x+19*cs
  cpy = y+25*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*cs+pet(d/2), y+24*cs+pet(d/2))
  ctx.stroke()
    ctx.fillStyle = color
    //7
  ctx.beginPath()
  ctx.arc(x+10*cs+pet(d), y+14*cs+pet(d), cs/3, 0, 2*Math.PI)
  ctx.fill()

  //8
  ctx.beginPath()
  ctx.arc(x+22*cs+pet(d), y+14*cs+pet(d), cs/3, 0, 2*Math.PI)
  ctx.fill()

  //9
  ctx.beginPath()
  ctx.arc(x+13*cs+pet(d), y+28*cs+pet(d), cs/3, 0, 2*Math.PI)
  ctx.fill()

  //10
  ctx.beginPath()
  ctx.arc(x+19*cs+pet(d), y+28*cs+pet(d), cs/3, 0, 2*Math.PI)
  ctx.fill()

    one_fiveAt("3", x+15*cs, y+11*cs, cs*2, color)
    one_fiveAt("2", x+20*cs, y+17*cs, cs*2, color)
    one_fiveAt("4", x+10*cs, y+17*cs, cs*2, color)
    one_fiveAt("1", x+13*cs, y+29.5*cs, cs*2, color)
    one_fiveAt("5", x+18.6*cs, y+29.5*cs, cs*2, color)
  }
  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function spiral_boundAt (x,y,W,color,INVERT) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  let cs = W/32
  ctx.lineWidth = 10 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = "#ffffff00" // otherwise extra framing of rect?
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let f = randomPick(atList)
  ctx.save()
  ctx.beginPath()
  ctx.moveTo(x-27,y-7)
  ctx.lineTo(x+W/2+7, y-7)
  ctx.lineTo(x+W/2+7, y+H*1.5+15)
  ctx.lineTo(x-27, y+H*1.5+15)
  ctx.closePath()
  ctx.clip()
  lightenPalette()
  lightenPalette()
  tarotcard(x,y,W,W*1.5,f,cardnumber(f),INVERT)
  ctx.restore()

  loadPalette()

  ctx.save()
  ctx.beginPath()
  ctx.moveTo(x+W/2+7,y-7)
  ctx.lineTo(x+W+30, y-7)
  ctx.lineTo(x+W+30, y+H*1.5+15)
  ctx.lineTo(x+W/2+7, y+H*1.5+15)
  ctx.closePath()
  ctx.clip()
  f = randomPick(atList)
  darkenPalette()
  darkenPalette()
  tarotcard(x,y,W,W*1.5,f,cardnumber(f),INVERT)
  ctx.restore()
  loadPalette()
  sketchpadAt(x+W/2,y+H/40,W)

 // ctx.strokeStyle = savedS
 // ctx.fillStyle = savedF
}

function heartRAt (x,y,W,color, a) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/30
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let cs = W/24
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, d = 0, angle = a

  //1
  ctx.beginPath()
  p = rotatePoint(x+12*cs+pet(d), y+24*cs+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+0*cs+pet(d)
  cpy = y+16*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+0*cs+pet(d), y+10*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+0*cs+pet(d)
  cpy = y+0*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+6*cs+pet(d), y+0*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+12*cs+pet(d)
  cpy = y+0*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*cs+pet(d), y+7*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+12*cs+pet(d)
  cpy = y+0*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+18*cs+pet(d), y+0*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+24*cs+pet(d)
  cpy = y+0*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+24*cs+pet(d), y+10*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+24*cs+pet(d)
  cpy = y+16*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*cs+pet(d), y+24*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()

  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function zeroRAt (x,y,W,color,a) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let cs = W/24
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, d = 0, angle = a
//1
  ctx.beginPath()
  p = rotatePoint(x+12*cs+pet(d), y+24*cs+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+19*cs+pet(d)
  cpy = y+24*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+19*cs+pet(d), y+18*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+19*cs+pet(d)
  cpy = y+6*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+19*cs+pet(d), y+6*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+19*cs+pet(d)
  cpy = y+0*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*cs+pet(d), y+0*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+5*cs+pet(d)
  cpy = y+0*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+5*cs+pet(d), y+6*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+5*cs+pet(d)
  cpy = y+18*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+5*cs+pet(d), y+18*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+5*cs+pet(d)
  cpy = y+24*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*cs+pet(d), y+24*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+12*cs+pet(d)
  cpy = y+22*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*cs+pet(d), y+22*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+7*cs+pet(d)
  cpy = y+22*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+7*cs+pet(d), y+18*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+7*cs+pet(d)
  cpy = y+6*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+7*cs+pet(d), y+6*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+7*cs+pet(d)
  cpy = y+2*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*cs+pet(d), y+2*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+17*cs+pet(d)
  cpy = y+2*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+17*cs+pet(d), y+6*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+17*cs+pet(d)
  cpy = y+18*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+17*cs+pet(d), y+18*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+17*cs+pet(d)
  cpy = y+22*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*cs+pet(d), y+22*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()

  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function repostAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, WAVEY = false
  let cs = W/32, d = 0, i = 0, maxi = 1
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/30
  if (WAVEY) {
    d = cs/2, maxi = 9
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/150
  }
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  for (; i < maxi; i++) { // WAVEY
   //1
  ctx.beginPath()
  ctx.moveTo(x+6*cs+pet(d/2), y+26*cs+pet(d/2))
  cpx = x+6*cs
  cpy = y+8*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+6*cs+pet(d), y+8*cs+pet(d))
  cpx = x+6*cs
  cpy = y+4*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+10*cs+pet(d), y+4*cs+pet(d))
  cpx = x+20*cs
  cpy = y+4*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20*cs+pet(d), y+4*cs+pet(d))
  cpx = x+16*cs
  cpy = y+0*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*cs+pet(d), y+0*cs+pet(d))
  cpx = x+20*cs
  cpy = y+4*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20*cs+pet(d), y+4*cs+pet(d))
  cpx = x+16*cs
  cpy = y+8*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+16*cs+pet(d/2), y+8*cs+pet(d/2))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+26*cs+pet(d/2), y+4*cs+pet(d/2))
  cpx = x+26*cs
  cpy = y+24*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+26*cs+pet(d), y+24*cs+pet(d))
  cpx = x+26*cs
  cpy = y+28*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+22*cs+pet(d), y+28*cs+pet(d))
  cpx = x+12*cs
  cpy = y+28*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*cs+pet(d), y+28*cs+pet(d))
  cpx = x+16*cs
  cpy = y+24*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*cs+pet(d), y+24*cs+pet(d))
  cpx = x+12*cs
  cpy = y+28*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*cs+pet(d), y+28*cs+pet(d))
  cpx = x+16*cs
  cpy = y+32*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+16*cs+pet(d/2), y+32*cs+pet(d/2))
  ctx.stroke()

  } //WAVEY
  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function angelAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, WAVEY = false
  let cs = W/32, d = 0, i = 0, maxi = 1
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  if (WAVEY) {
    d = cs/2, maxi = 9
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/150
  }
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  y -= 6*cs
  for (; i < maxi; i++) { // WAVEY
  //1
  ctx.beginPath()
  ctx.moveTo(x+18*cs+pet(d/2), y+20*cs+pet(d/2))
  cpx = x+22*cs
  cpy = y+20*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+22*cs+pet(d), y+14*cs+pet(d))
  cpx = x+22*cs
  cpy = y+8*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*cs+pet(d), y+8*cs+pet(d))
  cpx = x+10*cs
  cpy = y+8*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+10*cs+pet(d), y+14*cs+pet(d))
  cpx = x+10*cs
  cpy = y+20*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*cs+pet(d), y+26*cs+pet(d))
  ctx.lineTo(x+21*cs+pet(d), y+26*cs+pet(d))
  ctx.lineTo(x+18*cs+pet(d), y+20*cs+pet(d))
  cpx = x+13*cs
  cpy = y+23*cs
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+19*cs+pet(d/2), y+22*cs+pet(d/2))
  ctx.lineTo(x+12*cs+pet(d), y+22*cs+pet(d))
  ctx.lineTo(x+13*cs+pet(d), y+24*cs+pet(d))
  ctx.lineTo(x+20*cs+pet(d/2), y+24*cs+pet(d/2))
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+19.5*cs+pet(d/2), y+23*cs+pet(d/2))
  ctx.lineTo(x+12.5*cs+pet(d/2), y+23*cs+pet(d/2))
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+13*cs+pet(d/2), y+22*cs+pet(d/2))
  ctx.lineTo(x+14*cs+pet(d/2), y+24*cs+pet(d/2))
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+14*cs+pet(d/2), y+22*cs+pet(d/2))
  ctx.lineTo(x+15*cs+pet(d/2), y+24*cs+pet(d/2))
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+15*cs+pet(d/2), y+22*cs+pet(d/2))
  ctx.lineTo(x+16*cs+pet(d/2), y+24*cs+pet(d/2))
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+16*cs+pet(d/2), y+22*cs+pet(d/2))
  ctx.lineTo(x+17*cs+pet(d/2), y+24*cs+pet(d/2))
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+17*cs+pet(d/2), y+22*cs+pet(d/2))
  ctx.lineTo(x+18*cs+pet(d/2), y+24*cs+pet(d/2))
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+18*cs+pet(d/2), y+22*cs+pet(d/2))
  ctx.lineTo(x+19*cs+pet(d/2), y+24*cs+pet(d/2))
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+19*cs+pet(d/2), y+22*cs+pet(d/2))
  ctx.lineTo(x+20*cs+pet(d/2), y+24*cs+pet(d/2))
  ctx.stroke()

  //11
  ctx.beginPath()
  ctx.moveTo(x+14*cs+pet(d/2), y+16*cs+pet(d/2))
  cpx = x+14*cs
  cpy = y+15*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+15*cs+pet(d), y+15*cs+pet(d))
  cpx = x+16*cs
  cpy = y+15*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*cs+pet(d), y+16*cs+pet(d))
  cpx = x+16*cs
  cpy = y+17*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+15*cs+pet(d), y+17*cs+pet(d))
  cpx = x+14*cs
  cpy = y+17*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+14*cs+pet(d/2), y+16*cs+pet(d/2))
  ctx.stroke()

  //12
  ctx.beginPath()
  ctx.moveTo(x+18*cs+pet(d/2), y+16*cs+pet(d/2))
  cpx = x+18*cs
  cpy = y+15*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+19*cs+pet(d), y+15*cs+pet(d))
  cpx = x+20*cs
  cpy = y+15*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20*cs+pet(d), y+16*cs+pet(d))
  cpx = x+20*cs
  cpy = y+17*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+19*cs+pet(d), y+17*cs+pet(d))
  cpx = x+18*cs
  cpy = y+17*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+18*cs+pet(d/2), y+16*cs+pet(d/2))
  ctx.stroke()

  //13
  ctx.beginPath()
  ctx.moveTo(x+17*cs+pet(d/2), y+17*cs+pet(d/2))
  ctx.lineTo(x+16*cs+pet(d), y+19*cs+pet(d))
  ctx.lineTo(x+18*cs+pet(d), y+19*cs+pet(d))
  ctx.lineTo(x+17*cs+pet(d/2), y+17*cs+pet(d/2))
  ctx.stroke()

   //15
  ctx.beginPath()
  ctx.moveTo(x+12*cs+pet(d/2), y+9*cs+pet(d/2))
  cpx = x+12*cs
  cpy = y+7*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+10*cs+pet(d), y+7*cs+pet(d))
  cpx = x+2*cs
  cpy = y+7*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+2*cs+pet(d), y+7*cs+pet(d))
  cpx = x+0*cs
  cpy = y+7*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+0*cs+pet(d), y+8*cs+pet(d))
  cpx = x+0*cs
  cpy = y+9*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+2*cs+pet(d), y+9*cs+pet(d))
  cpx = x+4*cs
  cpy = y+9*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+4*cs+pet(d), y+9*cs+pet(d))
  cpx = x+2*cs
  cpy = y+9*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+2*cs+pet(d), y+10*cs+pet(d))
  cpx = x+2*cs
  cpy = y+11*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+4*cs+pet(d), y+11*cs+pet(d))
  cpx = x+6*cs
  cpy = y+11*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+6*cs+pet(d), y+11*cs+pet(d))
  cpx = x+4*cs
  cpy = y+11*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+4*cs+pet(d), y+12*cs+pet(d))
  cpx = x+4*cs
  cpy = y+13*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+6*cs+pet(d), y+13*cs+pet(d))
  cpx = x+8*cs
  cpy = y+13*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*cs+pet(d), y+13*cs+pet(d))
  cpx = x+6*cs
  cpy = y+13*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+6*cs+pet(d), y+14*cs+pet(d))
  cpx = x+6*cs
  cpy = y+15*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*cs+pet(d), y+15*cs+pet(d))
  cpx = x+10*cs
  cpy = y+15*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+10*cs+pet(d/2), y+15*cs+pet(d/2))
  ctx.stroke()

  //16
  ctx.beginPath()
  ctx.moveTo(x+20*cs+pet(d/2), y+9*cs+pet(d/2))
  cpx = x+20*cs
  cpy = y+7*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+22*cs+pet(d), y+7*cs+pet(d))
  cpx = x+30*cs
  cpy = y+7*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+30*cs+pet(d), y+7*cs+pet(d))
  cpx = x+32*cs
  cpy = y+7*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+32*cs+pet(d), y+8*cs+pet(d))
  cpx = x+32*cs
  cpy = y+9*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+30*cs+pet(d), y+9*cs+pet(d))
  cpx = x+28*cs
  cpy = y+9*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+28*cs+pet(d), y+9*cs+pet(d))
  cpx = x+30*cs
  cpy = y+9*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+30*cs+pet(d), y+10*cs+pet(d))
  cpx = x+30*cs
  cpy = y+11*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+28*cs+pet(d), y+11*cs+pet(d))
  cpx = x+26*cs
  cpy = y+11*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+26*cs+pet(d), y+11*cs+pet(d))
  cpx = x+28*cs
  cpy = y+11*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+28*cs+pet(d), y+12*cs+pet(d))
  cpx = x+28*cs
  cpy = y+13*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+26*cs+pet(d), y+13*cs+pet(d))
  cpx = x+24*cs
  cpy = y+13*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+24*cs+pet(d), y+13*cs+pet(d))
  cpx = x+26*cs
  cpy = y+13*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+26*cs+pet(d), y+14*cs+pet(d))
  cpx = x+26*cs
  cpy = y+15*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+25*cs+pet(d), y+15*cs+pet(d))
  cpx = x+22*cs
  cpy = y+15*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+22*cs+pet(d/2), y+15*cs+pet(d/2))
  ctx.stroke()

  } //WAVEY
  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function prosopagnosia (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, WAVEY = true
  let cs = W/24, d = 0, i = 0, maxi = 1
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  if (WAVEY) {
    d = cs*3, maxi = 39
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/150
  }
 
  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  ctx.globalAlpha = 0.05
  for (; i < maxi; i++) { // WAVEY

   
  //1
  ctx.beginPath()
  ctx.moveTo(x+12*cs+pet(d/2), y+22*cs+pet(d/2))
  cpx = x+15*cs
  cpy = y+22*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+17*cs+pet(d), y+18*cs+pet(d))
  cpx = x+18*cs
  cpy = y+14*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*cs+pet(d), y+13*cs+pet(d))
  cpx = x+17*cs
  cpy = y+11*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+17*cs+pet(d), y+8*cs+pet(d))
  cpx = x+16*cs
  cpy = y+5*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*cs+pet(d), y+5*cs+pet(d))
  cpx = x+7*cs
  cpy = y+5*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+6*cs+pet(d), y+11*cs+pet(d))
  cpx = x+6*cs
  cpy = y+12*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+5*cs+pet(d), y+12*cs+pet(d))
  cpx = x+4*cs
  cpy = y+12*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+4*cs+pet(d), y+14*cs+pet(d))
  cpx = x+4*cs
  cpy = y+16*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+5*cs+pet(d), y+16*cs+pet(d))
  cpx = x+6*cs
  cpy = y+20*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+9*cs+pet(d), y+21*cs+pet(d))
  cpx = x+10*cs
  cpy = y+22*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*cs+pet(d), y+22*cs+pet(d))
  cpx = x+12*cs
  cpy = y+24*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*cs+pet(d), y+24*cs+pet(d))
  ctx.lineTo(x+0*cs+pet(d), y+24*cs+pet(d))
  ctx.lineTo(x+0*cs+pet(d), y+0*cs+pet(d))
  ctx.lineTo(x+24*cs+pet(d), y+0*cs+pet(d))
  ctx.lineTo(x+24*cs+pet(d), y+24*cs+pet(d))
  ctx.lineTo(x+12*cs+pet(d), y+24*cs+pet(d))
  ctx.lineTo(x+12*cs+pet(d/2), y+22*cs+pet(d/2))
  ctx.fill()
  } //WAVEY
  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
ctx.globalAlpha = 1
}

function is_it_prime_q_At (x,y,W,color) {
  let n = 1+Math.floor(Math.random()*5E12)//+1E12
  //n = 1+ Math.floor(Math.random()*100)
  if (n % 2 === 0)
    n += 1
  let answer = isitprime(n)
  answer = (answer)? "YES":"NO";
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, WAVEY = false
  let cs = W/32, d = 0, i = 0, maxi = 1
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  let numerals = (""+n)
  let fs = W *0.08
  ctx.font = " "+fs+"pt Courier new"
  ctx.fillStyle = color
  let w = ctx.measureText(numerals).width
  ctx.fillText(numerals, x+W/2-w/2, y+H/3)
  ctx.font = " "+(fs*3)+"pt Courier new"
   w = ctx.measureText(answer).width
  ctx.fillText(answer, x+W/2-w/2, y+H/2+fs*2)
}

function isitprime (n) {
  let i = 2, sqrt_n = Math.sqrt(n)
  for (; i < sqrt_n; i++)
    if (n % i === 0) {
      return false
    }
  return true
}

function judgmentalAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, WAVEY = false
  let cs = W/32, d = 0, i = 0, maxi = 1
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  if (WAVEY) {
    d = cs/2, maxi = 9
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/150
  }
  
  angelAt(x+ 9*cs, y, cs*14, color)
  heartRAt(x+2*cs+pet(d/2), y+22*cs+pet(d/2), cs*4, color, -90)
  zeroRAt(x+2*cs+pet(d/2), y+18*cs+pet(d/2), cs*4, color, -90)
  heartRAt(x+26*cs+pet(d/2), y+8*cs+pet(d/2), cs*4, color, 90)
  zeroRAt(x+26*cs+pet(d/2), y+12*cs+pet(d/2), cs*4, color, 90)

  repostAt(x+2*cs+pet(d/2), y+12*cs+pet(d/2), cs*4, color)
  zeroRAt(x+2*cs+pet(d/2), y+8*cs+pet(d/2), cs*4, color, -90)

  repostAt(x+26*cs+pet(d/2), y+18*cs+pet(d/2), cs*4, color)
  zeroRAt(x+26*cs+pet(d/2), y+22*cs+pet(d/2), cs*4, color, 90)



  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  for (; i < maxi; i++) { // WAVEY
  //1
  ctx.beginPath()
  ctx.moveTo(x+4*cs+pet(d/2), y+30*cs+pet(d/2))
  cpx = x+10*cs
  cpy = y+30*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+10*cs+pet(d), y+24*cs+pet(d))
  cpx = x+10*cs
  cpy = y+14*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+10*cs+pet(d), y+14*cs+pet(d))
  cpx = x+10*cs
  cpy = y+10*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*cs+pet(d), y+10*cs+pet(d))
  cpx = x+22*cs
  cpy = y+10*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+22*cs+pet(d), y+16*cs+pet(d))
  cpx = x+22*cs
  cpy = y+24*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+22*cs+pet(d), y+24*cs+pet(d))
  cpx = x+22*cs
  cpy = y+30*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+28*cs+pet(d/2), y+30*cs+pet(d/2))
  ctx.stroke()

  

  //6
  ctx.beginPath()
  ctx.moveTo(x+22*cs+pet(d/2), y+23*cs+pet(d/2))
  ctx.lineTo(x+24*cs+pet(d), y+24*cs+pet(d))
  cpx = x+24*cs
  cpy = y+28*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+28*cs+pet(d), y+28*cs+pet(d))
  cpx = x+32*cs
  cpy = y+28*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+32*cs+pet(d), y+24*cs+pet(d))
  cpx = x+32*cs
  cpy = y+10*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+32*cs+pet(d), y+10*cs+pet(d))
  cpx = x+32*cs
  cpy = y+6*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+28*cs+pet(d), y+6*cs+pet(d))
  cpx = x+24*cs
  cpy = y+6*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+24*cs+pet(d), y+10*cs+pet(d))
  ctx.lineTo(x+24*cs+pet(d), y+23*cs+pet(d))
  ctx.lineTo(x+22*cs+pet(d/2), y+23*cs+pet(d/2))
  ctx.stroke()

  

  //11
  ctx.beginPath()
  ctx.moveTo(x+8*cs+pet(d/2), y+24*cs+pet(d/2))
  ctx.lineTo(x+10*cs+pet(d), y+23*cs+pet(d))
  ctx.lineTo(x+8*cs+pet(d), y+23*cs+pet(d))
  ctx.lineTo(x+8*cs+pet(d), y+10*cs+pet(d))
  cpx = x+8*cs
  cpy = y+6*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+4*cs+pet(d), y+6*cs+pet(d))
  cpx = x+0*cs
  cpy = y+6*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+0*cs+pet(d), y+10*cs+pet(d))
  cpx = x+0*cs
  cpy = y+24*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+0*cs+pet(d), y+24*cs+pet(d))
  cpx = x+0*cs
  cpy = y+28*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+4*cs+pet(d), y+28*cs+pet(d))
  cpx = x+8*cs
  cpy = y+28*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+8*cs+pet(d/2), y+24*cs+pet(d/2))
  ctx.stroke()

  //1
  ctx.beginPath()
  ctx.moveTo(x+12*cs+pet(d/2), y+19*cs+pet(d/2))
  ctx.lineTo(x+10*cs+pet(d), y+21*cs+pet(d))
  ctx.lineTo(x+12*cs+pet(d/2), y+21*cs+pet(d/2))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+20*cs+pet(d/2), y+19*cs+pet(d/2))
  ctx.lineTo(x+22*cs+pet(d), y+21*cs+pet(d))
  ctx.lineTo(x+20*cs+pet(d/2), y+21*cs+pet(d/2))
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+10*cs+pet(d/2), y+22*cs+pet(d/2))
  cpx = x+12*cs
  cpy = y+22*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*cs+pet(d), y+22*cs+pet(d))
  cpx = x+13*cs
  cpy = y+22*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+13*cs+pet(d), y+23*cs+pet(d))
  cpx = x+13*cs
  cpy = y+24*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*cs+pet(d), y+24*cs+pet(d))
  cpx = x+10*cs
  cpy = y+24*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+10*cs+pet(d/2), y+24*cs+pet(d/2))
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+22*cs+pet(d/2), y+22*cs+pet(d/2))
  cpx = x+20*cs
  cpy = y+22*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20*cs+pet(d), y+22*cs+pet(d))
  cpx = x+19*cs
  cpy = y+22*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+19*cs+pet(d), y+23*cs+pet(d))
  cpx = x+19*cs
  cpy = y+24*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20*cs+pet(d), y+24*cs+pet(d))
  cpx = x+22*cs
  cpy = y+24*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+22*cs+pet(d/2), y+24*cs+pet(d/2))
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+10*cs+pet(d/2), y+18*cs+pet(d/2))
  ctx.lineTo(x+12*cs+pet(d/2), y+18*cs+pet(d/2))
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+13*cs+pet(d/2), y+18*cs+pet(d/2))
  ctx.lineTo(x+15*cs+pet(d/2), y+18*cs+pet(d/2))
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+17*cs+pet(d/2), y+18*cs+pet(d/2))
  ctx.lineTo(x+19*cs+pet(d/2), y+18*cs+pet(d/2))
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+20*cs+pet(d/2), y+18*cs+pet(d/2))
  ctx.lineTo(x+22*cs+pet(d/2), y+18*cs+pet(d/2))
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+4*cs+pet(d/2), y+30*cs+pet(d/2))
  ctx.lineTo(x+0*cs+pet(d/2), y+30*cs+pet(d/2))
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+28*cs+pet(d/2), y+30*cs+pet(d/2))
  ctx.lineTo(x+32*cs+pet(d/2), y+30*cs+pet(d/2))
  ctx.stroke()

  // eyes
  ctx.fillStyle = color
  //11
  ctx.beginPath()
  ctx.arc(x+11*cs+pet(d/2), y+19*cs+pet(d/2), cs/4, 0, 2*Math.PI)
  ctx.fill()

  //12
  ctx.beginPath()
  ctx.arc(x+14*cs+pet(d/2), y+19*cs+pet(d/2), cs/4, 0, 2*Math.PI)
  ctx.fill()

  //13
  ctx.beginPath()
  ctx.arc(x+18*cs+pet(d/2), y+19*cs+pet(d/2), cs/4, 0, 2*Math.PI)
  ctx.fill()

  //14
  ctx.beginPath()
  ctx.arc(x+21*cs+pet(d/2), y+19*cs+pet(d/2), cs/4, 0, 2*Math.PI)
  ctx.fill()
  } //WAVEY
  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function n_of_clubsAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W*1.5, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle
  ctx.fillStyle = "#e3e0c5ff"
  
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.shadowColor = "#44444490"
  ctx.shadowBlur = 12
  ctx.shadowOffsetX = 8
  ctx.shadowOffsetY = 8
  ctx.fillRect(x,y,W,H)

  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let cs = W/24
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, d = 0, angle = pet(180)
  ctx.save()
  ctx.beginPath()
  ctx.moveTo(x,y)
  ctx.lineTo(x+W,y)
  ctx.lineTo(x+W,y+H)
  ctx.lineTo(x,y+H)
  ctx.closePath()
  ctx.clip()
  ctx.shadowBlur = 0
  ctx.shadowOffsetX = 0
  ctx.shadowOffsetY = 0
  let i = 0, ox, oy
  for (;i < 47; i++) {
    ox = Math.random() * W
    oy = Math.random() * H
    clubAt(x+ox, y+oy, W/10, "#000000")
  }
  ctx.restore()
  ctx.shadowBlur = 12
  ctx.shadowOffsetX = 8
  ctx.shadowOffsetY = 8
  y+= cs*8
  //2
  ctx.beginPath()
  ctx.moveTo(x+13*cs+pet(d/2), y+14*cs+pet(d/2))
  ctx.lineTo(x+22*cs+pet(d), y+23*cs+pet(d))
  ctx.lineTo(x+23*cs+pet(d), y+22*cs+pet(d))
  ctx.lineTo(x+14*cs+pet(d), y+13*cs+pet(d))
  ctx.lineTo(x+13*cs+pet(d/2), y+14*cs+pet(d/2))
  ctx.fillStyle = "#e3e0c5ff"
  ctx.fill()
  ctx.stroke()
  ctx.save()
  //1
  ctx.beginPath()
  ctx.moveTo(x+0*cs+pet(d/2), y+8*cs+pet(d/2))
  cpx = x+0*cs
  cpy = y+0*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*cs+pet(d), y+0*cs+pet(d))
  cpx = x+16*cs
  cpy = y+0*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*cs+pet(d), y+8*cs+pet(d))
  cpx = x+16*cs
  cpy = y+16*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*cs+pet(d), y+16*cs+pet(d))
  cpx = x+0*cs
  cpy = y+16*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+0*cs+pet(d/2), y+8*cs+pet(d/2))
  ctx.fillStyle = "#e3e0c5ff"
  ctx.fill()
  ctx.stroke()


  //2
  ctx.beginPath()
  ctx.moveTo(x+1*cs+pet(d/2), y+8*cs+pet(d/2))
  cpx = x+1*cs
  cpy = y+1*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*cs+pet(d), y+1*cs+pet(d))
  cpx = x+15*cs
  cpy = y+1*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+15*cs+pet(d), y+8*cs+pet(d))
  cpx = x+15*cs
  cpy = y+15*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*cs+pet(d), y+15*cs+pet(d))
  cpx = x+1*cs
  cpy = y+15*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+1*cs+pet(d/2), y+8*cs+pet(d/2))
  ctx.stroke()
 // 
  ctx.clip()
  ctx.shadowBlur = 0
  ctx.shadowOffsetX = 0
  ctx.shadowOffsetY = 0
  ctx.fillStyle = color
  clubAt(x, y, W*0.6, "#000000")

  ctx.beginPath()
  ctx.arc(x+5*cs+pet(d/2), y+5*cs+pet(d/2), cs*4, 0, 2*Math.PI)
  ctx.fillStyle = "#ffffff40"
  ctx.fill()
  ctx.beginPath()
  ctx.arc(x+4*cs+pet(d/2), y+4*cs+pet(d/2), cs*2, 0, 2*Math.PI)
  ctx.fillStyle = "#ffffff90"
  ctx.fill()
  ctx.beginPath()
  ctx.arc(x+3.2*cs+pet(d/2), y+3.2*cs+pet(d/2), cs*0.7, 0, 2*Math.PI)
  ctx.fillStyle = "#ffffff90"
  ctx.fill()
  ctx.restore()
}

function clubAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let cs = W/24
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, d = 0, angle = pet(360)
//1
  ctx.beginPath()
  p = rotatePoint(x+12*cs+pet(d), y+0*cs+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+18*cs+pet(d)
  cpy = y+0*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+18*cs+pet(d), y+6*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+18*cs+pet(d)
  cpy = y+12*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*cs+pet(d), y+12*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+6*cs+pet(d)
  cpy = y+12*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+6*cs+pet(d), y+6*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+6*cs+pet(d)
  cpy = y+0*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*cs+pet(d), y+0*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()

  //2
  ctx.beginPath()
  p = rotatePoint(x+12*cs+pet(d), y+15*cs+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+12*cs+pet(d)
  cpy = y+9*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+6*cs+pet(d), y+9*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+0*cs+pet(d)
  cpy = y+9*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+0*cs+pet(d), y+15*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+0*cs+pet(d)
  cpy = y+21*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+6*cs+pet(d), y+21*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+12*cs+pet(d)
  cpy = y+21*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*cs+pet(d), y+15*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()

  //3
  ctx.beginPath()
  p = rotatePoint(x+12*cs+pet(d), y+15*cs+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+12*cs+pet(d)
  cpy = y+9*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+18*cs+pet(d), y+9*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+24*cs+pet(d)
  cpy = y+9*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+24*cs+pet(d), y+15*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+24*cs+pet(d)
  cpy = y+21*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+18*cs+pet(d), y+21*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+12*cs+pet(d)
  cpy = y+21*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*cs+pet(d), y+15*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()

  //4
  ctx.beginPath()
  p = rotatePoint(x+12*cs+pet(d), y+12*cs+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+12*cs+pet(d)
  cpy = y+18*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+10*cs+pet(d), y+24*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+12*cs+pet(d)
  cpy = y+23*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+14*cs+pet(d), y+24*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+12*cs+pet(d)
  cpy = y+18*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*cs+pet(d), y+12*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()
  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

// one trick pony #6900f5 #4a589c
function one_trick_ponyAt (x,y,W,color,INVERT) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/100
  ctx.strokeStyle = color
  ctx.lineCap = "round"
  ctx.lineJoin = "bevel"
  ctx.fillStyle = "#4a519dff"
  ctx.fillRect(x,y,W,H)
  let r = W/16, i = 0
  ctx.fillStyle = "#6900f5"
  let x0 = x, offset = r * 4.8
  y += offset/1.5, x += offset/1.5
  for (; i < 9; i++) {
    ctx.beginPath()
    ctx.arc(x, y, r, 0, 2*Math.PI) 
    ctx.fill()
    x += offset
    if (x > x0 +W-offset/1.5) {
      x = x0 + offset/1.5
      y += offset
    }
    
  }

  ctx.fillStyle = savedF
  ctx.strokeStyle = savedS
}


function about_to_walk_off_a_cliffAt (x,y,W,color,INVERT) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W*1.5, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/100
  ctx.strokeStyle = color
  ctx.lineCap = "round"
  ctx.lineJoin = "bevel"
  ctx.save()
  ctx.beginPath()
  ctx.moveTo(x,y)
  ctx.lineTo(x+W, y)
  ragged(ctx, x+W, y+H, x+W, y)
  ragged(ctx, x, y+H, x+W, y+H)
  ctx.closePath()
ctx.shadowBlur = 12
  ctx.shadowColor = "#44444490"
  ctx.shadowOffsetX = 8
  ctx.shadowOffsetY = 8
  if (INVERT) {
    ctx.shadowOffsetX = -8
    ctx.shadowOffsetY = -8
  }
  ctx.fillStyle = "#ffffee"
  ctx.fill()
  ctx.shadowBlur = 0
  ctx.shadowOffsetX = 0
  ctx.shadowOffsetY = 0

  ctx.clip()
  
  moleDatesAt(x+2, y, W, "#5b5404ff")
  document.getElementById('opacity').value /= 2
  paperize()
  document.getElementById('opacity').value *= 2

  let WAVEY = true, maxi = 17, cs = W/24, i = 0
  d = cs/2
  //ctx.lineWidth /= 2
  ctx.strokeStyle = "#0000dd"
  for (; i < maxi; i++) { // WAVEY
  //1
    ctx.beginPath()
    ctx.moveTo(x+6*cs+pet(d/2), y+15*cs+pet(d/2))
    ctx.lineTo(x+13*cs+pet(d), y+17*cs+pet(d))
    cpx = x+15*cs
    cpy = y+9*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*cs+pet(d), y+8*cs+pet(d))
    cpx = x+9*cs
    cpy = y+8*cs
    ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+6*cs+pet(d/2), y+15*cs+pet(d/2))
    ctx.stroke()

    //2
    ctx.beginPath()
    ctx.moveTo(x+12*cs+pet(d/2), y+8*cs+pet(d/2))
    cpx = x+14*cs
    cpy = y+8*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+15*cs+pet(d), y+7*cs+pet(d))
    cpx = x+15*cs
    cpy = y+5*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+13*cs+pet(d), y+5*cs+pet(d))
    cpx = x+11*cs
    cpy = y+6*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+11*cs+pet(d), y+7*cs+pet(d))
    cpx = x+11*cs
    cpy = y+8*cs
    ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+12*cs+pet(d/2), y+8*cs+pet(d/2))
    ctx.stroke()

    //3
    ctx.beginPath()
    ctx.moveTo(x+10*cs+pet(d/2), y+16*cs+pet(d/2))
    ctx.lineTo(x+10*cs+pet(d), y+20*cs+pet(d))
    ctx.lineTo(x+8*cs+pet(d/2), y+20*cs+pet(d/2))
    ctx.stroke()

    //4
    ctx.beginPath()
    ctx.moveTo(x+9*cs+pet(d/2), y+16*cs+pet(d/2))
    ctx.lineTo(x+6*cs+pet(d), y+19*cs+pet(d))
    ctx.lineTo(x+4*cs+pet(d/2), y+18*cs+pet(d/2))
    ctx.stroke()

    //5
    ctx.beginPath()
    ctx.moveTo(x+7*cs+pet(d/2), y+33*cs+pet(d/2))
    ctx.lineTo(x+7*cs+pet(d), y+20.5*cs+pet(d))
    ctx.lineTo(x+12*cs+pet(d), y+20.5*cs+pet(d))
    ctx.lineTo(x+16*cs+pet(d), y+18*cs+pet(d))
    ctx.lineTo(x+20*cs+pet(d), y+19*cs+pet(d))
    ctx.lineTo(x+22*cs+pet(d), y+16*cs+pet(d))
    ctx.lineTo(x+24*cs+pet(d/2), y+16*cs+pet(d/2))
    ctx.stroke()

    //6
    ctx.beginPath()
    ctx.moveTo(x+11*cs+pet(d/2), y+10*cs+pet(d/2))
    ctx.lineTo(x+8*cs+pet(d), y+11*cs+pet(d))
    ctx.lineTo(x+4*cs+pet(d/2), y+9*cs+pet(d/2))
    ctx.stroke()

    //7
    ctx.beginPath()
    ctx.moveTo(x+2*cs+pet(d/2), y+9*cs+pet(d/2))
    ctx.lineTo(x+20*cs+pet(d), y+7*cs+pet(d))
    cpx = x+19*cs
    cpy = y+8*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+19*cs+pet(d), y+9*cs+pet(d))
    cpx = x+19*cs
    cpy = y+10*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20*cs+pet(d), y+10*cs+pet(d))
    cpx = x+21*cs
    cpy = y+10*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+21*cs+pet(d), y+9*cs+pet(d))
    cpx = x+21*cs
    cpy = y+8*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20*cs+pet(d), y+7*cs+pet(d))
    cpx = x+20*cs
    cpy = y+6*cs
    ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+20*cs+pet(d/2), y+6*cs+pet(d/2))
    ctx.stroke()

    //8
    ctx.beginPath()
    ctx.moveTo(x+19*cs+pet(d/2), y+6*cs+pet(d/2))
    ctx.lineTo(x+20*cs+pet(d/2), y+7*cs+pet(d/2))
    ctx.stroke()

    //9
    ctx.beginPath()
    ctx.moveTo(x+14*cs+pet(d/2), y+12*cs+pet(d/2))
    ctx.lineTo(x+15*cs+pet(d/2), y+15*cs+pet(d/2))
    ctx.stroke()
  } //WAVEY

  ctx.restore()
  //let f = randomPick(["schröder_staircaseAt", "cool_s_At","neckerchairAt","necker_correctedAt", "perspectiveAt"])
  ctx.fillStyle = savedF
  ctx.strokeStyle = savedS
}

function sketchpadAt (x,y,w) {
  let canvas = document.getElementById("myCanvas");
  let ctx = canvas.getContext("2d");
  let off = document.createElement('CANVAS')
  let ctxoff = off.getContext("2d")
  off.width = canvas.width, off.height = canvas.height
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0

  const W = w, H = W*1.5 
  ctxoff.lineWidth = 1 + document.getElementById("featuresize").value/4
  let color = getselectedcolor()
  let alpha = document.getElementById("opacity").value/100//
  let mode = ctxoff.globalCompositeOperation
  let small = true, half = true
  let SCALE = W/430
  let pad = 40*SCALE
 
  ctxoff.globalCompositeOperation = "source-over"
  ctxoff.globalAlpha = 1.0
  let r = 56*SCALE, i = 0
  let sa = Math.PI * 1.35, ea = Math.PI * 1.78
  let sa2 = Math.PI * 0.56, ea2 = Math.PI * 0.81
  let sa3 = Math.PI * 0.36, ea3 = sa2
  
  // width of spine. subtract half from x
  let xoff = 43*SCALE
  let y0 = y, x0 = x 
  x -= xoff
  y += xoff/3
  while (y < y0+H - 80*SCALE) {
    ctxoff.lineWidth = 5
    ctxoff.strokeStyle = "#555555"
    ctxoff.globalCompositeOperation = "darken"
    ctxoff.globalAlpha = 0.5
    // upper strokes
    ctxoff.beginPath()
    ctxoff.arc(x+60*SCALE, y-20*SCALE, r-2, sa2, ea2)
    ctxoff.stroke()
      
    ctxoff.beginPath()
    ctxoff.arc(x+60*SCALE, y-28*SCALE, r-2, sa3, ea3)
    ctxoff.stroke()
    // lower strokes
    ctxoff.beginPath()
    ctxoff.arc(x+60*SCALE, y-6*SCALE, r-2, sa2, ea2)
    ctxoff.stroke()
      
    ctxoff.beginPath()
    ctxoff.arc(x+60*SCALE, y-12*SCALE, r-2, sa3, ea3)
    ctxoff.stroke()
    
    ctxoff.strokeStyle = "#888681ff"
    //ctxoff.globalCompositeOperation = "destination-out"
    ctxoff.globalAlpha = 1.0
    let SQUARE = Math.random() > 1
    if (SQUARE) {
      ctxoff.fillRect(x,y,24*SCALE,24*SCALE)
      ctxoff.fillRect(x+80*SCALE,y+pad*SCALE-24*SCALE,24*SCALE,24*SCALE)
    } else {
      ctxoff.beginPath()
      ctxoff.arc(x+14*SCALE, y+12*SCALE, 14*SCALE, 0, Math.PI * 2)
      ctxoff.closePath()
      ctxoff.fill()
      
      ctxoff.beginPath()
      ctxoff.arc(x+90*SCALE, y+27*SCALE, 14*SCALE, 0, Math.PI * 2)
      ctxoff.closePath()
      ctxoff.fill()
    }
  //  ctxoff.strokeStyle = "#867033"
    ctxoff.globalCompositeOperation = "source-over"
    //rings
    ctxoff.beginPath()
    ctxoff.arc(x+46*SCALE, y+54*SCALE, r, sa, ea)
    ctxoff.stroke()
    ctxoff.beginPath()
    ctxoff.arc(x+43*SCALE, y+68*SCALE-2*SCALE, r-2, sa, ea)
    ctxoff.stroke()
    
    // upper glint
    ctxoff.strokeStyle = "#ffffff"
    ctxoff.lineWidth = 3

    ctxoff.beginPath()
    ctxoff.arc(x+46*SCALE, y+53*SCALE, r,  sa+0.7, sa+0.75)
    ctxoff.stroke()
    //lower glint
    ctxoff.beginPath()
    ctxoff.arc(x+43*SCALE, y+68*SCALE-3*SCALE, r-2, sa+0.75, sa+0.8)
    ctxoff.stroke()

    y += 58*SCALE
  }
  ctxoff.globalCompositeOperation = "source_over"
  ctx.drawImage(off,0,0,off.width,off.height)
  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function four_coloriAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle
  let cs = W/32, d = cs/1.3
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/150
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let i = 0
  //1
  for (; i < 11; i++) {
    //11 D vert stroke
    ctx.beginPath()
    ctx.moveTo(x+14*cs+pet(d), y+21*cs+pet(d))
    cpx = x+14*cs
    cpy = y+23*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+13*cs+pet(d), y+24*cs+pet(d))
    ctx.stroke()
    ctx.beginPath()
    ctx.moveTo(x+12*cs+pet(d), y+20*cs+pet(d))
    cpx = x+26*cs
    cpy = y+18*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+29*cs+pet(d), y+17*cs+pet(d))
    cpx = x+31*cs
    cpy = y+17*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+31*cs+pet(d), y+13*cs+pet(d))
    cpx = x+32*cs
    cpy = y+6*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+25*cs+pet(d), y+9*cs+pet(d))
    cpx = x+13*cs
    cpy = y+11*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+13*cs+pet(d), y+11*cs+pet(d))
    cpx = x+10*cs
    cpy = y+11*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+10*cs+pet(d), y+16*cs+pet(d))
    cpx = x+8*cs
    cpy = y+20*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*cs+pet(d), y+20*cs+pet(d))
    ctx.stroke()

    //2
    ctx.beginPath()
    ctx.moveTo(x+23*cs+pet(d), y+10*cs+pet(d))
    cpx = x+23*cs
    cpy = y+16*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+21*cs+pet(d), y+19.2*cs+pet(d))
    ctx.stroke()

    //3
    ctx.beginPath()
    ctx.moveTo(x+25*cs+pet(d), y+18*cs+pet(d))
    cpx = x+22*cs
    cpy = y+28*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+14*cs+pet(d), y+29*cs+pet(d))
    cpx = x+2*cs
    cpy = y+28*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+2*cs+pet(d), y+18*cs+pet(d))
    cpx = x+2*cs
    cpy = y+10*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*cs+pet(d), y+6*cs+pet(d))
    cpx = x+14*cs
    cpy = y+3*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*cs+pet(d), y+4*cs+pet(d))
    cpx = x+17*cs
    cpy = y+4*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+17*cs+pet(d), y+5*cs+pet(d))
    cpx = x+15*cs
    cpy = y+10*cs
    ctx.stroke()

    //4
    ctx.beginPath()
    ctx.moveTo(x+15*cs+pet(d), y+10*cs+pet(d))
    cpx = x+15*cs
    cpy = y+5*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20*cs+pet(d), y+3*cs+pet(d))
    cpx = x+23*cs
    cpy = y+2*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+25*cs+pet(d), y+2*cs+pet(d))
    cpx = x+28*cs
    cpy = y+2*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+28*cs+pet(d), y+6*cs+pet(d))
    cpx = x+28*cs
    cpy = y+8.6*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+27*cs+pet(d), y+9*cs+pet(d))
    ctx.stroke()

    ctx.beginPath()
    ctx.moveTo(x+24*cs+pet(d), y+5*cs+pet(d))
    cpx = x+22*cs
    cpy = y+5*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+22*cs+pet(d), y+7*cs+pet(d))
    cpx = x+24*cs
    cpy = y+9*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+25*cs+pet(d), y+7*cs+pet(d))
    ctx.stroke()

    //6
    ctx.beginPath()
    ctx.moveTo(x+13*cs+pet(d), y+21*cs+pet(d))
    cpx = x+15*cs
    cpy = y+21*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+15*cs+pet(d), y+23*cs+pet(d))
    cpx = x+14*cs
    cpy = y+25*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+13*cs+pet(d), y+24*cs+pet(d))
    ctx.stroke()

    //7
    ctx.beginPath()
    ctx.moveTo(x+16*cs+pet(d), y+16*cs+pet(d))
    cpx = x+17*cs
    cpy = y+15*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*cs+pet(d), y+13*cs+pet(d))
    cpx = x+18*cs
    cpy = y+15*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*cs+pet(d), y+16*cs+pet(d))
    ctx.stroke()

    //8
    ctx.beginPath()
    ctx.moveTo(x+17*cs+pet(d), y+15*cs+pet(d))
    cpx = x+17*cs
    cpy = y+15*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+19*cs+pet(d), y+15*cs+pet(d))
    ctx.stroke()

    //9
    ctx.beginPath()
    ctx.moveTo(x+27*cs+pet(d), y+12*cs+pet(d))
    cpx = x+27*cs
    cpy = y+14*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+26*cs+pet(d), y+15*cs+pet(d))
    ctx.stroke()

    //10
    ctx.beginPath()
    ctx.moveTo(x+26*cs+pet(d), y+15*cs+pet(d))
    cpx = x+28*cs
    cpy = y+16*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+28*cs+pet(d), y+15*cs+pet(d))
    cpx = x+29*cs
    cpy = y+14*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+27*cs+pet(d), y+13.4*cs+pet(d))
    cpx = x+29*cs
    cpy = y+14*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+29*cs+pet(d), y+13.4*cs+pet(d))
    cpx = x+29*cs
    cpy = y+12*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+27*cs+pet(d), y+12*cs+pet(d))
    ctx.stroke()
  }
  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function staplerAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle
  let cs = W/24, d = cs/1.8
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "round"
  ctx.lineJoin = "bevel"
  let i = 0
  for (; i < 11; i++) {
    //6
  ctx.beginPath()
  ctx.moveTo(x+21*cs+pet(d), y+10*cs+pet(d))
  cpx = x+21*cs
  cpy = y+7*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*cs+pet(d), y+7*cs+pet(d))
  cpx = x+12*cs
  cpy = y+8*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+6*cs+pet(d), y+9*cs+pet(d))
  cpx = x+4*cs
  cpy = y+9*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+4*cs+pet(d), y+14*cs+pet(d))
  ctx.stroke()
  //9
  ctx.beginPath()
  ctx.moveTo(x+4*cs+pet(d), y+14*cs+pet(d))
  cpx = x+7*cs
  cpy = y+15*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+10*cs+pet(d), y+16*cs+pet(d))
  cpx = x+17*cs
  cpy = y+13*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+21*cs+pet(d), y+10*cs+pet(d))
  ctx.stroke()
  //7
  ctx.beginPath()
  ctx.moveTo(x+2*cs+pet(d), y+17*cs+pet(d))
  ctx.lineTo(x+2*cs+pet(d), y+19*cs+pet(d))
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+10*cs+pet(d), y+21*cs+pet(d))
  ctx.lineTo(x+10*cs+pet(d), y+23*cs+pet(d))
  ctx.stroke()
  //1
  ctx.beginPath()
  ctx.moveTo(x+20*cs+pet(d/3), y+8*cs+pet(d/3))
  cpx = x+15*cs
  cpy = y+9*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+11*cs+pet(d), y+10*cs+pet(d))
  cpx = x+10*cs
  cpy = y+10*cs
  ctx.quadraticCurveTo(cpx+pet(d/3), cpy+pet(d)/3, x+10*cs+pet(d/3), y+15*cs+pet(d/3))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+5*cs+pet(d/3), y+14*cs+pet(d/3))
  cpx = x+5*cs
  cpy = y+15*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+5*cs+pet(d), y+16*cs+pet(d))
  cpx = x+8*cs
  cpy = y+17*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+10*cs+pet(d), y+18*cs+pet(d))
  cpx = x+17*cs
  cpy = y+14*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20*cs+pet(d), y+12*cs+pet(d))
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+5*cs+pet(d), y+15*cs+pet(d))
  cpx = x+3*cs
  cpy = y+16*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+2*cs+pet(d), y+17*cs+pet(d))
  cpx = x+5*cs
  cpy = y+19*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+10*cs+pet(d), y+21*cs+pet(d))
  cpx = x+18*cs
  cpy = y+16*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+23*cs+pet(d), y+11*cs+pet(d))
  ctx.lineTo(x+21*cs+pet(d), y+10*cs+pet(d))
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+2*cs+pet(d), y+19*cs+pet(d))
  cpx = x+5*cs
  cpy = y+21*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+10*cs+pet(d), y+23*cs+pet(d))
  cpx = x+18*cs
  cpy = y+18*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+23*cs+pet(d), y+12*cs+pet(d))
  ctx.lineTo(x+23*cs+pet(d), y+11*cs+pet(d))
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+20*cs+pet(d), y+12*cs+pet(d))
  ctx.lineTo(x+20*cs+pet(d), y+11*cs+pet(d))
  ctx.stroke()

  ctx.beginPath()
  ctx.arc(x+19.5*cs+pet(d/2), y+9.5*cs+pet(d/2), cs/2, 0, 2*Math.PI)
  ctx.stroke()

  //11
  ctx.beginPath()
  ctx.arc(x+10*cs+pet(d), y+15*cs+pet(d), ctx.lineWidth*2, 0, 2*Math.PI)
 // ctx.stroke()

  //12
  ctx.beginPath()
  ctx.arc(x+5*cs+pet(d), y+14*cs+pet(d), cs, 0, 2*Math.PI)
 // ctx.stroke()
}

  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function four_color_theoremAt (x,y,W,color,INVERT) {
  console.log(INVERT)
  if (INVERT) {
    four_coloriAt (x,y,W,color,INVERT)
  return
  }
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle
  let cs = W/32, d = cs/1.3
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/150
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let i = 0
  for (; i < 11; i++) {
   //1
    ctx.beginPath()
    ctx.moveTo(x+0*cs+pet(d), y+15*cs+pet(d))
    cpx = x+22*cs
    cpy = y+14*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+31*cs+pet(d), y+14.5*cs+pet(d))
    cpx = x+31*cs
    cpy = y+20*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+30*cs+pet(d), y+27*cs+pet(d))
    cpx = x+8*cs
    cpy = y+27*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+1*cs+pet(d), y+26.5*cs+pet(d))
    cpx = x+1.8*cs
    cpy = y+20*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+1.5*cs+pet(d), y+14.3*cs+pet(d))
    ctx.stroke()

    //2
    ctx.beginPath()
    ctx.moveTo(x+15.5*cs+pet(d), y+27.3*cs+pet(d))
    cpx = x+17*cs
    cpy = y+19*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+17*cs+pet(d), y+14*cs+pet(d))
    ctx.stroke()

    //3
    ctx.beginPath()
    ctx.moveTo(x+13*cs+pet(d), y+21*cs+pet(d))
    ctx.lineTo(x+10*cs+pet(d), y+21*cs+pet(d))
    ctx.stroke()

    //4
    ctx.beginPath()
    ctx.moveTo(x+9*cs+pet(d), y+22*cs+pet(d))
    ctx.lineTo(x+12*cs+pet(d), y+19*cs+pet(d))
    ctx.lineTo(x+12*cs+pet(d), y+23*cs+pet(d))
    ctx.stroke()

    //5
    ctx.beginPath()
    ctx.moveTo(x+23*cs+pet(d), y+19*cs+pet(d))
    ctx.lineTo(x+22*cs+pet(d), y+23*cs+pet(d))
    ctx.stroke()

    //5 upper arc
  ctx.beginPath()
  ctx.moveTo(x+6*cs+pet(d), y+15*cs+pet(d))
  cpx = x+5*cs
  cpy = y+14*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+6.5*cs+pet(d), y+10*cs+pet(d))
  cpx = x+9*cs
  cpy = y+3*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16.3*cs+pet(d), y+2.8*cs+pet(d))
  cpx = x+28*cs
  cpy = y+4*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+26*cs+pet(d), y+14*cs+pet(d))
  ctx.stroke()

    //6
    ctx.beginPath()
    ctx.moveTo(x+23*cs+pet(d), y+19*cs+pet(d))
    cpx = x+25*cs
    cpy = y+19*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+25*cs+pet(d), y+20*cs+pet(d))
    cpx = x+25*cs
    cpy = y+21*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+22.3*cs+pet(d), y+21*cs+pet(d))
    cpx = x+25*cs
    cpy = y+21*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+25*cs+pet(d), y+22*cs+pet(d))
    cpx = x+25*cs
    cpy = y+23*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+22*cs+pet(d), y+23*cs+pet(d))
    cpx = x+21*cs
    cpy = y+23*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+21*cs+pet(d), y+22*cs+pet(d))
    ctx.stroke()

    //7 lower arc
    ctx.beginPath()
    ctx.moveTo(x+12*cs+pet(d), y+14.6*cs+pet(d))
    cpx = x+11*cs
    cpy = y+15*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+11*cs+pet(d), y+14*cs+pet(d))
    cpx = x+13*cs
    cpy = y+8*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+17*cs+pet(d), y+8*cs+pet(d))
    cpx = x+23*cs
    cpy = y+8*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+22*cs+pet(d), y+14*cs+pet(d))
    ctx.stroke()

    //8
    ctx.beginPath()
    ctx.moveTo(x+5*cs+pet(d), y+14*cs+pet(d))
    cpx = x+10*cs
    cpy = y+3*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*cs+pet(d), y+3*cs+pet(d))
    cpx = x+28*cs
    cpy = y+4*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+26*cs+pet(d), y+14*cs+pet(d))
   // ctx.stroke()

    //9
    ctx.beginPath()
    ctx.moveTo(x+20*cs+pet(d), y+12*cs+pet(d))
    cpx = x+18*cs
    cpy = y+14*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+17*cs+pet(d), y+13*cs+pet(d))
    cpx = x+16*cs
    cpy = y+11*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*cs+pet(d), y+10*cs+pet(d))
    cpx = x+19*cs
    cpy = y+10*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+19*cs+pet(d), y+11*cs+pet(d))
    ctx.stroke()

    y += 0.6*cs
    //10
    ctx.beginPath()
    ctx.moveTo(x+16*cs+pet(d), y+3.3*cs+pet(d))
    cpx = x+19*cs
    cpy = y+3*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+19*cs+pet(d), y+5*cs+pet(d))
    cpx = x+19*cs
    cpy = y+6*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+17*cs+pet(d), y+6*cs+pet(d))
    cpx = x+16*cs
    cpy = y+6*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+15*cs+pet(d), y+6*cs+pet(d))
    ctx.stroke()

    //11
    ctx.beginPath()
    ctx.moveTo(x+16*cs+pet(d), y+3.3*cs+pet(d))
    cpx = x+16*cs
    cpy = y+6*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*cs+pet(d), y+6*cs+pet(d))
    ctx.stroke()
    y -= 0.6*cs
  }

  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function free_readingAt (x,y,W,INVERT) { // like red card
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let off = document.createElement('CANVAS')
  let ctxoff = off.getContext("2d")
  off.width = canvas.width, off.height = canvas.height
  let H = W*1.5, cpx, cpy, points = []
  let x0 = x, y0 = y
  let savedLW = ctx.lineWidth
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctxoff.lineWidth = ctx.lineWidth
  let savedS = ctx.strokeStyle
  let savedF = ctx.fillStyle
 // ctxoff.strokeStyle = color
  ctxoff.fillStyle = randomColorVLight()//randomPick(["#6ed7eaff"])

  ctxoff.shadowBlur = 10
  ctxoff.shadowColor = "#44444490"
  ctxoff.shadowOffsetX = 2
  ctxoff.shadowOffsetY = 12
  if (INVERT && INVERT[0] === 1) {
    ctxoff.shadowOffsetX = -2
    ctxoff.shadowOffsetY  = -12
  }
  ctxoff.fillRect(x,y,W,H)
  ctxoff.shadowBlur = 0
  ctxoff.shadowOffsetX = 0
  ctxoff.shadowOffsetY = 0
  ctxoff.fillStyle = savedF
  ctxoff.save()
  ctxoff.beginPath()
  ctxoff.moveTo(x,y)
  ctxoff.lineTo(x+W,y)
  ctxoff.lineTo(x+W,y+H)
  ctxoff.lineTo(x,y+H)
  ctxoff.closePath()
  ctxoff.clip()
  paperize(off)
  paperize(off)
  ctxoff.restore()
  ctxoff.fillStyle = savedF
  let fs = W*0.18
  ctxoff.font = "100 "+fs + "pt Arial"

  ctxoff.translate(x+3*W/4, y) // Set the point of rotation
  ctxoff.rotate(Math.PI / 2)
  ctxoff.fillText('  1  2  3  4  5', 0, 0) // Place text at new origin
  ctxoff.fillText('  6  7  8  9  X', 0, 2*W/3) // Place text at new origin
  fs = W*0.085
  ctxoff.font = "100 "+fs + "pt Arial"
  ctxoff.fillText(' 10th Tarot Reading Free!', H/16, 1*W/4)
  fs = W*0.02
  ctxoff.font = "100 "+fs + "pt Arial"
  ctxoff.fillText('Offer not available in FL, VA, AK, AZ, MD, NM, SD, MO, CT, OH, VT, NY, CA or KS. Restrictions may apply.', H/20, 1.5*W/4)
  ctxoff.setTransform(1, 0, 0, 1, 0, 0)
 
  ctx.shadowBlur = 10
  ctx.shadowColor = "#44444490"
  ctx.shadowOffsetX = 2
  ctx.shadowOffsetY = 12
  if (INVERT && INVERT[0] === 1) {
    ctx.shadowOffsetX = -2
    ctx.shadowOffsetY  = -12
  }
  let  i = 0, yoff = 0, p = 0
  y = y0+H/9
  ctxoff.strokeStyle = "#000000ff"
  for (; i < 5; i++) {
    ctxoff.globalCompositeOperation = "source-over"
    ctxoff.strokeRect(x+4*W/5-W/12, y+yoff-W/10, W/4.5, W/4.5)
    ctxoff.globalCompositeOperation = "destination-out"
    ctxoff.beginPath()
    p = pet(W/10)
    ctxoff.arc(x+4*W/5+p, y+yoff+p, W/20,0, 2*Math.PI)
   // ctx.arc(x+4*W/5+p, y+yoff+p, W/20,0, 2*Math.PI)
    ctxoff.fill()
    yoff += H/5.5
  }
  i = 0, yoff = 0, y = y0+H/9
  for (; i < 5; i++) {
    ctxoff.globalCompositeOperation = "source-over"
    ctxoff.strokeRect(x+1*W/5-W/7, y+yoff-W/10, W/4.5, W/4.5)
    ctxoff.globalCompositeOperation = "destination-out"
    ctxoff.beginPath()
    ctxoff.arc(x+1*W/5+pet(W/10), y+yoff+pet(W/20), W/20,0, 2*Math.PI)
    if (i <4)
    ctxoff.fill()
    yoff += H/5.5
  }
  ctxoff.globalCompositeOperation = "source-over"
  ctx.drawImage(off,0,0,off.width,off.height)
  ctx.shadowBlur = 0
  ctx.shadowOffsetX = 0
  ctx.shadowOffsetY = 0
  let orientation = "u"
  if (INVERT && INVERT[0] === 1)
     orientation = "i"
  if (W < 450)
    cardcaption ("free_readingAt",orientation,x,y,340,506)
}

function diamondpunchAt (ctx,x,y,W,color) {
  //let canvas = document.getElementById("myCanvas")
  //let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let cs = W/24
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, d = 0, angle = pet(180)
  ctx.save()
  //1
  ctx.beginPath()
  p = rotatePoint(x+12*cs+pet(d), y+2*cs+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+4*cs+pet(d), y+12*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+12*cs+pet(d), y+22*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+20*cs+pet(d), y+12*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+12*cs+pet(d), y+2*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.globalCompositeOperation = "destination-out"
  ctx.fill()
  //ctx.clip()
  ctx.globalCompositeOperation = "source-over"

  ctx.shadowBlur = 4
  ctx.shadowColor = "#333333"
  ctx.shadowOffsetX = -3
  ctx.shadowOffsetY = -3
  ctx.fillStyle = "#ffffff"

  ctx.fill()
  ctx.shadowBlur = 0
  ctx.shadowOffsetX = 0
  ctx.shadowOffsetY = 0
  ctx.restore()
  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
 
  console.log()
}

function shadowAngle(ctx, angle) {
  ctx.shadowBlur = 4

  ctx.shadowOffsetX // set based on angle  _\|/_ 
  ctx.shadowOffsetY //                      /|\

}

function lubbers_sp__lp_alt_rp_At (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = W/44
  let cs = W/24, i = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/200
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  for (; i < 7; i++) {
    y -= 4*cs
    // VI 
    ctx.beginPath()
    ctx.moveTo(x+10*cs+pet(d), y+1*cs+pet(d))
    ctx.lineTo(x+11*cs+pet(d), y+3*cs+pet(d))
    ctx.lineTo(x+12*cs+pet(d), y+1*cs+pet(d))
    ctx.stroke()

    //5
    ctx.beginPath()
    ctx.moveTo(x+13*cs+pet(d), y+1*cs+pet(d))
    ctx.lineTo(x+13*cs+pet(d), y+3*cs+pet(d))
    ctx.stroke()

    //6
    ctx.beginPath()
    ctx.moveTo(x+9*cs+pet(d), y+1*cs+pet(d))
    ctx.lineTo(x+14*cs+pet(d), y+1*cs+pet(d))
    ctx.stroke()

    //7
    ctx.beginPath()
    ctx.moveTo(x+9*cs+pet(d), y+3*cs+pet(d))
    ctx.lineTo(x+14*cs+pet(d), y+3*cs+pet(d))
    ctx.stroke()
    y += 4*cs
    //1
    ctx.beginPath()
    ctx.moveTo(x+22*cs+pet(d), y+4*cs+pet(d))
    cpx = x+24*cs
    cpy = y+4*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+22*cs+pet(d), y+6*cs+pet(d))
    cpx = x+20*cs
    cpy = y+8*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+6*cs+pet(d), y+8*cs+pet(d))
    cpx = x+4*cs
    cpy = y+8*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+4*cs+pet(d), y+6*cs+pet(d))
    cpx = x+4*cs
    cpy = y+4*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*cs+pet(d), y+4*cs+pet(d))
    cpx = x+22*cs
    cpy = y+4*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+22*cs+pet(d), y+4*cs+pet(d))
    ctx.stroke()

    //2
    ctx.beginPath()
    ctx.moveTo(x+4*cs+pet(d), y+6*cs+pet(d))
    cpx = x+4*cs
    cpy = y+8*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+2*cs+pet(d), y+8*cs+pet(d))
    cpx = x+1*cs
    cpy = y+8*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+1*cs+pet(d), y+5*cs+pet(d))
    cpx = x+1*cs
    cpy = y+4*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+3*cs+pet(d), y+4*cs+pet(d))
    cpx = x+4*cs
    cpy = y+4*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+4*cs+pet(d), y+6*cs+pet(d))
    ctx.stroke()

    //3
    ctx.beginPath()
    ctx.moveTo(x+3*cs+pet(d), y+4*cs+pet(d))
    cpx = x+2*cs
    cpy = y+4*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+2*cs+pet(d), y+5*cs+pet(d))
    cpx = x+2*cs
    cpy = y+7*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+3*cs+pet(d), y+7*cs+pet(d))
    cpx = x+4*cs
    cpy = y+7*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+4*cs+pet(d), y+6*cs+pet(d))
    cpx = x+4*cs
    cpy = y+4*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+3*cs+pet(d), y+4*cs+pet(d))
    ctx.stroke()

    //4
    ctx.beginPath()
    ctx.moveTo(x+15*cs+pet(d), y+7*cs+pet(d))
    cpx = x+14*cs
    cpy = y+7*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+14*cs+pet(d), y+6*cs+pet(d))
    cpx = x+15*cs
    cpy = y+3*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*cs+pet(d), y+2*cs+pet(d))
    cpx = x+19*cs
    cpy = y+2*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+17*cs+pet(d), y+5*cs+pet(d))
    cpx = x+16*cs
    cpy = y+6*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+15*cs+pet(d), y+7*cs+pet(d))
    ctx.stroke()

    //5
    ctx.beginPath()
    ctx.moveTo(x+18*cs+pet(d), y+2*cs+pet(d))
    cpx = x+19*cs
    cpy = y+2*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+19*cs+pet(d), y+8*cs+pet(d))
    cpx = x+18*cs
    cpy = y+8*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*cs+pet(d), y+2*cs+pet(d))
    ctx.stroke()

    //6
    ctx.beginPath()
    ctx.moveTo(x+19*cs+pet(d), y+8*cs+pet(d))
    cpx = x+22*cs
    cpy = y+8*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+22*cs+pet(d), y+8*cs+pet(d))
    cpx = x+23*cs
    cpy = y+8*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+23*cs+pet(d), y+9*cs+pet(d))
    cpx = x+23*cs
    cpy = y+10*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+22*cs+pet(d), y+10*cs+pet(d))
    ctx.stroke()

    //7
    ctx.beginPath()
    ctx.moveTo(x+12*cs+pet(d), y+7*cs+pet(d))
    cpx = x+13*cs
    cpy = y+7*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+13*cs+pet(d), y+3*cs+pet(d))
    cpx = x+13*cs
    cpy = y+2*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*cs+pet(d), y+2*cs+pet(d))
    cpx = x+11*cs
    cpy = y+6*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*cs+pet(d), y+7*cs+pet(d))
    ctx.stroke()

    //8
    ctx.beginPath()
    ctx.moveTo(x+12*cs+pet(d), y+2*cs+pet(d))
    cpx = x+13*cs
    cpy = y+2*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+14*cs+pet(d), y+8*cs+pet(d))
    cpx = x+13*cs
    cpy = y+7*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*cs+pet(d), y+2*cs+pet(d))
    ctx.stroke()

    //9
    ctx.beginPath()
    ctx.moveTo(x+14*cs+pet(d), y+8*cs+pet(d))
    cpx = x+16*cs
    cpy = y+8*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*cs+pet(d), y+8*cs+pet(d))
    cpx = x+17*cs
    cpy = y+8*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+17*cs+pet(d), y+9*cs+pet(d))
    cpx = x+17*cs
    cpy = y+10*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*cs+pet(d), y+10*cs+pet(d))
    ctx.stroke()

    //10
    ctx.beginPath()
    ctx.moveTo(x+11*cs+pet(d), y+7*cs+pet(d))
    cpx = x+8*cs
    cpy = y+3*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+7*cs+pet(d), y+3*cs+pet(d))
    cpx = x+9*cs
    cpy = y+6*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+11*cs+pet(d), y+7*cs+pet(d))
    ctx.stroke()

    //11
    ctx.beginPath()
    ctx.moveTo(x+8*cs+pet(d), y+8.5*cs+pet(d))
    cpx = x+8*cs
    cpy = y+5*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+7*cs+pet(d), y+3*cs+pet(d))
    cpx = x+7*cs
    cpy = y+7*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*cs+pet(d), y+8.5*cs+pet(d))
    ctx.stroke()

    //12
    ctx.beginPath()
    ctx.moveTo(x+8*cs+pet(d), y+8.5*cs+pet(d))
    cpx = x+6*cs
    cpy = y+8.5*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+6*cs+pet(d), y+8.5*cs+pet(d))
    cpx = x+5*cs
    cpy = y+8.5*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+5*cs+pet(d), y+9*cs+pet(d))
    cpx = x+5*cs
    cpy = y+10*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+6*cs+pet(d), y+10*cs+pet(d))
    ctx.stroke()

    //13
    ctx.beginPath()
    ctx.moveTo(x+3*cs+pet(d), y+4*cs+pet(d))
    cpx = x+3*cs
    cpy = y+2*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+13*cs+pet(d), y+2*cs+pet(d))
    ctx.stroke()

    //14
    ctx.beginPath()
    ctx.moveTo(x+2*cs+pet(d), y+4*cs+pet(d))
    cpx = x+2*cs
    cpy = y+1*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+13*cs+pet(d), y+1*cs+pet(d))
    ctx.stroke()

    //15
    ctx.beginPath()
    ctx.moveTo(x+9*cs+pet(d), y+8*cs+pet(d))
    cpx = x+10*cs
    cpy = y+6*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+10*cs+pet(d), y+4*cs+pet(d))
    ctx.stroke()

    //16
    ctx.beginPath()
    ctx.moveTo(x+10*cs+pet(d), y+6*cs+pet(d))
    cpx = x+22*cs
    cpy = y+6*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+22*cs+pet(d), y+4*cs+pet(d))
    ctx.stroke()

    //17
    ctx.beginPath()
    ctx.moveTo(x+7*cs+pet(d), y+5*cs+pet(d))
    cpx = x+20*cs
    cpy = y+5*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+22*cs+pet(d), y+4*cs+pet(d))
    ctx.stroke()

    //18
    ctx.beginPath()
    ctx.moveTo(x+20*cs+pet(d), y+18*cs+pet(d))
    cpx = x+20*cs
    cpy = y+16*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*cs+pet(d), y+16*cs+pet(d))
    cpx = x+3*cs
    cpy = y+16*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+3*cs+pet(d), y+16*cs+pet(d))
    cpx = x+0*cs
    cpy = y+16*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+2*cs+pet(d), y+18*cs+pet(d))
    cpx = x+6*cs
    cpy = y+20*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+19*cs+pet(d), y+20*cs+pet(d))
    cpx = x+20*cs
    cpy = y+20*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20*cs+pet(d), y+18*cs+pet(d))
    ctx.stroke()

    //19
    ctx.beginPath()
    ctx.moveTo(x+20*cs+pet(d), y+18*cs+pet(d))
    cpx = x+20*cs
    cpy = y+16*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+22*cs+pet(d), y+16*cs+pet(d))
    cpx = x+23*cs
    cpy = y+16*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+23*cs+pet(d), y+17*cs+pet(d))
    cpx = x+23*cs
    cpy = y+20*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+22*cs+pet(d), y+20*cs+pet(d))
    cpx = x+20*cs
    cpy = y+20*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20*cs+pet(d), y+18*cs+pet(d))
    ctx.stroke()

    //20
    ctx.beginPath()
    ctx.moveTo(x+22*cs+pet(d), y+17*cs+pet(d))
    cpx = x+22*cs
    cpy = y+16*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+21*cs+pet(d), y+16*cs+pet(d))
    cpx = x+20*cs
    cpy = y+16*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20*cs+pet(d), y+18*cs+pet(d))
    cpx = x+20*cs
    cpy = y+19*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+21*cs+pet(d), y+19*cs+pet(d))
    cpx = x+22*cs
    cpy = y+19*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+22*cs+pet(d), y+17*cs+pet(d))
    ctx.stroke()

    //21
    ctx.beginPath()
    ctx.moveTo(x+14*cs+pet(d), y+16*cs+pet(d))
    cpx = x+14*cs
    cpy = y+18*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+15*cs+pet(d), y+20*cs+pet(d))
    ctx.stroke()

    //22
    ctx.beginPath()
    ctx.moveTo(x+6*cs+pet(d), y+14*cs+pet(d))
    cpx = x+9*cs
    cpy = y+15*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+10*cs+pet(d), y+18*cs+pet(d))
    cpx = x+10*cs
    cpy = y+19*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+9*cs+pet(d), y+19*cs+pet(d))
    cpx = x+6*cs
    cpy = y+16*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+6*cs+pet(d), y+14*cs+pet(d))
    ctx.stroke()

    //23
    ctx.beginPath()
    ctx.moveTo(x+6*cs+pet(d), y+14*cs+pet(d))
    cpx = x+5*cs
    cpy = y+14*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+5*cs+pet(d), y+20*cs+pet(d))
    cpx = x+6*cs
    cpy = y+20*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+6*cs+pet(d), y+14*cs+pet(d))
    ctx.stroke()

    //24
    ctx.beginPath()
    ctx.moveTo(x+5*cs+pet(d), y+20*cs+pet(d))
    cpx = x+2*cs
    cpy = y+20*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+2*cs+pet(d), y+20*cs+pet(d))
    cpx = x+1*cs
    cpy = y+20*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+1*cs+pet(d), y+21*cs+pet(d))
    cpx = x+1*cs
    cpy = y+22*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+2*cs+pet(d), y+22*cs+pet(d))
    ctx.stroke()

    //25
    ctx.beginPath()
    ctx.moveTo(x+12*cs+pet(d), y+19*cs+pet(d))
    cpx = x+11*cs
    cpy = y+19*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+11*cs+pet(d), y+15*cs+pet(d))
    cpx = x+12*cs
    cpy = y+15*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*cs+pet(d), y+16*cs+pet(d))
    cpx = x+13*cs
    cpy = y+19*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*cs+pet(d), y+19*cs+pet(d))
    ctx.stroke()

    //26
    ctx.beginPath()
    ctx.moveTo(x+11*cs+pet(d), y+15*cs+pet(d))
    cpx = x+10*cs
    cpy = y+15*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+10*cs+pet(d), y+20*cs+pet(d))
    cpx = x+11*cs
    cpy = y+18*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+11*cs+pet(d), y+15*cs+pet(d))
    ctx.stroke()

    //27
    ctx.beginPath()
    ctx.moveTo(x+10*cs+pet(d), y+20*cs+pet(d))
    cpx = x+8*cs
    cpy = y+20*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*cs+pet(d), y+20*cs+pet(d))
    cpx = x+7*cs
    cpy = y+20*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+7*cs+pet(d), y+21*cs+pet(d))
    cpx = x+7*cs
    cpy = y+22*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*cs+pet(d), y+22*cs+pet(d))
    ctx.stroke()

    //28
    ctx.beginPath()
    ctx.moveTo(x+13*cs+pet(d), y+19*cs+pet(d))
    cpx = x+15*cs
    cpy = y+15*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*cs+pet(d), y+15*cs+pet(d))
    cpx = x+14*cs
    cpy = y+19*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+13*cs+pet(d), y+19*cs+pet(d))
    ctx.stroke()

    //29
    ctx.beginPath()
    ctx.moveTo(x+16*cs+pet(d), y+15*cs+pet(d))
    cpx = x+16*cs
    cpy = y+19*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+15*cs+pet(d), y+20*cs+pet(d))
    ctx.stroke()

    //30
    ctx.beginPath()
    ctx.moveTo(x+16*cs+pet(d), y+15*cs+pet(d))
    cpx = x+17*cs
    cpy = y+19*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*cs+pet(d), y+20.5*cs+pet(d))
    cpx = x+16*cs
    cpy = y+17*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*cs+pet(d), y+15*cs+pet(d))
    ctx.stroke()

    //31
    ctx.beginPath()
    ctx.moveTo(x+16*cs+pet(d), y+20.5*cs+pet(d))
    cpx = x+18*cs
    cpy = y+20.5*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*cs+pet(d), y+20.5*cs+pet(d))
    cpx = x+19*cs
    cpy = y+20.5*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+19*cs+pet(d), y+21*cs+pet(d))
    cpx = x+19*cs
    cpy = y+22*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*cs+pet(d), y+22*cs+pet(d))
    ctx.stroke()

    //32
    ctx.beginPath()
    ctx.moveTo(x+19*cs+pet(d), y+20*cs+pet(d))
    cpx = x+17*cs
    cpy = y+20*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*cs+pet(d), y+16*cs+pet(d))
    ctx.stroke()

    //33
    ctx.beginPath()
    ctx.moveTo(x+16*cs+pet(d), y+17*cs+pet(d))
    cpx = x+5*cs
    cpy = y+17*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+3*cs+pet(d), y+16*cs+pet(d))
    ctx.stroke()

    //34
    ctx.beginPath()
    ctx.moveTo(x+21*cs+pet(d), y+16*cs+pet(d))
    cpx = x+21*cs
    cpy = y+14*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+11*cs+pet(d), y+14*cs+pet(d))
    ctx.stroke()

    //35
    ctx.beginPath()
    ctx.moveTo(x+22*cs+pet(d), y+16*cs+pet(d))
    cpx = x+22*cs
    cpy = y+13*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+10*cs+pet(d), y+13*cs+pet(d))
    ctx.stroke()

    //36
    ctx.beginPath()
    ctx.moveTo(x+17*cs+pet(d), y+18*cs+pet(d))
    cpx = x+3*cs
    cpy = y+17*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+2*cs+pet(d), y+16*cs+pet(d))
    ctx.stroke()

    ctx.beginPath()
    ctx.moveTo(x+6*cs+pet(d), y+8*cs+pet(d))
    cpx = x+8*cs
    cpy = y+8*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*cs+pet(d), y+4*cs+pet(d))
    ctx.stroke()
  }

  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}    
 
function wokeAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  let cs = W/32
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.fillStyle = "#e5a732"
  //1
  ctx.beginPath()
  ctx.moveTo(x+2*cs+pet(d), y+22*cs+pet(d))
  cpx = x+2*cs
  cpy = y+25*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+10*cs+pet(d), y+26*cs+pet(d))
  cpx = x+16*cs
  cpy = y+27.5*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+22*cs+pet(d), y+26*cs+pet(d))
  cpx = x+30*cs
  cpy = y+25*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+30*cs+pet(d), y+22*cs+pet(d))
  cpx = x+31*cs
  cpy = y+16*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+30*cs+pet(d), y+10*cs+pet(d))
  cpx = x+30*cs
  cpy = y+7*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+22*cs+pet(d), y+6*cs+pet(d))
  cpx = x+16*cs
  cpy = y+4.5*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+10*cs+pet(d), y+6*cs+pet(d))
  cpx = x+2*cs
  cpy = y+7*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+2*cs+pet(d), y+10*cs+pet(d))
  cpx = x+1*cs
  cpy = y+16*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+2*cs+pet(d), y+22*cs+pet(d))
  cpx = x+2*cs
  cpy = y+25*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+10*cs+pet(d), y+26*cs+pet(d))
  ctx.fill()

  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}


function bubbleAt (x,y,W,color, INVERT) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let cs = W/24
  let p = [], cp = [], lastp = [], i = 0, r
  let cx = x+W/2, cy = y+H/2, d = 0, angle = 0
 
  ailogoAt(x+2*cs, y+2*cs, W*0.83, color, savedF, INVERT)

  if (INVERT) 
    bubblesAt(x,y-cs,W,color)
  else {
    a_bubbleAt(x-cs/2, y-cs*1.5, W+cs, color)
    a_bubbleAt(x+W*0.9*Math.random(),y+H*Math.random(),W/5,color)
    a_bubbleAt(x+W*0.8*Math.random(),y+H*Math.random(),W/9,color)
    a_bubbleAt(x+W*0.8*Math.random(),y+H*Math.random(),W/11,color)
  }
}

function bubblesAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let cs = W/24
  let p = [], cp = [], lastp = [], i = 0, r
  let cx = x+W/2, cy = y+H/2, d = 0, angle = 0

  for (; i < 71; i++) {
    //x = Math.random()*W, y = Math.random()*H 
    r = 6 + Math.random() * 9
    angle = Math.random()*Math.PI*2
    x = r*cs * Math.cos(angle)+cx
    y = r*cs * Math.sin(angle)+cy
    let w = 2+Math.random()*cs*1.7
    a_bubbleAt (x,y,w,color)
  }
}

function poppedAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let cs = W/24
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, d = 0, angle = pet(360)
  
  const grad2=ctx.createRadialGradient(x+12*W/24, y+12*H/24, W/2, x+12*W/24, y+12*H/24, W/1.9)
  grad2.addColorStop(0,color)
  grad2.addColorStop(1,"#ffffff80")
  ctx.fillStyle = grad2
  //1
  ctx.beginPath()
  p = rotatePoint(x+14*cs+pet(d), y+6*cs+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+14*cs+pet(d)
  cpy = y+5*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+15*cs+pet(d), y+4*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+16*cs+pet(d)
  cpy = y+3*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+16*cs+pet(d), y+2*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+16*cs+pet(d)
  cpy = y+1*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+14*cs+pet(d), y+1*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+12*cs+pet(d)
  cpy = y+1*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*cs+pet(d), y+3*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+12*cs+pet(d)
  cpy = y+5*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+11*cs+pet(d), y+6*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()

  //2
  ctx.beginPath()
  p = rotatePoint(x+10*cs+pet(d), y+21*cs+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+10*cs+pet(d)
  cpy = y+24*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+13*cs+pet(d), y+24*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+16*cs+pet(d)
  cpy = y+24*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+16*cs+pet(d), y+21*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()

  //3
  ctx.beginPath()
  p = rotatePoint(x+4*cs+pet(d), y+11*cs+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+1*cs+pet(d)
  cpy = y+10*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+1*cs+pet(d), y+13*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+1*cs+pet(d)
  cpy = y+15*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+5*cs+pet(d), y+14*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()

  //4
  ctx.beginPath()
  p = rotatePoint(x+21*cs+pet(d), y+8*cs+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+23*cs+pet(d)
  cpy = y+11*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+21*cs+pet(d), y+14*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()

  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function a_bubbleAt (x,y,W,color,INVERT) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.lineWidth = W/100
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let cs = W/24
  let p = [], cp = [], lastp = [], i = 0
  let cx = x+W/2, cy = y+H/2, d = 0, angle = 0
  
  ctx.strokeStyle = "#ffffff"
  let lw = ctx.lineWidth
  ctx.globalAlpha /= 2
  ctx.lineWidth = lw * 0.5
  ctx.beginPath()
  ctx.arc(x+12*cs, y+12*cs, 12*cs, 0, 2*Math.PI)
  ctx.stroke()

  ctx.globalAlpha *= 2
  
  col2 = "#ffffff00"
  const grad=ctx.createRadialGradient(x+7*W/24, y+7*H/24, W/24, x+7*W/24, y+7*H/24, W/6)
  grad.addColorStop(0,"#ffffff")
  grad.addColorStop(1,col2)

  const grad2=ctx.createRadialGradient(x+12*W/24, y+12*H/24, W/3, x+12*W/24, y+12*H/24, W/2)
  grad2.addColorStop(0,col2)
  grad2.addColorStop(1,"#ffffff80")
  ctx.fillStyle = grad2
  ctx.beginPath()
  ctx.arc(x+12*cs, y+12*cs, 12*cs, 0*Math.PI, 2*Math.PI)
  ctx.fill()

  ctx.fillStyle = grad
  ctx.globalAlpha /= 1
  ctx.beginPath()
  ctx.ellipse(x+8*cs, y+8*cs, 5*cs, 3.3*cs, -Math.PI/4, 0, 2*Math.PI)
  ctx.fill()
  ctx.globalAlpha *= 1
  ctx.fillStyle = "#ffffff77"
  ctx.beginPath()
  ctx.arc(x+17*cs+pet(d), y+17*cs+pet(d), cs, 0, 2*Math.PI)
  ctx.fill()
  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}


function ailogoAt (x,y,W,color,sf,INVERT) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let cs = W/24
  let p = [], cp = [], lastp = [], i = 0
  let cx = x+W/2, cy = y+H/2, d = 0, angle = 0
  if (INVERT)
    poppedAt(x-2*cs,y-2*cs,W*1.2, color)
  //1
  for (; i < 6; i++) {
    ctx.beginPath()
    p = rotatePoint(x+14*cs+pet(d), y+18*cs+pet(d) ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    p = rotatePoint(x+22*cs+pet(d), y+13*cs+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+22*cs+pet(d), y+5*cs+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+24*cs+pet(d), y+9*cs+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+24*cs+pet(d), y+15*cs+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+16*cs+pet(d), y+20*cs+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+13*cs+pet(d), y+18.4*cs+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    ctx.fill()
    angle += 60
  }
  ctx.font = "800 "+6*cs+"pt sans-serif"
  ctx.fillText("Ai", x+7.8*cs, y+14.3*cs)
  if (INVERT) {
    ctx.save()
    ctx.beginPath()
    ctx.moveTo(x,y)
    ctx.lineTo(x+W, y)
    ctx.lineTo(x+W, y+H+4*cs)
    ctx.lineTo(x, y+H+4*cs)
    ctx.closePath()
    ctx.clip()
    ctx.globalAlpha /= 2
    i = 0
    for (; i < 450; i++) {
      chip2At(x+Math.random()*W, y+Math.random()*H, 7*Math.random(), sf)
    }
    ctx.globalAlpha *= 2
    ctx.restore()
  }
  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function mtg_cardAt (x,y,W,INVERT) { 
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W*1.5, cpx, cpy, points = [], cs = W/24
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle
  let colors = getCurrentPalette()
  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  ctx.fillStyle = "#333366"

  ctx.shadowBlur = 10
  ctx.shadowColor = "#444444"
  ctx.shadowOffsetX = 2
  ctx.shadowOffsetY  = 12
  ctx.fillRect(x,y,W,H)
  ctx.shadowBlur = 0
  ctx.shadowOffsetX = 0
  ctx.shadowOffsetY  = 0

  let v = document.getElementById("featuresize").value
  document.getElementById("featuresize").value = 20
  ctx.glbalAlpha = 0.1
  let pad = 0.06*W, d=0
  blobsRect(x+8,y+8,W-16,H-16, getselectedcolor()) // whole card
  y += cs
  ctx.glbalAlpha = 0.2
  const grad2=ctx.createLinearGradient(x,H, W,y)
  grad2.addColorStop(0, adjustBrightnessC(randomPick(colors), 50));
  grad2.addColorStop(0.25, adjustBrightnessC(randomPick(colors), 50));
  grad2.addColorStop(0.75, adjustBrightnessC(randomPick(colors), 50));
  grad2.addColorStop(1,  adjustBrightnessC(randomPick(colors), 50));
  ctx.fillStyle = grad2
  ctx.fillRect(x+pad,y+1.7*pad, W-2.0*pad, H/2-pad/2.0)
  document.getElementById("featuresize").value = 14
  ctx.glbalAlpha = 0.05
  y -= cs
  // sample brightness
  let brightness = brightnessOf10(ctx, x+W/2, y+H/3, 10)
  ctx.glbalAlpha = 1
  document.getElementById("featuresize").value = v

  ctx.fillStyle = randomColorVLight()
  ctx.fillRect(x+pad, y+H/2+3.9*pad, W-2*pad, H/2-5*pad) // for text

  ctx.strokeStyle = "#000000"
  ctx.lineWidth = 5
  ctx.strokeRect(x,y,W,H)
  y += cs
  ctx.shadowBlur = 2
  ctx.shadowColor = "white"
  ctx.shadowOffsetX = -2
  ctx.shadowOffsetY = -2
  ctx.strokeRect(x+pad,y+1.6*pad,W-2*pad,H/2-8)
  
  y -= cs
  ctx.strokeRect(x+pad, y+H/2+3.9*pad, W-2*pad, H/2-5*pad)
  let color = randomColorVLight()
  
 // if (brightness > 4)
    color = randomColorVDark()
  let f = randomPick(["big_footAt", "philosopherAt", "dogcowAt", "toy_soldierAt", "spiderAt", "bacteriophageAt", "space_invaderAt", "duckrabbitAt", "salamanderAt", "snakeAt", "plastic_owlAt", "monsterAt"])
  ctx.shadowBlur = 0
  ctx.shadowOffsetX = 0
  ctx.shadowOffsetY = 0
  let val = document.getElementById("featuresize").value
  document.getElementById("featuresize").value = val*2
  window [f] (x+2.5*pad, y+48+cs, cs*17.0, color)
  document.getElementById("featuresize").value = val
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.shadowBlur = 2
  ctx.shadowColor = "white"
  ctx.shadowOffsetX = -2
  ctx.shadowOffsetY = -2
  let cap = capitalize(f.replaceAll("_", " ").replace(/At/, ""))
  ctx.closePath()

  ctx.fillStyle = randomColorVLight()
  ctx.strokeStyle = randomColorVDark()
  const grad=ctx.createLinearGradient(x,y, W,H)
  grad.addColorStop(0, adjustBrightnessC(randomPick(colors), 40));
  grad.addColorStop(0.25, adjustBrightnessC(randomPick(colors), 50));
  grad.addColorStop(0.75, adjustBrightnessC(randomPick(colors), 40));
  grad.addColorStop(1, adjustBrightnessC(randomPick(colors),50));
  
  //1
  ctx.beginPath()
  ctx.moveTo(x+1*cs+pet(d), y+1*cs+pet(d))
  ctx.lineTo(x+23*cs+pet(d), y+1*cs+pet(d))
  cpx = x+24*cs
  cpy = y+2*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+23*cs+pet(d), y+3*cs+pet(d))
  cpx = x+1*cs
  cpy = y+3*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+1*cs+pet(d), y+3*cs+pet(d))
  cpx = x+0*cs
  cpy = y+2*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+1*cs+pet(d), y+1*cs+pet(d))
  ctx.fillStyle = grad
  ctx.fill()
  ctx.stroke()

  y += H/2+pad*1.6
  ctx.beginPath()
  ctx.moveTo(x+1*cs+pet(d), y+1*cs+pet(d))
  ctx.lineTo(x+23*cs+pet(d), y+1*cs+pet(d))
  cpx = x+24*cs
  cpy = y+2*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+23*cs+pet(d), y+3*cs+pet(d))
  cpx = x+1*cs
  cpy = y+3*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+1*cs+pet(d), y+3*cs+pet(d))
  cpx = x+0*cs
  cpy = y+2*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+1*cs+pet(d), y+1*cs+pet(d))
  ctx.fillStyle = grad
  ctx.fill()
  ctx.stroke()
  y -= H/2+pad*1.6

  ctx.fillStyle = "#000000"
  ctx.font = "800 "+(W*0.048)+"pt Garamond"
  ctx.fillText("Creature - "+ cap, x+pad, y+H/2+4.7*cs)//x+pad, y+H/2+pad*3.2)
  
  ctx.fillStyle = "#000000"
  ctx.fillText(capitalize(randomWord()), x+pad, y+2.5*cs)

  // top icons
  ctx.fillStyle = randomColorLight()
  ctx.strokeStyle = "#000000"
  ctx.beginPath()
  ctx.arc(x+21.5*cs+pet(d), y+2*cs+pet(d), cs*0.7, 0, 2*Math.PI)
  ctx.fill()
  ctx.stroke()
  //3
  ctx.beginPath()
  ctx.arc(x+19.5*cs+pet(d), y+2*cs+pet(d), cs*0.7, 0, 2*Math.PI)
  ctx.fill()
  ctx.stroke()

  ctx.font = "800 "+(W*0.04)+"pt sans"
  ctx.fillStyle = "#000000"
  ctx.fillText(randomPick(["3","4","5"]), x+19.1*cs+pet(d), y+2.4*cs+pet(d))
  ctx.fillText(randomPick(["+","x","a"]), x+21.1*cs+pet(d), y+2.4*cs+pet(d)) // unicode?

  ctx.shadowBlur = 0
  ctx.shadowOffsetX = 0
  ctx.shadowOffsetY = 0
  ctx.fillStyle = "#000000"
  ctx.font = ""+(W*0.045)+"pt Garamond"
  if (INVERT && INVERT[0]) {
    ctx.fillText("Deal five damage to other", x+44, y+H/2+5.2*pad)
    ctx.fillText("players. Sleep until noon.", x+44, y+H/2+5.2*pad+W*0.1)
    ctx.fillText("4 mana. 6 hummos. 3 tabouli.", x+44, y+H/2+5.2*pad+W*0.2)
  } else {
    ctx.fillText("Wait five minutes before", x+44, y+H/2+5.2*pad)
    ctx.fillText("playing this card. Maybe read", x+44, y+H/2+5.2*pad+W*0.1)
    ctx.fillText("a book or something?", x+44, y+H/2+5.2*pad+W*0.2)
  }
  ctx.font = "italic "+(W*0.045)+"pt Garamond"
  ctx.fillText("\""+capitalize(randomWord())+" "+randomWord()+".\"", x+44, y+H/2+5.2*pad+W*0.3)
}

function flash_cardAt (x,y,W,INVERT) { // nodraw
  let canvas = document.getElementById("myCanvas")
  let color = randomPick(["#cb6d09ff", "#d6c400ff", "#3a7a0fff", 
    "#7ad650", "#059440", "#0a9bdf", "#055289ff", "#074d98", 
    "#7c43a3", "#e00665", "#730f36", "#e10613", "#ffaeb0ff", "#c41c1d"])

  let ctx = canvas.getContext("2d")
  let H = W*1.5, cpx, cpy, points = [], cs = W/24
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle
  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.shadowBlur = 10
  ctx.shadowColor = "#444444"
  ctx.shadowOffsetX = 2
  ctx.shadowOffsetY  = 12
  if (INVERT && INVERT[0] === 1) {
    ctx.shadowOffsetX = -2
    ctx.shadowOffsetY  = -12
  }
  ctx.fillStyle = color
  console.log(W)
  roundedRect(x,y,W,H, 15, ctx)
  ctx.shadowBlur = 0
  ctx.shadowOffsetX = 0
  ctx.shadowOffsetY  = 0
  ctx.fillStyle = "#eeffee"
  let pad=W/10
  roundedRect(x+pad/2,y+pad/2,W-pad,H-pad, 15, ctx)
  ctx.fillStyle = color
  ctx.font = "800 "+(W*0.34)+"pt sans-serif"
  let f = randomPick(["heartAt", "lampAt", "sunAt","umbrellaAt","pencilAt","sailboatAt","treeAt", "slideAt", "ladderAt", "swingAt","cakeAt", "catAt", "birdAt", 
    "bicycleAt","appleAt", "octopusAt", "chairAt", "tankAt", "gunAt"])
  let word = capitalize(f.substring(0, f.length-2))
  let letters = f.substring(0, 1).toUpperCase() +" "+f.substring(0, 1)
  let w = ctx.measureText(letters).width
  ctx.fillText(letters ,x+W/2-w/2, y+1.5*H/5)
  
  // adjust font size for name length & center
  ctx.font = "800 "+(W*0.15)+"pt sans-serif"
  w = ctx.measureText(word).width
  
  ctx.fillText(word,x+W/2-w/2, y+6.3*H/7)
  let v = document.getElementById("featuresize").value 
  document.getElementById("featuresize").value *= 2
  window [f] (x+W/4, y+H/2-5*cs, W/1.8, color)
  document.getElementById("featuresize").value = v
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50

  let orientation = "u"
  if (INVERT && INVERT[0] === 1)
     orientation = "i"
  if (W < 450)
    cardcaption ("flash_cardAt",orientation,x,y,340,506)
}

function rolodexAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let cs = W/24
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, d = 0, angle = 90
  ctx.save()
  ctx.shadowBlur = 10
  ctx.shadowColor = "#444444"
  ctx.shadowOffsetX = 2
  ctx.shadowOffsetY  = 12
  ctx.beginPath()
  p = rotatePoint(x+2*cs+pet(d), y+26*cs+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+11.5*cs+pet(d), y+26*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+11.5*cs+pet(d), y+25*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+11*cs+pet(d), y+25*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+11*cs+pet(d), y+23*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+13*cs+pet(d), y+23*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+13*cs+pet(d), y+25*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+12.5*cs+pet(d), y+25*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+12.5*cs+pet(d), y+26*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+19.5*cs+pet(d), y+26*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+19.5*cs+pet(d), y+25*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+19*cs+pet(d), y+25*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+19*cs+pet(d), y+23*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+21*cs+pet(d), y+23*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+21*cs+pet(d), y+25*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+20.5*cs+pet(d), y+25*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+20.5*cs+pet(d), y+26*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+30*cs+pet(d), y+26*cs+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  cpx = x+32*cs+pet(d)
  cpy = y+26*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+32*cs+pet(d), y+24*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+32*cs+pet(d)
  cpy = y+6*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+32*cs+pet(d), y+6*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+32*cs+pet(d)
  cpy = y+4*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+30*cs+pet(d), y+4*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+20*cs+pet(d)
  cpy = y+4*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+20*cs+pet(d), y+4*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+18*cs+pet(d)
  cpy = y+4*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+18*cs+pet(d), y+6*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+18*cs+pet(d)
  cpy = y+7*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+18*cs+pet(d), y+7*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+2*cs+pet(d)
  cpy = y+7*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+2*cs+pet(d), y+7*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+0*cs+pet(d)
  cpy = y+7*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+0*cs+pet(d), y+9*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+0*cs+pet(d)
  cpy = y+24*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+0*cs+pet(d), y+24*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+0*cs+pet(d)
  cpy = y+26*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+2*cs+pet(d), y+26*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fillStyle = "#bfb392ff"
  ctx.fill()
  ctx.shadowBlur = 0
  ctx.shadowOffsetX = 0
  ctx.shadowOffsetY  = 0
  
  ctx.clip()
  paperize()
  ctx.restore()
  ctx.fillStyle = "#9ebee1ff"
  p = rotatePoint(x+24*cs+pet(d), y+6*cs+pet(d),cx,cy,angle)
  tape(p[0],p[1],true)
  p = rotatePoint(x+cs ,y+cs*12,cx,cy,angle)
  ctx.font = "800 "+(W*0.5)+"pt monospaced"
  ctx.fillStyle = "#0404a7ff"
  ctx.fillText("Ssssssss",p[0], p[1])

  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function six_of_heartsAt (x,y,W,INVERT) {
  if (INVERT && INVERT[0]) {
    unoAt(x,y,W,"#000000",INVERT)
    return
  }
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W*1.5, cpx, cpy, points = [], cs = W/24
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle
  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  ctx.fillStyle = "#fffcddff"

  ctx.shadowBlur = 10
  ctx.shadowColor = "#444444"
  ctx.shadowOffsetX = 2
  ctx.shadowOffsetY  = 12
  roundedRect(x,y,W,H, 15, ctx)
  ctx.shadowBlur = 0
  ctx.shadowOffsetX = 0
  ctx.shadowOffsetY  = 0
  ctx.fillStyle = "#dd0000"
  ctx.font = "100 "+(W*0.11)+"pt Garamond"
  ctx.fillText("6",x+0.8*cs+2, y+1.6*cs*2)
  // rotated 
  ctx.fillText("9",x+W-2.7*cs+2, y+H-0.5*cs*2)
  rotoheartAt(x+0.5*cs, y+4*cs, cs*2.5, "#dd0000", 0)
  rotoheartAt(x+4*cs+2, y+3*cs*2, cs*6, "#dd0000", 0)
  rotoheartAt(x+4*cs+2, y+8*cs*2, cs*6, "#dd0000", 0)
  rotoheartAt(x+4*cs+2, y+12.5*cs*2, cs*6, "#dd0000", 180)
  rotoheartAt(x+13*cs+2, y+3*cs*2, cs*6, "#dd0000", 0)
  rotoheartAt(x+13*cs+2, y+8*cs*2, cs*6, "#dd0000", 0)
  rotoheartAt(x+13*cs+2, y+12.5*cs*2, cs*6, "#dd0000", 180)
  rotoheartAt(x+W-3*cs, y+H-6.5*cs, cs*2.5, "#dd0000", 180)
  let orientation = "u"
  if (INVERT && INVERT[0] === 1)
     orientation = "i"
  if (W < 450)
    cardcaption ("six_of_heartsAt",orientation,x,y,340,506)
}

function rotoheartAt (x,y,W,color,a) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let cs = W/24
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, d = 0, angle = a

  //1
  ctx.beginPath()
  p = rotatePoint(x+12*cs+pet(d), y+24*cs+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+12*cs+pet(d)
  cpy = y+20*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+16*cs+pet(d), y+19*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+22*cs+pet(d)
  cpy = y+16*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+22*cs+pet(d), y+8*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+22*cs+pet(d)
  cpy = y+2*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+17*cs+pet(d), y+2*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+12*cs+pet(d)
  cpy = y+2*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*cs+pet(d), y+8*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+12*cs+pet(d)
  cpy = y+2*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+7*cs+pet(d), y+2*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+2*cs+pet(d)
  cpy = y+2*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+2*cs+pet(d), y+8*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+2*cs+pet(d)
  cpy = y+16*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+9*cs+pet(d), y+19*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+12*cs+pet(d)
  cpy = y+21*cs+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*cs+pet(d), y+24*cs+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()

  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function sufferingAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  let cs = W/24
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+7.5*cs+pet(d), y+0*cs+pet(d))
  cpx = x+7.5*cs
  cpy = y+4.5*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8.8*cs+pet(d), y+5*cs+pet(d))
  cpx = x+14*cs
  cpy = y+5*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+14.2*cs+pet(d), y+5*cs+pet(d))
  cpx = x+15.5*cs
  cpy = y+4.5*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+15.5*cs+pet(d), y+0*cs+pet(d))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+9*cs+pet(d), y+5*cs+pet(d))
  cpx = x+9*cs
  cpy = y+7*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+9*cs+pet(d), y+7*cs+pet(d))
  cpx = x+14*cs
  cpy = y+7*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+14*cs+pet(d), y+7*cs+pet(d))
  cpx = x+14*cs
  cpy = y+5*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+14*cs+pet(d), y+5*cs+pet(d))
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+14*cs+pet(d), y+7*cs+pet(d))
  cpx = x+24*cs
  cpy = y+9*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+24*cs+pet(d), y+12*cs+pet(d))
  cpx = x+24*cs
  cpy = y+17*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+24*cs+pet(d), y+17*cs+pet(d))
  cpx = x+20*cs
  cpy = y+17*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20*cs+pet(d), y+17*cs+pet(d))
  cpx = x+20*cs
  cpy = y+14*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20*cs+pet(d), y+14*cs+pet(d))
  cpx = x+20*cs
  cpy = y+24*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20*cs+pet(d), y+24*cs+pet(d))
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+9*cs+pet(d), y+7*cs+pet(d))
  cpx = x+0*cs
  cpy = y+9*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+0*cs+pet(d), y+12*cs+pet(d))
  cpx = x+0*cs
  cpy = y+17*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+0*cs+pet(d), y+17*cs+pet(d))
  cpx = x+4*cs
  cpy = y+17*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+4*cs+pet(d), y+17*cs+pet(d))
  cpx = x+4*cs
  cpy = y+14*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+4*cs+pet(d), y+14*cs+pet(d))
  cpx = x+4*cs
  cpy = y+24*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+4*cs+pet(d), y+24*cs+pet(d))
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+0*cs+pet(d), y+17*cs+pet(d))
  ctx.lineTo(x+0*cs+pet(d), y+24*cs+pet(d))
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+24*cs+pet(d), y+17*cs+pet(d))
  ctx.lineTo(x+24*cs+pet(d), y+24*cs+pet(d))
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+7*cs+pet(d), y+11*cs+pet(d))
  ctx.lineTo(x+17*cs+pet(d), y+11*cs+pet(d))
  ctx.lineTo(x+17*cs+pet(d), y+23*cs+pet(d))
  ctx.lineTo(x+7*cs+pet(d), y+23*cs+pet(d))
  ctx.lineTo(x+7*cs+pet(d), y+11*cs+pet(d))
  ctx.stroke()

  //8
  ctx.fillStyle = savedF
  ctx.beginPath()
  ctx.moveTo(x+8*cs+pet(d), y+10*cs+pet(d))
  ctx.lineTo(x+9*cs+pet(d), y+10*cs+pet(d))
  ctx.lineTo(x+9*cs+pet(d), y+12*cs+pet(d))
  ctx.lineTo(x+8*cs+pet(d), y+12*cs+pet(d))
  ctx.lineTo(x+8*cs+pet(d), y+10*cs+pet(d))
  ctx.fill()
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+15*cs+pet(d), y+10*cs+pet(d))
  ctx.lineTo(x+15*cs+pet(d), y+12*cs+pet(d))
  ctx.lineTo(x+16*cs+pet(d), y+12*cs+pet(d))
  ctx.lineTo(x+16*cs+pet(d), y+10*cs+pet(d))
  ctx.lineTo(x+15*cs+pet(d), y+10*cs+pet(d))
  ctx.fill()
  ctx.stroke()

  // letters
  x -= 1.5*W/24
  y += 1*H/24
  d = cs/3
  let i = 0
  for (; i < 3; i++) {
    //2
    ctx.beginPath()
    ctx.moveTo(x+9*cs+pet(d), y+12*cs+pet(d))
    ctx.lineTo(x+9*cs+pet(d), y+16*cs+pet(d))
    ctx.stroke()

    //3
    ctx.beginPath()
    ctx.moveTo(x+9*cs+pet(d), y+14*cs+pet(d))
    ctx.lineTo(x+11*cs+pet(d), y+12*cs+pet(d))
    ctx.stroke()

    //4
    ctx.beginPath()
    ctx.moveTo(x+9*cs+pet(d), y+14*cs+pet(d))
    ctx.lineTo(x+11*cs+pet(d), y+16*cs+pet(d))
    ctx.stroke()

    //5
    ctx.beginPath()
    ctx.moveTo(x+12*cs+pet(d), y+12*cs+pet(d))
    ctx.lineTo(x+12*cs+pet(d), y+16*cs+pet(d))
    ctx.stroke()

    //6
    ctx.beginPath()
    ctx.moveTo(x+15*cs+pet(d), y+12*cs+pet(d))
    cpx = x+13*cs
    cpy = y+12*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+13*cs+pet(d), y+14*cs+pet(d))
    cpx = x+13*cs
    cpy = y+16*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+15*cs+pet(d), y+16*cs+pet(d))
    ctx.stroke()
    //7
    ctx.beginPath()
    ctx.moveTo(x+16*cs+pet(d), y+12*cs+pet(d))
    ctx.lineTo(x+16*cs+pet(d), y+16*cs+pet(d))
    ctx.stroke()
    //8
    ctx.beginPath()
    ctx.moveTo(x+18*cs+pet(d), y+12*cs+pet(d))
    ctx.lineTo(x+16*cs+pet(d), y+14*cs+pet(d))
    ctx.lineTo(x+18*cs+pet(d), y+16*cs+pet(d))
    ctx.stroke()
    x+= 1*W/24
    //9
    ctx.beginPath()
    ctx.moveTo(x+10*cs+pet(d), y+21*cs+pet(d))
    ctx.lineTo(x+10*cs+pet(d), y+17*cs+pet(d))
    ctx.lineTo(x+11*cs+pet(d), y+19*cs+pet(d))
    ctx.lineTo(x+12*cs+pet(d), y+17*cs+pet(d))
    ctx.lineTo(x+12*cs+pet(d), y+21*cs+pet(d))
    ctx.stroke()

    //10
    ctx.beginPath()
    ctx.moveTo(x+15*cs+pet(d), y+17*cs+pet(d))
    ctx.lineTo(x+13*cs+pet(d), y+17*cs+pet(d))
    ctx.lineTo(x+13*cs+pet(d), y+21*cs+pet(d))
    ctx.lineTo(x+15*cs+pet(d), y+21*cs+pet(d))
    ctx.stroke()

    //11
    ctx.beginPath()
    ctx.moveTo(x+13*cs+pet(d), y+19*cs+pet(d))
    ctx.lineTo(x+15*cs+pet(d), y+19*cs+pet(d))
    ctx.stroke()
    x -= 1*W/24
  }
  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function lubbersAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  let cs = W/24
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  figureRAt(x-1*cs+pet(d), y+14*cs+pet(d), W/2.8, color)
  figureLAt(x+17*cs+pet(d), y+14*cs+pet(d), W/2.8, color)
  sailboatAt(x+5.5*cs+pet(d), y+0*cs+pet(d), W/2.0, color)

  fish_hookAt(x-1*cs+pet(d), y+0*cs+pet(d), W/3.8, color)
  anchorAt(x+18*cs+pet(d), y+0*cs+pet(d), W/3.8, color)
  
  y += 1.7*H/24
  //1
  ctx.beginPath()
  ctx.moveTo(x+0*cs+pet(d), y+10*cs+pet(d))
  cpx = x+1*cs
  cpy = y+9*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+2*cs+pet(d), y+10*cs+pet(d))
  cpx = x+3*cs
  cpy = y+11*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+4*cs+pet(d), y+10*cs+pet(d))
  cpx = x+5*cs
  cpy = y+9*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+6*cs+pet(d), y+10*cs+pet(d))
  cpx = x+7*cs
  cpy = y+11*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*cs+pet(d), y+10*cs+pet(d))
  cpx = x+9*cs
  cpy = y+9*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+10*cs+pet(d), y+10*cs+pet(d))
  cpx = x+11*cs
  cpy = y+11*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*cs+pet(d), y+10*cs+pet(d))
  cpx = x+13*cs
  cpy = y+9*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+14*cs+pet(d), y+10*cs+pet(d))
  cpx = x+15*cs
  cpy = y+11*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*cs+pet(d), y+10*cs+pet(d))
  cpx = x+17*cs
  cpy = y+9*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*cs+pet(d), y+10*cs+pet(d))
  cpx = x+19*cs
  cpy = y+11*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20*cs+pet(d), y+10*cs+pet(d))
  cpx = x+21*cs
  cpy = y+9*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+22*cs+pet(d), y+10*cs+pet(d))
  cpx = x+23*cs
  cpy = y+11*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+24*cs+pet(d), y+10*cs+pet(d))
  ctx.stroke()
//6
y += 3*H/24
  ctx.beginPath()
  ctx.moveTo(x+16*cs+pet(d), y+12*cs+pet(d))
  ctx.lineTo(x+19*cs+pet(d), y+11*cs+pet(d))
  ctx.lineTo(x+17*cs+pet(d), y+13*cs+pet(d))
  cpx = x+17*cs
  cpy = y+18*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*cs+pet(d), y+18*cs+pet(d))
  cpx = x+7*cs
  cpy = y+18*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+7*cs+pet(d), y+13*cs+pet(d))
  ctx.lineTo(x+5*cs+pet(d), y+11*cs+pet(d))
  ctx.lineTo(x+8*cs+pet(d), y+12*cs+pet(d))
  cpx = x+9*cs
  cpy = y+11*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*cs+pet(d), y+11*cs+pet(d))
  cpx = x+15*cs
  cpy = y+11*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*cs+pet(d), y+12*cs+pet(d))
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+9*cs+pet(d), y+16*cs+pet(d))
  ctx.lineTo(x+9*cs+pet(d), y+13*cs+pet(d))
  ctx.lineTo(x+11*cs+pet(d), y+16*cs+pet(d))
  ctx.lineTo(x+11*cs+pet(d), y+13*cs+pet(d))
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+13*cs+pet(d), y+16*cs+pet(d))
  cpx = x+12*cs
  cpy = y+16*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*cs+pet(d), y+15*cs+pet(d))
  cpx = x+12*cs
  cpy = y+14*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*cs+pet(d), y+14*cs+pet(d))
  cpx = x+12*cs
  cpy = y+13*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+13*cs+pet(d), y+13*cs+pet(d))
  cpx = x+14*cs
  cpy = y+13*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+14*cs+pet(d), y+14*cs+pet(d))
  cpx = x+14*cs
  cpy = y+15*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+14*cs+pet(d), y+15*cs+pet(d))
  cpx = x+14*cs
  cpy = y+16*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+13*cs+pet(d), y+16*cs+pet(d))
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+15*cs+pet(d), y+13*cs+pet(d))
  cpx = x+15*cs
  cpy = y+15*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+15*cs+pet(d), y+15*cs+pet(d))
  ctx.stroke()

  ctx.beginPath()
  ctx.arc(x+15*cs+pet(d), y+16*cs+pet(d), ctx.lineWidth, 0, 2*Math.PI)
  ctx.fillStyle = color
  ctx.fill()

  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function scopeAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  let cs = W/24
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "round"
  ctx.lineJoin = "miter"
  let w0 = ctx.lineWidth
  /*
  reduce to chunks
  decrease alpha and linewidth at each chunk
  overlay faint grid
  knobs and glint on
  */
  ctx.lineWidth *= 5
  //1
  ctx.beginPath()
  ctx.moveTo(x+23*cs+pet(d), y+21*cs+pet(d))
  cpx = x+23*cs
  cpy = y+1*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*cs+pet(d), y+1*cs+pet(d))
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+8*cs+pet(d), y+1*cs+pet(d))
  cpx = x+1*cs
  cpy = y+1*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+1*cs+pet(d), y+12*cs+pet(d))
  
ctx.lineWidth *= 0.85
  ctx.stroke()
  ctx.beginPath()
  ctx.moveTo(x+1*cs+pet(d), y+12*cs+pet(d))
  cpx = x+1*cs
  cpy = y+23*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*cs+pet(d), y+23*cs+pet(d))
  
ctx.lineWidth *= 0.85
  ctx.stroke()
  ctx.beginPath()
  ctx.moveTo(x+8*cs+pet(d), y+23*cs+pet(d))
  cpx = x+23*cs
  cpy = y+23*cs
  //cpx = x+22*cs
  //cpy = y+18*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+23*cs+pet(d), y+3*cs+pet(d))
  
ctx.lineWidth *= 0.85
  ctx.stroke()
  ctx.beginPath()
  ctx.moveTo(x+23*cs+pet(d), y+3*cs+pet(d))
  cpx = x+23*cs
  cpy = y+-2*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*cs+pet(d), y+12*cs+pet(d))
  
ctx.lineWidth *= 0.85
  
  ctx.stroke()
  ctx.beginPath()
  ctx.moveTo(x+12*cs+pet(d), y+12*cs+pet(d))
  cpx = x+1*cs
  cpy = y+26*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+1*cs+pet(d), y+21*cs+pet(d))
  
ctx.lineWidth *= 0.85
  
  ctx.stroke()
  ctx.beginPath()
  ctx.moveTo(x+1*cs+pet(d), y+21*cs+pet(d))
  cpx = x+1*cs
  cpy = y+1*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*cs+pet(d), y+1*cs+pet(d))
  
ctx.lineWidth *= 0.85
  
  ctx.stroke()
  ctx.beginPath()
  ctx.moveTo(x+16*cs+pet(d), y+1*cs+pet(d))
  cpx = x+23*cs
  cpy = y+1*cs
//  cpx = x+2*cs
//  cpy = y+6*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+23*cs+pet(d), y+12*cs+pet(d))
  
ctx.lineWidth *= 0.85
  
  ctx.stroke()
  ctx.beginPath()
  ctx.moveTo(x+23*cs+pet(d), y+12*cs+pet(d))
  cpx = x+23*cs
  cpy = y+23*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*cs+pet(d), y+23*cs+pet(d))
  
ctx.lineWidth *= 0.85
  
  ctx.stroke()
  ctx.beginPath()
  ctx.moveTo(x+16*cs+pet(d), y+23*cs+pet(d))
  cpx = x+1*cs
  cpy = y+23*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+1*cs+pet(d), y+3*cs+pet(d))
  
ctx.lineWidth *= 0.85
  
  ctx.stroke()
  ctx.beginPath()
  ctx.moveTo(x+1*cs+pet(d), y+3*cs+pet(d))
  cpx = x+1*cs
  cpy = y-2*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*cs+pet(d), y+12*cs+pet(d))
ctx.lineWidth *= 0.85
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+12*cs+pet(d), y+12*cs+pet(d))
  cpx = x+23*cs
  cpy = y+26*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+23*cs+pet(d), y+21*cs+pet(d))
  ctx.lineWidth *= 0.85
  ctx.globalAlpha = 0.5
  ctx.stroke()

  ctx.globalAlpha = 1

  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function halfCardsAt (x,y,W,H_, f,n,INVERT) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let s = W/75, H = W *1.5
  let offset = W/2+Math.random()*W/4, x0 = x, y0 = y
  let r = 7 // 13
  if (W > 450)
    r = 10
  ctx.save()
  ctx.beginPath()
  ctx.moveTo(x+r,y-r) // top left inset by r
  x += offset+4
  ctx.lineTo(x, y-r)
  while (y < y0+H+5) {
    if ((y0+H+5) - y < 10) {
      y = (y0+H+2) 
      break;
    }
    x += pet(s)
    ctx.lineTo(x, y)
    y += 4 + pet(s*0.7)
    if (Math.random() > 0.95)
      y += s
  }
  ctx.lineTo(x, y0+H+r) // bottom right
  ctx.lineTo(x0+r,  y0+H+r)
  ctx.closePath()
  ctx.fillStyle = "#fefeee"
  ctx.shadowBlur = 10
  ctx.shadowColor = "#666666"
  ctx.shadowOffsetX = 2
  ctx.shadowOffsetY  = 12
  ctx.fill()
  ctx.shadowBlur = 0
  ctx.shadowOffsetX = 0
  ctx.shadowOffsetY  = 0

  ctx.clip()
  ctx.restore()
  offset -= 2
  x = x0, y = y0
  ctx.save()
  ctx.beginPath()
  ctx.moveTo(x-r,y-r) 
  x += offset
  ctx.lineTo(x-r, y-r)
  while (y <= y0+H) {
    x += pet(s)
    ctx.lineTo(x, y)
    y += 4 + pet(s*0.7)
    if (Math.random() > 0.95)
      y += s
  }
  ctx.lineTo(x, y+40)
  ctx.lineTo(x0-r, y+40)
  ctx.lineTo(x0-r, y0-40)
  ctx.closePath()
  ctx.clip()
  f = randomPick(atList)
  tarotcard(x0,y0,W,H,f,cardnumber(f),INVERT)
  ctx.restore()
  let orientation = "u"
  if (INVERT && INVERT[0] === 1)
     orientation = "i"
  if (W < 450)
    cardcaption ("halfCardsAt",orientation,x0,y0,340,506) 
  //12 175.78581028375405 337.5 506.25
}

function triple_deckerAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  y += 2*H/24
  //1
  ctx.beginPath()
  ctx.moveTo(x+6*W/24+pet(d), y+1*H/24+pet(d))
  ctx.lineTo(x+18*W/24+pet(d), y+1*H/24+pet(d))
  ctx.lineTo(x+18*W/24+pet(d), y+20*H/24+pet(d))
  ctx.lineTo(x+3.5*W/24+pet(d), y+20*H/24+pet(d))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+6*W/24+pet(d), y+6*H/24+pet(d))
  ctx.lineTo(x+18*W/24+pet(d), y+6*H/24+pet(d))
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+6*W/24+pet(d), y+11*H/24+pet(d))
  ctx.lineTo(x+18*W/24+pet(d), y+11*H/24+pet(d))
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+18*W/24+pet(d), y+16*H/24+pet(d))
  ctx.lineTo(x+6*W/24+pet(d), y+16*H/24+pet(d))
  ctx.lineTo(x+6*W/24+pet(d), y+1*H/24+pet(d))
  ctx.lineTo(x+5*W/24+pet(d), y+0*H/24+pet(d))
  ctx.lineTo(x+19*W/24+pet(d), y+0*H/24+pet(d))
  ctx.lineTo(x+18*W/24+pet(d), y+1*H/24+pet(d))
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+12*W/24+pet(d), y+1*H/24+pet(d))
  ctx.lineTo(x+12*W/24+pet(d), y+16*H/24+pet(d))
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+6*W/24+pet(d), y+4*H/24+pet(d))
  ctx.lineTo(x+12*W/24+pet(d), y+4*H/24+pet(d))
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+6*W/24+pet(d), y+9*H/24+pet(d))
  ctx.lineTo(x+12*W/24+pet(d), y+9*H/24+pet(d))
  ctx.stroke()

  //12
  ctx.beginPath()
  ctx.moveTo(x+9*W/24+pet(d), y+1*H/24+pet(d))
  ctx.lineTo(x+9*W/24+pet(d), y+4*H/24+pet(d))
  ctx.stroke()

  //13
  ctx.beginPath()
  ctx.moveTo(x+9*W/24+pet(d), y+6*H/24+pet(d))
  ctx.lineTo(x+9*W/24+pet(d), y+9*H/24+pet(d))
  ctx.stroke()
  let x0 = x, y0 = y, i = 0
  for (; i < 12; i++) {
    //11
    ctx.beginPath()
    ctx.moveTo(x+6*W/24+pet(d), y+6*H/24+pet(d))
    ctx.lineTo(x+6*W/24+pet(d), y+4*H/24+pet(d))
    ctx.stroke()
      //11
    ctx.beginPath()
    ctx.moveTo(x+6*W/24+pet(d), y+11*H/24+pet(d))
    ctx.lineTo(x+6*W/24+pet(d), y+9*H/24+pet(d))
    ctx.stroke()
    x += W/48
  }
  x = x0
  i = 0
  for (; i < 3; i++) {
  //14 windows
    ctx.beginPath()
    ctx.moveTo(x+13*W/24+pet(d), y+1.5*H/24+pet(d))
    ctx.lineTo(x+13*W/24+pet(d), y+3.5*H/24+pet(d))
    ctx.lineTo(x+14.5*W/24+pet(d), y+3.5*H/24+pet(d))
    ctx.lineTo(x+14.5*W/24+pet(d), y+1.5*H/24+pet(d))
    ctx.lineTo(x+13*W/24+pet(d), y+1.5*H/24+pet(d))
    ctx.stroke()

    //15
    ctx.beginPath()
    ctx.moveTo(x+13*W/24+pet(d), y+2.5*H/24+pet(d))
    ctx.lineTo(x+14.5*W/24+pet(d), y+2.5*H/24+pet(d))
    ctx.stroke()
    x += 2.5*W/24
    ctx.beginPath()
    ctx.moveTo(x+13*W/24+pet(d), y+1.5*H/24+pet(d))
    ctx.lineTo(x+13*W/24+pet(d), y+3.5*H/24+pet(d))
    ctx.lineTo(x+14.5*W/24+pet(d), y+3.5*H/24+pet(d))
    ctx.lineTo(x+14.5*W/24+pet(d), y+1.5*H/24+pet(d))
    ctx.lineTo(x+13*W/24+pet(d), y+1.5*H/24+pet(d))
    ctx.stroke()

    //15
    ctx.beginPath()
    ctx.moveTo(x+13*W/24+pet(d), y+2.5*H/24+pet(d))
    ctx.lineTo(x+14.5*W/24+pet(d), y+2.5*H/24+pet(d))
    ctx.stroke()
    x -= 2.5*W/24
    y += 5*H/24
  }
  x = x0, y = y0

  ctx.beginPath()
  ctx.moveTo(x+10.5*W/24+pet(d), y+14*H/24+pet(d))
  ctx.lineTo(x+12*W/24+pet(d), y+14*H/24+pet(d))
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+6*W/24+pet(d), y+14*H/24+pet(d))
  ctx.lineTo(x+7.5*W/24+pet(d), y+14*H/24+pet(d))
  ctx.stroke()
  

  // left banister
  x += 0.5*W/24
  ctx.beginPath()
  ctx.moveTo(x+7*W/24+pet(d), y+14*H/24+pet(d))
  ctx.lineTo(x+3*W/24+pet(d), y+18*H/24+pet(d))
  ctx.lineTo(x+3*W/24+pet(d), y+20*H/24+pet(d))
  ctx.lineTo(x+7*W/24+pet(d), y+16*H/24+pet(d))
  ctx.lineTo(x+7*W/24+pet(d), y+14*H/24+pet(d))
  ctx.stroke()

  //right
  x -= W/24
  ctx.beginPath()
  ctx.moveTo(x+11*W/24+pet(d), y+14*H/24+pet(d))
  ctx.lineTo(x+7*W/24+pet(d), y+18*H/24+pet(d))
  ctx.lineTo(x+7*W/24+pet(d), y+20*H/24+pet(d))
  ctx.lineTo(x+11*W/24+pet(d), y+16*H/24+pet(d))
  ctx.lineTo(x+11*W/24+pet(d), y+14*H/24+pet(d))
  ctx.stroke()
  y = y0
  x = x0

  i = 0
  for (; i < 8; i++) {
    ctx.beginPath()
    ctx.moveTo(x+3.5*W/24+pet(d), y+18*H/24+pet(d))
    ctx.lineTo(x+3.5*W/24+pet(d), y+20*H/24+pet(d))
    ctx.stroke()

    ctx.beginPath()
    ctx.moveTo(x+6.5*W/24+pet(d), y+18*H/24+pet(d))
    ctx.lineTo(x+6.5*W/24+pet(d), y+20*H/24+pet(d))
    ctx.stroke()
    x += 0.5*W/24
    y -= 0.5*H/24
  }
  y = y0
  x = x0
  i = 0
  for (; i < 3; i++) {
    ctx.beginPath()
    ctx.moveTo(x+6.5*W/24+pet(d), y+14*H/24+pet(d))
    ctx.lineTo(x+6.5*W/24+pet(d), y+16*H/24+pet(d))
    ctx.stroke()

    ctx.beginPath()
    ctx.moveTo(x+10.5*W/24+pet(d), y+14*H/24+pet(d))
    ctx.lineTo(x+10.5*W/24+pet(d), y+16*H/24+pet(d))
    ctx.stroke()
    x += 0.5*W/24
  }
  y = y0
  x = x0
  i = 0
  for (; i < 8; i++) {
    ctx.beginPath()
    ctx.moveTo(x+4*W/24+pet(d), y+20*H/24+pet(d))
    ctx.lineTo(x+4*W/24+pet(d), y+19.5*H/24+pet(d))
    ctx.lineTo(x+7*W/24+pet(d), y+19.5*H/24+pet(d))
    ctx.stroke()
    x += 0.5*W/24
    y -= 0.5*H/24
  }
  y = y0
  x = x0

  ctx.beginPath()
  ctx.moveTo(x+18.35*W/24+pet(d), y+0.75*H/24+pet(d))
  ctx.lineTo(x+18.35*W/24+pet(d), y+19.5*H/24+pet(d))
  cpx = x+18.35*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18.79*W/24+pet(d), y+20*H/24+pet(d))
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+8.25*W/24+pet(d), y+16*H/24+pet(d))
  ctx.lineTo(x+8.25*W/24+pet(d), y+13*H/24+pet(d))
  ctx.lineTo(x+9.75*W/24+pet(d), y+13*H/24+pet(d))
  ctx.lineTo(x+9.75*W/24+pet(d), y+16*H/24+pet(d))
  ctx.stroke()
  //9
  ctx.beginPath()
  ctx.moveTo(x+13*W/24+pet(d), y+20*H/24+pet(d))
  ctx.lineTo(x+13*W/24+pet(d), y+19.3*H/24+pet(d))
  ctx.lineTo(x+14.5*W/24+pet(d), y+19.3*H/24+pet(d))
  ctx.lineTo(x+14.5*W/24+pet(d), y+20*H/24+pet(d))
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+15.5*W/24+pet(d), y+20*H/24+pet(d))
  ctx.lineTo(x+15.5*W/24+pet(d), y+19.3*H/24+pet(d))
  ctx.lineTo(x+17*W/24+pet(d), y+19.3*H/24+pet(d))
  ctx.lineTo(x+17*W/24+pet(d), y+20*H/24+pet(d))
  ctx.stroke()

  ctx.beginPath()
  ctx.arc(x+8.5*W/24+pet(d), y+14.4*H/24+pet(d), W/200, 0, 2*Math.PI)
  ctx.fillStyle = color
  ctx.fill()

  ctx.beginPath()
  ctx.arc(x+8.5*W/24+pet(d), y+14.1*H/24+pet(d), W/220, 0, 2*Math.PI)
  ctx.fillStyle = color
 // ctx.stroke()
  let v = document.getElementById("featuresize").value
  document.getElementById("featuresize").value /= 2
  trash_dayAt(x+9*W/24+pet(d), y+17.2*H/24+pet(d), 3.2*W/24, color,true)
  document.getElementById("featuresize").value = v
  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function numeralAt (N, x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = W/9
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/100
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  switch (N) {

    case "1":
     ctx.beginPath()
  ctx.moveTo(x+4*W/24+pet(d), y+24*H/24+pet(d))
  cpx = x+7*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*W/24+pet(d), y+1*H/24+pet(d))
  cpx = x+8*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+7*W/24+pet(d), y+3*H/24+pet(d))
  ctx.stroke()
  break;

  case "2":
  ctx.beginPath()
  ctx.moveTo(x+1*W/24+pet(d), y+6*H/24+pet(d))
  cpx = x+3*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+9*W/24+pet(d), y+1*H/24+pet(d))
  cpx = x+14*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+14*W/24+pet(d), y+5*H/24+pet(d))
  cpx = x+14*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+4*W/24+pet(d), y+19*H/24+pet(d))
  cpx = x+2*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+1*W/24+pet(d), y+24*H/24+pet(d))
  cpx = x+10*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+15*W/24+pet(d), y+22*H/24+pet(d))
  ctx.stroke()
  break;
    case "7":
  //1
  ctx.beginPath()
  ctx.moveTo(x+2*W/24+pet(d), y+24*H/24+pet(d))
  cpx = x+8*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+14*W/24+pet(d), y+1*H/24+pet(d))
  cpx = x+7*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+1*W/24+pet(d), y+1*H/24+pet(d))
  ctx.stroke()
  break;
  case "3":
  //2
  ctx.beginPath()
  ctx.moveTo(x+1*W/24+pet(d), y+1*H/24+pet(d))
  cpx = x+7*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+14*W/24+pet(d), y+1*H/24+pet(d))
  cpx = x+10*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+7*W/24+pet(d), y+11*H/24+pet(d))
  cpx = x+16*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*W/24+pet(d), y+17*H/24+pet(d))
  cpx = x+16*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+4*W/24+pet(d), y+24*H/24+pet(d))
  cpx = x+2*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+1*W/24+pet(d), y+22*H/24+pet(d))
  ctx.stroke()
   break;
  case "4":
  //3
  ctx.beginPath()
  ctx.moveTo(x+7*W/24+pet(d), y+1*H/24+pet(d))
  cpx = x+6*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+1*W/24+pet(d), y+10*H/24+pet(d))
  cpx = x+8*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+14*W/24+pet(d), y+10*H/24+pet(d))
  ctx.stroke()
  //4
  ctx.beginPath()
  ctx.moveTo(x+7*W/24+pet(d), y+1*H/24+pet(d))
  cpx = x+6*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+4*W/24+pet(d), y+24*H/24+pet(d))
  ctx.stroke()
  break;
  case "0":
  //5
   ctx.beginPath()
  ctx.moveTo(x+0*W/24+pet(d), y+16*H/24+pet(d))
  cpx = x+0*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+4*W/24+pet(d), y+24*H/24+pet(d))
  cpx = x+11*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+14*H/24+pet(d))
  cpx = x+13*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+9*W/24+pet(d), y+0*H/24+pet(d))
  cpx = x+3*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+0*W/24+pet(d), y+16*H/24+pet(d))
  ctx.stroke()

   break;
  case "8":
     ctx.beginPath()
  ctx.moveTo(x+7*W/24+pet(d), y+24*H/24+pet(d))
  cpx = x+12*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+17*H/24+pet(d))
  cpx = x+11*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+6*W/24+pet(d), y+9*H/24+pet(d))
  cpx = x+2*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+2*W/24+pet(d), y+4*H/24+pet(d))
  cpx = x+2*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*W/24+pet(d), y+0*H/24+pet(d))
  cpx = x+13*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+13*W/24+pet(d), y+5*H/24+pet(d))
  cpx = x+11*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+5*W/24+pet(d), y+13*H/24+pet(d))
  cpx = x+1*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+0*W/24+pet(d), y+20*H/24+pet(d))
  cpx = x+1*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+7*W/24+pet(d), y+24*H/24+pet(d))
  ctx.stroke()
  break;

  case "9":
  //6
  ctx.beginPath()
  ctx.moveTo(x+4*W/24+pet(d), y+24*H/24+pet(d))
  cpx = x+12*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+14*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+14*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+9*W/24+pet(d), y+1*H/24+pet(d))
  cpx = x+3*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+2*W/24+pet(d), y+10*H/24+pet(d))
  cpx = x+2*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+7*W/24+pet(d), y+15*H/24+pet(d))
  cpx = x+10*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+13*W/24+pet(d), y+12*H/24+pet(d))
  ctx.stroke()
   break;
  case "6":
  //7
  ctx.beginPath()
  ctx.moveTo(x+14*W/24+pet(d), y+8*H/24+pet(d))
  cpx = x+14*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+10*W/24+pet(d), y+1*H/24+pet(d))
  cpx = x+4*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+1*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+0*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+6*W/24+pet(d), y+24*H/24+pet(d))
  cpx = x+12*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+13*W/24+pet(d), y+20*H/24+pet(d))
  cpx = x+13*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*W/24+pet(d), y+13*H/24+pet(d))
  cpx = x+5*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+2*W/24+pet(d), y+17*H/24+pet(d))
  ctx.stroke()
 break;
  case "5":
  //8
  ctx.beginPath()
  ctx.moveTo(x+14*W/24+pet(d), y+1*H/24+pet(d))
  cpx = x+8*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+2*W/24+pet(d), y+1*H/24+pet(d))
  cpx = x+2*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+2*W/24+pet(d), y+9*H/24+pet(d))
  cpx = x+8*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+14*W/24+pet(d), y+10*H/24+pet(d))
  cpx = x+15*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+13*W/24+pet(d), y+21*H/24+pet(d))
  cpx = x+12*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+2*W/24+pet(d), y+23*H/24+pet(d))
  ctx.stroke()
   break;
  case "9":
  //9
  ctx.beginPath()
  ctx.moveTo(x+7*W/24+pet(d), y+10*H/24+pet(d))
  cpx = x+11*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+5*H/24+pet(d))
  cpx = x+12*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+9*W/24+pet(d), y+1*H/24+pet(d))
  cpx = x+4*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+5*W/24+pet(d), y+8*H/24+pet(d))
  cpx = x+6*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+10*W/24+pet(d), y+13*H/24+pet(d))
  cpx = x+14*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+14*W/24+pet(d), y+20*H/24+pet(d))
  cpx = x+14*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*W/24+pet(d), y+24*H/24+pet(d))
  cpx = x+3*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+2*W/24+pet(d), y+18*H/24+pet(d))
  cpx = x+3*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+7*W/24+pet(d), y+11*H/24+pet(d))
  ctx.stroke()
  break;
 }
  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function orreryAt (x,y,W,color,INVERT) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "round"
  ctx.lineJoin = "bevel"
  x -= 2*W/24
  //2
  ctx.beginPath()
  ctx.moveTo(x+8*W/24+pet(d), y+14*H/24+pet(d))
  ctx.lineTo(x+11*W/24+pet(d), y+22*H/24+pet(d))
  ctx.lineTo(x+23*W/24+pet(d), y+22*H/24+pet(d))
  ctx.lineTo(x+20*W/24+pet(d), y+14*H/24+pet(d))
  ctx.lineTo(x+8*W/24+pet(d), y+14*H/24+pet(d))
  ctx.stroke()
  //8
  ctx.beginPath()
  ctx.moveTo(x+8*W/24+pet(d), y+14*H/24+pet(d))
  ctx.lineTo(x+8*W/24+pet(d), y+15*H/24+pet(d))
  ctx.lineTo(x+11*W/24+pet(d), y+23*H/24+pet(d))
  ctx.lineTo(x+23*W/24+pet(d), y+23*H/24+pet(d))
  ctx.lineTo(x+23*W/24+pet(d), y+22*H/24+pet(d))
  ctx.stroke()
  //9
  ctx.beginPath()
  ctx.moveTo(x+11*W/24+pet(d), y+22*H/24+pet(d))
  ctx.lineTo(x+11*W/24+pet(d), y+23*H/24+pet(d))
  ctx.stroke()
  //3
  ctx.beginPath()
  ctx.moveTo(x+16*W/24+pet(d), y+18*H/24+pet(d))
  ctx.lineTo(x+16*W/24+pet(d), y+6*H/24+pet(d))
  ctx.stroke()
  //10
  ctx.beginPath()
  ctx.moveTo(x+16*W/24+pet(d), y+19*H/24+pet(d))
  cpx = x+18*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*W/24+pet(d), y+18*H/24+pet(d))
  cpx = x+18*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*W/24+pet(d), y+17*H/24+pet(d))
  cpx = x+14*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+14*W/24+pet(d), y+18*H/24+pet(d))
  cpx = x+14*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*W/24+pet(d), y+19*H/24+pet(d))
  ctx.stroke()
  //4
  ctx.beginPath()
  ctx.moveTo(x+16*W/24+pet(d), y+9.4*H/24+pet(d))
  ctx.lineTo(x+5*W/24+pet(d), y+13*H/24+pet(d))
  ctx.lineTo(x+5*W/24+pet(d), y+11*H/24+pet(d))
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+16*W/24+pet(d), y+10*H/24+pet(d))
  ctx.lineTo(x+4*W/24+pet(d), y+5*H/24+pet(d))
  ctx.lineTo(x+4*W/24+pet(d), y+3*H/24+pet(d))
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+16*W/24+pet(d), y+11*H/24+pet(d))
  ctx.lineTo(x+21*W/24+pet(d), y+12*H/24+pet(d))
  ctx.lineTo(x+21*W/24+pet(d), y+9*H/24+pet(d))
  ctx.stroke()

   //7
  ctx.beginPath()
  ctx.moveTo(x+16*W/24+pet(d), y+10.5*H/24+pet(d))
  ctx.lineTo(x+22*W/24+pet(d), y+7*H/24+pet(d))
  ctx.lineTo(x+22*W/24+pet(d), y+5*H/24+pet(d))
  ctx.stroke()

  //12
  ctx.beginPath()
  ctx.moveTo(x+4*W/24+pet(d), y+3*H/24+pet(d))
  ctx.lineTo(x+4*W/24+pet(d), y+1*H/24+pet(d))
  ctx.lineTo(x+9*W/24+pet(d), y+2*H/24+pet(d))
  ctx.lineTo(x+9*W/24+pet(d), y+4*H/24+pet(d))
  ctx.stroke()

  //5 sun
  ctx.beginPath()
  ctx.arc(x+16*W/24+pet(d), y+5*H/24+pet(d), 4*W/24, 0, 2*Math.PI)
  ctx.fillStyle = color
  ctx.fill()

  ctx.beginPath()
  ctx.arc(x+16*W/24+pet(d), y+5*H/24+pet(d), 3.1*W/24, Math.PI, 1.5*Math.PI)
  if (!INVERT)
    ctx.strokeStyle = "#ffffff90"
  else
    ctx.strokeStyle = "#00000090"
  ctx.lineWidth = W/20
  ctx.stroke()
  if (!INVERT)
    ctx.strokeStyle = "#ffffffcc"
  else
    ctx.strokeStyle = "#000000cc"
  ctx.lineWidth = W/60
  ctx.stroke()

  ctx.beginPath()
  ctx.arc(x+5*W/24+pet(d), y+10*H/24+pet(d), 2*W/24, 0, 2*Math.PI)
  ctx.fillStyle = color
  ctx.fill()
  ctx.beginPath()
  ctx.arc(x+5*W/24+pet(d), y+10*H/24+pet(d), 1.4*W/24, Math.PI, 1.5*Math.PI)
  if (!INVERT)
    ctx.strokeStyle = "#ffffff90"
  else
    ctx.strokeStyle = "#00000090"
  ctx.lineWidth = W/30
  ctx.stroke()
  if (!INVERT)
    ctx.strokeStyle = "#ffffffcc"
  else
    ctx.strokeStyle = "#000000cc"
  ctx.lineWidth = W/70
  ctx.stroke()

  ctx.beginPath()
  ctx.arc(x+4*W/24+pet(d), y+3*H/24+pet(d), 1.5*W/24, 0, 2*Math.PI)
  ctx.fillStyle = color
  ctx.fill()
  ctx.beginPath()
  ctx.arc(x+4*W/24+pet(d), y+3*H/24+pet(d), 1.0*W/24, Math.PI, 1.5*Math.PI)
  if (!INVERT)
    ctx.strokeStyle = "#ffffff90"
  else
    ctx.strokeStyle = "#00000090"
  ctx.lineWidth = W/30
  ctx.stroke()
  if (!INVERT)
    ctx.strokeStyle = "#ffffffcc"
  else
    ctx.strokeStyle = "#000000cc"
  ctx.lineWidth = W/70
  ctx.stroke()

  ctx.beginPath()
  ctx.arc(x+21*W/24+pet(d), y+9*H/24+pet(d), 1.5*W/24, 0, 2*Math.PI)
  ctx.fillStyle = color
  ctx.fill()
  ctx.beginPath()
  ctx.arc(x+21*W/24+pet(d), y+9*H/24+pet(d), 1.0*W/24, Math.PI, 1.5*Math.PI)
  if (!INVERT)
    ctx.strokeStyle = "#ffffff90"
  else
    ctx.strokeStyle = "#00000090"
  ctx.lineWidth = W/30
  ctx.stroke()
  if (!INVERT)
    ctx.strokeStyle = "#ffffffcc"
  else
    ctx.strokeStyle = "#000000cc"
  ctx.lineWidth = W/70
  ctx.stroke()

  ctx.beginPath()
  ctx.arc(x+22*W/24+pet(d), y+4*H/24+pet(d), 1.25*W/24, 0, 2*Math.PI)
  ctx.fillStyle = color
  ctx.fill()
  ctx.beginPath()
  ctx.arc(x+22*W/24+pet(d), y+4*H/24+pet(d), 0.67*W/24, Math.PI, 1.5*Math.PI)
  if (!INVERT)
    ctx.strokeStyle = "#ffffff90"
  else
    ctx.strokeStyle = "#00000090"
  ctx.lineWidth = W/30
  ctx.stroke()
  if (!INVERT)
    ctx.strokeStyle = "#ffffffcc"
  else
    ctx.strokeStyle = "#000000cc"
  ctx.lineWidth = W/70
  ctx.stroke()

  ctx.beginPath()
  ctx.arc(x+9*W/24+pet(d), y+3.5*H/24+pet(d), 0.9*W/24, 0, 2*Math.PI)
  ctx.fillStyle = color
  ctx.fill()
  ctx.beginPath()
  ctx.arc(x+9*W/24+pet(d), y+3.5*H/24+pet(d), 0.4*W/24, Math.PI, 1.5*Math.PI)
  if (!INVERT)
    ctx.strokeStyle = "#ffffff90"
  else
    ctx.strokeStyle = "#00000090"
  ctx.lineWidth = W/30
  ctx.stroke()
  if (!INVERT)
    ctx.strokeStyle = "#ffffffcc"
  else
    ctx.strokeStyle = "#000000cc"
  ctx.lineWidth = W/70
  ctx.stroke()

  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function draw_your_own_cardAt (x,y,W,color,INVERT) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, d = 0, angle = 4 + Math.random()*16

  //1
  ctx.fillStyle = "#fff5ecff"
  ctx.shadowBlur = 2
  ctx.shadowColor = "#33333340"
  ctx.shadowOffsetX = W/80
  ctx.shadowOffsetY = W/60
  ctx.beginPath()
  ctx.moveTo(x, y-H/24)
  ctx.lineTo(x+W, y-H/24)
  ctx.lineTo(x+W, y+H)
  ctx.lineTo(x, y+H)
  ctx.closePath()
  ctx.fill()
  y+= W/24, x += W/24
  ctx.shadowBlur = 0
  ctx.shadowOffsetX = 0
  ctx.shadowOffsetY = 0
  //1
  ctx.beginPath()
  p = rotatePoint(x+17*W/24+pet(d), y+24*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+18*W/24+pet(d), y+21*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+18*W/24+pet(d), y+0.5*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  cpx = x+18*W/24+pet(d)
  cpy = y+0*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+16*W/24+pet(d), y+0.5*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+16*W/24+pet(d)
  cpy = y+1*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+16*W/24+pet(d), y+21*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+17*W/24+pet(d)
  cpy = y+24*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+17*W/24+pet(d), y+24*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fillStyle = "#f8d387ff"
  ctx.shadowBlur = 3
  ctx.shadowColor = "#33333340"
  ctx.shadowOffsetX = W/48
  ctx.shadowOffsetY = W/48
  ctx.fill()

  ctx.shadowBlur = 4
  ctx.shadowColor = "#76767618"
  ctx.shadowOffsetX = -2*W/48
  ctx.shadowOffsetY = W/100
  ctx.fill()
  ctx.shadowBlur = 0
  ctx.shadowOffsetX = 0
  ctx.shadowOffsetY = 0

  ctx.beginPath()
  p = rotatePoint(x+17*W/24+pet(d), y+24*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+18*W/24+pet(d), y+21*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+17*W/24+pet(d), y+21*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.fillStyle = "#e3c07bff"
  ctx.fill()
  //2
  ctx.beginPath()
  p = rotatePoint(x+16*W/24+pet(d), y+2*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+18*W/24+pet(d), y+2*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+18*W/24+pet(d), y+5*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+16*W/24+pet(d), y+5*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.fillStyle = "#eacf60ff"
  ctx.fill()

  //3
  ctx.beginPath()
  p = rotatePoint(x+17*W/24+pet(d), y+2*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+18*W/24+pet(d), y+2*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+18*W/24+pet(d), y+21*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+17*W/24+pet(d), y+21*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.fillStyle = "#4b4bb1ff"
  ctx.fill()

  //4
  ctx.beginPath()
  p = rotatePoint(x+16*W/24+pet(d), y+2*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+17.2*W/24+pet(d), y+2*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+17.2*W/24+pet(d), y+21*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+16*W/24+pet(d), y+21*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.fillStyle = "#6d6dfbff"
  ctx.fill()

  //6
  ctx.beginPath()
  p = rotatePoint(x+18*W/24+pet(d), y+0.5*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+18*W/24+pet(d)
  cpy = y+0*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+17*W/24+pet(d), y+0*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+16*W/24+pet(d)
  cpy = y+0*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+16*W/24+pet(d), y+0.5*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  p = rotatePoint(x+16*W/24+pet(d), y+2*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+18*W/24+pet(d), y+2*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.fillStyle = "#cc6f6cff"
  ctx.fill()

  //2
  ctx.beginPath()
  p = rotatePoint(x+17*W/24+pet(d), y+2*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+18*W/24+pet(d), y+2*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+18*W/24+pet(d), y+0.5*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  cpx = x+18*W/24+pet(d)
  cpy = y+0*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+17*W/24+pet(d), y+0*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fillStyle = "#aa5e5bff"
  ctx.fill()

  //2
  ctx.beginPath()
  p = rotatePoint(x+16*W/24+pet(d), y+2*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+18*W/24+pet(d), y+2*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+18*W/24+pet(d), y+5*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+16*W/24+pet(d), y+5*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.fillStyle = "#d6b377ff"
  ctx.fill()
  ctx.beginPath()
  p = rotatePoint(x+17*W/24+pet(d), y+2*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+18*W/24+pet(d), y+2*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+18*W/24+pet(d), y+5*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+17*W/24+pet(d), y+5*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.fillStyle = "#b99b68ff"
  ctx.fill()

  //5
  ctx.beginPath()
  p = rotatePoint(x+17*W/24+pet(d), y+24*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+16.7*W/24+pet(d), y+23*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+17.3*W/24+pet(d), y+23*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.fillStyle = "#333333"
  ctx.fill()

  ctx.beginPath()
  p = rotatePoint(x+16.2*W/24+pet(d), y+2.5*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+17.8*W/24+pet(d), y+2.5*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.lineWidth = W/80
  ctx.strokeStyle = "#d2040470"
  ctx.stroke()
  ctx.beginPath()
  p = rotatePoint(x+16.2*W/24+pet(d), y+4.5*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+17.8*W/24+pet(d), y+4.5*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  ctx.beginPath()
  p = rotatePoint(x+16.2*W/24+pet(d), y+2*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+16.2*W/24+pet(d), y+21*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.lineWidth = W/80
  ctx.strokeStyle = "#ffffff80"
  ctx.stroke()

  ctx.beginPath()
  p = rotatePoint(x+16.4*W/24+pet(d), y+2.4*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+16.4*W/24+pet(d), y+4.8*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.lineWidth = W/60
  ctx.strokeStyle = "#ffffff60"
  ctx.stroke()

  ctx.beginPath()
  p = rotatePoint(x+16.8*W/24+pet(d), y+2.4*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+16.8*W/24+pet(d), y+2.5*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.lineWidth = W/60
  ctx.strokeStyle = "#ffffff90"
  ctx.stroke()

  ctx.beginPath()
  p = rotatePoint(x+16.8*W/24+pet(d), y+4.2*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+16.8*W/24+pet(d), y+4.3*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.lineWidth = W/60
  ctx.strokeStyle = "#ffffff90"
  ctx.stroke()

  ctx.beginPath()
  p = rotatePoint(x+17.7*W/24+pet(d), y+5.3*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+17.7*W/24+pet(d), y+20.7*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.lineWidth = W/80
  ctx.strokeStyle = "#22225150"
  ctx.stroke()

  ctx.beginPath()
  p = rotatePoint(x+17.1*W/24+pet(d), y+1.91*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+17.8*W/24+pet(d), y+1.91*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.lineWidth = W/200
  ctx.strokeStyle = "#22222230"
  ctx.stroke()

  //2
  ctx.beginPath()
  p = rotatePoint(x+16.4*W/24+pet(d), y+0.4*H/24+pet(d) ,cx,cy,angle)
  ctx.arc(p[0],p[1], W/80, 0, 2*Math.PI)
  ctx.fillStyle = "#ffffff80"
  ctx.fill()

  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function picture_thisAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  fg_rotatedAt (x+12*W/24,y,W/2,color)
  not_blind_eyeAt(x+7.5*W/24,y+6.5*H/24, 9*W/24, color)
  finger_gunAt (x,y+10*W/24,W/2,color)
}

function fg_rotatedAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+16*W/24+pet(d), y+18*H/24+pet(d))
  cpx = x+4*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+4*W/24+pet(d), y+18*H/24+pet(d))
  cpx = x+0*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+0*W/24+pet(d), y+16*H/24+pet(d))
  cpx = x+0*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+4*W/24+pet(d), y+14*H/24+pet(d))
  cpx = x+16*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*W/24+pet(d), y+14*H/24+pet(d))
  cpx = x+12*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+12*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*W/24+pet(d), y+10*H/24+pet(d))
  cpx = x+12*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+8*H/24+pet(d))
  cpx = x+12*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*W/24+pet(d), y+6*H/24+pet(d))
  cpx = x+14*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+14*W/24+pet(d), y+4*H/24+pet(d))
  cpx = x+14*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*W/24+pet(d), y+2*H/24+pet(d))
  cpx = x+20*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20*W/24+pet(d), y+2*H/24+pet(d))
  cpx = x+24*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+24*W/24+pet(d), y+6*H/24+pet(d))
  cpx = x+24*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+24*W/24+pet(d), y+18*H/24+pet(d))
  cpx = x+24*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20*W/24+pet(d), y+22*H/24+pet(d))
  cpx = x+14*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+14*W/24+pet(d), y+22*H/24+pet(d))
  cpx = x+14*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+24*H/24+pet(d))
  cpx = x+10*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+10*W/24+pet(d), y+22*H/24+pet(d))
  cpx = x+10*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+14*W/24+pet(d), y+18*H/24+pet(d))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+18*W/24+pet(d), y+2*H/24+pet(d))
  cpx = x+20*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20*W/24+pet(d), y+4*H/24+pet(d))
  cpx = x+20*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*W/24+pet(d), y+6*H/24+pet(d))
  cpx = x+16*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*W/24+pet(d), y+6*H/24+pet(d))
  cpx = x+18*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*W/24+pet(d), y+6*H/24+pet(d))
  cpx = x+20*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20*W/24+pet(d), y+8*H/24+pet(d))
  cpx = x+20*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*W/24+pet(d), y+10*H/24+pet(d))
  cpx = x+16*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*W/24+pet(d), y+10*H/24+pet(d))
  cpx = x+18*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*W/24+pet(d), y+10*H/24+pet(d))
  cpx = x+20*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+20*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*W/24+pet(d), y+14*H/24+pet(d))
  cpx = x+18*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*W/24+pet(d), y+14*H/24+pet(d))
  cpx = x+16*W/24
  cpy = y+14*H/24
  ctx.stroke()

  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function indeterminate_of_swordsAt (x,y,W,color,INVERT) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  let savedF = ctx.fillStyle
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = [], i = 0, angle = -80, d = 0
  y += H/24
  //1
  ctx.beginPath()
  ctx.moveTo(x+12*W/24+pet(d), y+8*H/24+pet(d))
  cpx = x+12*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+15*W/24+pet(d), y+6*H/24+pet(d))
  cpx = x+18*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*W/24+pet(d), y+9*H/24+pet(d))
  cpx = x+18*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+18*H/24+pet(d))
  cpx = x+6*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+6*W/24+pet(d), y+9*H/24+pet(d))
  cpx = x+6*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+9*W/24+pet(d), y+6*H/24+pet(d))
  cpx = x+12*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+9*H/24+pet(d))
  ctx.stroke()

  ctx.save()
  //1
  ctx.beginPath()
  ctx.moveTo(x+12*W/24+pet(d), y+8*H/24+pet(d))
  cpx = x+12*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+15*W/24+pet(d), y+6*H/24+pet(d))
  cpx = x+18*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*W/24+pet(d), y+9*H/24+pet(d))
  cpx = x+18*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+18*H/24+pet(d))
  cpx = x+6*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+6*W/24+pet(d), y+9*H/24+pet(d))
  cpx = x+6*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+9*W/24+pet(d), y+6*H/24+pet(d))
  cpx = x+12*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+9*H/24+pet(d))
  ctx.lineTo(x+12*W/24+pet(d), y-1*H/24+pet(d))
  ctx.lineTo(x+0*W/24+pet(d), y-1*H/24+pet(d))
  ctx.lineTo(x+0*W/24+pet(d), y+24*H/24+pet(d))
  ctx.lineTo(x+24*W/24+pet(d), y+24*H/24+pet(d))
  ctx.lineTo(x+24*W/24+pet(d), y-1*H/24+pet(d))
  ctx.lineTo(x+12*W/24+pet(d), y-1*H/24+pet(d))
  ctx.lineTo(x+12*W/24+pet(d), y+8*H/24+pet(d))
  ctx.fillStyle = savedF
  ctx.fill()
  ctx.clip()
  y -= H/24
  let total = 0, al
  for (;i < 10; i++) {
    al = Math.random()
    ctx.globalAlpha = al
    stabyAt (x,y,W,color, savedF,angle)
    total += al
    angle += 18
  }
  console.log(Math.round(total*1000)/1000)
  ctx.restore()
  ctx.globalAlpha = 1
  if (INVERT)
  defs["indeterminate_of_swordsAt"].i = "stabby stabby,(about "+Math.round(total*100)/100+" swords)"
  else
  defs["indeterminate_of_swordsAt"].u = "pointedly,(about "+Math.round(total*100)/100+" swords)"
}

function rot_planeAt (x,y,W,color, a) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/150
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = [], i = 0
  let cx = x+W/2, cy = y+H/2, d = W/18, angle = pet(360)

  for (; i < 3; i++) {
    //1
    ctx.beginPath()
    p = rotatePoint(x+12*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    p = rotatePoint(x+22*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+24*W/24+pet(d), y+8*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+22*W/24+pet(d), y+8*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+20*W/24+pet(d), y+10*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+2*W/24+pet(d), y+10*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+0*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+9*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+16*W/24+pet(d), y+20*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+18*W/24+pet(d), y+20*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+12*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+9*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    ctx.stroke()

    //2
    ctx.beginPath()
    p = rotatePoint(x+12*W/24+pet(d), y+10*H/24+pet(d) ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    p = rotatePoint(x+18*W/24+pet(d), y+4*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+16*W/24+pet(d), y+4*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+9*W/24+pet(d), y+10*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    ctx.stroke()
  }

  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function have_we_learned_nothing_yet_q_At (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let max = 24, min = 0
  let i = 0
  for (; i < 4; i++) {
    //1
    ctx.fillStyle = "#ff0000"
    ctx.beginPath()
    ctx.moveTo(x+12*W/24+pet(d), y+21*H/24+pet(d))
    cpx = x+max*W/24
    cpy = y+21*H/24
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+max*W/24+pet(d), y+18*H/24+pet(d))
    cpx = x+max*W/24
    cpy = y+15*H/24
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+15*H/24+pet(d))
    cpx = x+min*W/24
    cpy = y+15*H/24
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+min*W/24+pet(d), y+18*H/24+pet(d))
    cpx = x+min*W/24
    cpy = y+21*H/24
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+21*H/24+pet(d))
    ctx.fill()

    //2
    ctx.fillStyle = "#bb0000ff"
    ctx.beginPath()
    ctx.moveTo(x+min*W/24+pet(d), y+18*H/24+pet(d))
    cpx = x+min*W/24
    cpy = y+21*H/24
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+21*H/24+pet(d))
    cpx = x+max*W/24
    cpy = y+21*H/24
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+max*W/24+pet(d), y+18*H/24+pet(d))
    cpx = x+max*W/24
    cpy = y+21*H/24
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+max*W/24+pet(d), y+21*H/24+pet(d))
    cpx = x+max*W/24
    cpy = y+24*H/24
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+24*H/24+pet(d))
    cpx = x+min*W/24
    cpy = y+24*H/24
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+min*W/24+pet(d), y+21*H/24+pet(d))
    cpx = x+min*W/24
    cpy = y+18*H/24
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+min*W/24+pet(d), y+18*H/24+pet(d))
    ctx.fill()
    min += 1.5, max -= 1.5
    y -= 4*H/24
  }

  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function promisesAt (x,y,W,color,INVERT) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+0*W/24+pet(d), y+12*H/24+pet(d))
  ctx.lineTo(x+24*W/24+pet(d), y+12*H/24+pet(d))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+0*W/24+pet(d), y+22*H/24+pet(d))
  ctx.lineTo(x+10*W/24+pet(d), y+12*H/24+pet(d))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+14*W/24+pet(d), y+12*H/24+pet(d))
  ctx.lineTo(x+24*W/24+pet(d), y+22*H/24+pet(d))
  ctx.stroke()

 //4
  ctx.beginPath()
  ctx.moveTo(x+12*W/24+pet(d), y+13*H/24+pet(d))
  ctx.lineTo(x+12*W/24+pet(d), y+15*H/24+pet(d))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+12*W/24+pet(d), y+17*H/24+pet(d))
  ctx.lineTo(x+12*W/24+pet(d), y+19*H/24+pet(d))
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+12*W/24+pet(d), y+21*H/24+pet(d))
  ctx.lineTo(x+12*W/24+pet(d), y+23*H/24+pet(d))
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+0.5*W/24+pet(d), y+4*H/24+pet(d))
  ctx.lineTo(x+8.5*W/24+pet(d), y+4*H/24+pet(d))
  ctx.lineTo(x+8.5*W/24+pet(d), y+10*H/24+pet(d))
  ctx.lineTo(x+0.5*W/24+pet(d), y+10*H/24+pet(d))
  ctx.lineTo(x+0.5*W/24+pet(d), y+4*H/24+pet(d))
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+3*W/24+pet(d), y+10*H/24+pet(d))
  ctx.lineTo(x+3*W/24+pet(d), y+14*H/24+pet(d))
  ctx.lineTo(x+2*W/24+pet(d), y+14*H/24+pet(d))
  ctx.lineTo(x+7*W/24+pet(d), y+14*H/24+pet(d))
  ctx.lineTo(x+6*W/24+pet(d), y+14*H/24+pet(d))
  ctx.lineTo(x+6*W/24+pet(d), y+10*H/24+pet(d))
  ctx.stroke()

  //7
  ctx.font = "800 "+(W*0.041)+"pt sans-serif"
  ctx.fillStyle = color
  if (!INVERT) {
    ctx.fillText("MOWING", x+1.2*W/24+pet(d), y+5.75*H/24+pet(d))
    ctx.fillText("NEXT 4", x+1.2*W/24+pet(d), y+7.25*H/24+pet(d))
    ctx.fillText("MILES", x+1.2*W/24+pet(d), y+8.75*H/24+pet(d))
  } else {
    ctx.fillText("LEFT LANE", x+0.9*W/24+pet(d), y+5.75*H/24+pet(d))
    ctx.fillText("CLOSED", x+0.9*W/24+pet(d), y+7.25*H/24+pet(d))
    ctx.fillText("AHEAD", x+0.9*W/24+pet(d), y+8.75*H/24+pet(d))
  }
  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function lureAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  x += 1.25*W/24
  W *= 0.96
  //1
  ctx.beginPath()
  ctx.moveTo(x+0*W/24+pet(d), y+10*H/24+pet(d))
  cpx = x+4*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+10*W/24+pet(d), y+14*H/24+pet(d))
  cpx = x+24*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+24*W/24+pet(d), y+14*H/24+pet(d))
  cpx = x+24*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20*W/24+pet(d), y+6*H/24+pet(d))
  cpx = x+10*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+10*W/24+pet(d), y+6*H/24+pet(d))
  cpx = x+4*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+0*W/24+pet(d), y+10*H/24+pet(d))
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+20*W/24+pet(d), y+6*H/24+pet(d))
  cpx = x+20*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+24*W/24+pet(d), y+14*H/24+pet(d))
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+0*W/24+pet(d), y+10*H/24+pet(d))
  cpx = x+20*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20.3*W/24+pet(d), y+10*H/24+pet(d))
  cpx = x+20*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20*W/24+pet(d), y+6*H/24+pet(d))
  cpx = x+10*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+10*W/24+pet(d), y+6*H/24+pet(d))
  cpx = x+4*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+0*W/24+pet(d), y+10*H/24+pet(d))
  ctx.globalAlpha /= 3
  ctx.fill()
  ctx.globalAlpha *= 3

  ctx.beginPath()
  ctx.arc(x+17*W/24+pet(d), y+10*H/24+pet(d), W/12, 0, 2*Math.PI)
  ctx.fillStyle = savedF
  ctx.fill()
  ctx.stroke()
  //4
  ctx.beginPath()
  ctx.arc(x+17*W/24+pet(d), y+10*H/24+pet(d), W/24, 0, 2*Math.PI)
  ctx.fillStyle = color
  ctx.fill()

  ctx.beginPath()
  ctx.arc(x+22.75*W/24+pet(d), y+10*H/24+pet(d), W/36, Math.PI, 2*Math.PI)
  ctx.arc(x+22.75*W/24+pet(d), y+10*H/24+pet(d), W/36, Math.PI*2, Math.PI)
  ctx.lineTo(x+21.5*W/24, y+10*H/24)
  ctx.stroke()
  doublehookAt(x+10*W/24+pet(d), y+14*H/24+pet(d), W/4, color)
  doublehookAt(x-3.5*W/24+pet(d), y+9.5*H/24+pet(d), W/4, color)

  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function doublehookAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+17*W/24+pet(d), y+21*H/24+pet(d))
  cpx = x+20*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20*W/24+pet(d), y+18*H/24+pet(d))
  cpx = x+20*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*W/24+pet(d), y+24*H/24+pet(d))
  cpx = x+12*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+18*H/24+pet(d))
  cpx = x+12*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+4*H/24+pet(d))
  cpx = x+14*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+14*W/24+pet(d), y+2*H/24+pet(d))
  cpx = x+14*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+0*H/24+pet(d))
  cpx = x+10*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+10*W/24+pet(d), y+2*H/24+pet(d))
  cpx = x+10*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+4*H/24+pet(d))
  cpx = x+12*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+18*H/24+pet(d))
  cpx = x+12*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*W/24+pet(d), y+24*H/24+pet(d))
  cpx = x+4*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+4*W/24+pet(d), y+18*H/24+pet(d))
  cpx = x+4*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+7*W/24+pet(d), y+21*H/24+pet(d))
  ctx.stroke()

  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function turbulenceAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, d = W/14, i = 0, offset = W/10
  let x0 = x, edge = x0+4.25*W/5
  for (; i < 22; i++) {
    rot_planeAt(x+offset+pet(d), y+pet(d), W/6+pet(d), color)
    x += W/5
    if (x+offset > edge) {
      x = x0
      y += H/5
      offset = (offset === W/10)? 0 : W/10;
    }
  }
}

function ten_of_ironingAt (x,y,W,color,INVERT) { //draw in 2 groups of 5 - whole card?
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  let savedF = ctx.fillStyle
  ctx.strokeStyle = color
 // ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = [], i = 0, angle = 0, d = 0
  let total = 0, al
  x -= 2*W/24, y -= 2*W/24
  //1
  iron_sigilAt(x+12*W/24+pet(d), y+0*H/24+pet(d),W/6,color)
  iron_sigilAt(x+6*W/24+pet(d), y+3*H/24+pet(d),W/6,color)
  iron_sigilAt(x+18*W/24+pet(d), y+3*H/24+pet(d),W/6,color)
  iron_sigilAt(x+12*W/24+pet(d), y+6*H/24+pet(d),W/6,color)
  iron_sigilAt(x+6*W/24+pet(d), y+9*H/24+pet(d),W/6,color)
  iron_sigilAt(x+18*W/24+pet(d), y+9*H/24+pet(d),W/6,color)
  iron_sigilAt(x+12*W/24+pet(d), y+12*H/24+pet(d),W/6,color)
  iron_sigilAt(x+6*W/24+pet(d), y+15*H/24+pet(d),W/6,color)
  iron_sigilAt(x+18*W/24+pet(d), y+15*H/24+pet(d),W/6,color)
  iron_sigilAt(x+12*W/24+pet(d), y+18*H/24+pet(d),W/6,color)

  bigXAt(x+12.3*W/24+pet(d), y-5*H/24+pet(d),W/7,color)
  phaseAt(x+3.5*W/24+pet(d), y+-2*H/24+pet(d),W/7,color)
  sunAt(x+20*W/24+pet(d), y-2.8*H/24+pet(d),W/5,color)

  figureRAt(x+7.0*W/24+pet(d), y+22*H/24+pet(d), W/4, color)
  figureLAt(x+14.3*W/24+pet(d), y+22*H/24+pet(d), W/4, color)
}

function trefoilAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, d = 0, angle = 0, i = 0

  for (; i < 3; i++) {
    //1
    ctx.beginPath()
    ctx.beginPath()
  p = rotatePoint(x+6*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+6*W/24+pet(d)
  cpy = y+0*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24+pet(d), y+0*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+18*W/24+pet(d)
  cpy = y+0*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+18*W/24+pet(d), y+12*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+18*W/24+pet(d)
  cpy = y+24*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24+pet(d), y+24*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+6*W/24+pet(d)
  cpy = y+24*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+6*W/24+pet(d), y+12*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    ctx.stroke()
    angle += 120
  }
}
function reductionAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  ctx.save()
  //1
  
  ctx.beginPath()
  ctx.moveTo(x+0*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+0*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+5*W/24+pet(d), y+0*H/24+pet(d))
  cpx = x+10*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+10*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+0*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+0*W/24+pet(d), y+12*H/24+pet(d))
  ctx.stroke()
  ctx.clip()
  let i = 0, off = W/50
  ctx.lineWidth /= 1.5
  for (; i < 50; i++) {
    ctx.beginPath()
    ctx.moveTo(x, y+(i*off))
    ctx.lineTo(x+W,y+(i*off))
    ctx.stroke()
  }
  ctx.lineWidth *= 1.5
  ctx.restore()

  //2
  ctx.save()
  ctx.beginPath()
  ctx.moveTo(x+0*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+10*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+10*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+10*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+5*W/24+pet(d), y+24*H/24+pet(d))
  cpx = x+0*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+0*W/24+pet(d), y+12*H/24+pet(d))
  ctx.stroke()
  ctx.clip()
  i = 0
  ctx.lineWidth /= 1.5
  for (; i < 50; i++) {
    ctx.beginPath()
    ctx.moveTo(x+(i*off), y)
    ctx.lineTo(x+(i*off),y+H)
    ctx.stroke()
  }
  ctx.lineWidth *= 1.5
  ctx.restore()

  //3 right shape - no fill
  ctx.beginPath()
  ctx.moveTo(x+14*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+14*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+19*W/24+pet(d), y+0*H/24+pet(d))
  cpx = x+24*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+24*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+14*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+14*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+14*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+19*W/24+pet(d), y+24*H/24+pet(d))
  cpx = x+24*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+24*W/24+pet(d), y+12*H/24+pet(d))
  ctx.stroke()
  
  //4
  ctx.save()
  y -= 2*W/24
  ctx.beginPath()
  ctx.moveTo(x+17*W/24+pet(d), y+9*H/24+pet(d))
  cpx = x+17*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+19*W/24+pet(d), y+11*H/24+pet(d))
  cpx = x+21*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+21*W/24+pet(d), y+10*H/24+pet(d))
  cpx = x+21*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20*W/24+pet(d), y+9*H/24+pet(d))
  cpx = x+19*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20*W/24+pet(d), y+7*H/24+pet(d))
  cpx = x+20*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*W/24+pet(d), y+6*H/24+pet(d))
  cpx = x+17*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+17*W/24+pet(d), y+9*H/24+pet(d))
  ctx.stroke()
  ctx.clip()
  i = 0, off = W/50
  ctx.lineWidth /= 1.5
  for (; i < 50; i++) {
    ctx.beginPath()
    ctx.moveTo(x, y+(i*off))
    ctx.lineTo(x+W,y+(i*off))
    ctx.stroke()
  }
  ctx.lineWidth *= 1.5
  ctx.restore()

  //5
  y -= 2*H/24
  ctx.save()
  y += 4*W/24
  ctx.beginPath()
  ctx.moveTo(x+19*W/24+pet(d), y+20*H/24+pet(d))
  cpx = x+21*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+21*W/24+pet(d), y+18*H/24+pet(d))
  cpx = x+21*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+19*W/24+pet(d), y+15*H/24+pet(d))
  cpx = x+17*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+17*W/24+pet(d), y+16*H/24+pet(d))
  cpx = x+17*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*W/24+pet(d), y+17*H/24+pet(d))
  cpx = x+19*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*W/24+pet(d), y+19*H/24+pet(d))
  cpx = x+18*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+19*W/24+pet(d), y+20*H/24+pet(d))
  ctx.stroke()
  ctx.clip()
  i = 0
  ctx.lineWidth /= 1.5
  for (; i < 50; i++) {
    ctx.beginPath()
    ctx.moveTo(x+(i*off), y)
    ctx.lineTo(x+(i*off),y+H)
    ctx.stroke()
  }
  ctx.lineWidth *= 1.5
  ctx.restore()
  
  ctx.setLineDash([W/32,W/32])
  //6
  ctx.beginPath()
  ctx.moveTo(x+5*W/24+pet(d), y+0*H/24+pet(d))
  ctx.lineTo(x+18*W/24+pet(d), y+4*H/24+pet(d))
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+10*W/24+pet(d), y+12*H/24+pet(d))
  ctx.lineTo(x+19*W/24+pet(d), y+9*H/24+pet(d))
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+10*W/24+pet(d), y+12*H/24+pet(d))
  ctx.lineTo(x+19*W/24+pet(d), y+15*H/24+pet(d))
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+5*W/24+pet(d), y+24*H/24+pet(d))
  ctx.lineTo(x+19*W/24+pet(d), y+20*H/24+pet(d))
  ctx.stroke()
  ctx.setLineDash([])

  ctx.font = "800 italic "+(W*0.07)+"pt Garamond"
  ctx.fillStyle = color
  // U+0203E
  ctx.fillText("C", x+4*W/24, y+2*H/24)
  ctx.fillText("D", x+18*W/24, y+2*H/24)
  ctx.fillText("C", x+4*W/24, y+23*H/24)
  ctx.fillText("D", x+18*W/24, y+23*H/24)
  ctx.font = "800 italic "+(W*0.08)+"pt Garamond"
  ctx.fillText("\u{0203E}", x+4.5*W/24, y+23.2*H/24)
  ctx.fillText("\u{0203E}", x+18.5*W/24, y+23.2*H/24)
}

function ironing_boardAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "round"
  ctx.lineJoin = "bevel"
  //1
  y -= 4*H/24
  ctx.beginPath()
  ctx.moveTo(x+2*W/24+pet(d), y+12*H/24+pet(d))
  ctx.lineTo(x+18*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+22*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+23*W/24+pet(d), y+10*H/24+pet(d))
  cpx = x+24*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+19*W/24+pet(d), y+8*H/24+pet(d))
  cpx = x+4*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+4*W/24+pet(d), y+8*H/24+pet(d))
  cpx = x+3*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+1*W/24+pet(d), y+11*H/24+pet(d))
  cpx = x+1*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+2*W/24+pet(d), y+12*H/24+pet(d))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+6*W/24+pet(d), y+12*H/24+pet(d))
  ctx.lineTo(x+16*W/24+pet(d), y+23*H/24+pet(d))
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+16*W/24+pet(d), y+12*H/24+pet(d))
  ctx.lineTo(x+6*W/24+pet(d), y+23*H/24+pet(d))
  ctx.stroke()
  ctx.beginPath()
  ctx.moveTo(x+16.5*W/24+pet(d), y+12*H/24+pet(d))
  ctx.lineTo(x+7.5*W/24+pet(d), y+22*H/24+pet(d))
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+8*W/24+pet(d), y+12*H/24+pet(d))
  ctx.lineTo(x+17*W/24+pet(d), y+22*H/24+pet(d))
  ctx.stroke()
  //1
  ctx.beginPath()
  ctx.moveTo(x+12.25*W/24+pet(d), y+16.75*H/24+pet(d))
  ctx.lineTo(x+16*W/24+pet(d), y+16.75*H/24+pet(d))
  ctx.lineTo(x+15*W/24+pet(d), y+17.75*H/24+pet(d))
  ctx.lineTo(x+11.25*W/24+pet(d), y+17.75*H/24+pet(d))
  ctx.stroke()
  //5
  ctx.lineWidth *= 3
  y += 4*H/24
  //1
  ctx.beginPath()
  ctx.moveTo(x+15*W/24+pet(d), y+18*H/24+pet(d))
  ctx.lineTo(x+16*W/24+pet(d), y+19*H/24+pet(d))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+16*W/24+pet(d), y+17*H/24+pet(d))
  ctx.lineTo(x+17*W/24+pet(d), y+18*H/24+pet(d))
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+7*W/24+pet(d), y+18*H/24+pet(d))
  ctx.lineTo(x+6*W/24+pet(d), y+19*H/24+pet(d))
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+8.5*W/24+pet(d), y+17*H/24+pet(d))
  ctx.lineTo(x+7.5*W/24+pet(d), y+18*H/24+pet(d))
  ctx.stroke()

  ctx.lineWidth /= 3
  y += 8.5*H/24
  ctx.beginPath()
  ctx.moveTo(x+2*W/24+pet(d), y+12*H/24+pet(d))
  ctx.lineTo(x+18*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+22*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+23*W/24+pet(d), y+10*H/24+pet(d))
  cpx = x+24*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+19*W/24+pet(d), y+8*H/24+pet(d))
  cpx = x+4*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+4*W/24+pet(d), y+8*H/24+pet(d))
  cpx = x+3*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+1*W/24+pet(d), y+11*H/24+pet(d))
  cpx = x+1*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+2*W/24+pet(d), y+12*H/24+pet(d))
  ctx.globalAlpha = 0.2
  ctx.fillStyle = color
  ctx.fill()
  ctx.globalAlpha = 1
  ctx.fillStyle = savedF
}

function bigXAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/30
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "miter"
  ctx.beginPath()
  ctx.moveTo(x+1*W/24+pet(d), y+22*H/24+pet(d))
  ctx.lineTo(x+20*W/24+pet(d), y+22*H/24+pet(d))
  ctx.lineTo(x+18*W/24+pet(d), y+22*H/24+pet(d))
  ctx.lineTo(x+6*W/24+pet(d), y+2*H/24+pet(d))
  ctx.lineTo(x+4*W/24+pet(d), y+2*H/24+pet(d))
  ctx.lineTo(x+23*W/24+pet(d), y+2*H/24+pet(d))
  ctx.lineTo(x+20*W/24+pet(d), y+2*H/24+pet(d))
  ctx.lineTo(x+4*W/24+pet(d), y+22*H/24+pet(d))
  ctx.stroke()
}

function ten_of_cuisenaire_rodsAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/100
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let colors = shuffle(["#b83931", "#d27310", "#eed40a", "#669d3b", "#385d8f", "#64407d"])
  let dark = adjustBrightnessC(color, -40)
  let i = 0, x0 = x, y0 = y
  color = colors[0]
  for (; i < 10; i++) {
    cuisenairerodAt(x,y,W/8,color,1)
    x += W/8 - W/8/4
  }
  i = 0, x = x0, y = y0
  color = color = colors[1]
  for (; i < 5; i++) {
    cuisenairerodAt(x,y+H/8*1.1,W/8,color,2)
    x += W/8*2 - H/8/2
  }
  i = 0, x = x0, y = y0
  color = color = colors[2]
  for (; i < 2; i++) {
    cuisenairerodAt(x,y+H/8*2*1.1,W/8,color,5)
    x += W/8*5 - H/8*1.25
  }
  x = x0, y = y0
  color = color = colors[3]
  cuisenairerodAt(x,y+H/8*3*1.1,W/8,color,10)
  i = 0, x = x0, y = y0
  color = color = colors[2]
  for (; i < 2; i++) {
    cuisenairerodAt(x,y+H/8*4*1.1,W/8,color,5)
    x += W/8*5 - H/8*1.25
  }
  i = 0, x = x0, y = y0
  color = color = colors[1]
  for (; i < 5; i++) {
    cuisenairerodAt(x,y+H/8*5*1.1,W/8,color,2)
    x += W/8*2 - H/8/2
  }
  i = 0, x = x0, y = y0
  color = color = colors[0]
  for (; i < 10; i++) {
    cuisenairerodAt(x,y+H/8*6*1.1,W/8,color,1)
    x += W/8 - W/8/4
  }
  ctx.fillStyle = savedF
  ctx.strokeStyle = savedS
  bigXAt(x0+10*W/24+pet(d), y0-6*H/24+pet(d),W/7,savedS)
}

function cuisenairerodAt (x,y,W,color,N) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  W *= N
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/100
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let dark = adjustBrightnessC(color, -40)
  let lite = adjustBrightnessC(color, 20)

  let h = H/3
  //1
  ctx.beginPath()
  ctx.moveTo(x+0*W/24+pet(d), y+0*H/24+pet(d))
  ctx.lineTo(x+18*W/24+pet(d), y+0*H/24+pet(d))

  ctx.lineTo(x+18*W/24+pet(d)+h, y+6*H/24+pet(d))
  ctx.lineTo(x+18*W/24+pet(d)+h, y+24*H/24+pet(d))

  ctx.lineTo(x+h, y+24*H/24+pet(d))
  ctx.lineTo(x+0*W/24+pet(d), y+18*H/24+pet(d))
  ctx.lineTo(x+0*W/24+pet(d), y+0*H/24+pet(d))
  ctx.fillStyle = dark
  ctx.fill()
  ctx.strokeStyle = "#000000"
  ctx.stroke()
  //2
  ctx.beginPath()
  ctx.moveTo(x+0*W/24+pet(d), y+0*H/24+pet(d))
  ctx.lineTo(x+18*W/24+pet(d), y+0*H/24+pet(d))
  ctx.lineTo(x+18*W/24+pet(d), y+18*H/24+pet(d))
  ctx.lineTo(x+0*W/24+pet(d), y+18*H/24+pet(d))
  ctx.lineTo(x+0*W/24+pet(d), y+0*H/24+pet(d))
  ctx.fillStyle = lite
  ctx.fill()
  ctx.fillStyle = savedF
  ctx.strokeStyle = "#000000"
  ctx.stroke()
  ctx.strokeStyle = savedS
}

function burnerAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/10
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "round"
  ctx.lineJoin = "round"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, d = 0, angle = 0, x2, y2

  //1
  ctx.beginPath()
  p = rotatePoint(x+12*W/24+pet(d), y+17*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+17*W/24+pet(d)
  cpy = y+17*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+17*W/24+pet(d), y+12*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+17*W/24+pet(d)
  cpy = y+7*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24+pet(d), y+7*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+7*W/24+pet(d)
  cpy = y+7*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+7*W/24+pet(d), y+12*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+7*W/24+pet(d)
  cpy = y+17*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24+pet(d), y+17*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fillStyle = adjustBrightnessC(color, 60)
  ctx.fill()
  ctx.strokeStyle = color
  //2
  ctx.beginPath()
  p = rotatePoint(x+9*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+1*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+1*W/24+pet(d), y+14*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //3
  ctx.beginPath()
  p = rotatePoint(x+15*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+23*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+23*W/24+pet(d), y+14*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //4
  ctx.beginPath()
  p = rotatePoint(x+10*W/24+pet(d), y+14*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+4*W/24+pet(d), y+20*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+4*W/24+pet(d), y+22*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //5
  ctx.beginPath()
  p = rotatePoint(x+14*W/24+pet(d), y+14*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+20*W/24+pet(d), y+20*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+20*W/24+pet(d), y+22*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //6
  ctx.beginPath()
  p = rotatePoint(x+10*W/24+pet(d), y+10*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+4*W/24+pet(d), y+4*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+4*W/24+pet(d), y+6*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //7
  ctx.beginPath()
  p = rotatePoint(x+14*W/24+pet(d), y+10*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+20*W/24+pet(d), y+4*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+20*W/24+pet(d), y+6*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

//  ctx.beginPath()
//  ctx.ellipse(x+12*W/24,y+10*H/24,7*W/24,5*H/24,0,0,2*Math.PI)
  
  ctx.fillStyle = "#6cc1f7ff"
  let a = 0
  let f = 0, r =(5.5*W/24)
  cy -=1.8*H/24
  cx -=1*H/24
  ctx.globalAlpha /= 1.5
  for (; f < 24; f++) {
    x2 = r * Math.cos(a)+cx
    y2 = r * Math.sin(a)+cy

    ctx.beginPath()
    ctx.moveTo(x2+1*W/24+pet(d), y2+0*H/24+pet(d))
    cpx = x2+0*W/24
    cpy = y2+1*H/24
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x2+1*W/24+pet(d), y2+2*H/24+pet(d))
    cpx = x2+2*W/24
    cpy = y2+1*H/24
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x2+1*W/24+pet(d), y2+0*H/24+pet(d))  
    ctx.fill()
    a += Math.PI/12
  }

  // INVERT
  ctx.strokeStyle = "#fd9319ff"
   //8
  ctx.beginPath()
  p = rotatePoint(x+12*W/24+pet(d), y+22*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+22*W/24+pet(d)
  cpy = y+22*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+22*W/24+pet(d), y+12*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+22*W/24+pet(d)
  cpy = y+2*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24+pet(d), y+2*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+2*W/24+pet(d)
  cpy = y+2*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+2*W/24+pet(d), y+12*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+2*W/24+pet(d)
  cpy = y+20*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24+pet(d), y+20*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+20*W/24+pet(d)
  cpy = y+20*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+20*W/24+pet(d), y+12*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+20*W/24+pet(d)
  cpy = y+4*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24+pet(d), y+4*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+4*W/24+pet(d)
  cpy = y+4*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+4*W/24+pet(d), y+12*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+4*W/24+pet(d)
  cpy = y+18*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24+pet(d), y+18*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+18*W/24+pet(d)
  cpy = y+18*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+18*W/24+pet(d), y+12*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+18*W/24+pet(d)
  cpy = y+6*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24+pet(d), y+6*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+6*W/24+pet(d)
  cpy = y+6*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+6*W/24+pet(d), y+12*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+6*W/24+pet(d)
  cpy = y+16*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24+pet(d), y+16*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+16*W/24+pet(d)
  cpy = y+16*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+16*W/24+pet(d), y+12*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+16*W/24+pet(d)
  cpy = y+8*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24+pet(d), y+8*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+8*W/24+pet(d)
  cpy = y+8*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+8*W/24+pet(d), y+12*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+8*W/24+pet(d)
  cpy = y+14*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24+pet(d), y+14*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
// ctx.stroke()

  ctx.globalAlpha *= 1.5
  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function crossroadsAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, d = 0, angle = 0, i = 0
  for (; i < 4; i++) {
    //1
    ctx.beginPath()
    p = rotatePoint(x+12*W/24+pet(d), y+1*H/24+pet(d) ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    p = rotatePoint(x+11*W/24+pet(d), y+3*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+11*W/24+pet(d), y+5*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+13*W/24+pet(d), y+5*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+13*W/24+pet(d), y+3*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+12*W/24+pet(d), y+1*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+13*W/24+pet(d), y+0*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+14*W/24+pet(d), y+2*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+14*W/24+pet(d), y+4*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+13*W/24+pet(d), y+5*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+13*W/24+pet(d), y+3*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+14*W/24+pet(d), y+2*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    if (i < 2)
    ctx.stroke()

    //2 PATH
    ctx.beginPath()
    p = rotatePoint(x+11.75*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    p = rotatePoint(x+11.75*W/24+pet(d), y+5.4*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+12.25*W/24+pet(d), y+5.4*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+12.25*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    ctx.fill()

    //2 DOOR
    ctx.beginPath()
    p = rotatePoint(x+11.75*W/24+pet(d), y+5*H/24+pet(d) ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    p = rotatePoint(x+11.75*W/24+pet(d), y+4*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+12.25*W/24+pet(d), y+4*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+12.25*W/24+pet(d), y+5*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    ctx.fill()

    //3 WINDOWS
    ctx.beginPath()
    p = rotatePoint(x+12.25*W/24+pet(d), y+3*H/24+pet(d) ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    p = rotatePoint(x+12.75*W/24+pet(d), y+3*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+12.75*W/24+pet(d), y+3.5*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+12.25*W/24+pet(d), y+3.5*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    ctx.fill()

    //4
    ctx.beginPath()
    p = rotatePoint(x+11.25*W/24+pet(d), y+3*H/24+pet(d) ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    p = rotatePoint(x+11.75*W/24+pet(d), y+3*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+11.75*W/24+pet(d), y+3.5*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+11.25*W/24+pet(d), y+3.5*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    ctx.fill()

    angle += 90
  }
  angle -= 90
  //1 left house
  ctx.beginPath()
  p = rotatePoint(x+4*W/24+pet(d), y+14*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+5*W/24+pet(d), y+13*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+5*W/24+pet(d), y+11*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+3*W/24+pet(d), y+11*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+1*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+0*W/24+pet(d), y+13*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+2*W/24+pet(d), y+14*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+4*W/24+pet(d), y+14*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+5*W/24+pet(d), y+13*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+3*W/24+pet(d), y+13*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+1*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+3*W/24+pet(d), y+13*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+2*W/24+pet(d), y+14*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()
  angle += 90
  ctx.beginPath()
  p = rotatePoint(x+4*W/24+pet(d), y+14*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+5*W/24+pet(d), y+13*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+5*W/24+pet(d), y+11*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+3*W/24+pet(d), y+11*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+1*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+0*W/24+pet(d), y+13*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+2*W/24+pet(d), y+14*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+4*W/24+pet(d), y+14*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+5*W/24+pet(d), y+13*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+3*W/24+pet(d), y+13*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+1*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+3*W/24+pet(d), y+13*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+2*W/24+pet(d), y+14*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function long_divisionAt (x,y,W,color) {
 // alphabetAt (Letter,x,y,W,color)
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = [], i = 0
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = W/60
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/100
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  // random 2 ,4 digit numbers
  let divisor = 4//randomPick([3,4,5,6,7,8,9])
  let dividend = 334//101+Math.floor(Math.random()*800)
  let quotient = ""
  let dds = (""+dividend).split("")
  ctx.fillStyle = "#ffffff"
ctx.fillRect(x,y,W,H)
  ctx.fillStyle = color
  ctx.font = " "+(W*0.08)+"pt Courier New"
  let pad = ""
  if (Math.floor(100*dividend/divisor)/100 < 100)
    pad = "0"
  let qts = (""+pad+(Math.floor(10*dividend/divisor)/10)).split("")
  let place = 0
  let part = 0, rem = 0, prod//
  for (; i < qts.length; i++) {
    dig = qts[i]
    if (dig !== "0" && dig !== ".") {
      ctx.beginPath()
      ctx.moveTo(x+8*W/24+pet(d/2)+2*place*W/24, y+9.2*H/24+pet(d)+place*5*H/24)
      ctx.lineTo(x+14*W/24+pet(d/2)+2*place*W/24, y+9.2*H/24+pet(d)+place*5*H/24)
      ctx.stroke()
      ctx.beginPath()
      ctx.moveTo(x+8*W/24+pet(d/2)+2*place*W/24, y+9.2*H/24+pet(d)+place*5*H/24)
      ctx.lineTo(x+14*W/24+pet(d/2)+2*place*W/24, y+9.2*H/24+pet(d)+place*5*H/24)
      ctx.stroke()
      ctx.fillText(dig*divisor, x+8*W/24+pet(d)+2*place*W/24, y+9*H/24+pet(d)+place*5*H/24)
     // console.log(dig, dig*divisor)
      prod = dig*divisor
      part = Math.floor(dividend/10) // needs to shift ->
      rem = Math.floor(part-prod)
      ctx.fillStyle = "red"
      ctx.fillText(" "+rem, x+8*W/24+pet(d)+2*place*W/24, y+11.2*H/24+pet(d)+place*5*H/24)
      ctx.fillStyle = color
     // console.log(rem)
      place += 1
    }
  }

  
  part = dividend/10
  if (divisor < dividend) {
    quotient = " " + Math.floor(part/divisor)
    rem = Math.floor(part-divisor)
    prod = Math.floor(part/divisor) * divisor
  }
 // ctx.fillText(quotient, x+8*W/24+pet(d), y+2*H/24+pet(d))
  pad = ""
  if (prod < 10)
    pad = " "

  res = Math.floor(Math.floor(prod/10)/divisor)
 // ctx.fillText(res, x+12*W/24+pet(d), y+2*H/24+pet(d)) //number_line

  //1
  i = 0
  for (; i < 3; i++) {
    ctx.beginPath()
    ctx.moveTo(x+6*W/24+pet(d), y+7*H/24+pet(d))
    cpx = x+7*W/24
    cpy = y+5*H/24
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+6*W/24+pet(d), y+3*H/24+pet(d))
    cpx = x+18*W/24
    cpy = y+3*H/24
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20*W/24+pet(d), y+3*H/24+pet(d))
    ctx.stroke()

    ctx.beginPath()
    ctx.moveTo(x+7*W/24+pet(d), y+9.5*H/24+pet(d))
    cpx = x+14*W/24
    cpy = y+9.5*H/24
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+17*W/24+pet(d), y+9.5*H/24+pet(d))
    //ctx.stroke()
    let ds = (""+divisor).split("")
 
  }
  ctx.fillText(divisor, x+4*W/24+pet(d), y+6*H/24+pet(d))
  let finalq = Math.floor(10*dividend/divisor)/10
  if (finalq >= 100)
    ctx.fillText(finalq, x+8*W/24+pet(d), y+2.4*H/24+pet(d))
  else
    ctx.fillText(" "+finalq, x+8*W/24+pet(d), y+2.4*H/24+pet(d))
  ctx.fillText(dividend, x+8*W/24+pet(d), y+6*H/24+pet(d))
}

function longDivision (n,d) {
  let num = n + "",
    numLength = num.length,
    remainder = 0,
    product = 0,
    answer = '',
    i = 0;
  let expected = n/d

  while (i < numLength + 3) {
    let digit = i < numLength ? parseInt(num[i]) : 0;

    if (i == numLength){
      answer = answer + ".";
    }

    answer = answer + Math.floor((digit + (remainder * 10))/d);
    remainder = (digit + (remainder * 10))%d;
    
    let qd = parseInt(answer.split("")[answer.length-1])
    product = qd * d
    console.log("d:",d)
    console.log("digit:"+digit)
    console.log("q ",answer)
    console.log("p ",product)
    console.log("r ",remainder)
    console.log("---------",remainder)
    i++;
  }
  return parseFloat(answer);
}

function tofuAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.beginPath() // bkg fill whole shape
  ctx.moveTo(x+17*W/24+pet(d), y+3*H/24+pet(d))
  ctx.lineTo(x+1*W/24+pet(d), y+5*H/24+pet(d))
  ragged(ctx, x+6*W/24+pet(d), y+20*H/24+pet(d), x+1*W/24+pet(d), y+19*H/24+pet(d))
  ctx.lineTo(x+22*W/24+pet(d), y+16*H/24+pet(d))
  ctx.lineTo(x+22*W/24+pet(d), y+4*H/24+pet(d))
  ctx.lineTo(x+17*W/24+pet(d), y+3*H/24+pet(d))
  ctx.fillStyle = "#ffeedd"
  ctx.fill()
  //1 front face 
  ctx.beginPath()
  ctx.moveTo(x+6*W/24+pet(d), y+20*H/24+pet(d))
  ctx.lineTo(x+6*W/24+pet(d), y+6*H/24+pet(d))
  ragged(ctx, x+22*W/24+pet(d), y+16*H/24+pet(d), x+22*W/24+pet(d), y+4*H/24+pet(d))
  ragged(ctx, x+6*W/24+pet(d), y+20*H/24+pet(d), x+22*W/24+pet(d), y+16*H/24+pet(d))
  ctx.fillStyle = "#ffeedd"
  ctx.fill()

  //2
  ctx.beginPath()
  ctx.moveTo(x+1*W/24+pet(d), y+5*H/24+pet(d))
  //ctx.lineTo(x+6*W/24+pet(d), y+6*H/24+pet(d))

  ragged(ctx, x+6.2*W/24+pet(d), y+20*H/24+pet(d), x+6*W/24+pet(d), y+6*H/24+pet(d))
  ragged(ctx, x+1*W/24+pet(d), y+19*H/24+pet(d),x+6.5*W/24+pet(d), y+20*H/24+pet(d))
  ragged(ctx, x+1*W/24+pet(d), y+5*H/24+pet(d), x+1*W/24+pet(d), y+19*H/24+pet(d))
  ctx.fillStyle = adjustBrightnessC("#ffeedd",-30)
  ctx.fill()

  //3
  ctx.beginPath()
  ctx.moveTo(x+22*W/24+pet(d), y+4*H/24+pet(d))
  ragged(ctx, x+1*W/24+pet(d), y+5*H/24+pet(d), x+17*W/24+pet(d), y+3*H/24+pet(d))
  ragged(ctx, x+6*W/24+pet(d), y+6*H/24+pet(d), x+1*W/24+pet(d), y+5*H/24+pet(d))
  ctx.fillStyle = adjustBrightnessC("#ffeedd",10)
  ctx.fill()

  ctx.save()
  ctx.beginPath()
  ctx.moveTo(x+17*W/24+pet(d), y+3*H/24+pet(d))
  ctx.lineTo(x+1*W/24+pet(d), y+5*H/24+pet(d))
  ctx.lineTo(x+1*W/24+pet(d), y+19*H/24+pet(d))
  ctx.lineTo(x+6*W/24+pet(d), y+20*H/24+pet(d))
  ctx.lineTo(x+22*W/24+pet(d), y+16*H/24+pet(d))
  ctx.lineTo(x+22*W/24+pet(d), y+4*H/24+pet(d))
  ctx.lineTo(x+17*W/24+pet(d), y+3*H/24+pet(d))
  ctx.closePath()
  ctx.clip()
  ctx.fillStyle = adjustBrightnessC("#ffeedd",-10)
  document.getElementById("opacity").value = 10
  let v = document.getElementById("featuresize").value
  document.getElementById("featuresize").value = 20
  let n = document.getElementById("number").value
  document.getElementById("number").value = 200
  blobsRect(x,y,W,H,ctx.fillStyle)
  document.getElementById("featuresize").value = v
  document.getElementById("number").value = n
  document.getElementById("opacity").value = 100
  ctx.restore()
  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function constancyAt (x,y,W,color,INVERT) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let i = 0, x0 = x, y0 = y, ct = 0
  //1
  for (; i < 5; i++) {
    ctx.beginPath()
    ctx.moveTo(x+0*W/24+pet(d), y+22*H/24+pet(d))
    ctx.lineTo(x+3*W/24+pet(d), y+22*H/24+pet(d))
    ctx.lineTo(x+5*W/24+pet(d), y+19*H/24+pet(d))
    ctx.lineTo(x+2*W/24+pet(d), y+19*H/24+pet(d))
    if (ct % 2 === 0)
      ctx.fillStyle = "#dddddd"
    else
      ctx.fillStyle = "#666666"
    ctx.fill()
    ct++
    //2
    ctx.beginPath()
    ctx.moveTo(x+3*W/24+pet(d), y+22*H/24+pet(d))
    ctx.lineTo(x+6*W/24+pet(d), y+22*H/24+pet(d))
    ctx.lineTo(x+8*W/24+pet(d), y+19*H/24+pet(d))
    ctx.lineTo(x+5*W/24+pet(d), y+19*H/24+pet(d))
    if (ct % 2 === 0)
      ctx.fillStyle = "#dddddd"
    else
      ctx.fillStyle = "#666666"
    ctx.fill()
    ct++
    //3
    ctx.beginPath()
    ctx.moveTo(x+6*W/24+pet(d), y+22*H/24+pet(d))
    ctx.lineTo(x+9*W/24+pet(d), y+22*H/24+pet(d))
    ctx.lineTo(x+11*W/24+pet(d), y+19*H/24+pet(d))
    ctx.lineTo(x+8*W/24+pet(d), y+19*H/24+pet(d))
    if (ct % 2 === 0)
      ctx.fillStyle = "#dddddd"
    else
      ctx.fillStyle = "#666666"
    ctx.fill()
    ct++
    //4
    ctx.beginPath()
    ctx.moveTo(x+9*W/24+pet(d), y+22*H/24+pet(d))
    ctx.lineTo(x+12*W/24+pet(d), y+22*H/24+pet(d))
    ctx.lineTo(x+14*W/24+pet(d), y+19*H/24+pet(d))
    ctx.lineTo(x+11*W/24+pet(d), y+19*H/24+pet(d))
    if (ct % 2 === 0)
      ctx.fillStyle = "#dddddd"
    else
      ctx.fillStyle = "#666666"
    ctx.fill()
    ct++
    //5
    ctx.beginPath()
    ctx.moveTo(x+12*W/24+pet(d), y+22*H/24+pet(d))
    ctx.lineTo(x+15*W/24+pet(d), y+22*H/24+pet(d))
    ctx.lineTo(x+17*W/24+pet(d), y+19*H/24+pet(d))
    ctx.lineTo(x+14*W/24+pet(d), y+19*H/24+pet(d))
    if (ct % 2 === 0)
      ctx.fillStyle = "#dddddd"
    else
      ctx.fillStyle = "#666666"
    ctx.fill()
    ct++
    y -= 3*H/24
    x += 2*W/24
  }
  x = x0, y = y0
  i = 0, ct = 0
  for (; i < 5; i++) {
    ctx.beginPath()
    ctx.moveTo(x+0*W/24+pet(d), y+24*H/24+pet(d))
    ctx.lineTo(x+3*W/24+pet(d), y+24*H/24+pet(d))
    ctx.lineTo(x+3*W/24+pet(d), y+22*H/24+pet(d))
    ctx.lineTo(x+0*W/24+pet(d), y+22*H/24+pet(d))
    if (ct % 2 === 0)
      ctx.fillStyle = "#dddddd"
    else
      ctx.fillStyle = "#666666"
    ctx.fill()
    x += 3*W/24
    ct++
  }
   x = x0, y = y0
  i = 0, ct = 0
  for (; i < 5; i++) {
    ctx.beginPath()
    ctx.moveTo(x+15*W/24+pet(d), y+22*H/24+pet(d))
    ctx.lineTo(x+15*W/24+pet(d), y+24*H/24+pet(d))
    ctx.lineTo(x+17*W/24+pet(d), y+21*H/24+pet(d))
    ctx.lineTo(x+17*W/24+pet(d), y+19*H/24+pet(d))
    if (ct % 2 === 0)
      ctx.fillStyle = "#dddddd"
    else
      ctx.fillStyle = "#666666"
    ctx.fill()
    x += 2*W/24
    y -= 3*W/24
    ct++
  }
   x = x0, y = y0

  ctx.beginPath()
  ctx.moveTo(x+17*W/24+pet(d), y+8*H/24+pet(d))
  ctx.lineTo(x+7*W/24+pet(d), y+15*H/24+pet(d))
  cpx = x+8*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+13*W/24+pet(d), y+18*H/24+pet(d))
  cpx = x+22*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+22*W/24+pet(d), y+10*H/24+pet(d))
  cpx = x+17*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+17*W/24+pet(d), y+8*H/24+pet(d))
  ctx.globalAlpha /= 3.1
  ctx.fillStyle = "#000000"
  ctx.fill()
  //8
  ctx.beginPath()
  ctx.moveTo(x+17*W/24+pet(d), y+8*H/24+pet(d))
  cpx = x+8*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*W/24+pet(d), y+16*H/24+pet(d))
  cpx = x+9*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+14*W/24+pet(d), y+19*H/24+pet(d))
  cpx = x+22*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+22*W/24+pet(d), y+10*H/24+pet(d))
  cpx = x+17*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+17*W/24+pet(d), y+8*H/24+pet(d))
  ctx.fill()

  ctx.beginPath()
  ctx.moveTo(x+0*W/24+pet(d), y+22*H/24+pet(d))
  ctx.lineTo(x+15*W/24+pet(d), y+22*H/24+pet(d))
  ctx.lineTo(x+15*W/24+pet(d), y+24*H/24+pet(d))
  ctx.lineTo(x+0*W/24+pet(d), y+24*H/24+pet(d))
  ctx.fill()
  ctx.fill()

  ctx.beginPath()
  ctx.moveTo(x+15*W/24+pet(d), y+22*H/24+pet(d))
  ctx.lineTo(x+25*W/24+pet(d), y+7*H/24+pet(d))
  ctx.lineTo(x+25*W/24+pet(d), y+9*H/24+pet(d))
  ctx.lineTo(x+15*W/24+pet(d), y+24*H/24+pet(d))
  ctx.fill()
  ctx.globalAlpha *= 3.1

  ctx.fillStyle = "#ffffff"
  ctx.font = "italic "+(W*0.04)+"pt Garamond"

  ctx.fillText("A", x+12.8*W/24, y+9*H/24)
  ctx.fillText("B", x+12.2*W/24, y+14.7*H/24)

  ctx.beginPath()
  ctx.moveTo(x+17*W/24+pet(d), y+8*H/24+pet(d))
  ctx.lineTo(x+17*W/24+pet(d), y+2*H/24+pet(d))
  ctx.lineTo(x+17*W/24+pet(d), y+2*H/24+pet(d))
  cpx = x+22*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+22*W/24+pet(d), y+4*H/24+pet(d))
  cpx = x+22*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+22*W/24+pet(d), y+10*H/24+pet(d))
  cpx = x+17*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+17*W/24+pet(d), y+8*H/24+pet(d))
  ctx.fillStyle = color 
  ctx.fill()

  //10
  ctx.beginPath()
  ctx.moveTo(x+17*W/24+pet(d), y+2*H/24+pet(d))
  cpx = x+22*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+22*W/24+pet(d), y+4*H/24+pet(d))
  cpx = x+17*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+17*W/24+pet(d), y+2*H/24+pet(d))
  ctx.fillStyle = adjustBrightnessC(color, 60)
  ctx.fill()

  //shape for INVERT
  ctx.beginPath()
   ctx.moveTo(x+0*W/24+pet(d), y+10*H/24+pet(d))
  ctx.lineTo(x+25*W/24+pet(d), y+10*H/24+pet(d))
  ctx.lineTo(x+25*W/24+pet(d), y+13*H/24+pet(d))
  ctx.lineTo(x+0*W/24+pet(d), y+13*H/24+pet(d))
  ctx.fillStyle = "#666666"
  if (INVERT)
    ctx.fill()

  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function qnoteAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+8*W/24+pet(d), y+20*H/24+pet(d))
  cpx = x+8*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+4*W/24+pet(d), y+16*H/24+pet(d))
  cpx = x+1*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+0*W/24+pet(d), y+20*H/24+pet(d))
  cpx = x+0*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+4*W/24+pet(d), y+24*H/24+pet(d))
  cpx = x+7*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*W/24+pet(d), y+20*H/24+pet(d))
  ctx.lineTo(x+8*W/24+pet(d), y+0*H/24+pet(d))
  ctx.lineTo(x+7*W/24+pet(d), y+0*H/24+pet(d))
  ctx.lineTo(x+7*W/24+pet(d), y+17*H/24+pet(d))
  ctx.fillStyle = color
  ctx.fill()

  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}


function heard_but_not_seenAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = [], cs = W/24
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = W/66
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/100
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
 // y += 2*H/24
  //treeAt(x,y,W,color)

  
  ctx.font = (W*0.1)+"pt serif"
  ctx.fillStyle = color
  ctx.fillText("\u{1D15F}",x+15.5*W/24+pet(d), y+5.75*H/24+pet(d))
  ctx.fillText("\u{1D15F}",x+17.5*W/24+pet(d), y+5*H/24+pet(d))
  ctx.fillText("\u{1D15F}",x+19.5*W/24+pet(d), y+5.75*H/24+pet(d))
  ctx.fillText("\u{1D15F}",x+21.5*W/24+pet(d), y+6.55*H/24+pet(d))
  //1
  let i = 0
  for (; i < 11; i++) {
    //1
  ctx.beginPath()
  ctx.moveTo(x+11*cs+pet(d), y+22*cs+pet(d))
  cpx = x+8*cs
  cpy = y+22*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+2*cs+pet(d), y+22*cs+pet(d))
  cpx = x+8*cs
  cpy = y+18*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+11*cs+pet(d), y+16*cs+pet(d))
  cpx = x+8*cs
  cpy = y+16*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+4*cs+pet(d), y+16*cs+pet(d))
  cpx = x+8*cs
  cpy = y+13*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+11*cs+pet(d), y+10*cs+pet(d))
  cpx = x+9*cs
  cpy = y+10*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+6*cs+pet(d), y+10*cs+pet(d))
  cpx = x+9*cs
  cpy = y+7*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*cs+pet(d), y+4*cs+pet(d))
  cpx = x+15*cs
  cpy = y+7*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*cs+pet(d), y+10*cs+pet(d))
  cpx = x+15*cs
  cpy = y+10*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+13*cs+pet(d), y+10*cs+pet(d))
  cpx = x+16*cs
  cpy = y+13*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20*cs+pet(d), y+16*cs+pet(d))
  cpx = x+16*cs
  cpy = y+16*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+13*cs+pet(d), y+16*cs+pet(d))
  cpx = x+16*cs
  cpy = y+18*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+22*cs+pet(d), y+22*cs+pet(d))
  cpx = x+16*cs
  cpy = y+22*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+13*cs+pet(d), y+22*cs+pet(d))
  ctx.lineTo(x+13*cs+pet(d), y+24*cs+pet(d))
  ctx.lineTo(x+11*cs+pet(d), y+24*cs+pet(d))
  ctx.lineTo(x+11*cs+pet(d), y+22*cs+pet(d))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+16*cs+pet(d), y+8*cs+pet(d))
  ctx.lineTo(x+17*cs+pet(d), y+7*cs+pet(d))
  cpx = x+20*cs
  cpy = y+7*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+22*cs+pet(d), y+7*cs+pet(d))
  cpx = x+23*cs
  cpy = y+7*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+23*cs+pet(d), y+6*cs+pet(d))
  cpx = x+23*cs
  cpy = y+4*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+23*cs+pet(d), y+3*cs+pet(d))
  cpx = x+23*cs
  cpy = y+2*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+22*cs+pet(d), y+2*cs+pet(d))
  cpx = x+19*cs
  cpy = y+2*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*cs+pet(d), y+2*cs+pet(d))
  cpx = x+15*cs
  cpy = y+2*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+15*cs+pet(d), y+3*cs+pet(d))
  cpx = x+15*cs
  cpy = y+5*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+15*cs+pet(d), y+6*cs+pet(d))
  cpx = x+15*cs
  cpy = y+7*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*cs+pet(d), y+7*cs+pet(d))
  ctx.lineTo(x+16*cs+pet(d), y+8*cs+pet(d))
  ctx.stroke()
  }
  

  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function hierophantAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  let cs = W/32
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/150
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  d = cs/2
  let i = 0
  for (; i < 5; i++) {
    //20
    ctx.beginPath()
    ctx.ellipse(x+21.5*cs+pet(d), y+13*cs+pet(d), 1.6*cs, cs, 0, 0, 2*Math.PI)
    ctx.stroke()

    //21
    ctx.beginPath()
    ctx.ellipse(x+25.5*cs+pet(d), y+13*cs+pet(d), 1.6*cs, cs, 0, 0, 2*Math.PI)
    ctx.stroke()

    //1
    ctx.beginPath()
    ctx.moveTo(x+18*cs+pet(d), y+20*cs+pet(d))
    cpx = x+21*cs
    cpy = y+22*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+23*cs+pet(d), y+21*cs+pet(d))
    cpx = x+26*cs
    cpy = y+20*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+26*cs+pet(d), y+17*cs+pet(d))
    cpx = x+26*cs
    cpy = y+16.6*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+26*cs+pet(d), y+14*cs+pet(d))
    cpx = x+26*cs
    cpy = y+14*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+26*cs+pet(d), y+14*cs+pet(d))
    ctx.stroke()

    //2
    ctx.beginPath()
    ctx.moveTo(x+25*cs+pet(d), y+12*cs+pet(d))
    cpx = x+26*cs
    cpy = y+12*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+27*cs+pet(d), y+11*cs+pet(d))
    cpx = x+27*cs
    cpy = y+7*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+24*cs+pet(d), y+5*cs+pet(d))
    cpx = x+21*cs
    cpy = y+3*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+19*cs+pet(d), y+3*cs+pet(d))
    cpx = x+15*cs
    cpy = y+4*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+13*cs+pet(d), y+7*cs+pet(d))
    cpx = x+13*cs
    cpy = y+10*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*cs+pet(d), y+12*cs+pet(d))
    cpx = x+10*cs
    cpy = y+13*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+7*cs+pet(d), y+13*cs+pet(d))
    cpx = x+1*cs
    cpy = y+14*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+0*cs+pet(d), y+17*cs+pet(d))
    ctx.stroke()

    //3
    ctx.beginPath()
    ctx.moveTo(x+24.5*cs+pet(d), y+20.3*cs+pet(d))
    cpx = x+28*cs
    cpy = y+22*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+28*cs+pet(d), y+24*cs+pet(d))
    cpx = x+29*cs
    cpy = y+29*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+30*cs+pet(d), y+30*cs+pet(d))
    cpx = x+31*cs
    cpy = y+31*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+30*cs+pet(d), y+32*cs+pet(d))
    ctx.stroke()

    //4
    ctx.beginPath()
    ctx.moveTo(x+15*cs+pet(d), y+10*cs+pet(d))
    ctx.lineTo(x+20*cs+pet(d), y+12.5*cs+pet(d))
    ctx.stroke()

    //5
    ctx.beginPath()
    ctx.moveTo(x+20*cs+pet(d), y+12*cs+pet(d))
    ctx.lineTo(x+26*cs+pet(d), y+12*cs+pet(d))
    ctx.stroke()

    ctx.lineWidth *= 2
    //6
    ctx.beginPath()
    ctx.moveTo(x+20*cs+pet(d), y+11.5*cs+pet(d))
    ctx.lineTo(x+22*cs+pet(d), y+11.5*cs+pet(d))
    ctx.stroke()

    //7
    ctx.beginPath()
    ctx.moveTo(x+24*cs+pet(d), y+11.5*cs+pet(d))
    ctx.lineTo(x+26*cs+pet(d), y+11.5*cs+pet(d))
    ctx.stroke()
    ctx.lineWidth /= 2

    //21 hair
    ctx.beginPath()
    ctx.moveTo(x+11*cs+pet(d), y+13*cs+pet(d))
    cpx = x+13*cs
    cpy = y+13*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+13*cs+pet(d), y+13*cs+pet(d))
    cpx = x+14*cs
    cpy = y+13*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+14*cs+pet(d), y+11*cs+pet(d))
    cpx = x+14*cs
    cpy = y+10*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+15*cs+pet(d), y+10*cs+pet(d))
    cpx = x+16*cs
    cpy = y+10*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+15*cs+pet(d), y+14*cs+pet(d))
    cpx = x+16*cs
    cpy = y+14*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*cs+pet(d), y+14*cs+pet(d))
    cpx = x+16*cs
    cpy = y+12*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+17*cs+pet(d), y+12*cs+pet(d))
    cpx = x+18*cs
    cpy = y+10*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*cs+pet(d), y+9*cs+pet(d))
    cpx = x+15*cs
    cpy = y+8*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+13*cs+pet(d), y+8*cs+pet(d))
    cpx = x+13.5*cs
    cpy = y+10*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+11*cs+pet(d), y+13*cs+pet(d))
    ctx.fillStyle = color
    ctx.fill()
    //2
    ctx.beginPath()
    ctx.moveTo(x+23*cs+pet(d), y+4*cs+pet(d))
    cpx = x+21*cs
    cpy = y+3*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*cs+pet(d), y+5*cs+pet(d))
    ctx.stroke()
    //22 nose
    ctx.beginPath()
    ctx.moveTo(x+22.5*cs+pet(d), y+15*cs+pet(d))
    cpx = x+22.5*cs
    cpy = y+14*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+23.5*cs+pet(d), y+14*cs+pet(d))
    cpx = x+24.5*cs
    cpy = y+14*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+24.5*cs+pet(d), y+15*cs+pet(d))
    ctx.stroke()

    ctx.beginPath()
    ctx.arc(x+23*cs+pet(d), y+15*cs+pet(d), 1.5 ,0,2*Math.PI)
    ctx.stroke()
    ctx.beginPath()
    ctx.arc(x+23.85*cs+pet(d), y+15*cs+pet(d), 1.5 ,0,2*Math.PI)
    ctx.stroke()
    //8
    ctx.beginPath()
    ctx.moveTo(x+10*cs+pet(d), y+13*cs+pet(d))
    cpx = x+12*cs
    cpy = y+22*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+19*cs+pet(d), y+22*cs+pet(d))
    cpx = x+22*cs
    cpy = y+22*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+23*cs+pet(d), y+21*cs+pet(d))
    ctx.stroke()

    //9
    ctx.beginPath()
    ctx.moveTo(x+8*cs+pet(d), y+23*cs+pet(d))
    cpx = x+8*cs
    cpy = y+27*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+7*cs+pet(d), y+28*cs+pet(d))
    cpx = x+9*cs
    cpy = y+30*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+7.5*cs+pet(d), y+32*cs+pet(d))
    ctx.stroke()

    //10
    ctx.beginPath()
    ctx.moveTo(x+7*cs+pet(d), y+28*cs+pet(d))
    cpx = x+3*cs
    cpy = y+29*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x-1*cs+pet(d), y+27*cs+pet(d))
    ctx.stroke()

    //11
    ctx.beginPath()
    ctx.moveTo(x+15*cs+pet(d), y+13*cs+pet(d))
    cpx = x+14*cs
    cpy = y+12*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+14*cs+pet(d), y+11*cs+pet(d))
    cpx = x+14*cs
    cpy = y+10*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+15*cs+pet(d), y+10*cs+pet(d))
    cpx = x+15*cs
    cpy = y+11*cs
    ctx.stroke()

    //12
    ctx.beginPath()
    ctx.moveTo(x+23*cs+pet(d), y+13*cs+pet(d))
    cpx = x+23*cs
    cpy = y+12*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+24*cs+pet(d), y+13*cs+pet(d))
    ctx.stroke()

    //13
    ctx.beginPath()
    ctx.moveTo(x+22*cs+pet(d), y+17*cs+pet(d))
    cpx = x+24*cs
    cpy = y+15*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+25*cs+pet(d), y+17*cs+pet(d))
    cpx = x+24*cs
    cpy = y+20*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+22*cs+pet(d), y+17*cs+pet(d))
    ctx.stroke()

    //14
    ctx.beginPath()
    ctx.moveTo(x+25*cs+pet(d), y+6*cs+pet(d))
    cpx = x+22*cs
    cpy = y+6*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20*cs+pet(d), y+8*cs+pet(d))
    ctx.stroke()

    //15
    ctx.beginPath()
    ctx.moveTo(x+24*cs+pet(d), y+5*cs+pet(d))
    cpx = x+20*cs
    cpy = y+5*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+19*cs+pet(d), y+6*cs+pet(d))
    ctx.stroke()

    //16
    ctx.beginPath()
    ctx.moveTo(x+25*cs+pet(d), y+6*cs+pet(d))
    cpx = x+22*cs
    cpy = y+5*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20*cs+pet(d), y+6*cs+pet(d))
    ctx.stroke()

    //17
    ctx.beginPath()
    ctx.moveTo(x+24*cs+pet(d), y+5*cs+pet(d))
    cpx = x+20*cs
    cpy = y+4*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*cs+pet(d), y+6*cs+pet(d))
    ctx.stroke()
    //23
    ctx.beginPath()
    ctx.moveTo(x+22*cs+pet(d), y+4*cs+pet(d))
    cpx = x+19*cs
    cpy = y+3*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+17*cs+pet(d), y+5*cs+pet(d))
    ctx.stroke()

    //24
    ctx.beginPath()
    ctx.moveTo(x+20*cs+pet(d), y+3*cs+pet(d))
    cpx = x+17*cs
    cpy = y+3*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*cs+pet(d), y+5*cs+pet(d))
    ctx.stroke()

    //25
    ctx.beginPath()
    ctx.moveTo(x+0*cs+pet(d), y+17*cs+pet(d))
    cpx = x+-2*cs
    cpy = y+22*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x-1*cs+pet(d), y+27*cs+pet(d))
    ctx.stroke()
    ctx.strokeStyle = savedS
    ctx.fillStyle = savedF

    ctx.beginPath()
    ctx.moveTo(x-1*cs+pet(d), y+27*cs+pet(d))
    cpx = x-1.5*cs
    cpy = y+29*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x-1*cs+pet(d), y+32*cs+pet(d))
    ctx.stroke()

    //27 chin dot
    ctx.beginPath()
    ctx.arc(x+23*cs+pet(d), y+20*cs+pet(d) ,1.5, 0, 2*Math.PI)
    ctx.stroke()

    //28 ear X
    ctx.beginPath()
    ctx.moveTo(x+14.5*cs+pet(d), y+11*cs+pet(d))
    ctx.lineTo(x+15.5*cs+pet(d), y+12*cs+pet(d))
    ctx.stroke()
    ctx.beginPath()
    ctx.moveTo(x+14.5*cs+pet(d), y+12*cs+pet(d))
    ctx.lineTo(x+15.5*cs+pet(d), y+11*cs+pet(d))
    ctx.stroke()

    //31
    ctx.beginPath()
    ctx.moveTo(x+22.5*cs+pet(d), y+16.5*cs+pet(d))
    cpx = x+22.5*cs
    cpy = y+17.6*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+23.5*cs+pet(d), y+17.5*cs+pet(d))
    cpx = x+23.6*cs
    cpy = y+17.6*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+23.6*cs+pet(d), y+16*cs+pet(d))
    ctx.stroke()
    x += 1*cs
    ctx.beginPath()
    ctx.moveTo(x+22.5*cs+pet(d), y+16.5*cs+pet(d))
    cpx = x+22.5*cs
    cpy = y+17.6*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+23.5*cs+pet(d), y+17.5*cs+pet(d))
    cpx = x+23.6*cs
    cpy = y+17.6*cs
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+23.6*cs+pet(d), y+16.4*cs+pet(d))
    ctx.stroke()

    x -= 1*cs
    y -= 3*cs
  
   // V
    ctx.beginPath()
    ctx.moveTo(x+14*cs+pet(d), y+0*cs+pet(d))
    ctx.lineTo(x+18*cs+pet(d), y+0*cs+pet(d))
    ctx.stroke()

    //5
    ctx.beginPath()
    ctx.moveTo(x+13*cs+pet(d), y+4*cs+pet(d))
    ctx.lineTo(x+17*cs+pet(d), y+4*cs+pet(d))
    ctx.stroke()

    //6
    ctx.beginPath()
    ctx.moveTo(x+14.7*cs+pet(d), y+0*cs+pet(d))
    ctx.lineTo(x+15*cs+pet(d), y+4*cs+pet(d))
    ctx.lineTo(x+17*cs+pet(d), y+0*cs+pet(d))
    ctx.stroke()
    y += 3*cs
  }

}

function last_matchAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let lt = 1, rt = 1, i = 0
  let x0 = x, y0 = y, base = 0
  
  //3
  ctx.beginPath()
  ctx.moveTo(x+2*W/24+pet(d), y+24*H/24+pet(d))
  ctx.lineTo(x+1*W/24+pet(d), y+23*H/24+pet(d))
  ctx.lineTo(x+3*W/24+pet(d), y+2*H/24+pet(d))
  ctx.lineTo(x+2*W/24+pet(d), y+0*H/24+pet(d))
  ctx.lineTo(x+1*W/24+pet(d), y+0*H/24+pet(d))
  ctx.lineTo(x+0*W/24+pet(d), y+2*H/24+pet(d))
  ctx.lineTo(x+0*W/24+pet(d), y+21*H/24+pet(d))
  ctx.lineTo(x+1.2*W/24+pet(d), y+21*H/24+pet(d))
  ctx.stroke()
  ctx.beginPath()
  ctx.moveTo(x+2*W/24+pet(d), y+24*H/24+pet(d))
  ctx.lineTo(x+3*W/24+pet(d), y+19*H/24+pet(d))
  ctx.lineTo(x+24*W/24+pet(d), y+19*H/24+pet(d))
  ctx.lineTo(x+23*W/24+pet(d), y+24*H/24+pet(d))
  ctx.lineTo(x+2*W/24+pet(d), y+24*H/24+pet(d))
  ctx.stroke()

  //1
  ctx.beginPath()
  ctx.moveTo(x+2*W/24+pet(d), y+21*H/24+pet(d))
  ctx.lineTo(x+0*W/24+pet(d), y+21*H/24+pet(d))
  ctx.lineTo(x+0*W/24+pet(d), y+2*H/24+pet(d))
  ctx.lineTo(x+1*W/24+pet(d), y+0*H/24+pet(d))
  ctx.lineTo(x+2*W/24+pet(d), y+0*H/24+pet(d))
  ctx.lineTo(x+3*W/24+pet(d), y+2*H/24+pet(d))
  ctx.lineTo(x+1.3*W/24+pet(d), y+21*H/24+pet(d))
  ctx.fillStyle = "#22220040"
  ctx.fill()
  
  //2
  ctx.beginPath()
  ctx.moveTo(x+1*W/24+pet(d), y+23*H/24+pet(d))
  ctx.lineTo(x+2*W/24+pet(d), y+24*H/24+pet(d))
  ctx.lineTo(x+2.2*W/24+pet(d), y+23*H/24+pet(d))
  ctx.fillStyle = "#22220040"
  ctx.fill()

  ctx.beginPath()
  ctx.moveTo(x+2.8*W/24+pet(d), y+20*H/24+pet(d))
  ctx.lineTo(x+23.8*W/24+pet(d), y+20*H/24+pet(d))
  ctx.lineTo(x+23.2*W/24+pet(d), y+23*H/24+pet(d))
  ctx.lineTo(x+2.2*W/24+pet(d), y+23*H/24+pet(d))
  ctx.fillStyle = "#222222"
  ctx.fill()
  //4
  ctx.beginPath()
  ctx.moveTo(x+2*W/24+pet(d), y+0*H/24+pet(d))
  ctx.lineTo(x+23*W/24+pet(d), y+0*H/24+pet(d))
  ctx.lineTo(x+24*W/24+pet(d), y+2*H/24+pet(d))
  ctx.lineTo(x+23*W/24+pet(d), y+19*H/24+pet(d))
  ctx.stroke()

  x -= 2*W/24
  for (; i < 10; i++) {
    base = randomPick([18,16,17])
    lt = base+pet(1.0)
    rt = base+pet(1.0)
    let delta = (rt-lt)
    ctx.beginPath()
    ctx.moveTo(x+5*W/24+pet(d), y+19*H/24+pet(d))
    ragged(ctx,x+7.5*W/24+pet(d)-delta, y+rt*H/24+pet(d), x+5.5*W/24+pet(d), y+lt*H/24+pet(d))
    ctx.lineTo(x+7*W/24+pet(d), y+19*H/24+pet(d))
    ctx.closePath()
    ctx.shadowBlur = 0.3*W/24
    ctx.shadowColor = "#202000aa"
    ctx.shadowOffsetX = 0.5*W/24
    ctx.shadowOffsetY = -0.2*W/24
    ctx.fillStyle = savedF
    ctx.fill()
    ctx.shadowBlur = 0
    ctx.shadowOffsetX = 0
    ctx.shadowOffsetY = 0
    ctx.strokeStyle = color
    ctx.stroke()
    x += 2*W/24
  }
  x = x0 //+W/24
  x -= 2*W/24
  i = 0
  for (; i < 9; i++) {
    base = randomPick([18,16,17])
    lt = base+pet(1.0)
    rt = base+pet(1.0)
    let delta = (rt-lt)//distance(8,lt,6,rt)
    ctx.beginPath()
    ctx.moveTo(x+5*W/24+pet(d), y+19*H/24+pet(d))
    ctx.moveTo(x+5*W/24+pet(d), y+19*H/24+pet(d))
    ragged(ctx,x+7.5*W/24+pet(d)-delta, y+rt*H/24+pet(d), x+5.5*W/24+pet(d), y+lt*H/24+pet(d))
    ctx.lineTo(x+7*W/24+pet(d), y+19*H/24+pet(d))
    ctx.closePath()
    ctx.shadowBlur = 0.3*W/24
    ctx.shadowColor = "#202000aa"
    ctx.shadowOffsetX = 0.5*W/24
    ctx.shadowOffsetY = -0.2*W/24
    ctx.fillStyle = savedF

    ctx.fill()
    ctx.shadowBlur = 0
    ctx.shadowOffsetX = 0
    ctx.shadowOffsetY = 0
    ctx.strokeStyle = color
    ctx.stroke()
    x += 2*W/24
  }
  x = x0
  x += W/24
  //1
  ctx.beginPath()
  ctx.moveTo(x+13*W/24+pet(d), y+19*H/24+pet(d))
  ctx.lineTo(x+15*W/24+pet(d), y+4*H/24+pet(d))
  cpx = x+15*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*W/24+pet(d), y+3*H/24+pet(d))
  cpx = x+17*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+17*W/24+pet(d), y+4*H/24+pet(d))
  ctx.lineTo(x+15*W/24+pet(d), y+19*H/24+pet(d))
  ctx.lineTo(x+13*W/24+pet(d), y+19*H/24+pet(d))
  ctx.fillStyle = savedF
  ctx.shadowBlur = 0.3*W/24
  ctx.shadowColor = "#202000aa"
  ctx.shadowOffsetX = 0.5*W/24
  ctx.shadowOffsetY = -0.2*W/24
  ctx.fill()
  ctx.shadowBlur = 0
  ctx.shadowOffsetX = 0
  ctx.shadowOffsetY = 0
  ctx.stroke()
  
  //2
  ctx.beginPath()
  ctx.moveTo(x+14.9*W/24+pet(d), y+5*H/24+pet(d))
  ctx.lineTo(x+15*W/24+pet(d), y+4*H/24+pet(d))
  cpx = x+14.9*W/24
  cpy = y+2.9*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16.2*W/24+pet(d), y+2.9*H/24+pet(d))
  cpx = x+17.2*W/24
  cpy = y+2.9*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+17*W/24+pet(d), y+4*H/24+pet(d))
  ctx.lineTo(x+16.9*W/24+pet(d), y+5*H/24+pet(d))
  ctx.fillStyle = "#ff3000"
  ctx.fill()
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+16*W/24+pet(d), y+5*H/24+pet(d))
  ctx.lineTo(x+18*W/24+pet(d), y+5*H/24+pet(d))
  ctx.lineTo(x+17.5*W/24+pet(d), y+7*H/24+pet(d))
  ctx.lineTo(x+15.5*W/24+pet(d), y+7*H/24+pet(d))
  ctx.fillStyle = "#cccc8030"

  ctx.beginPath()
  ctx.moveTo(x+11*W/24+pet(d), y+23*H/24+pet(d))
  ctx.lineTo(x+15*W/24+pet(d), y+23*H/24+pet(d))
  ctx.lineWidth = W/48
  ctx.strokeStyle = "#afafafff"
  ctx.shadowBlur = W/80
  ctx.shadowColor = "#202000aa"
  ctx.shadowOffsetX = W/150
  ctx.shadowOffsetY = W/200
  ctx.stroke()
  ctx.shadowBlur = 0
  ctx.shadowOffsetX = 0
  ctx.shadowOffsetY = 0
  x -= 1*W/24
  ctx.beginPath()
  ctx.moveTo(x+15.9*W/24+pet(d), y+5*H/24+pet(d))
  ctx.lineTo(x+18*W/24+pet(d), y+5*H/24+pet(d))
  ctx.lineTo(x+17.6*W/24+pet(d), y+7*H/24+pet(d))
  ctx.lineTo(x+15.6*W/24+pet(d), y+7*H/24+pet(d))
  ctx.fillStyle = "#33330050"
  ctx.fill()
  //9
  
  ctx.beginPath()
  ctx.moveTo(x+2*W/24+pet(d), y+0*H/24+pet(d))
  ctx.lineTo(x+3*W/24+pet(d), y+2*H/24+pet(d))
  ctx.lineTo(x+24*W/24+pet(d), y+2*H/24+pet(d))
  ctx.lineTo(x+23*W/24+pet(d), y+0*H/24+pet(d))
  ctx.fillStyle = "#33330020"
  ctx.fill()

  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function crossword_puzzleAt (x,y,W,color,INVERT) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  if (INVERT)
    cluesAt(x-2*W/24,y-= 2*H/24,W,color)
  else
    crosswordPad(x,y,W,color)
}

function iron_sigilAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "round"
  ctx.lineJoin = "bevel"
  let flag = randomPick(["plain", "noiron", "nosteam", "1", "2", "3"])

  //1
  ctx.beginPath()
  ctx.moveTo(x+19*W/24+pet(d), y+8*H/24+pet(d))
  ctx.lineTo(x+7*W/24+pet(d), y+8*H/24+pet(d))
  cpx = x+0*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+0*W/24+pet(d), y+15*H/24+pet(d))
  ctx.lineTo(x+22*W/24+pet(d), y+15*H/24+pet(d))
  ctx.lineTo(x+16*W/24+pet(d), y+1*H/24+pet(d))
  ctx.lineTo(x+7*W/24+pet(d), y+1*H/24+pet(d))
  ctx.stroke()

  if (flag === "nosteam") {
    //2 steam lines
    ctx.beginPath()
    ctx.moveTo(x+8*W/24+pet(d), y+15*H/24+pet(d))
    ctx.lineTo(x+6*W/24+pet(d), y+24*H/24+pet(d))
    ctx.stroke()
    //2
    ctx.beginPath()
    ctx.moveTo(x+15*W/24+pet(d), y+15*H/24+pet(d))
    ctx.lineTo(x+17*W/24+pet(d), y+24*H/24+pet(d))
    ctx.stroke()
    //6 crossout backgrounf
    ctx.beginPath()
    ctx.moveTo(x+2*W/24+pet(d), y+17*H/24+pet(d))
    ctx.lineTo(x+22*W/24+pet(d), y+22*H/24+pet(d))
    ctx.strokeStyle = savedF
    ctx.lineWidth *= 3
    ctx.stroke()
  
    //7
    ctx.beginPath()
    ctx.moveTo(x+2*W/24+pet(d), y+22*H/24+pet(d))
    ctx.lineTo(x+22*W/24+pet(d), y+17*H/24+pet(d))
    ctx.lineWidth /= 3
    ctx.strokeStyle = color
    ctx.stroke()
    ctx.beginPath()
    ctx.moveTo(x+2*W/24+pet(d), y+17*H/24+pet(d))
    ctx.lineTo(x+22*W/24+pet(d), y+22*H/24+pet(d))
    ctx.stroke()

    //7
    ctx.beginPath()
    ctx.moveTo(x+2*W/24+pet(d), y+22*H/24+pet(d))
    ctx.lineTo(x+22*W/24+pet(d), y+17*H/24+pet(d))
    ctx.stroke()
  }
  if (flag === "noiron") {
    //4
    ctx.beginPath()
    ctx.moveTo(x+22*W/24+pet(d), y+20*H/24+pet(d))
    ctx.lineTo(x+2*W/24+pet(d), y+4*H/24+pet(d))
    ctx.strokeStyle = savedF
    ctx.lineWidth *= 3
    ctx.stroke()

    //5
    ctx.beginPath()
    ctx.moveTo(x+2*W/24+pet(d), y+20*H/24+pet(d))
    ctx.lineTo(x+22*W/24+pet(d), y+4*H/24+pet(d))
    ctx.strokeStyle = savedF
    ctx.stroke()

    ctx.beginPath()
    ctx.moveTo(x+22*W/24+pet(d), y+20*H/24+pet(d))
    ctx.lineTo(x+2*W/24+pet(d), y+4*H/24+pet(d))
    ctx.strokeStyle = color
    ctx.lineWidth /= 3
    ctx.stroke()

    //5
    ctx.beginPath()
    ctx.moveTo(x+2*W/24+pet(d), y+20*H/24+pet(d))
    ctx.lineTo(x+22*W/24+pet(d), y+4*H/24+pet(d))
    ctx.stroke()
  }
  
  ctx.fillStyle = color
  //dots
  y -= 0.5*W/24, x -= 0.5*W/24
  if (flag === "1" || flag === "3") {
    ctx.beginPath()
    ctx.arc(x+12*W/24+pet(d), y+12*H/24+pet(d), W/24, 0, 2*Math.PI)
    ctx.fill()
  }

  if (flag === "3") {
    ctx.beginPath()
    ctx.arc(x+9*W/24+pet(d), y+12*H/24+pet(d), W/24, 0, 2*Math.PI)
    ctx.fill()

    ctx.beginPath()
    ctx.arc(x+15*W/24+pet(d), y+12*H/24+pet(d), W/24, 0, 2*Math.PI)
    ctx.fill()
  }
  // two dots
  if (flag === "2") {
    ctx.beginPath()
    ctx.arc(x+10.5*W/24+pet(d), y+12*H/24+pet(d), W/24, 0, 2*Math.PI)
    ctx.fill()

    //12
    ctx.beginPath()
    ctx.arc(x+13.5*W/24+pet(d), y+12*H/24+pet(d), W/24, 0, 2*Math.PI)
    ctx.fill()
  }

  ctx.fillStyle = savedF
  ctx.strokeStyle = savedS
}

function chaliceAt (x,y,W,color, fill, a) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  let savedF = ctx.fillStyle
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, d = 0, angle = a

  //1
  //1
  ctx.beginPath()
  p = rotatePoint(x+6*W/24+pet(d), y+24*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+18*W/24+pet(d)
  cpy = y+24*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+18*W/24+pet(d), y+24*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+14*W/24+pet(d)
  cpy = y+24*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+13*W/24+pet(d), y+14*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+15*W/24+pet(d)
  cpy = y+14*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+15*W/24+pet(d), y+12*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+15*W/24+pet(d)
  cpy = y+10*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+13*W/24+pet(d), y+10*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+20*W/24+pet(d)
  cpy = y+10*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+20*W/24+pet(d), y+0*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+4*W/24+pet(d)
  cpy = y+0*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+4*W/24+pet(d), y+0*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+4*W/24+pet(d)
  cpy = y+10*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+11*W/24+pet(d), y+10*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+9*W/24+pet(d)
  cpy = y+10*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+9*W/24+pet(d), y+12*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+9*W/24+pet(d)
  cpy = y+14*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+11*W/24+pet(d), y+14*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+11*W/24+pet(d)
  cpy = y+24*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+6*W/24+pet(d), y+24*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fillStyle = fill
  ctx.fill()
ctx.fillStyle = savedF
ctx.stroke()

  //2
  ctx.beginPath()
  p = rotatePoint(x+11*W/24+pet(d), y+10*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+13*W/24+pet(d), y+10*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //3
  ctx.beginPath()
  p = rotatePoint(x+11*W/24+pet(d), y+14*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+13*W/24+pet(d), y+14*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()
}

function stabyAt (x,y,W,color,fill,a) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  let savedF = ctx.fillStyle
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, d = 0, angle = 0
  if (a)
    angle = a

  //1
  ctx.beginPath()
  p = rotatePoint(x+11.5*W/24+pet(d), y+3*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+11.5*W/24+pet(d), y+0*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+12.5*W/24+pet(d), y+0*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+12.5*W/24+pet(d), y+3*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+14*W/24+pet(d), y+3*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+14*W/24+pet(d), y+4*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+12.7*W/24+pet(d), y+4*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  cpx = x+13*W/24+pet(d)
  cpy = y+18*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24+pet(d), y+24*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+11*W/24+pet(d)
  cpy = y+18*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+11.3*W/24+pet(d), y+4*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  p = rotatePoint(x+10*W/24+pet(d), y+4*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+10*W/24+pet(d), y+3*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+11.4*W/24+pet(d), y+3*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+11*W/24+pet(d), y+0*H/24+pet(d) ,cx,cy,angle)
//  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+13*W/24+pet(d), y+0*H/24+pet(d) ,cx,cy,angle)
 // ctx.lineTo(p[0],p[1])
  ctx.fillStyle = fill
  ctx.fill()
  ctx.stroke()

  //2
  ctx.beginPath()
  p = rotatePoint(x+12*W/24+pet(d), y+24*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+12*W/24+pet(d), y+4*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+11.3*W/24+pet(d), y+4*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  cpx = x+11.*W/24+pet(d)
  cpy = y+18*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24+pet(d), y+24*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fillStyle = color
 // ctx.fill()


  //6
  ctx.beginPath()
  p = rotatePoint(x+11*W/24+pet(d), y+4*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+13*W/24+pet(d), y+4*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+12*W/24+pet(d), y+4*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+12*W/24+pet(d), y+24*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()
}

let witt = '146.SupposeInowask:“Hasheunderstoodthesystemwhenhecontinuestheseriestothehundredthplace?”Or-ifIshouldnotspeakof‘understanding’inconnectionwithourprimitivelanguage-game:Hashegotthesystem,ifhecontinuestheseriescorrectlysofor?-Perhapsyouwillsayhere:tohavegotthesystem(or,again,tounderstandit)can’tconsistincontinuingtheseriesuptothisorthatnumber:thatisonlyapplyingone’sunderstanding.Theunderstandingitselfisastatewhichisthesourceofthecorrectuse.Whatisonereallythinkingofhere?Isn’tonethinkingofthederivationofaseriesfromitsalgebraicformula?Oratleastofsome¬thinganalogous?-Butthisiswherewewerebefore.Thepointis,wecanthinkofmorethanoneapplicationofanalgebraicformula;andeverytypeofapplicationcaninturnbeformulatedalgebraically;butnaturallythisdoesnotgetusanyfurther.-Theapplicationisstillacriterionofunderstanding.147.“Buthowcanitbe?WhenIsayIunderstandtheruleofaseries,IamsurelynotsayingsobecauseIhavefoundoutthatuptonowIhaveappliedthealgebraicformulainsuch-and-suchawayIInmyowncaseatalleventsIsurelyknowthatImeansuch-and-suchaseries;itdoesn’tmatterhowfarIhaveactuallydevelopedit.”-Youridea,then,isthatyouknowtheapplicationoftheruleoftheseriesquiteapartfromrememberingactualapplicationstoparticularnumbers.Andyouwillperhapssay:“Ofcourse1FortheseriesisinfiniteandthebitofitthatIcanhavedevelopedfinite.”148.Butwhatdoesthisknowledgeconsistin?Letmeask:Whendoyouknowthatapplication?Always?dayandnight?oronlywhenyouareactuallythinkingoftherule?doyouknowit,thatis,inthesamewayasyouknowthealphabetandthemultiplicationtable?Oriswhatyoucall“knowledge”astateofconsciousnessoraprocess-sayathoughtofsomething,orthelike?149.IfonesaysthatknowingtheABCisastateofthemind,oneisthinkingofastateofamentalapparatus(perhapsofthebrain)bymeansofwhichweexplainthemanifestationsofthatknowledge.Suchastateiscalledadisposition.Butthereareobjectionstospeakingofastateofthemindhere,inasmuchasthereoughttobetwodifferentcriteriaforsuchastate:aknowledgeoftheconstructionoftheappara¬tus,quiteapartfromwhatitdoes.(Nothingwouldbemoreconfusingherethantousethewords“conscious”and“unconscious”forthecontrastbetweenstatesofconsciousnessanddispositions.Forthispairoftermscoversupagrammaticaldifference.)150.Thegrammaroftheword“knows”isevidentlycloselyrelatedtothatof“can”,“isableto”.Butalsocloselyrelatedtothatof“understands”.(‘Mastery’ofatechnique,)151.Butthereisalsothisuseoftheword“toknow”:wesay“NowIknowI”-andsimilarly“NowIcandoit!”and“NowIunderstand!”Letusimaginethefollowingexample:Awritesseriesofnumbersdown;Bwatcheshimandtriestofindalawforthesequenceofnumbers.Ifhesucceedsheexclaims:“NowIcangoon!”-Sothiscapacity,thisunderstanding,issomethingthatmakesitsappearanceinamoment.Soletustryandseewhatitisthatmakesitsappearancehere.-Ahaswrittendownthenumbers1,5,11,19,29;atthispointBsaysheknowshowtogoon.Whathappenedhere?Variousthingsmayhavehappened;forexample,whileAwasslowlyputtingonenumberafteranother,Bwasoccupiedwithtryingvariousalgebraicformulaeonthenumberswhichhadbeenwrittendown.AfterAhadwrittenthenumber19Btriedtheformulaa^=n2n-1;andthenextnumberconfirmedhishypothesis.'

function densityAt (x,y,W,color,INVERT) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let fs = W*0.04
  x -= 0.5*W/24
  let cx = x+W/2, cy = y+H/2
  let f = frankSlice().join("").replaceAll("_para_", "")
  let l = f.split(""), i = 0, w = 0, x0 = x, y0 = y, max = x+W, maxy = y+H
  if (Math.random() > 0.5)
    l = witt.slice(Math.floor(Math.random()*witt.length/2)).split("")
  ctx.font = "italic "+(fs)+"pt Garamond"
  y +=  W/24
  cx -= W/24
  for (; i < l.length; i++) {
    x += w
    ctx.fillText(l[i], x, y)
    if (INVERT) {
      if (x > x0+1.5*W/24 && x < (x0+W-2.5*W/24) && y > y0+2*H/24 && y < (y0+H-2*H/24))
        ctx.font = "800 italic "+(fs+2/*+Math.random()*2*/)+"pt Garamond"
      else
        ctx.font = "italic "+(fs/*+Math.random()*2*/)+"pt Garamond"
    } else {
      if (distance(x,y,cx,cy)< W/2.2)
        ctx.font = "800 italic "+(fs+2/*+Math.random()*2*/)+"pt Garamond"
      else
        ctx.font = "italic "+(fs/*+Math.random()*2*/)+"pt Garamond"
    }
    w = ctx.measureText(l[i]).width
    if (x > max) {
      w = 0
      x = x0
      y += fs 
    }
    if (y > maxy)
      break;
  }

}
  
function pre_hyph_complianceAt (x,y,W,color) {
  W *= 1.35
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  takinghandAt(x, y+2*H/24, W*0.7, color)
  takinghandAt(x, y-0*H/24, W*0.7, color, 180)
  stackAt(x+3*W/24, y+7*H/24, W*0.4, color)
}

function stackAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+0*W/24+pet(d), y+0*H/24+pet(d))
  ctx.lineTo(x+3*W/24+pet(d), y+10*H/24+pet(d))
  ctx.lineTo(x+28*W/24+pet(d), y+10*H/24+pet(d))
  ctx.lineTo(x+25*W/24+pet(d), y+0*H/24+pet(d))
  ctx.lineTo(x+0*W/24+pet(d), y+0*H/24+pet(d))
  ctx.stroke()

  let i = 0, yoff = W/24
  //2
  for (; i < 3; i++) {
    ctx.beginPath()
    ctx.moveTo(x+27.75*W/24+pet(d), y+10*H/24+pet(d)+(i*yoff))
    ctx.lineTo(x+28*W/24+pet(d), y+11*H/24+pet(d)+(i*yoff))
    ctx.lineTo(x+3*W/24+pet(d), y+11*H/24+pet(d)+(i*yoff))
    ctx.lineTo(x+0*W/24+pet(d), y+2*H/24+pet(d)+(i*yoff))
    ctx.lineTo(x+0.5*W/24+pet(d), y+2*H/24+pet(d)+(i*yoff))
    ctx.stroke()
  }
  x += 2*W/24
  //3
  ctx.beginPath()
  ctx.moveTo(x+11*W/24+pet(d), y+1*H/24+pet(d))
  ctx.lineTo(x+13*W/24+pet(d), y+9*H/24+pet(d))
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+10*W/24+pet(d), y+8*H/24+pet(d))
  cpx = x+13*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+13*W/24+pet(d), y+8*H/24+pet(d))
  cpx = x+16*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+15*W/24+pet(d), y+6*H/24+pet(d))
  cpx = x+14.2*W/24
  cpy = y+4.8*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+5*H/24+pet(d))
  cpx = x+9.3*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+9*W/24+pet(d), y+4*H/24+pet(d))
  cpx = x+8*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+11*W/24+pet(d), y+2*H/24+pet(d))
  cpx = x+14*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+14*W/24+pet(d), y+2*H/24+pet(d))
  ctx.stroke()
}

function takinghandAt (x,y,W,color,a) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let cx = x+W/2, cy = y+H/2, angle = 0
  if (a)
    angle = a
  //1
  ctx.beginPath()
  p = rotatePoint(x+4*W/24+pet(d), y+22*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+12*W/24+pet(d)
  cpy = y+24*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+20*W/24+pet(d), y+19*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+21*W/24+pet(d)
  cpy = y+18*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+20*W/24+pet(d)
  cpy = y+16.5*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+17*W/24+pet(d), y+18*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+15*W/24+pet(d)
  cpy = y+19*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+10*W/24+pet(d), y+18*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+12*W/24+pet(d)
  cpy = y+18*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24+pet(d), y+18*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+14*W/24+pet(d)
  cpy = y+18*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+14*W/24+pet(d), y+17*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+14*W/24+pet(d)
  cpy = y+16*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+13*W/24+pet(d), y+16*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+9*W/24+pet(d)
  cpy = y+14*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+4*W/24+pet(d), y+17*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+4*W/24+pet(d)
  cpy = y+22*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+4*W/24+pet(d), y+22*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  p = rotatePoint(x+1*W/24+pet(d), y+22*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+1*W/24+pet(d), y+17*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+4*W/24+pet(d), y+17*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()
}

function nonexistent_filesAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = "#000000"
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+10*W/24+pet(d), y+22*H/24+pet(d))
  ctx.lineTo(x+23*W/24+pet(d), y+22*H/24+pet(d))
  ctx.lineTo(x+23*W/24+pet(d), y+10*H/24+pet(d))
  ctx.lineTo(x+10*W/24+pet(d), y+10*H/24+pet(d))
  ctx.lineTo(x+10*W/24+pet(d), y+22*H/24+pet(d))
  ctx.lineTo(x+1*W/24+pet(d), y+18*H/24+pet(d))
  ctx.lineTo(x+1*W/24+pet(d), y+6*H/24+pet(d))
  ctx.lineTo(x+10*W/24+pet(d), y+10*H/24+pet(d))
  ctx.fillStyle = "#eeeeff"
  ctx.fill()
  ctx.stroke()
//2
  ctx.beginPath()
  ctx.moveTo(x+1*W/24+pet(d), y+6.2*H/24+pet(d))
  ctx.lineTo(x+10*W/24+pet(d), y+10.2*H/24+pet(d))
  ctx.lineTo(x+23*W/24+pet(d), y+10.2*H/24+pet(d))
  ctx.strokeStyle = "#666666"
  ctx.lineWidth *= 2
  ctx.stroke()
  ctx.lineWidth /= 2
  ctx.strokeStyle = "#000000"
  //7
  ctx.beginPath()
  ctx.moveTo(x+0.7*W/24+pet(d), y+4*H/24+pet(d))
  ctx.lineTo(x+0.7*W/24+pet(d), y+6*H/24+pet(d))
  ctx.lineTo(x+10*W/24+pet(d), y+10*H/24+pet(d))
  ctx.lineTo(x+23.3*W/24+pet(d), y+10*H/24+pet(d))
  ctx.lineTo(x+23.3*W/24+pet(d), y+8*H/24+pet(d))
  ctx.lineTo(x+14*W/24+pet(d), y+4*H/24+pet(d))
  ctx.fill()
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+0.7*W/24+pet(d), y+6*H/24+pet(d))
  ctx.lineTo(x+0.7*W/24+pet(d), y+4*H/24+pet(d))
  ctx.lineTo(x+10*W/24+pet(d), y+8*H/24+pet(d))
  ctx.lineTo(x+23.3*W/24+pet(d), y+8*H/24+pet(d))
  ctx.lineTo(x+23.3*W/24+pet(d), y+10*H/24+pet(d))
  ctx.fill()
 // ctx.strokeStyle = color
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+23.3*W/24+pet(d), y+8*H/24+pet(d))
  ctx.lineTo(x+14*W/24+pet(d), y+4*H/24+pet(d))
  ctx.lineTo(x+0.7*W/24+pet(d), y+4*H/24+pet(d))
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+14*W/24+pet(d), y+11*H/24+pet(d))
  ctx.lineTo(x+14*W/24+pet(d), y+12*H/24+pet(d))
  ctx.lineTo(x+19*W/24+pet(d), y+12*H/24+pet(d))
  ctx.lineTo(x+19*W/24+pet(d), y+11*H/24+pet(d))
  ctx.lineTo(x+14*W/24+pet(d), y+11*H/24+pet(d))
  ctx.fillStyle = "#222222"
  ctx.fill()

  //6
  ctx.beginPath()
  ctx.moveTo(x+11*W/24+pet(d), y+13*H/24+pet(d))
  ctx.lineTo(x+22*W/24+pet(d), y+13*H/24+pet(d))
  ctx.lineTo(x+22*W/24+pet(d), y+21*H/24+pet(d))
  ctx.lineTo(x+11*W/24+pet(d), y+21*H/24+pet(d))
  ctx.lineTo(x+11*W/24+pet(d), y+13*H/24+pet(d))
  ctx.stroke()

  scribAt(x+12*W/24+pet(d), y+14*H/24+pet(d), W/6, "#000000")
  scribAt(x+16*W/24+pet(d), y+14*H/24+pet(d), W/6, "#000000")
  scribAt(x+12*W/24+pet(d), y+17*H/24+pet(d), W/6, "#000000")
  scribAt(x+12*W/24+pet(d), y+19*H/24+pet(d), W/7, "#000000")

  ctx.fillStyle = savedF
  ctx.strokeStyle = savedS
}

function fertilityAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  //1
  ctx.beginPath()
  ctx.moveTo(x+23*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+23*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+1*H/24+pet(d))
  cpx = x+1*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+1*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+1*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+23*H/24+pet(d))
  cpx = x+23*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+23*W/24+pet(d), y+14*H/24+pet(d))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+24*W/24+pet(d), y+12*H/24+pet(d))
  ctx.lineTo(x+12*W/24+pet(d), y+13*H/24+pet(d))
  ctx.lineTo(x+10*W/24+pet(d), y+14*H/24+pet(d))
  ctx.lineTo(x+24*W/24+pet(d), y+14*H/24+pet(d))
  ctx.stroke()

  //3 PB
  ctx.beginPath()
  ctx.moveTo(x+12*W/24+pet(d), y+5*H/24+pet(d))
  cpx = x+14*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+14*W/24+pet(d), y+4*H/24+pet(d))
  cpx = x+14*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+3*H/24+pet(d))
  cpx = x+10*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+10*W/24+pet(d), y+4*H/24+pet(d))
  cpx = x+10*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+5*H/24+pet(d))
  ctx.stroke()

  //1 bump in
  ctx.beginPath()
  ctx.moveTo(x+7*W/24+pet(d), y+4*H/24+pet(d))
  cpx = x+8*W/24
  cpy = y+3.4*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+9*W/24+pet(d), y+4*H/24+pet(d))
  cpx = x+10*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+5*H/24+pet(d))
  cpx = x+14*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+15*W/24+pet(d), y+4*H/24+pet(d))
  cpx = x+16*W/24
  cpy = y+3.3*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+17*W/24+pet(d), y+3.9*H/24+pet(d))
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+18*W/24+pet(d), y+14*H/24+pet(d))
  cpx = x+21*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+21*W/24+pet(d), y+15*H/24+pet(d))
  cpx = x+21*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+21*H/24+pet(d))
  cpx = x+3*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+3*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+3*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+3*H/24+pet(d))
  cpx = x+21*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+21*W/24+pet(d), y+11*H/24+pet(d))
  cpx = x+21*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+14*W/24+pet(d), y+12.8*H/24+pet(d))
  ctx.stroke()

  //1 inner zona bits
  ctx.beginPath()
  ctx.moveTo(x+21*W/24+pet(d), y+15*H/24+pet(d))
  ctx.lineTo(x+21*W/24+pet(d), y+14*H/24+pet(d))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+21*W/24+pet(d), y+12.2*H/24+pet(d))
  ctx.lineTo(x+21*W/24+pet(d), y+11*H/24+pet(d))
  ctx.stroke() 

  ctx.beginPath()
  ctx.moveTo(x+20*W/24+pet(d), y+12.8*H/24+pet(d))
  cpx = x+16*W/24
  cpy = y+13.7*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+14*W/24+pet(d), y+13.5*H/24+pet(d))
  ctx.stroke()

  ctx.beginPath()
  ctx.ellipse(x+14*W/24+pet(d), y+13.5*H/24+pet(d), W/48, W/80, 0, 0, 2*Math.PI)
  ctx.fill()
  ctx.fillStyle = savedF
}

function exitAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+0*W/24+pet(d), y+12*H/24+pet(d))
  ctx.lineTo(x+24*W/24+pet(d), y+12*H/24+pet(d))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+10*W/24+pet(d), y+12*H/24+pet(d))
  ctx.lineTo(x+0*W/24+pet(d), y+22*H/24+pet(d))
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+14*W/24+pet(d), y+12*H/24+pet(d))
  ctx.lineTo(x+24*W/24+pet(d), y+22*H/24+pet(d))
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+12*W/24+pet(d), y+13*H/24+pet(d))
  ctx.lineTo(x+12*W/24+pet(d), y+15*H/24+pet(d))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+12*W/24+pet(d), y+17*H/24+pet(d))
  ctx.lineTo(x+12*W/24+pet(d), y+19*H/24+pet(d))
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+12*W/24+pet(d), y+21*H/24+pet(d))
  ctx.lineTo(x+12*W/24+pet(d), y+23*H/24+pet(d))
  ctx.stroke()

   //7
  ctx.beginPath()
  ctx.moveTo(x+2*W/24+pet(d), y+16*H/24+pet(d))
  ctx.lineTo(x+2*W/24+pet(d), y+3*H/24+pet(d))
  ctx.lineTo(x+3*W/24+pet(d), y+3*H/24+pet(d))
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+3*W/24+pet(d), y+2*H/24+pet(d))
  ctx.lineTo(x+3*W/24+pet(d), y+8*H/24+pet(d))
  ctx.lineTo(x+11*W/24+pet(d), y+8*H/24+pet(d))
  ctx.lineTo(x+11*W/24+pet(d), y+2*H/24+pet(d))
  ctx.lineTo(x+3*W/24+pet(d), y+2*H/24+pet(d))
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+11*W/24+pet(d), y+3*H/24+pet(d))
  ctx.lineTo(x+13*W/24+pet(d), y+3*H/24+pet(d))
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+13*W/24+pet(d), y+2*H/24+pet(d))
  ctx.lineTo(x+13*W/24+pet(d), y+8*H/24+pet(d))
  ctx.lineTo(x+21*W/24+pet(d), y+8*H/24+pet(d))
  ctx.lineTo(x+21*W/24+pet(d), y+2*H/24+pet(d))
  ctx.lineTo(x+13*W/24+pet(d), y+2*H/24+pet(d))
  ctx.stroke()

  //11
  ctx.beginPath()
  ctx.moveTo(x+3*W/24+pet(d), y+4*H/24+pet(d))
  ctx.lineTo(x+11*W/24+pet(d), y+4*H/24+pet(d))
  ctx.stroke()

  //12
  ctx.beginPath()
  ctx.moveTo(x+13*W/24+pet(d), y+4*H/24+pet(d))
  ctx.lineTo(x+21*W/24+pet(d), y+4*H/24+pet(d))
  ctx.stroke()

  //13 arrows
  ctx.beginPath()
  ctx.moveTo(x+5*W/24+pet(d), y+7*H/24+pet(d))
  ctx.stroke()

  //14
  ctx.beginPath()
  ctx.moveTo(x+14*W/24+pet(d), y+7*H/24+pet(d))
  ctx.stroke()

  let p0 = ["Mt. ","", "Ware", "E. ", "W. ", "Nor", "New ", "S. ","N. ", "Water"]
  let p1 = ["ham", " center","brook","field","bridge","wood","isle","land","bay","hurst","burg"," beach","dale", " point"]
  let p2 = ["ham","ton"," neck","ville","shire","town","ford","boro","port","mouth","stock", "sted", "bury"," city"]

  let twn = randomPick(p0)+randomPick(p1)+randomPick(p2)


  //15 names
  ctx.fillStyle = color
  ctx.font = "800 "+(W*0.022)+"pt sans-serif"
  ctx.fillText(twn.toUpperCase(),x+3.5*W/24+pet(d), y+3.3*H/24+pet(d))
  twn = randomPick(p1)+randomPick(p2)
  if (Math.random() > 0.5)
    twn = randomPick(p0)+randomPick(p2)+randomPick(p1)
  ctx.fillText(twn.toUpperCase(),x+13.5*W/24+pet(d), y+3.3*H/24+pet(d))

  ctx.fillText("EXIT",x+15.5*W/24+pet(d), y+7.3*H/24+pet(d))
  ctx.fillText("17 MILES",x+5.5*W/24+pet(d), y+7.3*H/24+pet(d))
  //16
  ctx.beginPath()
  ctx.moveTo(x+14*W/24+pet(d), y+3*H/24+pet(d))
  ctx.stroke()

  //13 arrows
  ctx.beginPath()
  ctx.moveTo(x+3.5*W/24+pet(d), y+7*H/24+pet(d))
  ctx.lineTo(x+4*W/24+pet(d), y+6.5*H/24+pet(d))
  ctx.lineTo(x+4.5*W/24+pet(d), y+7*H/24+pet(d))
  ctx.stroke()

  //14
  ctx.beginPath()
  ctx.moveTo(x+4*W/24+pet(d), y+6.5*H/24+pet(d))
  ctx.lineTo(x+4*W/24+pet(d), y+7.5*H/24+pet(d))
  ctx.stroke()

  //15
  ctx.beginPath()
  ctx.moveTo(x+14*W/24+pet(d), y+6.5*H/24+pet(d))
  ctx.lineTo(x+14.5*W/24+pet(d), y+7*H/24+pet(d))
  ctx.lineTo(x+14*W/24+pet(d), y+7.5*H/24+pet(d))
  ctx.stroke()

  //16
  ctx.beginPath()
  ctx.moveTo(x+14.5*W/24+pet(d), y+7*H/24+pet(d))
  ctx.lineTo(x+13.5*W/24+pet(d), y+7*H/24+pet(d))
  ctx.stroke()
}

function collageAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = W/12
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/150
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  //multiScraps_og()
  let hip = W * 0.8
  // fill

  let cx = x + W/2, cy = y + H/2
  let r = hip/6

  ctx.save()
  userAt(x,y.W,color)
 // ctx.clip()
  pointillism2()
  ctx.restore()
}

function contentAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "round"
  ctx.lineJoin = "bevel"
  //1
  let r = W/24
  
  ctx.fillStyle = "#ffffff"
  ctx.globalAlpha = 0.5
  ctx.beginPath()
  ctx.arc(x+22*W/24+pet(d), y+12*H/24+pet(d), r, 0, 2*Math.PI)
  ctx.fill()
  ctx.globalAlpha = 1
  
  r /= 3
  //2
  ctx.beginPath()
  ctx.arc(x+8*W/24+pet(d), y+21*H/24+pet(d), r, 0, 2*Math.PI)
  ctx.fillStyle = "#3b82f6"
  ctx.fill()
  ctx.fillStyle = "#ffffff"

  //3
  ctx.beginPath()
  ctx.arc(x+10*W/24+pet(d), y+21*H/24+pet(d), r, 0, 2*Math.PI)
  ctx.fill()

  //4
  ctx.beginPath()
  ctx.arc(x+12*W/24+pet(d), y+21*H/24+pet(d), r, 0, 2*Math.PI)
  ctx.fill()

  //5
  ctx.beginPath()
  ctx.arc(x+14*W/24+pet(d), y+21*H/24+pet(d), r, 0, 2*Math.PI)
  ctx.fill()

  //6
  ctx.lineWidth *= 1.5
  ctx.beginPath()
  ctx.moveTo(x+21.7*W/24+pet(d), y+11.5*H/24+pet(d))
  ctx.lineTo(x+22.35*W/24+pet(d), y+12*H/24+pet(d))
  ctx.lineTo(x+21.7*W/24+pet(d), y+12.5*H/24+pet(d))
  ctx.strokeStyle = savedF
  ctx.stroke()
  ctx.lineWidth /= 1.5
  document.getElementById("featuresize").value /= 2
 ctx.globalAlpha = 1
  let v = document.getElementById("featuresize").value
  document.getElementById("featuresize").value = 0
  userAt(x+W/24, y+1*H/24, 2.5*W/24, "#ffffff")
  document.getElementById("featuresize").value = v
  ctx.fill()

  ctx.font = "800 "+(W*0.025)+"pt sans-serif"
  ctx.fillText("user@domain.com", x+3.8*W/24, y+1.6*H/24)
  ctx.fillText("8 hr \u{25CD}", x+3.8*W/24, y+3.4*H/24)
  
  ctx.fillText(". . .", x+21*W/24, y+2*H/24)
  heartAt(x+W/24, y+22*H/24, 2*W/24, "#ffffff")
  talkAt(x+3.5*W/24, y+22*H/24, 2*W/24, "#ffffff")
  airplaneAt(x+6*W/24, y+22*H/24, 2*W/24, "#ffffff")
  save_flagAt(x+21*W/24, y+22*H/24, 2*W/24, "#ffffff")
  document.getElementById("featuresize").value *= 2
}

function save_flagAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+12*W/24+pet(d), y+17*H/24+pet(d))
  ctx.lineTo(x+20*W/24+pet(d), y+23*H/24+pet(d))
  ctx.lineTo(x+20*W/24+pet(d), y+0*H/24+pet(d))
  ctx.lineTo(x+4*W/24+pet(d), y+0*H/24+pet(d))
  ctx.lineTo(x+4*W/24+pet(d), y+23*H/24+pet(d))
  ctx.lineTo(x+12*W/24+pet(d), y+17*H/24+pet(d))
  ctx.stroke()
}

function sensitiveAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "round"
  ctx.lineJoin = "bevel"
  //1
  let r = W/24
 
  hazeRect (x, y, x+W, y+W)
  hazeRect (x+W, y+W, x, y)
  hazeRect (x+W, y, x, y+W)

  ctx.fillStyle = "#ffffff"
  ctx.strokeStyle = "#ffffff"
  x += 2*W/24
  //9
  ctx.save()
  ctx.beginPath()
  ctx.moveTo(x+6*W/24+pet(d), y+6*H/24+pet(d))
  ctx.lineTo(x+13.75*W/24+pet(d), y+11*H/24+pet(d))
  ctx.lineTo(x+6*W/24+pet(d), y+11*H/24+pet(d))
  ctx.lineTo(x+6*W/24+pet(d), y+6*H/24+pet(d))
  ctx.moveTo(x+7.8*W/24+pet(d), y+6*H/24+pet(d))
  ctx.lineTo(x+14*W/24+pet(d), y+10*H/24+pet(d))
  ctx.lineTo(x+14*W/24+pet(d), y+6*H/24+pet(d))
  ctx.lineTo(x+8*W/24+pet(d), y+6*H/24+pet(d))
 // ctx.strokeStyle = savedF
  
  ctx.closePath()
  //ctx.strokeStyle = "#ffffff"
  ctx.clip()

  //7
  ctx.lineWidth *= 2
  ctx.beginPath()
  ctx.moveTo(x+7*W/24+pet(d), y+8*H/24+pet(d))
  cpx = x+10*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+13*W/24+pet(d), y+8*H/24+pet(d))
  cpx = x+10*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+7*W/24+pet(d), y+8*H/24+pet(d))
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.arc(x+10*W/24+pet(d), y+8*H/24+pet(d),W/24,0,2*Math.PI)
  ctx.stroke()

  ctx.restore()
  ctx.lineWidth *= 2
  ctx.beginPath()
  ctx.moveTo(x+7*W/24+pet(d), y+6*H/24+pet(d))
  ctx.lineTo(x+13*W/24+pet(d), y+10*H/24+pet(d))
  ctx.stroke()
  ctx.lineWidth /= 2
  x -= 2*W/24
  //10
  ctx.font = "800 "+(W*0.045)+"pt sans-serif"
  let w = ctx.measureText("Sensitive Content").width
  ctx.fillText("Sensitive Content",x+W/2-w/2, y+12*H/24+pet(d))

  let reason = randomPick(["poverty", "mental illness", "adult language", "gun violence", "war, genocide", "nudity", "drug abuse", "self harm", "smoking", "adult situations"])
  ctx.font = "100 "+(W*0.035)+"pt sans-serif"
  w = ctx.measureText(reason).width
  ctx.fillText(reason,x+W/2-w/2, y+14.5*H/24+pet(d))

  ctx.font = "800 "+(W*0.033)+"pt sans-serif"
  w = ctx.measureText("See Card").width
  ctx.fillText("See Card",x+W/2-w/2, y+17.4*H/24+pet(d))
  //11
  ctx.beginPath()
  ctx.moveTo(x+9*W/24+pet(d), y+16*H/24+pet(d))
  ctx.lineTo(x+15*W/24+pet(d), y+16*H/24+pet(d))
  ctx.lineTo(x+15*W/24+pet(d), y+18*H/24+pet(d))
  ctx.lineTo(x+9*W/24+pet(d), y+18*H/24+pet(d))
  ctx.lineTo(x+9*W/24+pet(d), y+16*H/24+pet(d))
  ctx.stroke()
  ctx.fillStyle = savedF
  ctx.strokeStyle = savedS
}

function pepperAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+10*W/24+pet(d), y+4*H/24+pet(d))
  cpx = x+11*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+4*H/24+pet(d))
  cpx = x+12*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+9*W/24+pet(d), y+2*H/24+pet(d))
  cpx = x+9*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*W/24+pet(d), y+1*H/24+pet(d))
  cpx = x+12*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+13*W/24+pet(d), y+4*H/24+pet(d))
  cpx = x+14*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+15*W/24+pet(d), y+4*H/24+pet(d))
  cpx = x+12*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+10*W/24+pet(d), y+4*H/24+pet(d))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+12*W/24+pet(d), y+7*H/24+pet(d))
  cpx = x+12*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+9*W/24+pet(d), y+5*H/24+pet(d))
  cpx = x+6*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+5*W/24+pet(d), y+12*H/24+pet(d))
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+10*W/24+pet(d), y+4*H/24+pet(d))
  cpx = x+8*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+6*W/24+pet(d), y+4*H/24+pet(d))
  cpx = x+4*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+4*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+5*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*W/24+pet(d), y+23*H/24+pet(d))
  cpx = x+10*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+22*H/24+pet(d))
  cpx = x+17*W/24
  cpy = y+22*H/24
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+12*W/24+pet(d), y+22*H/24+pet(d))
  cpx = x+14*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+19*W/24+pet(d), y+19*H/24+pet(d))
  cpx = x+21*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+21*W/24+pet(d), y+11*H/24+pet(d))
  cpx = x+21*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+17*W/24+pet(d), y+4*H/24+pet(d))
  cpx = x+16*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+14*W/24+pet(d), y+4*H/24+pet(d))
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+12*W/24+pet(d), y+7*H/24+pet(d))
  cpx = x+12*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+15*W/24+pet(d), y+5*H/24+pet(d))
  cpx = x+18*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20*W/24+pet(d), y+9*H/24+pet(d))
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+10*W/24+pet(d), y+23*H/24+pet(d))
  cpx = x+11*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+13*W/24+pet(d), y+24*H/24+pet(d))
  cpx = x+16*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*W/24+pet(d), y+21*H/24+pet(d))
  cpx = x+19*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+19*W/24+pet(d), y+19*H/24+pet(d))
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+11*W/24+pet(d), y+11*H/24+pet(d))
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+12*W/24+pet(d), y+7*H/24+pet(d))
  cpx = x+11*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+12*H/24+pet(d))
  ctx.stroke()
}

function magnetAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  x -= 0.5*W/24
  //1
  ctx.beginPath()
  ctx.moveTo(x+2*W/24+pet(d), y+20*H/24+pet(d))
  cpx = x+1*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+0*H/24+pet(d))
  cpx = x+23*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+22*W/24+pet(d), y+20*H/24+pet(d))
  cpx = x+18*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*W/24+pet(d), y+20*H/24+pet(d))
  cpx = x+20*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+4*H/24+pet(d))
  cpx = x+4*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+6*W/24+pet(d), y+20*H/24+pet(d))
  cpx = x+2*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+2*W/24+pet(d), y+20*H/24+pet(d))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+2*W/24+pet(d), y+16*H/24+pet(d))
  ctx.lineTo(x+6.6*W/24+pet(d), y+16*H/24+pet(d))
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+18.3*W/24+pet(d), y+16*H/24+pet(d))
  ctx.lineTo(x+23*W/24+pet(d), y+16*H/24+pet(d))
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+4.5*W/24+pet(d), y+21*H/24+pet(d))
  ctx.lineTo(x+4.5*W/24+pet(d), y+24*H/24+pet(d))
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+2*W/24+pet(d), y+21*H/24+pet(d))
  ctx.lineTo(x+1*W/24+pet(d), y+24*H/24+pet(d))
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+7*W/24+pet(d), y+21*H/24+pet(d))
  ctx.lineTo(x+8*W/24+pet(d), y+24*H/24+pet(d))
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+18*W/24+pet(d), y+21*H/24+pet(d))
  ctx.lineTo(x+17*W/24+pet(d), y+24*H/24+pet(d))
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+20.5*W/24+pet(d), y+21*H/24+pet(d))
  ctx.lineTo(x+20.5*W/24+pet(d), y+24*H/24+pet(d))
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+23*W/24+pet(d), y+21*H/24+pet(d))
  ctx.lineTo(x+24*W/24+pet(d), y+24*H/24+pet(d))
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+6*W/24+pet(d), y+20*H/24+pet(d))
  ctx.lineTo(x+7*W/24+pet(d), y+20*H/24+pet(d))
  cpx = x+5*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+4*H/24+pet(d))
  ctx.stroke()

  //11
  ctx.beginPath()
  ctx.moveTo(x+22*W/24+pet(d), y+20*H/24+pet(d))
  cpx = x+23*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+23*W/24+pet(d), y+20*H/24+pet(d))
  cpx = x+24*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+0*H/24+pet(d))
  ctx.stroke()
}

function horse_shoeAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  x -= 0.5*W/24
  //1
  ctx.beginPath()
  ctx.moveTo(x+2*W/24+pet(d), y+20*H/24+pet(d))
  cpx = x+1*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+0*H/24+pet(d))
  cpx = x+23*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+22*W/24+pet(d), y+20*H/24+pet(d))
  cpx = x+18*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*W/24+pet(d), y+20*H/24+pet(d))
  cpx = x+20*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+4*H/24+pet(d))
  cpx = x+4*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+6*W/24+pet(d), y+20*H/24+pet(d))
  cpx = x+2*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+2*W/24+pet(d), y+20*H/24+pet(d))
  ctx.stroke()

  //1
  ctx.beginPath()
  ctx.arc(x+3.75*W/24+pet(d), y+17*H/24+pet(d), W/48, 0, 2*Math.PI)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.arc(x+3.75*W/24+pet(d), y+13*H/24+pet(d), W/48, 0, 2*Math.PI)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.arc(x+4.5*W/24+pet(d), y+9*H/24+pet(d), W/48, 0, 2*Math.PI)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.arc(x+19.5*W/24+pet(d), y+9*H/24+pet(d), W/48, 0, 2*Math.PI)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.arc(x+20*W/24+pet(d), y+13*H/24+pet(d), W/48, 0, 2*Math.PI)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.arc(x+20*W/24+pet(d), y+17*H/24+pet(d), W/48, 0, 2*Math.PI)
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+6*W/24+pet(d), y+20*H/24+pet(d))
  ctx.lineTo(x+7*W/24+pet(d), y+20*H/24+pet(d))
  cpx = x+5*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+4*H/24+pet(d))
  ctx.stroke()

  //11
  ctx.beginPath()
  ctx.moveTo(x+22*W/24+pet(d), y+20*H/24+pet(d))
  cpx = x+23*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+23*W/24+pet(d), y+20*H/24+pet(d))
  cpx = x+24*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+0*H/24+pet(d))
  ctx.stroke()
}


function big_footAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.save()
  ctx.beginPath()
  ctx.moveTo(x+19*W/32+pet(d), y+31*H/32+pet(d))
  ctx.lineTo(x+25*W/32+pet(d), y+31*H/32+pet(d))
  cpx = x+25*W/32
  cpy = y+29*H/32
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+22*W/32+pet(d), y+29*H/32+pet(d))
  cpx = x+22*W/32
  cpy = y+25*H/32
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+22*W/32+pet(d), y+23*H/32+pet(d))
  cpx = x+20*W/32
  cpy = y+18*H/32
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*W/32+pet(d), y+17*H/32+pet(d))
  cpx = x+18*W/32
  cpy = y+15*H/32
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20*W/32+pet(d), y+15*H/32+pet(d))
  cpx = x+23*W/32
  cpy = y+15*H/32
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+24*W/32+pet(d), y+18*H/32+pet(d))
  cpx = x+25*W/32
  cpy = y+19*H/32
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+26*W/32+pet(d), y+17*H/32+pet(d))
  cpx = x+26*W/32
  cpy = y+14*H/32
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+24*W/32+pet(d), y+13*H/32+pet(d))
  cpx = x+21*W/32
  cpy = y+12*H/32
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+21*W/32+pet(d), y+10*H/32+pet(d))
  cpx = x+22*W/32
  cpy = y+8*H/32
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+22*W/32+pet(d), y+5*H/32+pet(d))
  cpx = x+21*W/32
  cpy = y+3*H/32
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+19*W/32+pet(d), y+2*H/32+pet(d))
  cpx = x+18*W/32
  cpy = y+2*H/32
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+17*W/32+pet(d), y+4*H/32+pet(d))
  cpx = x+17*W/32
  cpy = y+6*H/32
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*W/32+pet(d), y+6*H/32+pet(d))
  cpx = x+14*W/32
  cpy = y+5*H/32
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+13*W/32+pet(d), y+8*H/32+pet(d))
  cpx = x+11*W/32
  cpy = y+9*H/32
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+11*W/32+pet(d), y+11*H/32+pet(d))
  cpx = x+9*W/32
  cpy = y+12*H/32
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+7*W/32+pet(d), y+16*H/32+pet(d))
  cpx = x+6*W/32
  cpy = y+17*H/32
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+5*W/32+pet(d), y+17*H/32+pet(d))
  cpx = x+4*W/32
  cpy = y+18*H/32
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+5*W/32+pet(d), y+19*H/32+pet(d))
  cpx = x+8*W/32
  cpy = y+19*H/32
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*W/32+pet(d), y+19*H/32+pet(d))
  cpx = x+10*W/32
  cpy = y+18*H/32
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/32+pet(d), y+15*H/32+pet(d))
  cpx = x+10*W/32
  cpy = y+18*H/32
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/32+pet(d), y+20*H/32+pet(d))
  cpx = x+13*W/32
  cpy = y+24*H/32
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+13*W/32+pet(d), y+25*H/32+pet(d))
  cpx = x+12*W/32
  cpy = y+28*H/32
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+11*W/32+pet(d), y+31*H/32+pet(d))
  cpx = x+17*W/32
  cpy = y+31*H/32
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+17*W/32+pet(d), y+31*H/32+pet(d))
  cpx = x+17*W/32
  cpy = y+29*H/32
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+15*W/32+pet(d), y+29*H/32+pet(d))
  cpx = x+16*W/32
  cpy = y+27*H/32
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+17*W/32+pet(d), y+23*H/32+pet(d))
  cpx = x+18*W/32
  cpy = y+23*H/32
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*W/32+pet(d), y+23*H/32+pet(d))
  cpx = x+18*W/32
  cpy = y+26*H/32
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+19.5*W/32+pet(d), y+29*H/32+pet(d))
  cpx = x+19*W/32
  cpy = y+30*H/32
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+19*W/32+pet(d), y+31*H/32+pet(d))
 // ctx.stroke()
  ctx.clip()
  hair(color)
  ctx.restore()
}

function cognitive_dissonanceAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let r1 = W/2, r2 = W*1.02, r3 = r2*0.98, off = 0
  //1
  ctx.save()
  ctx.beginPath()
  ctx.moveTo(x+10*W/24+pet(d), y+22*H/24+pet(d))
  cpx = x+12*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+13*W/24+pet(d), y+16*H/24+pet(d))
  cpx = x+15*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*W/24+pet(d), y+16*H/24+pet(d))
  cpx = x+19*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+19*W/24+pet(d), y+13*H/24+pet(d))
  cpx = x+23*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+23*W/24+pet(d), y+9*H/24+pet(d))
  cpx = x+23*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+2*H/24+pet(d))
  cpx = x+2*W/24
  cpy = y+3.5*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+1*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+1*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+4*W/24+pet(d), y+17*H/24+pet(d))
  cpx = x+4*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+7*W/24+pet(d), y+20*H/24+pet(d))
  cpx = x+9*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+10*W/24+pet(d), y+19*H/24+pet(d))
  cpx = x+8.5*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8.5*W/24+pet(d), y+22*H/24+pet(d))
  cpx = x+10*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+10*W/24+pet(d), y+22*H/24+pet(d))
  ctx.closePath()
  ctx.clip()
  let i = 0, max = 180
  /*
  for (; i < max; i++) {
    ctx.beginPath()
    ctx.arc(x+i*r1/24, y+H/2, r1, Math.PI*0.5, 1.5*Math.PI)
    ctx.stroke()
    ctx.beginPath()
    ctx.arc(x+i*r2/24-r2, y+H/2, r2, Math.PI*0.5, 1.5*Math.PI, -1)
    ctx.stroke()

    ctx.beginPath()
    ctx.arc(x+i*r3/24-r3, y+H/2+5, r3, Math.PI*1.5, 0.5*Math.PI)
  }*/

  for (; i < max; i++) {
    ctx.beginPath()
    ctx.arc(x+W/2, y+i*r1/24-r1, r1, Math.PI*0, Math.PI)
    ctx.stroke()
    ctx.beginPath()
    ctx.arc(x+W/2, y+i*r2/24-r2, r2, Math.PI*0, Math.PI, -1)
    ctx.stroke()

  //  ctx.beginPath()
  //  ctx.arc(x+i*r3/24-r3, y+H/2+5, r3, Math.PI*1.5, 0.5*Math.PI)
  //  ctx.stroke()
  }
  ctx.restore()
}

function scribAt(x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = W/12
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/150
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+0*W/24+pet(d), y+6*H/24+pet(d))
  let i = 1, max = randomPick([7,9,13])
  for (; i < max; i++) {
    ctx.lineTo(x+i*2*W/24+pet(d), y+0*H/24+pet(d))
    ctx.lineTo(x+i*2*W/24+pet(d), y+6*H/24+pet(d))
  }
  ctx.stroke()
}

function trumpsigAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, WAVEY = true
  let cs = W/32, d = 0, i = 0, maxi = 1
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  if (WAVEY) {
    d = cs*1.7, maxi = 55
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/75
  }
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  for (; i < maxi; i++) { // WAVEY
  //1
  ctx.beginPath()
  ctx.moveTo(x+1*cs+pet(d/2), y+27*cs+pet(d/2))
  cpx = x+4*cs
  cpy = y+16*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+4*cs+pet(d), y+3*cs+pet(d))
  cpx = x+7*cs
  cpy = y+16*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+6*cs+pet(d), y+22*cs+pet(d))
  cpx = x+6*cs
  cpy = y+27*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+5*cs+pet(d/2), y+30*cs+pet(d/2))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+3*cs+pet(d/2), y+28*cs+pet(d/2))
  cpx = x+2*cs
  cpy = y+24*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+3*cs+pet(d), y+20*cs+pet(d/2))
  cpx = x+3*cs
  cpy = y+23*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+5*cs+pet(d), y+28*cs+pet(d))
  cpx = x+6*cs
  cpy = y+27*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+6*cs+pet(d/2), y+25*cs+pet(d/2))
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+5*cs+pet(d/2), y+30*cs+pet(d/2))
  cpx = x+8*cs
  cpy = y+24*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*cs+pet(d), y+18*cs+pet(d/2))
  cpx = x+9*cs
  cpy = y+21*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+9*cs+pet(d), y+25*cs+pet(d))
  cpx = x+9*cs
  cpy = y+27*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*cs+pet(d), y+28*cs+pet(d))
  cpx = x+8*cs
  cpy = y+26*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+8*cs+pet(d/2), y+21*cs+pet(d/2))
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+9*cs+pet(d/2), y+27*cs+pet(d/2))
  cpx = x+10*cs
  cpy = y+23*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*cs+pet(d), y+20*cs+pet(d/2))
  cpx = x+11*cs
  cpy = y+24*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*cs+pet(d), y+28*cs+pet(d))
  cpx = x+14*cs
  cpy = y+25*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+15*cs+pet(d), y+19*cs+pet(d/2))
  cpx = x+14*cs
  cpy = y+25*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+15*cs+pet(d), y+28*cs+pet(d))
  cpx = x+17*cs
  cpy = y+25*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+17*cs+pet(d), y+20*cs+pet(d/2))
  cpx = x+17*cs
  cpy = y+25*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*cs+pet(d), y+27*cs+pet(d))
  cpx = x+18*cs
  cpy = y+24*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+19*cs+pet(d), y+21*cs+pet(d/2))
  cpx = x+18*cs
  cpy = y+26*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+19*cs+pet(d), y+28*cs+pet(d))
  cpx = x+20*cs
  cpy = y+27*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+21*cs+pet(d), y+25*cs+pet(d))
  cpx = x+23*cs
  cpy = y+16*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+22*cs+pet(d/2), y+8*cs+pet(d/2))
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+21*cs+pet(d/2), y+24*cs+pet(d/2))
  cpx = x+20*cs
  cpy = y+28*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+22*cs+pet(d), y+26*cs+pet(d))
  cpx = x+23*cs
  cpy = y+23*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+24*cs+pet(d), y+20*cs+pet(d/2))
  cpx = x+24*cs
  cpy = y+25*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+24*cs+pet(d), y+28*cs+pet(d))
  cpx = x+26*cs
  cpy = y+27*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+29*cs+pet(d), y+16*cs+pet(d))
  cpx = x+29*cs
  cpy = y+10*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+28*cs+pet(d), y+6*cs+pet(d))
  cpx = x+27*cs
  cpy = y+14*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+26*cs+pet(d), y+25*cs+pet(d))
  cpx = x+26*cs
  cpy = y+31*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+65*cs+pet(d), y+28*cs+pet(d))
  ctx.stroke()
  //7
  ctx.beginPath()
  ctx.moveTo(x+22*cs+pet(d/2), y+8*cs+pet(d/2))
  cpx = x+21*cs
  cpy = y+16*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+21*cs+pet(d/2), y+25*cs+pet(d/2))
  ctx.stroke()

  } //WAVEY
  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function fingers_crossedAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  //1
  ctx.beginPath()
  ctx.moveTo(x+13*W/20+pet(d), y+13*H/20+pet(d))
  cpx = x+13*W/20
  cpy = y+10*H/20
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+13*W/20+pet(d), y+10*H/20+pet(d))
  cpx = x+13*W/20
  cpy = y+9*H/20
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+14*W/20+pet(d), y+9*H/20+pet(d))
  cpx = x+15*W/20
  cpy = y+9*H/20
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+15*W/20+pet(d), y+10*H/20+pet(d))
  cpx = x+15*W/20
  cpy = y+16*H/20
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+15*W/20+pet(d), y+16*H/20+pet(d))
  cpx = x+15*W/20
  cpy = y+20*H/20
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+10*W/20+pet(d), y+20*H/20+pet(d))
  cpx = x+5*W/20
  cpy = y+20*H/20
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+5*W/20+pet(d), y+16*H/20+pet(d))
  cpx = x+5*W/20
  cpy = y+12*H/20
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+5*W/20+pet(d), y+12*H/20+pet(d))
  cpx = x+5*W/20
  cpy = y+11*H/20
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+6*W/20+pet(d), y+11*H/20+pet(d))
  cpx = x+7*W/20
  cpy = y+11*H/20
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+7*W/20+pet(d), y+12*H/20+pet(d))
  cpx = x+7*W/20
  cpy = y+14*H/20
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+7*W/20+pet(d), y+14*H/20+pet(d))
  cpx = x+7*W/20
  cpy = y+15*H/20
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+6*W/20+pet(d), y+15*H/20+pet(d))
  cpx = x+5*W/20
  cpy = y+15*H/20
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+5*W/20+pet(d), y+14*H/20+pet(d))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+7*W/20+pet(d), y+12*H/20+pet(d))
  cpx = x+7*W/20
  cpy = y+11*H/20
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+7*W/20+pet(d), y+11*H/20+pet(d))
  cpx = x+7*W/20
  cpy = y+10*H/20
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*W/20+pet(d), y+10*H/20+pet(d))
  cpx = x+9*W/20
  cpy = y+10*H/20
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+9*W/20+pet(d), y+11*H/20+pet(d))
  cpx = x+9*W/20
  cpy = y+14*H/20
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+9*W/20+pet(d), y+14*H/20+pet(d))
  cpx = x+9*W/20
  cpy = y+15*H/20
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*W/20+pet(d), y+15*H/20+pet(d))
  cpx = x+7*W/20
  cpy = y+15*H/20
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+7*W/20+pet(d), y+14*H/20+pet(d))
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+13*W/20+pet(d), y+11*H/20+pet(d))
  cpx = x+11*W/20
  cpy = y+4*H/20
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+11*W/20+pet(d), y+4*H/20+pet(d))
  cpx = x+11*W/20
  cpy = y+3*H/20
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+10*W/20+pet(d), y+3*H/20+pet(d))
  cpx = x+9*W/20
  cpy = y+3*H/20
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+9*W/20+pet(d), y+4*H/20+pet(d))
  cpx = x+11*W/20
  cpy = y+11*H/20
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+11*W/20+pet(d), y+11*H/20+pet(d))
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+12*W/20+pet(d), y+7.3*H/20+pet(d))
  cpx = x+13*W/20
  cpy = y+4*H/20
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+13*W/20+pet(d), y+4*H/20+pet(d))
  cpx = x+13*W/20
  cpy = y+3*H/20
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/20+pet(d), y+3*H/20+pet(d))
  cpx = x+11*W/20
  cpy = y+3*H/20
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+11*W/20+pet(d), y+4*H/20+pet(d))
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+9*W/20+pet(d), y+11*H/20+pet(d))
  ctx.lineTo(x+10*W/20+pet(d), y+7.3*H/20+pet(d))
  ctx.stroke()
}

function stygian_blueAt (x,y,W,color,INVERT) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  ctx.fillStyle = "#000000"
  ctx.fillRect(x,y+H/2,W,H/2)

  ctx.fillStyle = "#ffffff"
  ctx.fillRect(x,y,W,H/2)

  ctx.fillStyle = "#ffff40"//, "#00ff00", "#40ffff"])
  if (INVERT)
    ctx.fillStyle = "#40ffff"
  ctx.fillRect(x+8*W/24, y+2*H/24, W/3, H/3)

  ctx.font = (W*0.05)+"pt sans-serif"
  ctx.fillStyle = "#000000"
  let w = ctx.measureText("X").width
  ctx.fillText("X",x+(W/2 - w/2), y+6.5*H/24)

  ctx.fillStyle = "#ffffff"
  ctx.fillText("X",x+(W/2 - w/2), y+18.5*H/24)
}

function special_interestsAt (x,y,W,color,INVERT) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  let name = randomPick(["Aardonyx", "Abelisaurus", "Abrictosaurus", "Abrosaurus", "Abydosaurus", "Acanthopholis", "Achelousaurus", "Achillobator", "Acristavus", "Acrocanthosaurus", "Acrotholus", "Adamantisaurus", "Adasaurus", "Adeopapposaurus", "Aegyptosaurus", "Aeolosaurus", "Aerosteon", "Afrovenator", "Agathaumas", "Agilisaurus", "Agujaceratops", "Agustinia", "Ajkaceratops", "Alamosaurus", "Alaskacephale", "Albalophosaurus", "Albertaceratops", "Albertadromeus", "Albertonykus", "Albertosaurus", "Alectrosaurus", "Aletopelta", "Alioramus", "Allosaurus", "Altirhinus", "Alvarezsaurus", "Alwalkeria", "Alxasaurus", "Amargasaurus", "Amazonsaurus", "Ammosaurus", "Ampelosaurus", "Amphicoelias", "Amurosaurus", "Anabisetia", "Anatosaurus", "Anatotitan", "Anchiceratops", "Anchiornis", "Anchisaurus", "Andesaurus", "Angaturama", "Angolatitan", "Angulomastacator", "Animantarx", "Ankylosaurus", "Anodontosaurus", "Anserimimus", "Antarctopelta", "Antarctosaurus", "Antetonitrus", "Anzu", "Aorun", "Apatosaurus", "Appalachiosaurus", "Aquilops", "Aragosaurus", "Aralosaurus", "Archaeoceratops", "Archaeopteryx", "Archaeornithomimus", "Arcovenator", "Arcusaurus", "Argentinosaurus", "Argyrosaurus", "Aristosuchus", "Arrhinoceratops", "Astrodon", "Asylosaurus", "Atlasaurus", "Atlascopcosaurus", "Atrociraptor", "Aublysodon", "Aucasaurus", "Auroraceratops", "Australodocus", "Australovenator", "Austroraptor", "Austrosaurus", "Avaceratops", "Aviatyrannis", "Avimimus", "Bactrosaurus", "Bagaceratops", "Bagaraatan", "Bahariasaurus", "Balaur", "Bambiraptor", "Barapasaurus", "Barilium", "Barosaurus", "Barsboldia", "Baryonyx", "Batyrosaurus", "Becklespinax", "Beipiaosaurus", "Beishanlong", "Bellusaurus", "Berberosaurus", "Bicentenaria", "Bistahieversor", "Bonapartenykus", "Bonitasaura", "Borogovia", "Bothriospondylus", "Brachiosaurus", "Brachyceratops", "Brachylophosaurus", "Brachytrachelopan", "Bravoceratops", "Brontomerus", "Bruhathkayosaurus", "Buitreraptor", "Byronosaurus", "Camarasaurus", "Camarillasaurus", "Camelotia", "Camptosaurus", "Carcharodontosaurus", "Carnotaurus", "Caudipteryx", "Centrosaurus", "Cerasinops", "Ceratonykus", "Ceratosaurus", "Cetiosauriscus", "Cetiosaurus", "Changyuraptor", "Chaoyangsaurus", "Charonosaurus", "Chasmosaurus", "Chialingosaurus", "Chilantaisaurus", "Chilesaurus", "Chindesaurus", "Chirostenotes", "Chubutisaurus", "Chungkingosaurus", "Citipati", "Claosaurus", "Coahuilaceratops", "Coelophysis", "Coelurus", "Colepiocephale", "Compsognathus", "Concavenator", "Conchoraptor", "Condorraptor", "Coronosaurus", "Corythosaurus", "Crichtonsaurus", "Cruxicheiros", "Cryolophosaurus", "Cryptovolans", "Cumnoria", "Dacentrurus", "Daemonosauru", "Dahalokely", "Dakotaraptor", "Daspletosaurus", "Datousaurus", "Darwinsaurus", "Deinocheirus", "Deinodon", "Deinonychus", "Delapparentia", "Deltadromeus", "Demandasaurus", "Diabloceratops", "Diamantinasaurus", "Diceratops", "Dicraeosaurus", "Dilong", "Dilophosaurus", "Dimetrodon", "Diplodocus", "Dollodon", "Draconyx", "Dracopelta", "Dracorex", "Dracovenator", "Dravidosaurus", "Dreadnoughtus", "Drinker", "Dromaeosauroides", "Dromaeosaurus", "Dromiceiomimus", "Dryosaurus", "Dryptosaurus", "Dubreuillosaurus", "Duriavenator", "Dyoplosaurus", "Dysalotosaurus", "Dyslocosaurus", "Dystrophaeus", "Echinodon", "Edmarka", "Edmontonia", "Edmontosaurus", "Efraasia", "Einiosaurus", "Ekrixinatosaurus", "Elaphrosaurus", "Elmisaurus", "Elopteryx", "Elrhazosaurus", "Enigmosaurus", "Eoabelisaurus", "Eobrontosaurus", "Eocarcharia", "Eocursor", "Eodromaeus", "Eolambia", "Eoraptor", "Eosinopteryx", "Eotriceratops", "Eotyrannus", "Epachthosaurus", "Epidendrosaurus", "Epidexipteryx", "Equijubus", "Erectopus", "Erketu", "Erliansaurus", "Erlikosaurus", "Euhelopus", "Euoplocephalus", "Europasaurus", "Europelta", "Euskelosaurus", "Eustreptospondylus", "Fabrosaurus", "Falcarius", "Ferganasaurus", "Fruitadens", "Fukuiraptor", "Fukuisaurus", "Fulgurotherium", "Futalognkosaurus", "Gallimimus", "Gargoyleosaurus", "Garudimimus", "Gasosaurus", "Gasparinisaura", "Gastonia", "Genyodectes", "Gideonmantellia", "Giganotosaurus", "Gigantoraptor", "Gigantspinosaurus", "Gilmoreosaurus", "Giraffatitan", "Glacialisaurus", "Gobiceratops", "Gobisaurus", "Gobivenator", "Gojirasaurus", "Gondwanatitan", "Gorgosaurus", "Goyocephale", "Graciliraptor", "Gryphoceratops", "Gryponyx", "Gryposaurus", "Guaibasaurus", "Guanlong", "Hadrosaurus", "Hagryphus", "Halticosaurus", "Haplocanthosaurus", "Haplocheirus", "Harpymimus", "Haya", "Herrerasaurus", "Hesperonychus", "Hesperosaurus", "Heterodontosaurus", "Hexing", "Hexinlusaurus", "Heyuannia", "Hippodraco", "Homalocephale", "Hongshanosaurus", "Hoplitosaurus", "Huabeisaurus", "Huanghetitan", "Huaxiagnathus", "Huaxiaosaurus", "Huayangosaurus", "Huehuecanauhtlus", "Hungarosaurus", "Huxleysaurus", "Hylaeosaurus", "Hypacrosaurus", "Hypselosaurus", "Hypselospinus", "Hypsibema", "Hypsilophodon", "Ichthyovenator", "Ignavusaurus", "Iguanacolossus", "Iguanodon", "Ilokelesia", "Incisivosaurus", "Indosuchus", "Ingenia", "Irritator", "Isanosaurus", "Isisaurus", "Jainosaurus", "Janenschia", "Jaxartosaurus", "Jeholosaurus", "Jeyawati", "Jianchangosaurus", "Jinfengopteryx", "Jingshanosaurus", "Jinzhousaurus", "Jobaria", "Judiceratops", "Juratyrant", "Juravenator", "Kaatedocus", "Kaijiangosaurus", "Kazaklambia", "Kentrosaurus", "Kerberosaurus", "Khaan", "Kileskus", "Kinnareemimus", "Kol", "Koreaceratops", "Koreanosaurus", "Kosmoceratops", "Kotasaurus", "Kritosaurus", "Kryptops", "Kukufeldia", "Kulindadromeus", "Kundurosaurus", "Labocania", "Lagosuchus", "Lambeosaurus", "Lamplughsaura", "Lanzhousaurus", "Laosaurus", "Lapparentosaurus", "Laquintasaura", "Latirhinus", "Leaellynasaura", "Leinkupal", "Leonerasaurus", "Leptoceratops", "Leshansaurus", "Lesothosaurus", "Lessemsaurus", "Lexovisaurus", "Leyesaurus", "Liaoceratops", "Liaoningosaurus", "Liliensternus", "Limaysaurus", "Limusaurus", "Linhenykus", "Linheraptor", "Linhevenato", "Lophorhothon", "Lophostropheus", "Loricatosaurus", "Lourinhanosaurus", "Lourinhasaurus", "Luanchuanraptor", "Lufengosaurus", "Lurdusaurus", "Lusotitan", "Lycorhinus", "Lythronax", "Machairasaurus", "Macrogryphosaurus", "Magnapaulia", "Magnirostris", "Magnosaurus", "Magyarosaurus", "Mahakala", "Maiasaura", "Majungasaurus", "Malawisaurus", "Mamenchisaurus", "Manidens", "Mantellisaurus", "Mantellodon", "Mapusaurus", "Marshosaurus", "Martharaptor", "Masiakasaurus", "Massospondylus", "Maxakalisaurus", "Medusaceratops", "Megalosaurus", "Megapnosaurus", "Megaraptor", "Mei", "Melanorosaurus", "Mendozasaurus", "Mercuriceratops", "Metriacanthosaurus", "Microceratops", "Micropachycephalosaurus", "Microraptor", "Microvenator", "Minmi", "Minotaurasaurus", "Miragaia", "Mirischia", "Mochlodon", "Mojoceratops", "Monkonosaurus", "Monoclonius", "Monolophosaurus", "Mononykus", "Montanoceratops", "Mussaurus", "Muttaburrasaurus", "Mymoorapelta", "Nankangia", "Nanosaurus", "Nanotyrannus", "Nanshiungosaurus", "Nanuqsaurus", "Nanyangosaurus", "Nasutoceratops", "Nebulasaurus", "Nedcolbertia", "Neimongosaurus", "Nemegtomaia", "Nemegtosaurus", "Neovenator", "Neuquenraptor", "Neuquensaurus", "Nigersaurus", "Nipponosaurus", "Noasaurus", "Nodocephalosaurus", "Nodosaurus", "Nomingia", "Nothronychus", "Notohypsilophodon", "Nqwebasaurus", "Nuthetes", "Nyasasaurus", "Ojoceratops", "Olorotitan", "Omeisaurus", "Oohkotokia", "Opisthocoelicaudia", "Orkoraptor", "Ornithodesmus", "Ornitholestes", "Ornithomimus", "Ornithopsis", "Orodromeus", "Orthomerus", "Oryctodromeus", "Ostafrikasaurus", "Othnielia", "Othnielosaurus", "Ouranosaurus", "Overosaurus", "Oviraptor", "Oxalaia", "Ozraptor", "Pachycephalosaurus", "Pachyrhinosaurus", "Palaeoscincus", "Paluxysaurus", "Pampadromaeus", "Pamparaptor", "Panamericansaurus", "Panoplosaurus", "Panphagia", "Pantydraco", "Paralititan", "Paranthodon", "Pararhabdodon", "Parasaurolophus", "Parksosaurus", "Paronychodon", "Parvicursor", "Patagosaurus", "Pawpawsaurus", "Pedopenna", "Pegomastax", "Pelecanimimus", "Peloroplites", "Pelorosaurus", "Pentaceratops", "Philovenator", "Phuwiangosaurus", "Piatnitzkysaurus", "Pinacosaurus", "Pisanosaurus", "Piveteausaurus", "Planicoxa", "Plateosaurus", "Pleurocoelus", "Pneumatoraptor", "Podokesaurus", "Poekilopleuron", "Polacanthus", "Prenocephale", "Prenoceratops", "Proa", "Probactrosaurus", "Proceratosaurus", "Procompsognathus", "Propanoplosaurus", "Prosaurolophus", "Protarchaeopteryx", "Protoceratops", "Protohadros", "Psittacosaurus", "Puertasaurus", "Pyroraptor", "Qantassaurus", "Qianzhousaurus", "Qiaowanlong", "Qiupalong", "Quaesitosaurus", "Quilmesaurus", "Rahiolisaurus", "Rahonavis", "Rajasaurus", "Rapator", "Rapetosaurus", "Raptorex", "Rebbachisaurus", "Regaliceratops", "Regnosaurus", "Rhabdodon", "Rhinorex", "Rhoetosaurus", "Richardoestesia", "Rinchenia", "Rinconsaurus", "Riojasaurus", "Rubeosaurus", "Rugops", "Sahaliyania", "Saichania", "Saltasaurus", "Saltopus", "Sanjuansaurus", "Santanaraptor", "Sarahsaurus", "Sarcolestes", "Sarcosaurus", "Saturnalia", "Saurolophus", "Sauroniops", "Sauropelta", "Saurophaganax", "Sauroposeidon", "Saurornithoides", "Saurornitholestes", "Savannasaurus", "Scansoriopteryx", "Scelidosaurus", "Scipionyx", "Sciurumimus", "Scolosaurus", "Scutellosaurus", "Secernosaurus", "Seitaad", "Segisaurus", "Segnosaurus", "Seismosaurus", "Sellosaurus", "Serendipaceratops", "Shamosaurus", "Shanag", "Shantungosaurus", "Shaochilong", "Shenzhousaurus", "Shunosaurus", "Shuvosaurus", "Shuvuuia", "Siamodon", "Siamosaurus", "Siamotyrannus", "Siats", "Sigilmassasaurus", "Silvisaurus", "Similicaudipteryx", "Sinocalliopteryx", "Sinoceratops", "Sinornithoides", "Sinornithomimus", "Sinornithosaurus", "Sinosauropteryx", "Sinosaurus", "Sinotyrannus", "Sinovenator", "Sinraptor", "Sinusonasus", "Skorpiovenator", "Sonorasaurus", "Sphaerotholus", "Spinophorosaurus", "Spinops", "Spinosaurus", "Spinostropheus", "Staurikosaurus", "Stegoceras", "Stegosaurus", "Stenopelix", "Stokesosaurus", "Struthiomimus", "Struthiosaurus", "Stygimoloch", "Styracosaurus", "Suchomimus", "Sulaimanisaurus", "Supersaurus", "Suuwassea", "Suzhousaurus", "Szechuanosaurus", "Tachiraptor", "Talarurus", "Talenkauen", "Talos", "Tangvayosaurus", "Tanius", "Tanycolagreus", "Taohelong", "Tapuiasaurus", "Tarascosaurus", "Tarbosaurus", "Tarchia", "Tastavinsaurus", "Tatankacephalus", "Tatankaceratops", "Tataouinea", "Tawa", "Tazoudasaurus", "Technosaurus", "Tehuelchesaurus", "Telmatosaurus", "Tendaguria", "Tenontosaurus", "Teratophoneus", "Tethyshadros", "Texacephale", "Thecocoelurus", "Thecodontosaurus", "Theiophytalia", "Therizinosaurus", "Thescelosaurus", "Tianchisaurus", "Tianyulong", "Tianyuraptor", "Tianzhenosaurus", "Timimus", "Titanoceratops", "Titanosaurus", "Tochisaurus", "Tornieria", "Torosaurus", "Torvosaurus", "Triceratops", "Trinisaura", "Troodon", "Tsaagan", "Tsintaosaurus", "Tuojiangosaurus", "Turanoceratops", "Turiasaurus", "Tylocephale", "Tyrannosaurus Rex", "Tyrannotitan", "Uberabatitan", "Udanoceratops", "Unaysaurus", "Unenlagia", "Unescoceratops", "Urbacodon", "Utahceratops", "Utahraptor", "Uteodon", "Vagaceratops", "Vahiny", "Valdoraptor", "Valdosaurus", "Variraptor", "Velafrons", "Velociraptor", "Velocisaurus", "Venenosaurus", "Veterupristisaurus", "Vulcanodon", "Wannanosaurus", "Wellnhoferia", "Wendiceratops", "Willinakaqe", "Wintonotitan", "Wuerhosaurus", "Wulagasaurus", "Xenoceratops", "Xenoposeidon", "Xenotarsosaurus", "Xiaosaurus", "Xiaotingia", "Xinjiangtitan", "Xiongguanlong", "Xixianykus", "Xuanhanosaurus", "Xuanhuaceratops", "Xuwulong", "Yamaceratops", "Yandusaurus", "Yangchuanosaurus", "Yaverlandia", "Yi Qi", "Yimenosaurus", "Yinlong", "Yixianosaurus", "Yizhousaurus", "Yongjinglong", "Yueosaurus", "Yulong", "Yunnanosaurus", "Yutyrannus", "Zalmoxes", "Zanabazar", "Zapalasaurus", "Zby", "Zephyrosaurus", "Zhanghenglong", "Zhejiangosaurus", "Zhenyuanlong", "Zhongyuansaurus", "Zhuchengceratops", "Zhuchengosaurus", "Zhuchengtyrannus", "Zuniceratops", "Zuolong", "Zupaysaurus"])

  let f = randomPick(["stampAt", "coin2At"]), i = 0
  if (INVERT)
      f = randomPick(["insectsAt", "dinosaurAt"])

  if (f === "stampAt")
    defs["special_interestsAt"].u = "My best stamp is a rare 'inverted jenny' with a 747 instead of a biplane."
  if (f === "coin2At")
    defs["special_interestsAt"].u = "My rarest coin is a 1909 VDB S in fine condition"
  if (f === "dinosaurAt")
    defs["special_interestsAt"].i = "My favorite dinosaur is the "+name+". It roamed the earth 240 million years ago. "
  if (f === "insectsAt")
    defs["special_interestsAt"].i = "Insects have bodies divided into three sections: head\\c thorax\\c and abdomen\\c,insects have six legs and two antennae."

  window [f] (x, y, W, color)
 // document.getElementById("featuresize").value /= 2

  /*
  window [funcs[i++]] (x, y, W/2, color)
  window [funcs[i++]] (x+W/2, y, W/2, color)
  window [funcs[i++]] (x, y+W/2, W/2, color)
  window [funcs[i++]] (x+W/2, y+W/2, W/2, color)*/

 // document.getElementById("featuresize").value *= 2
}

function pinned_mothAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = [], d = 0
  let colors = shuffle(getCurrentPalette(true,13))
  let savedF = ctx.fillStyle
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  //1
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+6*H/24)
  cpx = x+5*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+16*H/24)
  cpx = x+2*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+18*H/24)
  cpx = x+12*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+8*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+18*H/24)
  cpx = x+10*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+17*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+17*H/24)
  cpx = x+14*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+18*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+8*H/24)
  cpx = x+12*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+18*H/24)
  cpx = x+22*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+16*H/24)
  cpx = x+19*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+6*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+13*H/24)
  cpx = x+11*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+17*H/24)
  cpx = x+13*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+13*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+5*H/24)
  cpx = x+6*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+9*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+5*H/24)
  cpx = x+18*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+9*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+6*H/24)
  cpx = x+12*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+6*H/24)
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+6*H/24)
  cpx = x+10*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+8*H/24)
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+6*H/24)
  cpx = x+14*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+8*H/24)
  ctx.stroke()

  //11
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+15*H/24)
  cpx = x+7*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+14*H/24)
  cpx = x+7*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+13*H/24)
  cpx = x+5*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+14*H/24)
  cpx = x+5*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+15*H/24)
  ctx.stroke()

  //12
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+15*H/24)
  cpx = x+19*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+14*H/24)
  cpx = x+19*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+13*H/24)
  cpx = x+17*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+14*H/24)
  cpx = x+17*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+15*H/24)
  ctx.stroke()
  let r = W/72
  //13
  ctx.beginPath()
  ctx.arc(x+11.5*W/24, y+5.3*H/24, r, 0, Math.PI * 2)
  ctx.stroke()

  ctx.strokeStyle = color
  //14
  ctx.beginPath()
  ctx.arc(x+12.5*W/24, y+5.3*H/24, r, 0, Math.PI * 2)
  ctx.stroke()

  //pin
  ctx.lineWidth *= 2
  ctx.beginPath()
  ctx.arc(x+20*W/24+pet(d), y+2*H/24+pet(d), W/32,0,2*Math.PI)
  ctx.fill()
  ctx.fillStyle = savedF
  ctx.beginPath()
  ctx.moveTo(x+19.5*W/24+pet(d), y+2.5*H/24+pet(d))
  ctx.lineTo(x+12.4*W/24+pet(d), y+9.4*H/24+pet(d))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+10.4*W/24+pet(d), y+11.6*H/24+pet(d))
  ctx.lineTo(x+8*W/24+pet(d), y+14*H/24+pet(d))
  ctx.stroke()
}

function toy_soldierAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+16*W/32+pet(d), y+32*H/32+pet(d))
  cpx = x+27*W/32
  cpy = y+32*H/32
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+27*W/32+pet(d), y+29*H/32+pet(d))
  cpx = x+27*W/32
  cpy = y+26*H/32
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+21*W/32+pet(d), y+26*H/32+pet(d))
  cpx = x+21*W/32
  cpy = y+14*H/32
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+21*W/32+pet(d), y+14*H/32+pet(d))
  cpx = x+26*W/32
  cpy = y+12*H/32
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+26*W/32+pet(d), y+11*H/32+pet(d))
  cpx = x+26*W/32
  cpy = y+10*H/32
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+26*W/32+pet(d), y+10*H/32+pet(d))
  cpx = x+24*W/32
  cpy = y+10*H/32
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+24*W/32+pet(d), y+10*H/32+pet(d))
  cpx = x+23*W/32
  cpy = y+12*H/32
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+21*W/32+pet(d), y+12*H/32+pet(d))
  cpx = x+21*W/32
  cpy = y+10*H/32
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+21*W/32+pet(d), y+10*H/32+pet(d))
  cpx = x+31*W/32
  cpy = y+10*H/32
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+31*W/32+pet(d), y+10*H/32+pet(d))
  cpx = x+31*W/32
  cpy = y+9*H/32
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+31*W/32+pet(d), y+9*H/32+pet(d))
  cpx = x+30*W/32
  cpy = y+9*H/32
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+30*W/32+pet(d), y+9*H/32+pet(d))
  cpx = x+30*W/32
  cpy = y+8*H/32
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+30*W/32+pet(d), y+8*H/32+pet(d))
  cpx = x+29*W/32
  cpy = y+8*H/32
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+29*W/32+pet(d), y+9*H/32+pet(d))
  cpx = x+24*W/32
  cpy = y+9*H/32
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+24*W/32+pet(d), y+9*H/32+pet(d))
  cpx = x+24*W/32
  cpy = y+8*H/32
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+24*W/32+pet(d), y+8*H/32+pet(d))
  cpx = x+19*W/32
  cpy = y+8*H/32
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+19*W/32+pet(d), y+8*H/32+pet(d))
  cpx = x+20*W/32
  cpy = y+6*H/32
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+19*W/32+pet(d), y+5*H/32+pet(d))
  cpx = x+20*W/32
  cpy = y+5*H/32
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20*W/32+pet(d), y+5*H/32+pet(d))
  cpx = x+20*W/32
  cpy = y+1*H/32
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*W/32+pet(d), y+1*H/32+pet(d))
  cpx = x+12*W/32
  cpy = y+1*H/32
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/32+pet(d), y+5*H/32+pet(d))
  cpx = x+13*W/32
  cpy = y+5*H/32
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+13*W/32+pet(d), y+5*H/32+pet(d))
  cpx = x+13*W/32
  cpy = y+8*H/32
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+13*W/32+pet(d), y+8*H/32+pet(d))

  cpx = x+6*W/32
  cpy = y+8*H/32
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+6*W/32+pet(d), y+11*H/32+pet(d))
  cpx = x+6*W/32
  cpy = y+14*H/32
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/32+pet(d), y+14*H/32+pet(d))
  cpx = x+12*W/32
  cpy = y+12*H/32
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/32+pet(d), y+12*H/32+pet(d))
  cpx = x+9*W/32
  cpy = y+11*H/32
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+9*W/32+pet(d), y+11*H/32+pet(d))
  cpx = x+12*W/32
  cpy = y+11*H/32
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/32+pet(d), y+11*H/32+pet(d))
  cpx = x+12*W/32
  cpy = y+26*H/32
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/32+pet(d), y+26*H/32+pet(d))
  cpx = x+15*W/32
  cpy = y+26*H/32
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+15*W/32+pet(d), y+26*H/32+pet(d))
  cpx = x+16*W/32
  cpy = y+18*H/32
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*W/32+pet(d), y+18*H/32+pet(d))
  cpx = x+17*W/32
  cpy = y+18*H/32
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+17*W/32+pet(d), y+18*H/32+pet(d))
  cpx = x+18*W/32
  cpy = y+26*H/32
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*W/32+pet(d), y+26*H/32+pet(d))
  cpx = x+12*W/32
  cpy = y+26*H/32
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/32+pet(d), y+26*H/32+pet(d))
  cpx = x+5*W/32
  cpy = y+26*H/32
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+5*W/32+pet(d), y+29*H/32+pet(d))
  cpx = x+5*W/32
  cpy = y+32*H/32
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*W/32+pet(d), y+32*H/32+pet(d))
  ctx.fill()
}

function doom_on_a_tarot_cardAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  //1
  ctx.beginPath()
  ctx.moveTo(x+0*W/24+pet(d), y+22*H/24+pet(d))
  ctx.lineTo(x+10*W/24+pet(d), y+12*H/24+pet(d))
  ctx.lineTo(x+10*W/24+pet(d), y+4*H/24+pet(d))
  ctx.lineTo(x+0*W/24+pet(d), y+2*H/24+pet(d))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+24*W/24+pet(d), y+22*H/24+pet(d))
  ctx.lineTo(x+16*W/24+pet(d), y+12*H/24+pet(d))
  ctx.lineTo(x+16*W/24+pet(d), y+4*H/24+pet(d))
  ctx.lineTo(x+24*W/24+pet(d), y+2*H/24+pet(d))
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+10*W/24+pet(d), y+4*H/24+pet(d))
  ctx.lineTo(x+16*W/24+pet(d), y+4*H/24+pet(d))
  ctx.lineTo(x+16*W/24+pet(d), y+12*H/24+pet(d))
  ctx.lineTo(x+10*W/24+pet(d), y+12*H/24+pet(d))
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+11*W/24+pet(d), y+9*H/24+pet(d))
  ctx.lineTo(x+15*W/24+pet(d), y+9*H/24+pet(d))
  ctx.lineTo(x+15*W/24+pet(d), y+10*H/24+pet(d))
  ctx.lineTo(x+11*W/24+pet(d), y+10*H/24+pet(d))
  ctx.lineTo(x+11*W/24+pet(d), y+9*H/24+pet(d))
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+10*W/24+pet(d), y+10*H/24+pet(d))
  ctx.lineTo(x+11*W/24+pet(d), y+10*H/24+pet(d))
  ctx.lineTo(x+16*W/24+pet(d), y+10*H/24+pet(d))
  ctx.lineTo(x+16*W/24+pet(d), y+11*H/24+pet(d))
  ctx.lineTo(x+10*W/24+pet(d), y+11*H/24+pet(d))
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+12*W/24+pet(d), y+9*H/24+pet(d))
  ctx.lineTo(x+12*W/24+pet(d), y+8*H/24+pet(d))
  ctx.lineTo(x+14*W/24+pet(d), y+8*H/24+pet(d))
  ctx.lineTo(x+14*W/24+pet(d), y+9*H/24+pet(d))
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+7*W/24+pet(d), y+15*H/24+pet(d))
  ctx.lineTo(x+7*W/24+pet(d), y+8*H/24+pet(d))
  ctx.lineTo(x+4*W/24+pet(d), y+8*H/24+pet(d))
  ctx.lineTo(x+4*W/24+pet(d), y+18*H/24+pet(d))
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+20*W/24+pet(d), y+17*H/24+pet(d))
  ctx.lineTo(x+20*W/24+pet(d), y+7*H/24+pet(d))
  ctx.lineTo(x+24*W/24+pet(d), y+6*H/24+pet(d))
  ctx.stroke()

  // fill growing rect fom center with low alpha
  ctx.save()
  ctx.beginPath()
  ctx.moveTo(x, y)
  ctx.lineTo(x+W, y)
  ctx.lineTo(x+W, y+H)
  ctx.lineTo(x, y+H)
  ctx.closePath()
  ctx.clip()
  ctx.globalAlpha = 0.15
  ctx.fillStyle = "#440000"
  let i = 0, off = 2*W/32, x0 = x+14*W/32, y0 = y+8*W/32
  let w = 6*W/32, h = 7*H/32
  for (; i < 10; i++) {
    ctx.fillRect(x0-(i*off), y0-(i*off), w+2*(i*off), h+2*(i*off))
  }
  ctx.globalAlpha = 1
  ctx.setLineDash([W/24])
  ctx.lineWidth *= 2
  ctx.strokeStyle = "#440000"
  ctx.fillStyle = "#440000"
  //1
  ctx.beginPath()
  ctx.moveTo(x+0*W/32+pet(d), y+5*H/32+pet(d))
  ctx.lineTo(x+13*W/32+pet(d), y+7*H/32+pet(d))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+0*W/32+pet(d), y+8*H/32+pet(d))
  ctx.lineTo(x+13*W/32+pet(d), y+9*H/32+pet(d))
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+0*W/32+pet(d), y+26*H/32+pet(d))
  ctx.lineTo(x+13*W/32+pet(d), y+15*H/32+pet(d))
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+0*W/32+pet(d), y+21*H/32+pet(d))
  ctx.lineTo(x+13*W/32+pet(d), y+13*H/32+pet(d))
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+0*W/32+pet(d), y+14*H/32+pet(d))
  ctx.lineTo(x+13*W/32+pet(d), y+11*H/32+pet(d))
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+22*W/32+pet(d), y+7*H/32+pet(d))
  ctx.lineTo(x+32*W/32+pet(d), y+6*H/32+pet(d))
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+32*W/32+pet(d), y+25*H/32+pet(d))
  ctx.lineTo(x+22*W/32+pet(d), y+15*H/32+pet(d))
  ctx.lineTo(x+22*W/32+pet(d), y+13*H/32+pet(d))
  ctx.lineTo(x+31*W/32+pet(d), y+17*H/32+pet(d))
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+22*W/32+pet(d), y+10*H/32+pet(d))
  ctx.lineTo(x+32*W/32+pet(d), y+11*H/32+pet(d))
  ctx.stroke()
  ctx.lineWidth /= 2
  ctx.setLineDash([])
  ctx.beginPath()
  ctx.moveTo(x+24*W/24+pet(d), y+22*H/24+pet(d))
  ctx.lineTo(x+20*W/24+pet(d), y+17*H/24+pet(d))
  ctx.lineTo(x+20*W/24+pet(d), y+7*H/24+pet(d))
  ctx.lineTo(x+24*W/24+pet(d), y+6*H/24+pet(d))
  ctx.fill()

  //10
  ctx.beginPath()
  ctx.moveTo(x+4*W/24+pet(d), y+18*H/24+pet(d))
  ctx.lineTo(x+7*W/24+pet(d), y+15*H/24+pet(d))
  ctx.lineTo(x+7*W/24+pet(d), y+8*H/24+pet(d))
  ctx.lineTo(x+4*W/24+pet(d), y+8*H/24+pet(d))
  ctx.lineTo(x+4*W/24+pet(d), y+18*H/24+pet(d))
  ctx.fill()

  //11
  ctx.beginPath()
  ctx.moveTo(x+10*W/24+pet(d), y+10*H/24+pet(d))
  ctx.lineTo(x+11*W/24+pet(d), y+10*H/24+pet(d))
  ctx.lineTo(x+11*W/24+pet(d), y+9*H/24+pet(d))
  ctx.lineTo(x+12*W/24+pet(d), y+9*H/24+pet(d))
  ctx.lineTo(x+12*W/24+pet(d), y+8*H/24+pet(d))
  ctx.lineTo(x+14*W/24+pet(d), y+8*H/24+pet(d))
  ctx.lineTo(x+14*W/24+pet(d), y+9*H/24+pet(d))
  ctx.lineTo(x+15*W/24+pet(d), y+9*H/24+pet(d))
  ctx.lineTo(x+15*W/24+pet(d), y+10*H/24+pet(d))
  ctx.lineTo(x+16*W/24+pet(d), y+10*H/24+pet(d))
  ctx.lineTo(x+16*W/24+pet(d), y+4*H/24+pet(d))
  ctx.lineTo(x+10*W/24+pet(d), y+4*H/24+pet(d))
  ctx.lineTo(x+10*W/24+pet(d), y+10*H/24+pet(d))
  ctx.fill()

  ctx.beginPath() // gun
  ctx.moveTo(x+13*W/32+pet(d), y+28*H/32+pet(d))
  ctx.lineTo(x+19*W/32+pet(d), y+28*H/32+pet(d))
  ctx.lineTo(x+17*W/32+pet(d), y+24*H/32+pet(d))
  ctx.lineTo(x+15*W/32+pet(d), y+24*H/32+pet(d))
  ctx.lineTo(x+13*W/32+pet(d), y+28*H/32+pet(d))
  ctx.fillStyle = "#555555"
  ctx.fill()

  ctx.strokeStyle = "#bbbbbb"
  ctx.beginPath()
  ctx.moveTo(x+14*W/32+pet(d), y+28*H/32+pet(d))
  ctx.lineTo(x+15*W/32+pet(d), y+25*H/32+pet(d))
  ctx.stroke()
   //3
  ctx.beginPath()
  ctx.moveTo(x+15*W/32+pet(d), y+28*H/32+pet(d))
  ctx.lineTo(x+16*W/32+pet(d), y+25*H/32+pet(d))
  ctx.lineTo(x+17*W/32+pet(d), y+28*H/32+pet(d))
  ctx.stroke()
  flame2At(x+13.2*W/32+pet(d), y+20*H/32+pet(d), 5.8*W/32, color)
  monstreAt (x+14.2*W/32+pet(d), y+6*H/32+pet(d), 5.8*W/32, color)
  let v = document.getElementById("featuresize").value
  document.getElementById("featuresize").value = W/6
  pixelate(x,y,x+W,y+W)
  document.getElementById("featuresize").value = v
  ctx.restore()
  hudAt(x,y,W,color)
  ctx.fillStyle = savedF
  ctx.strokeStyle = savedS
}

function monstreAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+8*W/24+pet(d), y+20*H/24+pet(d))
  ctx.lineTo(x+8*W/24+pet(d), y+22*H/24+pet(d))
  ctx.lineTo(x+6*W/24+pet(d), y+22*H/24+pet(d))
  ctx.lineTo(x+6*W/24+pet(d), y+24*H/24+pet(d))
  ctx.lineTo(x+10*W/24+pet(d), y+24*H/24+pet(d))
  ctx.lineTo(x+11*W/24+pet(d), y+24*H/24+pet(d))
  ctx.lineTo(x+11*W/24+pet(d), y+17*H/24+pet(d))
  ctx.lineTo(x+13*W/24+pet(d), y+17*H/24+pet(d))
  ctx.lineTo(x+13*W/24+pet(d), y+24*H/24+pet(d))
  ctx.lineTo(x+18*W/24+pet(d), y+24*H/24+pet(d))
  ctx.lineTo(x+18*W/24+pet(d), y+22*H/24+pet(d))
  ctx.lineTo(x+16*W/24+pet(d), y+22*H/24+pet(d))
  ctx.lineTo(x+16*W/24+pet(d), y+14*H/24+pet(d))
  ctx.lineTo(x+16*W/24+pet(d), y+10*H/24+pet(d))
  ctx.lineTo(x+17*W/24+pet(d), y+11*H/24+pet(d))
  ctx.lineTo(x+17*W/24+pet(d), y+16*H/24+pet(d))
  ctx.lineTo(x+18*W/24+pet(d), y+17*H/24+pet(d))
  ctx.lineTo(x+19*W/24+pet(d), y+16*H/24+pet(d))
  ctx.lineTo(x+19*W/24+pet(d), y+9*H/24+pet(d))
  ctx.lineTo(x+15*W/24+pet(d), y+7*H/24+pet(d))
  ctx.lineTo(x+15*W/24+pet(d), y+3*H/24+pet(d))
  ctx.lineTo(x+14*W/24+pet(d), y+2*H/24+pet(d))
  ctx.lineTo(x+10*W/24+pet(d), y+2*H/24+pet(d))
  ctx.lineTo(x+9*W/24+pet(d), y+3*H/24+pet(d))
  ctx.lineTo(x+9*W/24+pet(d), y+7*H/24+pet(d))
  ctx.lineTo(x+5*W/24+pet(d), y+9*H/24+pet(d))
  ctx.lineTo(x+5*W/24+pet(d), y+16*H/24+pet(d))
  ctx.lineTo(x+6*W/24+pet(d), y+17*H/24+pet(d))
  ctx.lineTo(x+7*W/24+pet(d), y+16*H/24+pet(d))
  ctx.lineTo(x+7*W/24+pet(d), y+11*H/24+pet(d))
  ctx.lineTo(x+8*W/24+pet(d), y+10*H/24+pet(d))
  ctx.lineTo(x+8*W/24+pet(d), y+20*H/24+pet(d))
  ctx.fill()
ctx.fillStyle = "#ddff44"
  //2
  ctx.beginPath()
  ctx.moveTo(x+10*W/24+pet(d), y+4*H/24+pet(d))
  ctx.lineTo(x+14*W/24+pet(d), y+4*H/24+pet(d))
  ctx.lineTo(x+14*W/24+pet(d), y+6*H/24+pet(d))
  ctx.lineTo(x+10*W/24+pet(d), y+6*H/24+pet(d))
  ctx.lineTo(x+10*W/24+pet(d), y+4*H/24+pet(d))
  ctx.fill()
  ctx.fillStyle = savedF

}

function hudAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  y += 10*W/32
  //1
  ctx.beginPath()
  ctx.moveTo(x+0*W/32+pet(d), y+22*H/32+pet(d))
  ctx.lineTo(x+32*W/32+pet(d), y+22*H/32+pet(d))
  ctx.lineTo(x+32*W/32+pet(d), y+18*H/32+pet(d))
  ctx.lineTo(x+0*W/32+pet(d), y+18*H/32+pet(d))
  ctx.lineTo(x+0*W/32+pet(d), y+22*H/32+pet(d))
  
  ctx.fillStyle = "#999999"
  ctx.fill()
  ctx.stroke()
  //4
  ctx.beginPath()
  ctx.moveTo(x+14*W/32+pet(d), y+18*H/32+pet(d))
  ctx.lineTo(x+14*W/32+pet(d), y+22*H/32+pet(d))
  ctx.stroke()
  //5
  ctx.beginPath()
  ctx.moveTo(x+18*W/32+pet(d), y+18*H/32+pet(d))
  ctx.lineTo(x+18*W/32+pet(d), y+22*H/32+pet(d))
  ctx.stroke()
  //6
  ctx.beginPath()
  ctx.moveTo(x+23*W/32+pet(d), y+18*H/32+pet(d))
  ctx.lineTo(x+23*W/32+pet(d), y+22*H/32+pet(d))
  ctx.stroke()
  //7
  ctx.beginPath()
  ctx.moveTo(x+27*W/32+pet(d), y+18*H/32+pet(d))
  ctx.lineTo(x+27*W/32+pet(d), y+22*H/32+pet(d))
  ctx.stroke()
  //9
  skullAt(x+14.3*W/32+pet(d)+1, y+18.4*H/32+pet(d)+1, 3.4*W/32, "#000000")
  skullAt(x+14.3*W/32+pet(d), y+18.4*H/32+pet(d), 3.4*W/32, "#ffffff")
  
  ctx.font = "800 "+(W*0.05)+"pt sans serif"
  ctx.fillStyle = "#000000"
  ctx.fillText("34",x+1.1*W/32+pet(d), y+20.6*H/33+pet(d))
  ctx.fillText("55%",x+5.6*W/32+pet(d), y+20.6*H/33+pet(d))
  ctx.fillText("72%",x+18.6*W/32+pet(d), y+20.6*H/33+pet(d))
  ctx.fillStyle = "#ff0000"
  ctx.fillText("34",x+1*W/32+pet(d), y+20.5*H/33+pet(d))
  ctx.fillText("55%",x+5.5*W/32+pet(d), y+20.5*H/33+pet(d))
  ctx.fillText("72%",x+18.5*W/32+pet(d), y+20.5*H/33+pet(d))

  ctx.fillStyle = "#ffffff"
  ctx.font = "800 "+(W*0.03)+"pt sans serif"
  ctx.fillText("ammo",x+0.25*W/32+pet(d), y+22*H/33+pet(d))
  ctx.fillText("health",x+5*W/32+pet(d), y+22*H/33+pet(d))
  ctx.fillText("arms",x+10.5*W/32+pet(d), y+22*H/33+pet(d))
  ctx.fillText("armor",x+18.5*W/32+pet(d), y+22*H/33+pet(d))

  ctx.fillText("BULL",x+27.5*W/32+pet(d), y+19.2*H/32+pet(d))
  ctx.fillText("KILL",x+27.5*W/32+pet(d), y+20.4*H/32+pet(d))
  ctx.fillText("SHELL",x+27.5*W/32+pet(d), y+21.6*H/32+pet(d))

  ctx.fillRect(x+23.5*W/32+pet(d), y+18.2*H/32+pet(d), W/32, W/32)
  ctx.fillRect(x+23.5*W/32+pet(d), y+19.4*H/32+pet(d), W/32, W/32)
  ctx.fillRect(x+23.5*W/32+pet(d), y+20.6*H/32+pet(d), W/32, W/32)

  ctx.fillRect(x+10.3*W/32+pet(d), y+18.2*H/32+pet(d), W/32, W/32)
  ctx.fillRect(x+10.3*W/32+pet(d), y+19.4*H/32+pet(d), W/32, W/32)
  ctx.fillRect(x+11.5*W/32+pet(d), y+18.2*H/32+pet(d), W/32, W/32)
  ctx.fillRect(x+11.5*W/32+pet(d), y+19.4*H/32+pet(d), W/32, W/32)
  ctx.fillRect(x+12.7*W/32+pet(d), y+18.2*H/32+pet(d), W/32, W/32)
  ctx.fillRect(x+12.7*W/32+pet(d), y+19.4*H/32+pet(d), W/32, W/32)

  ctx.strokeStyle = "#a0a0a0"
  y -= 10*H/32

  ctx.beginPath()
  ctx.moveTo(x+14*W/32+pet(d), y+28*H/32+pet(d))
  ctx.lineTo(x+15*W/32+pet(d), y+25*H/32+pet(d))
 // ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+18*W/32+pet(d), y+28*H/32+pet(d))
  ctx.lineTo(x+17*W/32+pet(d), y+25*H/32+pet(d))
  //ctx.stroke()
   //3
  ctx.beginPath()
  ctx.moveTo(x+15*W/32+pet(d), y+28*H/32+pet(d))
  ctx.lineTo(x+16*W/32+pet(d), y+25*H/32+pet(d))
  ctx.lineTo(x+17*W/32+pet(d), y+28*H/32+pet(d))
 // ctx.stroke()
  //1
  ctx.strokeStyle = "#ffffff"
  x -= 2, y -= 2
  ctx.beginPath()
  ctx.moveTo(x+1*W/32+pet(d), y+32*H/32+pet(d))
  ctx.lineTo(x+4*W/32+pet(d), y+32*H/32+pet(d))
  ctx.lineTo(x+4*W/32+pet(d), y+29*H/32+pet(d))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+5*W/32+pet(d), y+32*H/32+pet(d))
  ctx.lineTo(x+10*W/32+pet(d), y+32*H/32+pet(d))
  ctx.lineTo(x+10*W/32+pet(d), y+29*H/32+pet(d))
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+11*W/32+pet(d), y+32*H/32+pet(d))
  ctx.lineTo(x+14*W/32+pet(d), y+32*H/32+pet(d))
  ctx.lineTo(x+14*W/32+pet(d), y+29*H/32+pet(d))
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+15*W/32+pet(d), y+32*H/32+pet(d))
  ctx.lineTo(x+18*W/32+pet(d), y+32*H/32+pet(d))
  ctx.lineTo(x+18*W/32+pet(d), y+29*H/32+pet(d))
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+19*W/32+pet(d), y+32*H/32+pet(d))
  ctx.lineTo(x+23*W/32+pet(d), y+32*H/32+pet(d))
  ctx.lineTo(x+23*W/32+pet(d), y+29*H/32+pet(d))
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+24*W/32+pet(d), y+32*H/32+pet(d))
  ctx.lineTo(x+27*W/32+pet(d), y+32*H/32+pet(d))
  ctx.lineTo(x+27*W/32+pet(d), y+29*H/32+pet(d))
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+28*W/32+pet(d), y+32*H/32+pet(d))
  ctx.lineTo(x+32*W/32+pet(d), y+32*H/32+pet(d))
  ctx.lineTo(x+32*W/32+pet(d), y+29*H/32+pet(d))
  ctx.stroke()
}

function hidden_variablesAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = W/120
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  ctx.globalAlpha = 0.83

  let f = randomPick(atList)
  window [f] (x+W/24,y+W/24,W*0.9,color)

  document.getElementById("opacity").value = 80
  tissueAt(x-W/24, y, W+2*W/24, H)
  document.getElementById("opacity").value = 100
  let wrd = randomWord()
  ctx.font = "italic "+(W*0.05)+"pt serif"
  ctx.fillText("Plate "+randomPick([2,13,7,19,8,4,14])+" - "+capitalize(wrd), x+W/4, y+25*H/24)
  ctx.fillStyle = savedF

  ctx.save()
  ctx.beginPath()
  ctx.moveTo(x-W/24,  y)
  ctx.lineTo(x-W/24+W+2*W/24,y)
  ctx.lineTo(x-W/24+W+2*W/24,y+H)
  ctx.lineTo(x-W/24,  y+H)
  ctx.closePath()
  ctx.clip()
  paperize()
  paperize()
  ctx.restore()
}


function venusAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, d = 0, angle = 0

  //1
  ctx.beginPath()
  p = rotatePoint(x+7*W/24+pet(d), y+24*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+7*W/24+pet(d)
  cpy = y+20*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+9*W/24+pet(d), y+20*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+8*W/24+pet(d)
  cpy = y+18*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+8*W/24+pet(d), y+18*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+6*W/24+pet(d)
  cpy = y+18*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+6*W/24+pet(d), y+17*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+6*W/24+pet(d)
  cpy = y+14*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+5*W/24+pet(d), y+13*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+5*W/24+pet(d)
  cpy = y+11*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+8*W/24+pet(d), y+10*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+9*W/24+pet(d)
  cpy = y+10*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+8*W/24+pet(d), y+7*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+7*W/24+pet(d)
  cpy = y+3*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+8*W/24+pet(d), y+1*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+10*W/24+pet(d)
  cpy = y+0*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24+pet(d), y+2*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+13*W/24+pet(d)
  cpy = y+4*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+13*W/24+pet(d), y+6*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+13*W/24+pet(d)
  cpy = y+8*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+13*W/24+pet(d), y+8*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+15*W/24+pet(d)
  cpy = y+7*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+16*W/24+pet(d), y+9*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+17*W/24+pet(d)
  cpy = y+7*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+18*W/24+pet(d), y+9*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+19*W/24+pet(d)
  cpy = y+10*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+18*W/24+pet(d), y+12*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+19*W/24+pet(d)
  cpy = y+14*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+18*W/24+pet(d), y+15*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+17*W/24+pet(d)
  cpy = y+20*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+17*W/24+pet(d), y+20*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+19*W/24+pet(d)
  cpy = y+20*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+19*W/24+pet(d), y+24*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()
}

function progress2At (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "round"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, d = 0, angle = 0

  let i = 0, inc = 360/13
  for (; i < 13; i++) {
    //1
    ctx.beginPath()
    p = rotatePoint(x+11.5*W/24+pet(d), y+0*H/24+pet(d) ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    p = rotatePoint(x+12.5*W/24+pet(d), y+0*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+12.5*W/24+pet(d), y+8*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+11.5*W/24+pet(d), y+8*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+11.5*W/24+pet(d), y+0*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    ctx.fill()
    ctx.globalAlpha *= 0.85
    angle += inc
  }
  ctx.globalAlpha = 1
}

function insectsAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+12*W/24+pet(d), y+24*H/24+pet(d))
  cpx = x+17*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+17*W/24+pet(d), y+18*H/24+pet(d))
  cpx = x+16*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+8*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+7*W/24+pet(d), y+18*H/24+pet(d))
  cpx = x+7*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+24*H/24+pet(d))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+12*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+14*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+14*W/24+pet(d), y+10*H/24+pet(d))
  cpx = x+14*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+7*H/24+pet(d))
  cpx = x+10*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+10*W/24+pet(d), y+10*H/24+pet(d))
  cpx = x+10*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+12*H/24+pet(d))
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+12*W/24+pet(d), y+7*H/24+pet(d))
  cpx = x+14*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+14*W/24+pet(d), y+6*H/24+pet(d))
  cpx = x+14*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+5*H/24+pet(d))
  cpx = x+10*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+10*W/24+pet(d), y+6*H/24+pet(d))
  cpx = x+10*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+7*H/24+pet(d))
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+11*W/24+pet(d), y+5*H/24+pet(d))
  cpx = x+11*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+7*W/24+pet(d), y+0*H/24+pet(d))
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+13*W/24+pet(d), y+5*H/24+pet(d))
  cpx = x+13*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+17*W/24+pet(d), y+0*H/24+pet(d))
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+10*W/24+pet(d), y+10*H/24+pet(d))
  ctx.lineTo(x+6*W/24+pet(d), y+10*H/24+pet(d))
  ctx.lineTo(x+4*W/24+pet(d), y+8*H/24+pet(d))
  ctx.lineTo(x+4*W/24+pet(d), y+7*H/24+pet(d))
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+14*W/24+pet(d), y+10*H/24+pet(d))
  ctx.lineTo(x+18*W/24+pet(d), y+10*H/24+pet(d))
  ctx.lineTo(x+20*W/24+pet(d), y+8*H/24+pet(d))
  ctx.lineTo(x+20*W/24+pet(d), y+7*H/24+pet(d))
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+10*W/24+pet(d), y+9*H/24+pet(d))
  ctx.lineTo(x+7*W/24+pet(d), y+7*H/24+pet(d))
  ctx.lineTo(x+7*W/24+pet(d), y+4*H/24+pet(d))
  ctx.lineTo(x+6*W/24+pet(d), y+3*H/24+pet(d))
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+14*W/24+pet(d), y+9*H/24+pet(d))
  ctx.lineTo(x+17*W/24+pet(d), y+7*H/24+pet(d))
  ctx.lineTo(x+17*W/24+pet(d), y+4*H/24+pet(d))
  ctx.lineTo(x+18*W/24+pet(d), y+3*H/24+pet(d))
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+10*W/24+pet(d), y+11*H/24+pet(d))
  ctx.lineTo(x+6*W/24+pet(d), y+12*H/24+pet(d))
  ctx.lineTo(x+4*W/24+pet(d), y+15*H/24+pet(d))
  ctx.lineTo(x+3*W/24+pet(d), y+15*H/24+pet(d))
  ctx.stroke()

  //11
  ctx.beginPath()
  ctx.moveTo(x+14*W/24+pet(d), y+11*H/24+pet(d))
  ctx.lineTo(x+18*W/24+pet(d), y+12*H/24+pet(d))
  ctx.lineTo(x+20*W/24+pet(d), y+15*H/24+pet(d))
  ctx.lineTo(x+21*W/24+pet(d), y+15*H/24+pet(d))
  ctx.stroke()

   //1
  ctx.beginPath()
  ctx.moveTo(x+11.8*W/24+pet(d), y+7*H/24+pet(d))
  cpx = x+10*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+4*W/24+pet(d), y+22*H/24+pet(d))
  cpx = x+0*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+3*W/24+pet(d), y+17*H/24+pet(d))
  cpx = x+11.8*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+11.8*W/24+pet(d), y+7*H/24+pet(d))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+12.2*W/24+pet(d), y+7*H/24+pet(d))
  cpx = x+14*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20*W/24+pet(d), y+22*H/24+pet(d))
  cpx = x+24*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+21*W/24+pet(d), y+17*H/24+pet(d))
  cpx = x+12.2*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12.2*W/24+pet(d), y+7*H/24+pet(d))
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+11*W/24+pet(d), y+5*H/24+pet(d))
  cpx = x+12*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+11*W/24+pet(d), y+7*H/24+pet(d))
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+13*W/24+pet(d), y+5*H/24+pet(d))
  cpx = x+12*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+13*W/24+pet(d), y+7*H/24+pet(d))
  ctx.stroke()

  //pin
  ctx.lineWidth *= 2
  ctx.beginPath()
  ctx.arc(x+20*W/24+pet(d), y+2*H/24+pet(d), W/32,0,2*Math.PI)
  ctx.fillStyle = color
  ctx.fill()
  ctx.fillStyle = savedF
  ctx.beginPath()
  ctx.moveTo(x+19.5*W/24+pet(d), y+2.5*H/24+pet(d))
  ctx.lineTo(x+12.4*W/24+pet(d), y+9.4*H/24+pet(d))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+10.4*W/24+pet(d), y+11.6*H/24+pet(d))
  ctx.lineTo(x+8*W/24+pet(d), y+14*H/24+pet(d))
  ctx.stroke()
}

function inverted_jennyAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  
  //1
  ctx.beginPath()
  ctx.moveTo(x+2*W/24+pet(d), y+12*H/24+pet(d))
  ctx.lineTo(x+0*W/24+pet(d), y+16*H/24+pet(d))
  ctx.lineTo(x+2*W/24+pet(d), y+16*H/24+pet(d))
  ctx.lineTo(x+4*W/24+pet(d), y+14*H/24+pet(d))
  ctx.lineTo(x+22*W/24+pet(d), y+14*H/24+pet(d))
  ctx.lineTo(x+24*W/24+pet(d), y+12*H/24+pet(d))
  ctx.lineTo(x+15*W/24+pet(d), y+12*H/24+pet(d))
  ctx.lineTo(x+8*W/24+pet(d), y+4*H/24+pet(d))
  ctx.lineTo(x+6*W/24+pet(d), y+4*H/24+pet(d))
  ctx.lineTo(x+12*W/24+pet(d), y+12*H/24+pet(d))
  ctx.lineTo(x+2*W/24+pet(d), y+12*H/24+pet(d))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+15*W/24+pet(d), y+14*H/24+pet(d))
  ctx.lineTo(x+8*W/24+pet(d), y+20*H/24+pet(d))
  ctx.lineTo(x+6*W/24+pet(d), y+20*H/24+pet(d))
  ctx.lineTo(x+12*W/24+pet(d), y+14*H/24+pet(d))
  ctx.stroke()
  // windows
  let i = 0
  for (; i < 10; i++) {
    ctx.beginPath()
    ctx.arc(x+6*W/24+pet(d), y+13*H/24+pet(d), W/110, 0, 2*Math.PI)
    ctx.stroke()
    x += 2*W/32
  }
}

function coin2At (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.beginPath()
  ctx.arc(x+12*W/24, y+12*H/24, 11*W/24,0,Math.PI*2)
  ctx.stroke()
 // ctx.lineWidth /= 2
  ctx.beginPath()
  ctx.arc(x+12*W/24, y+12*H/24, 10*W/24,0,Math.PI*2)
  ctx.stroke()
 // ctx.lineWidth *= 2

  ctx.save()
  ctx.beginPath()
  ctx.arc(x+12*W/24, y+12*H/24, 10*W/24,0,Math.PI*2)
  ctx.closePath()
  ctx.clip()
  let f = randomPick(["monticelloAt", "buffaloAt"])
  window [f] (x+4*W/24,y+4.2*W/24, 16*W/24, color)
  ctx.restore()
  ctx.fillStyle = color
  ctx.font = "100 "+(W*0.05)+"pt serif"
  let text = "coin"
  //CanvasRenderingContext2D.fillCircleText(text, x, y, radius, start, [end, [forward]]);
  ctx.fillCircleText("FIVE CENTS", x+W/2, y+H/2, W*0.4, Math.PI*0.7, Math.PI*0.3,1)
  if (f === "buffaloAt") {
    ctx.font = "100 "+(W*0.03)+"pt serif"
    ctx.fillCircleText("UNITED-STATES-OF-AMERICA", x+W/2, y+H/2, W*0.37, Math.PI*1.1, Math.PI*1.9,0)
  }
  else  
    ctx.fillCircleText(" E PLURIBUS UNUM ", x+W/2, y+H/2, W*0.35, Math.PI*1.1, Math.PI*1.9,0)
  ctx.font = "100 "+(W*0.048)+"pt serif"
 // ctx.fillText("1956",x+10*W/24+pet(d), y+19.5*H/24+pet(d))
}

(function(){
    const FILL = 0;        // const to indicate filltext render
    const STROKE = 1;
    var renderType = FILL; // used internal to set fill or stroke text
    const multiplyCurrentTransform = true; // if true Use current transform when rendering
                                           // if false use absolute coordinates which is a little quicker
                                           // after render the currentTransform is restored to default transform
                                           
      

    // measure circle text
    // ctx: canvas context
    // text: string of text to measure
    // r: radius in pixels
    //
    // returns the size metrics of the text
    //
    // width: Pixel width of text
    // angularWidth : angular width of text in radians
    // pixelAngularSize : angular width of a pixel in radians
    var measure = function(ctx, text, radius){        
        var textWidth = ctx.measureText(text).width; // get the width of all the text
        return {
            width               : textWidth,
            angularWidth        : (1 / radius) * textWidth,
            pixelAngularSize    : 1 / radius
        };
    }

    // displays text along a circle
    // ctx: canvas context
    // text: string of text to measure
    // x,y: position of circle center
    // r: radius of circle in pixels
    // start: angle in radians to start. 
    // [end]: optional. If included text align is ignored and the text is 
    //        scaled to fit between start and end;
    // [forward]: optional default true. if true text direction is forwards, if false  direction is backward
    var circleText = function (ctx, text, x, y, radius, start, end, forward) {
        var i, textWidth, pA, pAS, a, aw, wScale, aligned, dir, fontSize;
        if(text.trim() === "" || ctx.globalAlpha === 0){ // dont render empty string or transparent
            return;
        }
        if(isNaN(x) || isNaN(y) || isNaN(radius) || isNaN(start) || (end !== undefined && end !== null && isNaN(end))){ // 
            throw TypeError("circle text arguments requires a number for x,y, radius, start, and end.")
        }
        aligned = ctx.textAlign;        // save the current textAlign so that it can be restored at end
        dir = forward ? 1 : forward === false ? -1 : 1;  // set dir if not true or false set forward as true  
        pAS = 1 / radius;               // get the angular size of a pixel in radians
        textWidth = ctx.measureText(text).width; // get the width of all the text
        if (end !== undefined && end !== null) { // if end is supplied then fit text between start and end
            pA = ((end - start) / textWidth) * dir;
            wScale = (pA / pAS) * dir;
        } else {                 // if no end is supplied correct start and end for alignment
            // if forward is not given then swap top of circle text to read the correct direction
            if(forward === null || forward === undefined){
                if(((start % (Math.PI * 2)) + Math.PI * 2) % (Math.PI * 2) > Math.PI){
                    dir = -1;
                }
            }
            pA = -pAS * dir ;
            wScale = -1 * dir;
            switch (aligned) {
            case "center":       // if centered move around half width
                start -= (pA * textWidth )/2;
                end = start + pA * textWidth;
                break;
            case "right":// intentionally falls through to case "end"
            case "end":
                end = start;
                start -= pA * textWidth;
                break;
            case "left":  // intentionally falls through to case "start"
            case "start":
                end = start + pA * textWidth;
            }
        }

        ctx.textAlign = "center";                     // align for rendering
        a = start;                                    // set the start angle
        for (var i = 0; i < text.length; i += 1) {    // for each character
            aw = ctx.measureText(text[i]).width * pA; // get the angular width of the text
            var xDx = Math.cos(a + aw / 2);           // get the yAxies vector from the center x,y out
            var xDy = Math.sin(a + aw / 2);
            if(multiplyCurrentTransform){ // transform multiplying current transform
                ctx.save();
                if (xDy < 0) { // is the text upside down. If it is flip it
                    ctx.transform(-xDy * wScale, xDx * wScale, -xDx, -xDy, xDx * radius + x, xDy * radius + y);
                } else {
                    ctx.transform(-xDy * wScale, xDx * wScale, xDx, xDy, xDx * radius + x, xDy * radius + y);
                }
            }else{
                if (xDy < 0) { // is the text upside down. If it is flip it
                    ctx.setTransform(-xDy * wScale, xDx * wScale, -xDx, -xDy, xDx * radius + x, xDy * radius + y);
                } else {
                    ctx.setTransform(-xDy * wScale, xDx * wScale, xDx, xDy, xDx * radius + x, xDy * radius + y);
                }
            }
            if(renderType === FILL){
                ctx.fillText(text[i], 0, 0);    // render the character
            }else{                    
                ctx.strokeText(text[i], 0, 0);  // render the character
            }
            if(multiplyCurrentTransform){  // restore current transform
                ctx.restore();
            }
            a += aw;                     // step to the next angle
        }
        // all done clean up.
        if(!multiplyCurrentTransform){
            ctx.setTransform(1, 0, 0, 1, 0, 0); // restore the transform
        }
        ctx.textAlign = aligned;            // restore the text alignment
    }
    // define fill text
    var fillCircleText = function(text, x, y, radius, start, end, forward){
        renderType = FILL;
        circleText(this, text, x, y, radius, start, end, forward);
    }
    // define stroke text
    var strokeCircleText = function(text, x, y, radius, start, end, forward){
        renderType = STROKE;
        circleText(this, text, x, y, radius, start, end, forward);
    }
    // define measure text
    var measureCircleTextExt = function(text,radius){
        return measure(this, text, radius);
    }
    // set the prototypes
    CanvasRenderingContext2D.prototype.fillCircleText = fillCircleText;
    CanvasRenderingContext2D.prototype.strokeCircleText = strokeCircleText;
    CanvasRenderingContext2D.prototype.measureCircleText = measureCircleTextExt;  
})();
function curvedText () {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  const rad = canvas.height * 0.4;
  const text = "Hello circle TEXT!";
  const fontSize = 40;
  const centX = canvas.width / 2;
  const centY = canvas.height / 2;
  ctx.clearRect(0,0,canvas.width,canvas.height)

  ctx.font = fontSize + "px verdana";
  ctx.textAlign = "center";
  ctx.textBaseline = "bottom";
  ctx.fillStyle = "#000";
  ctx.strokeStyle = "#666";

  // Text under stretched from Math.PI to 0 (180 - 0 deg)
  ctx.fillCircleText(text, centX, centY, rad, Math.PI, 0);

  // text over top centered at Math.PI * 1.5 ( 270 deg)
  ctx.fillCircleText(text, centX, centY, rad, Math.PI * 1.5);

  // text under top centered at Math.PI * 1.5 ( 270 deg)
  ctx.textBaseline = "top";
  ctx.fillCircleText(text, centX, centY, rad, Math.PI * 1.5);


  // text over top centered at Math.PI * 1.5 ( 270 deg)
  ctx.textBaseline = "middle";
  ctx.fillCircleText(text, centX, centY, rad, Math.PI * 1.5);


  // Use measureCircleText to get angular size
  var circleTextMetric = ctx.measureCircleText("Text to measure", rad);
  console.log(circleTextMetric.width);            // width of text if rendered normally
  console.log(circleTextMetric.angularWidth);     // angular width of text
  console.log(circleTextMetric.pixelAngularSize); // angular size of a pixel    

  // Use measure text to draw a arc around the text
  ctx.textBaseline = "middle";
  var width = ctx.measureCircleText(text, rad).angularWidth;    
  ctx.fillCircleText(text, centX, centY, rad, Math.PI * 1.5);

  // render the arc around the text
  ctx.strokeStyle= "red";
  ctx.lineWidth = 3;
  ctx.beginPath();
  ctx.arc(centX, centY, rad + fontSize / 2,Math.PI * 1.5 - width/2,Math.PI*1.5 + width/2);
  ctx.arc(centX, centY, rad - fontSize / 2,Math.PI * 1.5 + width/2,Math.PI*1.5 - width/2,true);
  ctx.closePath();
  ctx.stroke();
}

function buffaloAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  W *= 1.2
  x -= 2*W/24
  y -= 2*W/24
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "round"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+5*W/24+pet(d), y+7*H/24+pet(d))
  cpx = x+5*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+10*W/24+pet(d), y+3*H/24+pet(d))
  cpx = x+16*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*W/24+pet(d), y+6*H/24+pet(d))
  cpx = x+20*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+21*W/24+pet(d), y+8*H/24+pet(d))
  cpx = x+24*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+24*W/24+pet(d), y+10*H/24+pet(d))
  cpx = x+24*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20.7*W/24+pet(d), y+10.8*H/24+pet(d))
  cpx = x+21*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+21*W/24+pet(d), y+10*H/24+pet(d))
  cpx = x+23*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+23.3*W/24+pet(d), y+9.8*H/24+pet(d))
  cpx = x+23*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+22*W/24+pet(d), y+9*H/24+pet(d))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+23*W/24+pet(d), y+11*H/24+pet(d))
  cpx = x+23*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+22.4*W/24+pet(d), y+13*H/24+pet(d))
  cpx = x+20*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20*W/24+pet(d), y+16*H/24+pet(d))
  cpx = x+18*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*W/24+pet(d), y+19*H/24+pet(d))
  cpx = x+16*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*W/24+pet(d), y+19*H/24+pet(d))
  cpx = x+17*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+17*W/24+pet(d), y+18*H/24+pet(d))
  cpx = x+18*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*W/24+pet(d), y+16*H/24+pet(d))
  cpx = x+18*W/24
  cpy = y+13.5*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+17*W/24+pet(d), y+13.5*H/24+pet(d))
  cpx = x+16*W/24
  cpy = y+13.5*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*W/24+pet(d), y+15*H/24+pet(d))
  cpx = x+15*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+13.3*W/24+pet(d), y+14*H/24+pet(d))
  cpx = x+12*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+14*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+13*W/24+pet(d), y+15*H/24+pet(d))
  cpx = x+14*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+18*H/24+pet(d))
  cpx = x+12*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+19*H/24+pet(d))
  cpx = x+10*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+10*W/24+pet(d), y+19*H/24+pet(d))
  cpx = x+11*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+11*W/24+pet(d), y+17*H/24+pet(d))
  cpx = x+9*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+9*W/24+pet(d), y+14*H/24+pet(d))
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+10*W/24+pet(d), y+19*H/24+pet(d))
  cpx = x+8*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*W/24+pet(d), y+19*H/24+pet(d))
  cpx = x+10*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+10*W/24+pet(d), y+18*H/24+pet(d))
  cpx = x+10*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+10*W/24+pet(d), y+17*H/24+pet(d))
  cpx = x+9*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+9*W/24+pet(d), y+16*H/24+pet(d))
  cpx = x+8*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*W/24+pet(d), y+16*H/24+pet(d))
  cpx = x+8*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+7*W/24+pet(d), y+15*H/24+pet(d))
  cpx = x+7*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+7*W/24+pet(d), y+16*H/24+pet(d))
  cpx = x+7*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+6*W/24+pet(d), y+17*H/24+pet(d))
  cpx = x+5*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+5*W/24+pet(d), y+15*H/24+pet(d))
  cpx = x+3*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+2*W/24+pet(d), y+13*H/24+pet(d))
  cpx = x+0*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+0*W/24+pet(d), y+11*H/24+pet(d))
  cpx = x+0*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+4*W/24+pet(d), y+8*H/24+pet(d))
  cpx = x+5*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+5*W/24+pet(d), y+7*H/24+pet(d))
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+23*W/24+pet(d), y+12.5*H/24+pet(d))
  cpx = x+23*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+22.5*W/24+pet(d), y+14*H/24+pet(d))
  cpx = x+22*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+22*W/24+pet(d), y+16*H/24+pet(d))
  cpx = x+21*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+21*W/24+pet(d), y+19*H/24+pet(d))
  cpx = x+19*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+19*W/24+pet(d), y+19*H/24+pet(d))
  cpx = x+20*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20*W/24+pet(d), y+18*H/24+pet(d))
  cpx = x+20*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20*W/24+pet(d), y+16*H/24+pet(d))
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+2*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+2*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+3*W/24+pet(d), y+11*H/24+pet(d))
  cpx = x+4*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+4*W/24+pet(d), y+10*H/24+pet(d))
  cpx = x+3*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+2*W/24+pet(d), y+10*H/24+pet(d))
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+4*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+7*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+7*W/24+pet(d), y+13*H/24+pet(d))
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+6*W/24+pet(d), y+6*H/24+pet(d))
  cpx = x+8*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*W/24+pet(d), y+8*H/24+pet(d))
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+6*W/24+pet(d), y+7*H/24+pet(d))
  cpx = x+7*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+7*W/24+pet(d), y+10*H/24+pet(d))
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+5*W/24+pet(d), y+8*H/24+pet(d))
  cpx = x+6*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+6*W/24+pet(d), y+10*H/24+pet(d))
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+18*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+18*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+19*W/24+pet(d), y+10*H/24+pet(d))
  cpx = x+19*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+19*W/24+pet(d), y+8*H/24+pet(d))
  cpx = x+20*W/24
  cpy = y+8*H/24
  ctx.stroke()
}

function what_is_kidnappings_by_masked_goons_q_At (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+2*W/24+pet(d), y+24*H/24+pet(d))
  ctx.lineTo(x+2*W/24+pet(d), y+16*H/24+pet(d))
  cpx = x+2*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+6*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+9*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+9*W/24+pet(d), y+7*H/24+pet(d))
  cpx = x+9*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+9*W/24+pet(d), y+5*H/24+pet(d))
  cpx = x+9*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+1*H/24+pet(d))
  cpx = x+15*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+15*W/24+pet(d), y+5*H/24+pet(d))
  cpx = x+15*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+15*W/24+pet(d), y+7*H/24+pet(d))
  cpx = x+15*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+22*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+22*W/24+pet(d), y+16*H/24+pet(d))
  cpx = x+22*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+22*W/24+pet(d), y+24*H/24+pet(d))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+9*W/24+pet(d), y+5*H/24+pet(d))
  ctx.lineTo(x+18*W/24+pet(d), y+5*H/24+pet(d))
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+9*W/24+pet(d), y+7*H/24+pet(d))
  ctx.lineTo(x+15*W/24+pet(d), y+7*H/24+pet(d))
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+10*W/24+pet(d), y+6*H/24+pet(d))
  ctx.lineTo(x+12*W/24+pet(d), y+6*H/24+pet(d))
  ctx.lineTo(x+12*W/24+pet(d), y+7*H/24+pet(d))
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+13*W/24+pet(d), y+6*H/24+pet(d))
  ctx.lineTo(x+14*W/24+pet(d), y+6*H/24+pet(d))
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+12*W/24+pet(d), y+14*H/24+pet(d))
  ctx.lineTo(x+12*W/24+pet(d), y+24*H/24+pet(d))
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+6*W/24+pet(d), y+18*H/24+pet(d))
  ctx.lineTo(x+6*W/24+pet(d), y+24*H/24+pet(d))
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+18*W/24+pet(d), y+18*H/24+pet(d))
  ctx.lineTo(x+18*W/24+pet(d), y+24*H/24+pet(d))
  cpx = x+2*W/24
  cpy = y+15*H/24
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+2*W/24+pet(d), y+15*H/24+pet(d))
  cpx = x+3*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+5*W/24+pet(d), y+16*H/24+pet(d))
  cpx = x+5*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+5*W/24+pet(d), y+21*H/24+pet(d))
  cpx = x+3*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+2*W/24+pet(d), y+20*H/24+pet(d))
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+15*W/24+pet(d), y+7*H/24+pet(d))
  cpx = x+15*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*W/24+pet(d), y+11*H/24+pet(d))
  cpx = x+12*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+14*H/24+pet(d))
  cpx = x+8*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*W/24+pet(d), y+11*H/24+pet(d))
  cpx = x+9*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+9*W/24+pet(d), y+7*H/24+pet(d))
  cpx = x+15*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+15*W/24+pet(d), y+7*H/24+pet(d))
  ctx.stroke()

  //11
  usflag2At(x+12.5*W/24+pet(d), y+17*H/24+pet(d), 5*W/24, 'color')

  //12
  //ctx.moveTo(x+7*W/24+pet(d), y+16*H/24+pet(d))

  //13
  ctx.beginPath()
  ctx.moveTo(x+22*W/24+pet(d), y+16*H/24+pet(d))
  ctx.lineTo(x+20*W/24+pet(d), y+16*H/24+pet(d))
  ctx.lineTo(x+20*W/24+pet(d), y+19*H/24+pet(d))
  ctx.lineTo(x+22*W/24+pet(d), y+19*H/24+pet(d))
  ctx.stroke()

  //14
  crossesAt(x+11*W/24+pet(d), y+2*H/24+pet(d), 2*W/24, color)

  ctx.beginPath()
  ctx.moveTo(x+7*W/24+pet(d), y+17*H/24+pet(d))
  ctx.lineTo(x+11*W/24+pet(d), y+17*H/24+pet(d))
  ctx.lineTo(x+11*W/24+pet(d), y+22*H/24+pet(d))
  ctx.lineTo(x+7*W/24+pet(d), y+22*H/24+pet(d))
  ctx.lineTo(x+7*W/24+pet(d), y+17*H/24+pet(d))
  ctx.lineTo(x+7*W/24+pet(d), y+18*H/24+pet(d))
  ctx.lineTo(x+9*W/24+pet(d), y+19*H/24+pet(d))
  ctx.lineTo(x+11*W/24+pet(d), y+18*H/24+pet(d))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+14*W/24+pet(d), y+7*H/24+pet(d))
  cpx = x+14*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+10*W/24+pet(d), y+8*H/24+pet(d))
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+15*W/24+pet(d), y+8*H/24+pet(d))
  cpx = x+15*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+10*W/24+pet(d), y+11*H/24+pet(d))
  ctx.stroke()

  //4
  //6
  ctx.beginPath()
  ctx.moveTo(x+15*W/24+pet(d), y+10*H/24+pet(d))
  cpx = x+14*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+11*W/24+pet(d), y+13*H/24+pet(d))
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+9*W/24+pet(d), y+10*H/24+pet(d))
  cpx = x+11*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+9*H/24+pet(d))
  ctx.stroke()
}

function superposition_catAt (x,y,W,color,INVERT, a) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/100
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, d = W/40, angle = randomPick([0,180])
  if (INVERT) {
    d = 0
    angle = 180
  } else 
  if (a)
      angle = (a % 2 === 0)? 180: 0;
  x += 2*W/24
  y -= W/24
  if (angle === 180) {
    // x  x
    ctx.beginPath()
    p = rotatePoint(x+14.5*W/24+pet(d), y+8.5*H/24+pet(d) ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    p = rotatePoint(x+15.5*W/24+pet(d), y+9.5*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    ctx.stroke()

    //2
    ctx.beginPath()
    p = rotatePoint(x+14.5*W/24+pet(d), y+9.5*H/24+pet(d) ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    p = rotatePoint(x+15.5*W/24+pet(d), y+8.5*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    ctx.stroke()
    //3
    ctx.beginPath()
    p = rotatePoint(x+16.5*W/24+pet(d), y+8.5*H/24+pet(d) ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    p = rotatePoint(x+17.5*W/24+pet(d), y+9.5*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    ctx.stroke()
    //4
    ctx.beginPath()
    p = rotatePoint(x+16.5*W/24+pet(d), y+9.5*H/24+pet(d) ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    p = rotatePoint(x+17.5*W/24+pet(d), y+8.5*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    ctx.stroke()
  } else {
    //2 eyes of x's
    ctx.beginPath()
    p = rotatePoint(x+15*W/24+pet(d), y+9*H/24+pet(d) ,cx,cy,angle)
    ctx.arc(p[0],p[1], W/40, 0, 2*Math.PI)
    ctx.stroke()
    //3
    ctx.beginPath()
    p = rotatePoint(x+17*W/24+pet(d), y+9*H/24+pet(d) ,cx,cy,angle)
    ctx.arc(p[0],p[1], W/40, 0, 2*Math.PI)
    ctx.stroke()
  }
  //1
  ctx.beginPath()
  p = rotatePoint(x+13*W/24+pet(d), y+10*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+3*W/24+pet(d)
  cpy = y+10*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+3*W/24+pet(d), y+10*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+2*W/24+pet(d)
  cpy = y+10*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+2*W/24+pet(d), y+11*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+2*W/24+pet(d)
  cpy = y+17*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+2*W/24+pet(d), y+17*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+2*W/24+pet(d)
  cpy = y+18*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+3*W/24+pet(d), y+18*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+3*W/24+pet(d)
  cpy = y+12*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+3*W/24+pet(d), y+12*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+3*W/24+pet(d)
  cpy = y+11*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+4*W/24+pet(d), y+11*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+4*W/24+pet(d)
  cpy = y+19*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+4*W/24+pet(d), y+19*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+4*W/24+pet(d)
  cpy = y+20*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+5*W/24+pet(d), y+20*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+5*W/24+pet(d)
  cpy = y+15*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+5*W/24+pet(d), y+15*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+5*W/24+pet(d)
  cpy = y+19*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+5*W/24+pet(d), y+19*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+5*W/24+pet(d)
  cpy = y+20*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+6*W/24+pet(d), y+20*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+6*W/24+pet(d)
  cpy = y+15*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+6*W/24+pet(d), y+15*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+13*W/24+pet(d)
  cpy = y+15*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+13*W/24+pet(d), y+15*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+13*W/24+pet(d)
  cpy = y+19*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+13*W/24+pet(d), y+19*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+13*W/24+pet(d)
  cpy = y+20*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+14*W/24+pet(d), y+20*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+14*W/24+pet(d)
  cpy = y+15*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+14*W/24+pet(d), y+15*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+14*W/24+pet(d)
  cpy = y+19*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+14*W/24+pet(d), y+19*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+14*W/24+pet(d)
  cpy = y+20*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+15*W/24+pet(d), y+20*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+15*W/24+pet(d)
  cpy = y+12*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+15*W/24+pet(d), y+12*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+15*W/24+pet(d)
  cpy = y+11*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+16*W/24+pet(d), y+11*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+18*W/24+pet(d)
  cpy = y+11*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+18*W/24+pet(d), y+10*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+18*W/24+pet(d)
  cpy = y+6*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+18*W/24+pet(d), y+6*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+17*W/24+pet(d)
  cpy = y+6*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+17*W/24+pet(d), y+8*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+15*W/24+pet(d)
  cpy = y+8*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+15*W/24+pet(d), y+8*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+15*W/24+pet(d)
  cpy = y+6*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+14*W/24+pet(d), y+6*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+14*W/24+pet(d)
  cpy = y+8*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+14*W/24+pet(d), y+8*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+14*W/24+pet(d)
  cpy = y+10*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+13*W/24+pet(d), y+10*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()
}

function crossesAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+6*W/24+pet(d), y+0*H/24+pet(d))
  ctx.lineTo(x+16*W/24+pet(d), y+0*H/24+pet(d))
  ctx.lineTo(x+18*W/24+pet(d), y+0*H/24+pet(d))
  cpx = x+13*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+13*W/24+pet(d), y+11*H/24+pet(d))
  cpx = x+24*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+24*W/24+pet(d), y+6*H/24+pet(d))
  cpx = x+24*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+24*W/24+pet(d), y+18*H/24+pet(d))
  cpx = x+24*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+13*W/24+pet(d), y+13*H/24+pet(d))
  cpx = x+13*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*W/24+pet(d), y+24*H/24+pet(d))
  cpx = x+6*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+6*W/24+pet(d), y+24*H/24+pet(d))
  cpx = x+11*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+11*W/24+pet(d), y+13*H/24+pet(d))
  cpx = x+0*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+0*W/24+pet(d), y+18*H/24+pet(d))
  cpx = x+0*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+0*W/24+pet(d), y+6*H/24+pet(d))
  cpx = x+0*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+11*W/24+pet(d), y+11*H/24+pet(d))
  cpx = x+11*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+6*W/24+pet(d), y+0*H/24+pet(d))
  ctx.fill()

  //2
  ctx.beginPath()
  ctx.moveTo(x+4*W/24+pet(d), y+18*H/24+pet(d))
  ctx.lineTo(x+8*W/24+pet(d), y+18*H/24+pet(d))
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+6*W/24+pet(d), y+16*H/24+pet(d))
  ctx.lineTo(x+6*W/24+pet(d), y+20*H/24+pet(d))
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+18*W/24+pet(d), y+16*H/24+pet(d))
  ctx.lineTo(x+18*W/24+pet(d), y+20*H/24+pet(d))
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+16*W/24+pet(d), y+18*H/24+pet(d))
  ctx.lineTo(x+20*W/24+pet(d), y+18*H/24+pet(d))
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+18*W/24+pet(d), y+4*H/24+pet(d))
  ctx.lineTo(x+18*W/24+pet(d), y+8*H/24+pet(d))
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+16*W/24+pet(d), y+6*H/24+pet(d))
  ctx.lineTo(x+20*W/24+pet(d), y+6*H/24+pet(d))
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+4*W/24+pet(d), y+6*H/24+pet(d))
  ctx.lineTo(x+8*W/24+pet(d), y+6*H/24+pet(d))
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+6*W/24+pet(d), y+4*H/24+pet(d))
  ctx.lineTo(x+6*W/24+pet(d), y+8*H/24+pet(d))
  ctx.stroke()
}

function what_is_a_concentration_camp_q_At (x,y,W,color, INVERT) {
  if (INVERT) {
    what_is_kidnappings_by_masked_goons_q_At(x,y,W,color)
    return
  }
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  ctx.save()
  ctx.rect(x,y,W,H)
  //ctx.clip()
  //1
  let i = 0, mult = 1
  for (; i < 8; i++) {
    mult = Math.exp(1 + i/1.9)
    ctx.beginPath()
    ctx.moveTo(x+(11 - mult/50)*W/24+pet(d), y+14*H/24+pet(d) + mult)
    ctx.lineTo(x+(13 + mult/50)*W/24+pet(d), y+14*H/24+pet(d) + mult)
    if (i > 0)
      ctx.stroke()
  }

  //1
  ctx.beginPath()
  ctx.moveTo(x+11.2*W/24+pet(d), y+14*H/24+pet(d))
  ctx.lineTo(x+(11 - mult/50)*W/24+pet(d)+W/48, y+26*H/24+pet(d))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+12.8*W/24+pet(d), y+14*H/24+pet(d))
  ctx.lineTo(x+(13 + mult/50)*W/24+pet(d)-W/48, y+26*H/24+pet(d))
  ctx.stroke()

  //1
  ctx.beginPath()
  ctx.moveTo(x+10*W/24+pet(d), y+14*H/24+pet(d))
  ctx.lineTo(x+12*W/24+pet(d), y+14*H/24+pet(d))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+0*W/24+pet(d), y+14*H/24+pet(d))
  ctx.lineTo(x+24*W/24+pet(d), y+14*H/24+pet(d))
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+8*W/24+pet(d), y+14*H/24+pet(d))
  ctx.lineTo(x+8*W/24+pet(d), y+6*H/24+pet(d))
  ctx.lineTo(x+7*W/24+pet(d), y+6*H/24+pet(d))
  ctx.lineTo(x+12*W/24+pet(d), y+0*H/24+pet(d))
  ctx.lineTo(x+17*W/24+pet(d), y+6*H/24+pet(d))
  ctx.lineTo(x+16*W/24+pet(d), y+6*H/24+pet(d))
  ctx.lineTo(x+16*W/24+pet(d), y+14*H/24+pet(d))
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+0*W/24+pet(d), y+8*H/24+pet(d))
  ctx.lineTo(x+8*W/24+pet(d), y+8*H/24+pet(d))
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+16*W/24+pet(d), y+8*H/24+pet(d))
  ctx.lineTo(x+24*W/24+pet(d), y+8*H/24+pet(d))
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+4*W/24+pet(d), y+7*H/24+pet(d))
  ctx.lineTo(x+4*W/24+pet(d), y+14*H/24+pet(d))
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+20*W/24+pet(d), y+7*H/24+pet(d))
  ctx.lineTo(x+20*W/24+pet(d), y+14*H/24+pet(d))
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+10*W/24+pet(d), y+14*H/24+pet(d))
  ctx.lineTo(x+10*W/24+pet(d), y+11*H/24+pet(d))
  cpx = x+12*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+14*W/24+pet(d), y+11*H/24+pet(d))
  ctx.lineTo(x+14*W/24+pet(d), y+14*H/24+pet(d))
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+10*W/24+pet(d), y+4*H/24+pet(d))
  ctx.lineTo(x+10*W/24+pet(d), y+6*H/24+pet(d))
  ctx.lineTo(x+11*W/24+pet(d), y+6*H/24+pet(d))
  ctx.lineTo(x+11*W/24+pet(d), y+4*H/24+pet(d))
  ctx.lineTo(x+10*W/24+pet(d), y+4*H/24+pet(d))
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+13*W/24+pet(d), y+4*H/24+pet(d))
  ctx.lineTo(x+13*W/24+pet(d), y+6*H/24+pet(d))
  ctx.lineTo(x+14*W/24+pet(d), y+6*H/24+pet(d))
  ctx.lineTo(x+14*W/24+pet(d), y+4*H/24+pet(d))
  ctx.lineTo(x+13*W/24+pet(d), y+4*H/24+pet(d))
  ctx.stroke()

  //11
  ctx.beginPath()
  ctx.moveTo(x+2*W/24+pet(d), y+7*H/24+pet(d))
  ctx.lineTo(x+2*W/24+pet(d), y+8*H/24+pet(d))
  ctx.stroke()

  //12
  ctx.beginPath()
  ctx.moveTo(x+6*W/24+pet(d), y+7*H/24+pet(d))
  ctx.lineTo(x+6*W/24+pet(d), y+8*H/24+pet(d))
  ctx.stroke()

  //13
  ctx.beginPath()
  ctx.moveTo(x+18*W/24+pet(d), y+7*H/24+pet(d))
  ctx.lineTo(x+18*W/24+pet(d), y+8*H/24+pet(d))
  ctx.stroke()

  //14
  ctx.beginPath()
  ctx.moveTo(x+22*W/24+pet(d), y+7*H/24+pet(d))
  ctx.lineTo(x+22*W/24+pet(d), y+8*H/24+pet(d))
  ctx.stroke()
  ctx.restore()
}

function monticelloAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "round"
  ctx.lineJoin = "bevel"
   W *= 1.09
  x -= 1*W/24
  y -= 1.0*W/24

  ctx.font = (W*0.034)+"pt serif"
  str = "M   O   N   T   I   C   E   L   L   0"
  let w = ctx.measureText(str).width
  ctx.fillText(str, x+(W/2 - w/2), y + 19.3*H/24)
  //1
  ctx.beginPath()
  ctx.moveTo(x+0*W/24+pet(d), y+17*H/24+pet(d))
  ctx.lineTo(x+0*W/24+pet(d), y+18*H/24+pet(d))
  ctx.lineTo(x+24*W/24+pet(d), y+18*H/24+pet(d))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+1*W/24+pet(d), y+10*H/24+pet(d))
  ctx.lineTo(x+1*W/24+pet(d), y+17*H/24+pet(d))
  ctx.lineTo(x+23*W/24+pet(d), y+17*H/24+pet(d))
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+12*W/24+pet(d), y+7*H/24+pet(d))
  ctx.lineTo(x+8*W/24+pet(d), y+10*H/24+pet(d))
  ctx.lineTo(x+8*W/24+pet(d), y+16*H/24+pet(d))
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+16*W/24+pet(d), y+10*H/24+pet(d))
  ctx.lineTo(x+16*W/24+pet(d), y+16*H/24+pet(d))
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+3*W/24+pet(d), y+13*H/24+pet(d))
  ctx.lineTo(x+2*W/24+pet(d), y+13*H/24+pet(d))
  ctx.lineTo(x+2*W/24+pet(d), y+16*H/24+pet(d))
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+7*W/24+pet(d), y+13*H/24+pet(d))
  ctx.lineTo(x+6*W/24+pet(d), y+13*H/24+pet(d))
  ctx.lineTo(x+6*W/24+pet(d), y+16*H/24+pet(d))
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+10*W/24+pet(d), y+12*H/24+pet(d))
  ctx.lineTo(x+9*W/24+pet(d), y+12*H/24+pet(d))
  ctx.lineTo(x+9*W/24+pet(d), y+16*H/24+pet(d))
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+12*W/24+pet(d), y+12*H/24+pet(d))
  ctx.lineTo(x+11*W/24+pet(d), y+12*H/24+pet(d))
  ctx.lineTo(x+11*W/24+pet(d), y+16*H/24+pet(d))
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+14*W/24+pet(d), y+12*H/24+pet(d))
  ctx.lineTo(x+13*W/24+pet(d), y+12*H/24+pet(d))
  ctx.lineTo(x+13*W/24+pet(d), y+16*H/24+pet(d))
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+18*W/24+pet(d), y+13*H/24+pet(d))
  ctx.lineTo(x+17*W/24+pet(d), y+13*H/24+pet(d))
  ctx.lineTo(x+17*W/24+pet(d), y+16*H/24+pet(d))
  ctx.stroke()

  //11
  ctx.beginPath()
  ctx.moveTo(x+22*W/24+pet(d), y+13*H/24+pet(d))
  ctx.lineTo(x+21*W/24+pet(d), y+13*H/24+pet(d))
  ctx.lineTo(x+21*W/24+pet(d), y+16*H/24+pet(d))
  ctx.stroke()

  //12
  ctx.beginPath()
  ctx.moveTo(x+23*W/24+pet(d), y+11*H/24+pet(d))
  ctx.lineTo(x+23*W/24+pet(d), y+9*H/24+pet(d))
  ctx.lineTo(x+16*W/24+pet(d), y+9*H/24+pet(d))
  ctx.lineTo(x+16*W/24+pet(d), y+8*H/24+pet(d))
  cpx = x+16*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+6*H/24+pet(d))
  cpx = x+8*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*W/24+pet(d), y+8*H/24+pet(d))
  ctx.stroke()

  //13
  ctx.beginPath()
  ctx.moveTo(x+2*W/24+pet(d), y+9*H/24+pet(d))
  ctx.lineTo(x+8*W/24+pet(d), y+9*H/24+pet(d))
  ctx.stroke()

  //14
  ctx.beginPath()
  ctx.moveTo(x+2*W/24+pet(d), y+11*H/24+pet(d))
  ctx.lineTo(x+7*W/24+pet(d), y+11*H/24+pet(d))
  ctx.stroke()

  //15
  ctx.beginPath()
  ctx.moveTo(x+17*W/24+pet(d), y+11*H/24+pet(d))
  ctx.lineTo(x+22*W/24+pet(d), y+11*H/24+pet(d))
  ctx.stroke()

  //16
  ctx.beginPath()
  ctx.moveTo(x+16*W/24+pet(d), y+10*H/24+pet(d))
  ctx.lineTo(x+13*W/24+pet(d), y+8*H/24+pet(d))
  ctx.stroke()

  //17
  ctx.beginPath()
  ctx.moveTo(x+14*W/24+pet(d), y+16*H/24+pet(d))
  ctx.lineTo(x+15*W/24+pet(d), y+16*H/24+pet(d))
  ctx.lineTo(x+15*W/24+pet(d), y+15*H/24+pet(d))
  ctx.stroke()

  //18
  ctx.beginPath()
  ctx.moveTo(x+18*W/24+pet(d), y+16*H/24+pet(d))
  ctx.lineTo(x+19*W/24+pet(d), y+16*H/24+pet(d))
  ctx.lineTo(x+19*W/24+pet(d), y+15*H/24+pet(d))
  ctx.stroke()

  //19
  ctx.beginPath()
  ctx.moveTo(x+22*W/24+pet(d), y+16*H/24+pet(d))
  ctx.lineTo(x+23*W/24+pet(d), y+16*H/24+pet(d))
  ctx.lineTo(x+23*W/24+pet(d), y+15*H/24+pet(d))
  ctx.stroke()

  //20
  ctx.beginPath()
  ctx.moveTo(x+3*W/24+pet(d), y+16*H/24+pet(d))
  ctx.lineTo(x+4*W/24+pet(d), y+16*H/24+pet(d))
  ctx.lineTo(x+4*W/24+pet(d), y+15*H/24+pet(d))
  ctx.stroke()

  //21
  ctx.beginPath()
  ctx.moveTo(x+7*W/24+pet(d), y+16*H/24+pet(d))
  ctx.lineTo(x+8*W/24+pet(d), y+16*H/24+pet(d))
  ctx.stroke()

  //22
  ctx.beginPath()
  ctx.moveTo(x+11*W/24+pet(d), y+9*H/24+pet(d))
  ctx.lineTo(x+9*W/24+pet(d), y+11*H/24+pet(d))
  ctx.stroke()

  //23
  ctx.beginPath()
  ctx.moveTo(x+12*W/24+pet(d), y+6*H/24+pet(d))
  ctx.lineTo(x+12*W/24+pet(d), y+4*H/24+pet(d))
  ctx.lineTo(x+14*W/24+pet(d), y+4*H/24+pet(d))
  ctx.stroke()

  //24
  ctx.beginPath()
  ctx.moveTo(x+12*W/24+pet(d), y+3*H/24+pet(d))
  ctx.lineTo(x+12*W/24+pet(d), y+2*H/24+pet(d))
  ctx.lineTo(x+14*W/24+pet(d), y+2*H/24+pet(d))
  ctx.stroke()

  //25
  ctx.beginPath()
  ctx.moveTo(x+14*W/24+pet(d), y+3*H/24+pet(d))
  ctx.lineTo(x+14*W/24+pet(d), y+4*H/24+pet(d))
  ctx.stroke()

  //26
  ctx.beginPath()
  ctx.moveTo(x+13*W/24+pet(d), y+9*H/24+pet(d))
  ctx.lineTo(x+14*W/24+pet(d), y+10*H/24+pet(d))
  ctx.stroke()
}

function stampAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.font = "800 "+(W*0.07)+"pt serif"
  ctx.fillText("24\u{00A2}", x+2.3*W/24, y+22*H/27)
  ctx.fillText("24\u{00A2}", x+18.2*W/24, y+22*H/27)
  ctx.font = "800 "+(W*0.06)+"pt serif"
  //ctx.fillText("13\u{00A2}", x+17.7*W/24, y+5.3*H/27)
  let functions = ["inverted_jennyAt"]
  window [randomPick(functions)] (x+4*W/24,y+4*W/24, 16*W/24, color)
   //1
  ctx.beginPath()
  ctx.moveTo(x+1*W/24+pet(d), y+23*H/24+pet(d))
  ctx.lineTo(x+0*W/24+pet(d), y+23*H/24+pet(d))
  ctx.lineTo(x+0*W/24+pet(d), y+22*H/24+pet(d))
  cpx = x+2*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+0*W/24+pet(d), y+20*H/24+pet(d))
  cpx = x+2*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+0*W/24+pet(d), y+18*H/24+pet(d))
  cpx = x+2*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+0*W/24+pet(d), y+16*H/24+pet(d))
  cpx = x+2*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+0*W/24+pet(d), y+14*H/24+pet(d))
  cpx = x+2*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+0*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+2*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+0*W/24+pet(d), y+10*H/24+pet(d))
  cpx = x+2*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+0*W/24+pet(d), y+8*H/24+pet(d))
  cpx = x+2*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+0*W/24+pet(d), y+6*H/24+pet(d))
  cpx = x+2*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+0*W/24+pet(d), y+4*H/24+pet(d))
  cpx = x+2*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+0*W/24+pet(d), y+2*H/24+pet(d))
  ctx.lineTo(x+0*W/24+pet(d), y+1*H/24+pet(d))
  ctx.lineTo(x+1*W/24+pet(d), y+1*H/24+pet(d))
  cpx = x+2*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+3*W/24+pet(d), y+1*H/24+pet(d))
  cpx = x+4*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+5*W/24+pet(d), y+1*H/24+pet(d))
  cpx = x+6*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+7*W/24+pet(d), y+1*H/24+pet(d))
  cpx = x+8*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+9*W/24+pet(d), y+1*H/24+pet(d))
  cpx = x+10*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+11*W/24+pet(d), y+1*H/24+pet(d))
  cpx = x+12*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+13*W/24+pet(d), y+1*H/24+pet(d))
  cpx = x+14*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+15*W/24+pet(d), y+1*H/24+pet(d))
  cpx = x+16*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+17*W/24+pet(d), y+1*H/24+pet(d))
  cpx = x+18*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+19*W/24+pet(d), y+1*H/24+pet(d))
  cpx = x+20*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+21*W/24+pet(d), y+1*H/24+pet(d))
  cpx = x+22*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+23*W/24+pet(d), y+1*H/24+pet(d))
  ctx.lineTo(x+24*W/24+pet(d), y+1*H/24+pet(d))
  ctx.lineTo(x+24*W/24+pet(d), y+2*H/24+pet(d))
  cpx = x+22*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+24*W/24+pet(d), y+4*H/24+pet(d))
  cpx = x+22*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+24*W/24+pet(d), y+6*H/24+pet(d))
  cpx = x+22*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+24*W/24+pet(d), y+8*H/24+pet(d))
  cpx = x+22*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+24*W/24+pet(d), y+10*H/24+pet(d))
  cpx = x+22*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+24*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+22*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+24*W/24+pet(d), y+14*H/24+pet(d))
  cpx = x+22*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+24*W/24+pet(d), y+16*H/24+pet(d))
  cpx = x+22*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+24*W/24+pet(d), y+18*H/24+pet(d))
  cpx = x+22*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+24*W/24+pet(d), y+20*H/24+pet(d))
  cpx = x+22*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+24*W/24+pet(d), y+22*H/24+pet(d))
  ctx.lineTo(x+24*W/24+pet(d), y+23*H/24+pet(d))
  ctx.lineTo(x+23*W/24+pet(d), y+23*H/24+pet(d))
  // splice
  cpx = x+22*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+21*W/24+pet(d), y+23*H/24+pet(d))
  cpx = x+20*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+19*W/24+pet(d), y+23*H/24+pet(d))
  cpx = x+18*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+17*W/24+pet(d), y+23*H/24+pet(d))
  cpx = x+16*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+15*W/24+pet(d), y+23*H/24+pet(d))
  cpx = x+14*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+13*W/24+pet(d), y+23*H/24+pet(d))
  cpx = x+12*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+11*W/24+pet(d), y+23*H/24+pet(d))
  cpx = x+10*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+9*W/24+pet(d), y+23*H/24+pet(d))
  cpx = x+8*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+7*W/24+pet(d), y+23*H/24+pet(d))
  cpx = x+6*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+5*W/24+pet(d), y+23*H/24+pet(d))
  cpx = x+4*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+3*W/24+pet(d), y+23*H/24+pet(d))
  cpx = x+2*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+1*W/24+pet(d), y+23*H/24+pet(d))
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+2*W/24+pet(d), y+21*H/24+pet(d))
  ctx.lineTo(x+22*W/24+pet(d), y+21*H/24+pet(d))
  ctx.lineTo(x+22*W/24+pet(d), y+3*H/24+pet(d))
  ctx.lineTo(x+2*W/24+pet(d), y+3*H/24+pet(d))
  ctx.lineTo(x+2*W/24+pet(d), y+21*H/24+pet(d))
  ctx.stroke()

  ctx.fillCircleText(". U.S. POSTAGE .", x+W/2, y+H/2+H/32, 8.2*W/24, Math.PI*1.2, Math.PI*1.8, 0)
  ctx.beginPath()
  ctx.arc(x+12*W/24+pet(d), y+13*H/24+pet(d), 8*W/24, Math.PI, 2*Math.PI)
  ctx.moveTo(x+20*W/24+pet(d), y+13*H/24+pet(d))
  ctx.lineTo(x+20*W/24+pet(d), y+16*H/24+pet(d))
  cpx = x+18*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*W/24+pet(d), y+18*H/24+pet(d))
  cpx = x+6*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+6*W/24+pet(d), y+18*H/24+pet(d))
  cpx = x+6*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+4*W/24+pet(d), y+16*H/24+pet(d))
  cpx = x+4*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+4*W/24+pet(d), y+13*H/24+pet(d))
  ctx.stroke()

  ctx.save()
  document.getElementById("featuresize").value /= 3
  ctx.beginPath()
  ctx.arc(x+12*W/24+pet(d), y+13*H/24+pet(d), 8*W/24, Math.PI, 2*Math.PI)
  ctx.lineTo(x+20*W/24+pet(d), y+16*H/24+pet(d))
  cpx = x+18*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*W/24+pet(d), y+18*H/24+pet(d))
  cpx = x+6*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+6*W/24+pet(d), y+18*H/24+pet(d))
  cpx = x+6*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+4*W/24+pet(d), y+16*H/24+pet(d))
  cpx = x+4*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+4*W/24+pet(d), y+13*H/24+pet(d))
  ctx.lineTo(x+2*W/24+pet(d), y+13*H/24+pet(d))
  ctx.lineTo(x+2*W/24+pet(d), y+21*H/24+pet(d))
  ctx.lineTo(x+22*W/24+pet(d), y+21*H/24+pet(d))
  ctx.lineTo(x+22*W/24+pet(d), y+3*H/24+pet(d))
  ctx.lineTo(x+2*W/24+pet(d), y+3*H/24+pet(d))
  ctx.lineTo(x+2*W/24+pet(d), y+13*H/24+pet(d))
  ctx.lineTo(x+4*W/24+pet(d), y+13*H/24+pet(d))
  ctx.closePath()
  ctx.clip()
  ctx.globalAlpha /= 3
  document.getElementById("opacity").value /= 3
  waves(color)
  ctx.globalAlpha *= 3
  document.getElementById("opacity").value *= 3
  document.getElementById("featuresize").value *= 3
  ctx.restore()
}

function matrix_multiplicationAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = W/72
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //document.getElementById("featuresize").value /= 3
  let i = 0
  for (; i < 1; i++) {
    hairdoAt (x,y,W/3,color, -1,      -1)
    hairdoAt (x+W/3,y,W/3,color, 0,   -1)
    hairdoAt (x+2*W/3,y,W/3,color, 1, -1)

    hairdoAt (x,y+H/3,W/3,color, -1,      0)
    hairdoAt (x+W/3,y+H/3,W/3,color, 0,   0)
    hairdoAt (x+2*W/3,y+H/3,W/3,color, 1, 0)

    hairdoAt (x,y+2*H/3,W/3,color, -1,      1)
    hairdoAt (x+W/3,y+2*H/3,W/3,color, 0,   1)
    hairdoAt (x+2*W/3,y+2*H/3,W/3,color, 1, 1)
  }
  //document.getElementById("featuresize").value *= 3
}

function hairdoAt (x,y,W,color, xoff, yoff) { // offs = [-1,0,+1]
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "miter"
  xoff *= 3*W/24
  yoff *= 3*W/24
//  xoff *= -1
 // yoff *= -1
  //1
  ctx.beginPath()
  ctx.moveTo(x+16*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+16*W/24+xoff
  cpy = y+20*H/24+yoff
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+24*W/24+pet(d)+xoff, y+20*H/24+pet(d)+yoff)
  cpx = x+21*W/24+xoff
  cpy = y+20*H/24+yoff
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+21*W/24+pet(d)+xoff, y+12*H/24+pet(d)+yoff)
  cpx = x+21*W/24+xoff
  cpy = y+1*H/24+yoff
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d)+xoff, y+4*H/24+pet(d))
  cpx = x+3*W/24+xoff
  cpy = y+1*H/24+yoff
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+3*W/24+pet(d)+xoff, y+12*H/24+pet(d)+yoff)
  cpx = x+3*W/24+xoff
  cpy = y+20*H/24+yoff
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+0*W/24+pet(d)+xoff, y+20*H/24+pet(d)+yoff)
  cpx = x+8*W/24+xoff
  cpy = y+20*H/24+yoff
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*W/24+pet(d), y+12*H/24+pet(d))
  ctx.stroke()
  d /= 5
   //1
  ctx.beginPath()
  ctx.moveTo(x+8*W/24+pet(d), y+21*H/24+pet(d))
  ctx.lineTo(x+8*W/24+pet(d), y+12*H/24+pet(d))
  ctx.lineTo(x+8*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+8*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+6*H/24+pet(d))
  cpx = x+16*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+16*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*W/24+pet(d), y+21*H/24+pet(d))
  ctx.fillStyle = savedF
  ctx.fill()
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+10*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+11*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+12*H/24+pet(d))
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+14*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+15*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*W/24+pet(d), y+12*H/24+pet(d))
  ctx.stroke()

  y += W/36
  //4
  ctx.beginPath()
  ctx.moveTo(x+14*W/24+pet(d), y+12.5*H/24+pet(d))
  ctx.lineTo(x+15*W/24+pet(d), y+15*H/24+pet(d))
  ctx.lineTo(x+14*W/24+pet(d), y+15*H/24+pet(d))
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+14*W/24+pet(d), y+16.3*H/24+pet(d))
  ctx.lineTo(x+15*W/24+pet(d), y+16.3*H/24+pet(d))
  ctx.stroke()
}

function chinese_roomAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //4
  ctx.beginPath()
  ctx.moveTo(x+6*W/24+pet(d), y+6*H/24+pet(d))
  ctx.lineTo(x+18*W/24+pet(d), y+6*H/24+pet(d))
  ctx.lineTo(x+18*W/24+pet(d), y+18*H/24+pet(d))
  ctx.lineTo(x+6*W/24+pet(d), y+18*H/24+pet(d))
  ctx.lineTo(x+6*W/24+pet(d), y+6*H/24+pet(d))
  ctx.stroke()
  //2
  ctx.beginPath()
  ctx.moveTo(x+10*W/24+pet(d), y+10*H/24+pet(d))
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+6*W/24+pet(d), y+6*H/24+pet(d))
  ctx.lineTo(x+9*W/24+pet(d), y+9*H/24+pet(d))
  ctx.lineTo(x+15*W/24+pet(d), y+9*H/24+pet(d))
  ctx.lineTo(x+18*W/24+pet(d), y+6*H/24+pet(d))
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+6*W/24+pet(d), y+18*H/24+pet(d))
  ctx.lineTo(x+9*W/24+pet(d), y+15*H/24+pet(d))
  ctx.lineTo(x+15*W/24+pet(d), y+15*H/24+pet(d))
  ctx.lineTo(x+18*W/24+pet(d), y+18*H/24+pet(d))
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+9*W/24+pet(d), y+9*H/24+pet(d))
  ctx.lineTo(x+9*W/24+pet(d), y+15*H/24+pet(d))
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+15*W/24+pet(d), y+9*H/24+pet(d))
  ctx.lineTo(x+15*W/24+pet(d), y+15*H/24+pet(d))
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+18*W/24+pet(d), y+12*H/24+pet(d))
  ctx.lineTo(x+20*W/24+pet(d), y+12*H/24+pet(d))
  ctx.lineTo(x+19*W/24+pet(d), y+11*H/24+pet(d))
  ctx.lineTo(x+20*W/24+pet(d), y+12*H/24+pet(d))
  ctx.lineTo(x+19*W/24+pet(d), y+13*H/24+pet(d))
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+5*W/24+pet(d), y+11*H/24+pet(d))
  ctx.lineTo(x+6*W/24+pet(d), y+12*H/24+pet(d))
  ctx.lineTo(x+5*W/24+pet(d), y+13*H/24+pet(d))
  ctx.lineTo(x+6*W/24+pet(d), y+12*H/24+pet(d))
  ctx.lineTo(x+4*W/24+pet(d), y+12*H/24+pet(d))
  ctx.stroke()

  //1
  ctx.beginPath()
  ctx.moveTo(x+0*W/24+pet(d), y+10*H/24+pet(d))
  ctx.lineTo(x+4*W/24+pet(d), y+10*H/24+pet(d))
  ctx.lineTo(x+4*W/24+pet(d), y+14*H/24+pet(d))
  ctx.lineTo(x+0*W/24+pet(d), y+14*H/24+pet(d))
  ctx.lineTo(x+0*W/24+pet(d), y+10*H/24+pet(d))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+20*W/24+pet(d), y+10*H/24+pet(d))
  ctx.lineTo(x+24*W/24+pet(d), y+10*H/24+pet(d))
  ctx.lineTo(x+24*W/24+pet(d), y+14*H/24+pet(d))
  ctx.lineTo(x+20*W/24+pet(d), y+14*H/24+pet(d))
  ctx.lineTo(x+20*W/24+pet(d), y+10*H/24+pet(d))
  ctx.stroke()
  //9
  // unicode here 	4E00 - 9FFF
  ctx.font = (W*0.12)+"pt serif"
  let u1 = String.fromCharCode(0x4E00 + Math.random() * (0x9fff-0x4E00+1));
  let u2 = String.fromCharCode(0x4E00 + Math.random() * (0x9fff-0x4E00+1));
  document.getElementById("featuresize").value /= 2
  blankbookAt(x+11*W/24+pet(d), y+9.5*H/24+pet(d), 5*W/24, color)
  
  // fill book
  ctx.fillText(u1, x+0.0*W/24+pet(d), y+13.4*H/24+pet(d))
  ctx.fillText(u2,x+20*W/24+pet(d), y+13.4*H/24+pet(d))
  ctx.font = (W*0.06)+"pt serif"

  ctx.fillText(u1, x+11.3*W/24+pet(d), y+12.5*H/24+pet(d))
  ctx.fillText(u2, x+13.8*W/24+pet(d), y+12.5*H/24+pet(d))
  figure_fillAt(x+6*W/24+pet(d), y+11*H/24+pet(d), 6*W/24, color, savedF)
  document.getElementById("featuresize").value *= 2
}

function blankbookAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  //1
  //1
  ctx.beginPath()
  ctx.moveTo(x+12*W/24+pet(d), y+24*H/24+pet(d))
  cpx = x+18*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+24*W/24+pet(d), y+24*H/24+pet(d))
  cpx = x+24*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+24*W/24+pet(d), y+23*H/24+pet(d))
  cpx = x+18*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+23*H/24+pet(d))
  cpx = x+12*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+2*H/24+pet(d))
  cpx = x+18*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+24*W/24+pet(d), y+2*H/24+pet(d))
  cpx = x+24*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+24*W/24+pet(d), y+23*H/24+pet(d))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+24*W/24+pet(d), y+24*H/24+pet(d))
  cpx = x+18*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+24*H/24+pet(d))
  cpx = x+6*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+0*W/24+pet(d), y+24*H/24+pet(d))
  cpx = x+0*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+0*W/24+pet(d), y+2*H/24+pet(d))
  cpx = x+6*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+2*H/24+pet(d))
  cpx = x+18*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+24*W/24+pet(d), y+2*H/24+pet(d))
  cpx = x+24*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+24*W/24+pet(d), y+23*H/24+pet(d))
  cpx = x+24*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+24*W/24+pet(d), y+24*H/24+pet(d))
  ctx.fillStyle = savedF
  ctx.fill()
  ctx.stroke()
  ctx.fillStyle = color

  //3
  ctx.beginPath()
  ctx.moveTo(x+12*W/24+pet(d), y+2*H/24+pet(d))
  ctx.lineTo(x+12*W/24+pet(d), y+24*H/24+pet(d))
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+0*W/24+pet(d), y+23*H/24+pet(d))
  cpx = x+6*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+24*H/24+pet(d))
  cpx = x+18*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+24*W/24+pet(d), y+23*H/24+pet(d))
  ctx.stroke()
}

function mary_apos_s_roomAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+0*W/24+pet(d), y+0*H/24+pet(d))
  ctx.lineTo(x+24*W/24+pet(d), y+0*H/24+pet(d))
  ctx.lineTo(x+24*W/24+pet(d), y+24*H/24+pet(d))
  ctx.lineTo(x+0*W/24+pet(d), y+24*H/24+pet(d))
  ctx.lineTo(x+0*W/24+pet(d), y+14*H/24+pet(d))
  ctx.lineTo(x+6*W/24+pet(d), y+14*H/24+pet(d))
  ctx.lineTo(x+6*W/24+pet(d), y+18*H/24+pet(d))
  ctx.lineTo(x+18*W/24+pet(d), y+18*H/24+pet(d))
  ctx.lineTo(x+18*W/24+pet(d), y+6*H/24+pet(d))
  ctx.lineTo(x+6*W/24+pet(d), y+6*H/24+pet(d))
  ctx.lineTo(x+6*W/24+pet(d), y+14*H/24+pet(d))
  ctx.lineTo(x+0*W/24+pet(d), y+14*H/24+pet(d))
  ctx.lineTo(x+0*W/24+pet(d), y+0*H/24+pet(d))
  ctx.fillStyle = "#ff0000"
 // ctx.globalAlpha /=2
  ctx.fill()
 // ctx.globalAlpha *=2
  ctx.fillStyle = savedF

  //3
  ctx.beginPath()
  ctx.moveTo(x+6*W/24+pet(d), y+6*H/24+pet(d))
  ctx.lineTo(x+18*W/24+pet(d), y+6*H/24+pet(d))
  ctx.lineTo(x+18*W/24+pet(d), y+18*H/24+pet(d))
  ctx.lineTo(x+6*W/24+pet(d), y+18*H/24+pet(d))
  ctx.lineTo(x+6*W/24+pet(d), y+6*H/24+pet(d))
  ctx.stroke()
  //2
  figureRAt(x+9*W/24+pet(d), y+10*H/24+pet(d), 6*W/24, color)
  //3
  ctx.beginPath()
  ctx.moveTo(x+6*W/24+pet(d), y+6*H/24+pet(d))
  ctx.lineTo(x+9*W/24+pet(d), y+9*H/24+pet(d))
  ctx.lineTo(x+15*W/24+pet(d), y+9*H/24+pet(d))
  ctx.lineTo(x+18*W/24+pet(d), y+6*H/24+pet(d))
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+6*W/24+pet(d), y+18*H/24+pet(d))
  ctx.lineTo(x+9*W/24+pet(d), y+15*H/24+pet(d))
  ctx.lineTo(x+15*W/24+pet(d), y+15*H/24+pet(d))
  ctx.lineTo(x+18*W/24+pet(d), y+18*H/24+pet(d))
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+9*W/24+pet(d), y+9*H/24+pet(d))
  ctx.lineTo(x+9*W/24+pet(d), y+15*H/24+pet(d))
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+15*W/24+pet(d), y+9*H/24+pet(d))
  ctx.lineTo(x+15*W/24+pet(d), y+15*H/24+pet(d))
  ctx.stroke()
}

function shakeAt (x,y,W,color) { // shake_a_faceAt
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  //1
  ctx.beginPath()
  ctx.moveTo(x+10*W/24+pet(d), y+11*H/24+pet(d))
  cpx = x+9*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+9*W/24+pet(d), y+10*H/24+pet(d))
  cpx = x+11*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+11*W/24+pet(d), y+9*H/24+pet(d))
  cpx = x+10*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+10*W/24+pet(d), y+11*H/24+pet(d))
 // ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+10*W/24+pet(d), y+18*H/24+pet(d))
  cpx = x+12*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+23*H/24+pet(d))
  cpx = x+21*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+21*W/24+pet(d), y+19*H/24+pet(d))
  cpx = x+19*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+21*W/24+pet(d), y+7*H/24+pet(d))
  cpx = x+20*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+1*H/24+pet(d))
  cpx = x+5*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+5*W/24+pet(d), y+6*H/24+pet(d))
  cpx = x+5*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+7*W/24+pet(d), y+11*H/24+pet(d))
 // ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+14*W/24+pet(d), y+8*H/24+pet(d))
  cpx = x+17*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+17*W/24+pet(d), y+9*H/24+pet(d))
  cpx = x+17*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+15*W/24+pet(d), y+12*H/24+pet(d))
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+8*W/24+pet(d), y+10*H/24+pet(d))
  cpx = x+8*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+11*W/24+pet(d), y+8*H/24+pet(d))
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+10*W/24+pet(d), y+18*H/24+pet(d))
  cpx = x+15*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*W/24+pet(d), y+13*H/24+pet(d))
  ctx.stroke()

  //7
  let x0 = x+7*W/24+pet(d), y0 = y+11*H/24+pet(d), i = 0
 // ctx.beginPath()
  ctx.moveTo(x+7*W/24+pet(d), y+11*H/24+pet(d))
  i = 0
  let end = new point(x+10*W/24, y+18*H/24)
  let pt = new point(x+7*W/24, y+11*H/24)
  let angle = 0, mina, maxa, cura
//console.log(distancei(pt,end), W/24)
  while (i < 1 && distancei(pt,end) > W/24) {
    /*if(i % 2 == 0)
      x0 += plusminus()*W/12
    else
      y0 += plusminus()*W/12*/
    x0 = 10+Math.random() * W
    y0 = 200+W/4 + Math.random() * W/2
    pt = new point(x+x0, y+y0)

    // angle between pt and end
    cura = Math.atan2(pt.y - end.y, pt.x - end.x)
    console.log(cura)
    ctx.beginPath()
    ctx.moveTo(pt.x, pt.y)
     ctx.lineTo(end.x, end.y)
    ctx.stroke()
    i++
    if (distancei(pt, end) < W/24) {
      console.log("break")
      break;
    }
  }
  console.log(pt)
  ctx.lineTo(x+10*W/24+pet(d), y+18*H/24+pet(d))
  ctx.lineWidth *= 1.5
 // ctx.stroke()
  ctx.lineWidth /= 1.5
}

function angle (cp, pt) {
  return Math.atan2(pt.y - cp.y, pt.x - cp.x)
}

function plusminus () {
  return (Math.random() > 0.5) ? 1: -1;
}

function marginaliaAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/100
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.fillStyle = "#ffffee"
  ctx.fillRect(x,y,W,H)
  ctx.strokeStyle = "#ff0000"
  //1
  ctx.beginPath()
  ctx.moveTo(x+10*W/24+pet(d), y+24*H/24+pet(d))
  ctx.lineTo(x+10*W/24+pet(d), y+0*H/24+pet(d))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+10.5*W/24+pet(d), y+24*H/24+pet(d))
  ctx.lineTo(x+10.5*W/24+pet(d), y+0*H/24+pet(d))
  ctx.stroke()

  //3
  ctx.strokeStyle = "#0000dd"
  ctx.beginPath()
  ctx.moveTo(x+0*W/24+pet(d), y+10*H/24+pet(d))
  ctx.lineTo(x+24*W/24+pet(d), y+10*H/24+pet(d))
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+0*W/24+pet(d), y+14*H/24+pet(d))
  ctx.lineTo(x+24*W/24+pet(d), y+14*H/24+pet(d))
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+0*W/24+pet(d), y+18*H/24+pet(d))
  ctx.lineTo(x+24*W/24+pet(d), y+18*H/24+pet(d))
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+0*W/24+pet(d), y+22*H/24+pet(d))
  ctx.lineTo(x+24*W/24+pet(d), y+22*H/24+pet(d))
  ctx.stroke()

  ctx.save()
  ctx.beginPath()
  ctx.moveTo(x,y)
  ctx.lineTo(x+W, y)
  ctx.lineTo(x+W, y+H)
  ctx.lineTo(x, y+H)
  ctx.closePath()
  ctx.clip()
  paperize()
  let mult = 0.6 + Math.random()/3
  scriptAt(x+W*0.6, y+H*mult, 3*W/24,"#0000dd",0.3,canvas)
  let funs = shuffle(["schröder_staircaseAt", "cool_s_At","neckerchairAt","necker_correctedAt", "perspectiveAt"])
  window [funs[0]] (x+W/24,y+1*H/24,W*0.3,"#0000dd",18)
  window [funs[1]] (x+4.5*W/24,y+8*H/24,W*0.3,"#0000dd",18)
  window [funs[2]] (x+W/24,y+16*H/24,W*0.3,"#0000dd",18)
  ctx.restore()
  //let f = randomPick(["schröder_staircaseAt", "cool_s_At","neckerchairAt","necker_correctedAt", "perspectiveAt"])
  ctx.fillStyle = savedF
  ctx.strokeStyle = savedS
}

function necker_correctedAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/200
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, d = W/20, angle = pet(180)
  let i = 0
  for (; i < 4; i++) {
    //1
    //1
  ctx.beginPath()
  p = rotatePoint(x+0*W/24+pet(d), y+2*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+14*W/24+pet(d), y+2*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+24*W/24+pet(d), y+8*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+24*W/24+pet(d), y+22*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+10*W/24+pet(d), y+22*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+10*W/24+pet(d), y+8*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+24*W/24+pet(d), y+8*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //2
  ctx.beginPath()
  p = rotatePoint(x+10*W/24+pet(d), y+22*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+0*W/24+pet(d), y+16*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+0*W/24+pet(d), y+2*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+10*W/24+pet(d), y+8*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //3
  ctx.beginPath()
  p = rotatePoint(x+0*W/24+pet(d), y+16*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+14*W/24+pet(d), y+16*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+24*W/24+pet(d), y+22*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //4
  ctx.beginPath()
  p = rotatePoint(x+14*W/24+pet(d), y+2*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+14*W/24+pet(d), y+16*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //5
  ctx.beginPath()
  p = rotatePoint(x+14*W/24+pet(d), y+2*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+16*W/24+pet(d), y+2*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+24*W/24+pet(d), y+8*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  if (i === 0)
  ctx.stroke()
  }
}

function perspectiveAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/200
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, d = W/20, angle = pet(18)
  let i = 0
  for (; i < 3; i++) {
  //1
    ctx.beginPath()
    p = rotatePoint(x+16*W/24+pet(d), y+24*H/24+pet(d) ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    p = rotatePoint(x+16*W/24+pet(d), y+16*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+24*W/24+pet(d), y+16*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+24*W/24+pet(d), y+24*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+16*W/24+pet(d), y+24*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    ctx.stroke()

    //2
    ctx.beginPath()
    p = rotatePoint(x+16*W/24+pet(d), y+24*H/24+pet(d) ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    p = rotatePoint(x+10*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+16*W/24+pet(d), y+16*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+10*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+24*W/24+pet(d), y+16*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    ctx.stroke()

    //3
    ctx.beginPath()
    p = rotatePoint(x+10*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    p = rotatePoint(x+6*W/24+pet(d), y+24*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+6*W/24+pet(d), y+16*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+10*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+0*W/24+pet(d), y+16*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+6*W/24+pet(d), y+16*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    ctx.stroke()

    //4
    ctx.beginPath()
    p = rotatePoint(x+0*W/24+pet(d), y+16*H/24+pet(d) ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    p = rotatePoint(x+0*W/24+pet(d), y+24*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+6*W/24+pet(d), y+24*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    ctx.stroke()

    //5
    ctx.beginPath()
    p = rotatePoint(x+10*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    p = rotatePoint(x+16*W/24+pet(d), y+8*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+24*W/24+pet(d), y+8*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+10*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+16*W/24+pet(d), y+0*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+16*W/24+pet(d), y+8*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    ctx.stroke()

    //6
    ctx.beginPath()
    p = rotatePoint(x+16*W/24+pet(d), y+0*H/24+pet(d) ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    p = rotatePoint(x+24*W/24+pet(d), y+0*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+24*W/24+pet(d), y+8*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    ctx.stroke()

    //7
    ctx.beginPath()
    p = rotatePoint(x+10*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    p = rotatePoint(x+8*W/24+pet(d), y+8*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+8*W/24+pet(d), y+0*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+10*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+0*W/24+pet(d), y+8*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+8*W/24+pet(d), y+8*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    ctx.stroke()

    //8
    ctx.beginPath()
    p = rotatePoint(x+0*W/24+pet(d), y+8*H/24+pet(d) ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    p = rotatePoint(x+0*W/24+pet(d), y+0*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+8*W/24+pet(d), y+0*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    ctx.stroke()

    //9
    ctx.beginPath()
    p = rotatePoint(x+0*W/24+pet(d), y+16*H/24+pet(d) ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    p = rotatePoint(x+8*W/24+pet(d), y+16*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+8*W/24+pet(d), y+24*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+0*W/24+pet(d), y+24*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+0*W/24+pet(d), y+24*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+8*W/24+pet(d), y+24*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+10*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+8*W/24+pet(d), y+16*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    ctx.stroke()
  }
}

function cool_s_At (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/200
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, d = W/20, angle = pet(18)
  x -= 3*W/24
  let i = 0
  for (; i < 4; i++) {
    //7 cross out
    ctx.lineWidth /= 2
  ctx.beginPath()
  p = rotatePoint(x+12*W/24+pet(d), y+11*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+13*W/24+pet(d), y+9*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+13*W/24+pet(d), y+11*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+14*W/24+pet(d), y+9*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+14*W/24+pet(d), y+11*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+15*W/24+pet(d), y+9*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+15*W/24+pet(d), y+11*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+16*W/24+pet(d), y+9*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()
  ctx.lineWidth *= 2
    //1
    ctx.beginPath()
    p = rotatePoint(x+12*W/24+pet(d), y+4*H/24+pet(d) ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    p = rotatePoint(x+12*W/24+pet(d), y+10*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+15*W/24+pet(d), y+10*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+15*W/24+pet(d), y+4*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+12*W/24+pet(d), y+0*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+9*W/24+pet(d), y+4*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+9*W/24+pet(d), y+10*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+12*W/24+pet(d), y+14*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+9*W/24+pet(d), y+14*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+9*W/24+pet(d), y+20*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+12*W/24+pet(d), y+24*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+15*W/24+pet(d), y+20*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+15*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+12*W/24+pet(d), y+9*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+15*W/24+pet(d), y+9*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+15*W/24+pet(d), y+4*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+18*W/24+pet(d), y+4*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+18*W/24+pet(d), y+9*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+15*W/24+pet(d), y+9*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    ctx.stroke()

    //2
    ctx.beginPath()
    p = rotatePoint(x+12*W/24+pet(d), y+0*H/24+pet(d) ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    p = rotatePoint(x+15*W/24+pet(d), y+0*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+18*W/24+pet(d), y+4*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    ctx.stroke()

    //3
    ctx.beginPath()
    p = rotatePoint(x+12*W/24+pet(d), y+14*H/24+pet(d) ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    p = rotatePoint(x+12*W/24+pet(d), y+20*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    ctx.stroke()

    //4
    ctx.beginPath()
    p = rotatePoint(x+15*W/24+pet(d), y+9*H/24+pet(d) ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    p = rotatePoint(x+18*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+18*W/24+pet(d), y+20*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+15*W/24+pet(d), y+24*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+12*W/24+pet(d), y+24*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    ctx.stroke()

    //5
    ctx.beginPath()
    p = rotatePoint(x+15*W/24+pet(d), y+20*H/24+pet(d) ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    p = rotatePoint(x+18*W/24+pet(d), y+20*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    ctx.stroke()

    //6
    ctx.beginPath()
    p = rotatePoint(x+15*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    p = rotatePoint(x+18*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    ctx.stroke()
  }
}

function neckerchairAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/200
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, d = W/20, angle = pet(18)
  let i = 0
  //1
  for (; i < 3; i++) {
    ctx.beginPath()
    p = rotatePoint(x+10*W/24+pet(d), y+24*H/24+pet(d) ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    p = rotatePoint(x+10*W/24+pet(d), y+14*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+22*W/24+pet(d), y+14*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+22*W/24+pet(d), y+24*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    ctx.stroke()

    //2
    ctx.beginPath()
    p = rotatePoint(x+10*W/24+pet(d), y+14*H/24+pet(d) ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    p = rotatePoint(x+6*W/24+pet(d), y+10*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+18*W/24+pet(d), y+10*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+22*W/24+pet(d), y+14*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    ctx.stroke()

    //3
    ctx.beginPath()
    p = rotatePoint(x+6*W/24+pet(d), y+10*H/24+pet(d) ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    p = rotatePoint(x+6*W/24+pet(d), y+20*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    ctx.stroke()

    //4
    ctx.beginPath()
    p = rotatePoint(x+18*W/24+pet(d), y+10*H/24+pet(d) ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    p = rotatePoint(x+18*W/24+pet(d), y+20*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    ctx.stroke()

    //5
    ctx.beginPath()
    p = rotatePoint(x+6*W/24+pet(d), y+10*H/24+pet(d) ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    p = rotatePoint(x+6*W/24+pet(d), y+0*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+18*W/24+pet(d), y+0*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+18*W/24+pet(d), y+10*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    ctx.stroke()
  }
}

function schröder_apos_s_staircaseAt (x,y,W,color, a) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/150
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, d = W/80, angle = 0
  //1
  let i = 0
  for (; i < 3; i++) {
     //1
  ctx.beginPath()
  p = rotatePoint(x+0*W/24+pet(d), y+8*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+4*W/24+pet(d), y+8*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+4*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+8*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+8*W/24+pet(d), y+16*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+12*W/24+pet(d), y+16*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+12*W/24+pet(d), y+20*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+16*W/24+pet(d), y+20*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+16*W/24+pet(d), y+24*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+20*W/24+pet(d), y+24*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+0*W/24+pet(d), y+24*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+0*W/24+pet(d), y+8*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //2
  ctx.beginPath()
  p = rotatePoint(x+24*W/24+pet(d), y+16*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+20*W/24+pet(d), y+16*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+20*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+16*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+16*W/24+pet(d), y+8*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+12*W/24+pet(d), y+8*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+12*W/24+pet(d), y+4*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+8*W/24+pet(d), y+4*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+8*W/24+pet(d), y+0*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+4*W/24+pet(d), y+0*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+24*W/24+pet(d), y+0*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+24*W/24+pet(d), y+16*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //3
  ctx.beginPath()
  p = rotatePoint(x+20*W/24+pet(d), y+24*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+24*W/24+pet(d), y+16*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //4
  ctx.beginPath()
  p = rotatePoint(x+20*W/24+pet(d), y+16*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+16*W/24+pet(d), y+24*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //5
  ctx.beginPath()
  p = rotatePoint(x+16*W/24+pet(d), y+20*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+20*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //6
  ctx.beginPath()
  p = rotatePoint(x+12*W/24+pet(d), y+20*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+16*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //7
  ctx.beginPath()
  p = rotatePoint(x+16*W/24+pet(d), y+8*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+12*W/24+pet(d), y+16*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //8
  ctx.beginPath()
  p = rotatePoint(x+8*W/24+pet(d), y+16*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+12*W/24+pet(d), y+8*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //9
  ctx.beginPath()
  p = rotatePoint(x+12*W/24+pet(d), y+4*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+8*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //10
  ctx.beginPath()
  p = rotatePoint(x+4*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+8*W/24+pet(d), y+4*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //11
  ctx.beginPath()
  p = rotatePoint(x+8*W/24+pet(d), y+0*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+4*W/24+pet(d), y+8*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //12
  ctx.beginPath()
  p = rotatePoint(x+0*W/24+pet(d), y+8*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+4*W/24+pet(d), y+0*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()
  }
}

function schröder_staircaseAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/150
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, d = W/20, angle = pet(18)
  //1
  let i = 0
  for (; i < 3; i++) {
     //1
  ctx.beginPath()
  p = rotatePoint(x+0*W/24+pet(d), y+8*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+4*W/24+pet(d), y+8*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+4*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+8*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+8*W/24+pet(d), y+16*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+12*W/24+pet(d), y+16*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+12*W/24+pet(d), y+20*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+16*W/24+pet(d), y+20*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+16*W/24+pet(d), y+24*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+20*W/24+pet(d), y+24*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+0*W/24+pet(d), y+24*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+0*W/24+pet(d), y+8*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //2
  ctx.beginPath()
  p = rotatePoint(x+24*W/24+pet(d), y+16*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+20*W/24+pet(d), y+16*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+20*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+16*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+16*W/24+pet(d), y+8*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+12*W/24+pet(d), y+8*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+12*W/24+pet(d), y+4*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+8*W/24+pet(d), y+4*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+8*W/24+pet(d), y+0*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+4*W/24+pet(d), y+0*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+24*W/24+pet(d), y+0*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+24*W/24+pet(d), y+16*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //3
  ctx.beginPath()
  p = rotatePoint(x+20*W/24+pet(d), y+24*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+24*W/24+pet(d), y+16*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //4
  ctx.beginPath()
  p = rotatePoint(x+20*W/24+pet(d), y+16*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+16*W/24+pet(d), y+24*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //5
  ctx.beginPath()
  p = rotatePoint(x+16*W/24+pet(d), y+20*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+20*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //6
  ctx.beginPath()
  p = rotatePoint(x+12*W/24+pet(d), y+20*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+16*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //7
  ctx.beginPath()
  p = rotatePoint(x+16*W/24+pet(d), y+8*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+12*W/24+pet(d), y+16*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //8
  ctx.beginPath()
  p = rotatePoint(x+8*W/24+pet(d), y+16*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+12*W/24+pet(d), y+8*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //9
  ctx.beginPath()
  p = rotatePoint(x+12*W/24+pet(d), y+4*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+8*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //10
  ctx.beginPath()
  p = rotatePoint(x+4*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+8*W/24+pet(d), y+4*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //11
  ctx.beginPath()
  p = rotatePoint(x+8*W/24+pet(d), y+0*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+4*W/24+pet(d), y+8*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //12
  ctx.beginPath()
  p = rotatePoint(x+0*W/24+pet(d), y+8*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+4*W/24+pet(d), y+0*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()
  }
}

function requirementsAt (x,y,W,color,INVERT) {
  if (INVERT)
    requirements1At(x,y,W,color)
  else
    requirements2At(x,y,W,color)
}

function requirements1At (x,y,W,color) { // reject
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  let f = randomPick(atList)
  window [f] (x,y,W,color)

  ctx.fillStyle = "#000000"
  ctx.font = "Arial "+(W*0.05)+"pt"

  //1
  ctx.beginPath()
  ctx.moveTo(x+3*W/24+pet(d), y+3*H/24+pet(d))
  ctx.lineTo(x+21*W/24+pet(d), y+3*H/24+pet(d))
  ctx.lineTo(x+21*W/24+pet(d), y+21*H/24+pet(d))
  ctx.lineTo(x+3*W/24+pet(d), y+21*H/24+pet(d))
  ctx.lineTo(x+3*W/24+pet(d), y+3*H/24+pet(d))
  ctx.fillStyle = "#ffffff"
  ctx.fill()
  ctx.stroke()
 ctx.fillStyle = "#000000"
  ctx.font = ""+(W*0.03)+"pt Arial"

  ctx.fillText("This card doesn't currently",+x+6*W/24+pet(d), y+5*H/24+pet(d))
  ctx.fillText("meet Windows 11 requirements.",+x+6*W/24+pet(d), y+6.6*H/24+pet(d))

  redStopAt(x+3.2*W/24,y+3.2*H/24,1.5*W/24,color)
  //2
  ctx.fillStyle = "#4875D1"
  ctx.beginPath()
  ctx.moveTo(x+4*W/24+pet(d), y+18*H/24+pet(d))
  ctx.lineTo(x+4*W/24+pet(d), y+20*H/24+pet(d))
  ctx.lineTo(x+11*W/24+pet(d), y+20*H/24+pet(d))
  ctx.lineTo(x+11*W/24+pet(d), y+18*H/24+pet(d))
  ctx.lineTo(x+4*W/24+pet(d), y+18*H/24+pet(d))
  ctx.fill()
  ctx.font = ""+(W*0.025)+"pt Arial"

  ctx.fillStyle = "#ffffff"
  ctx.fillText("Remnd me later", x+4.5*W/24+pet(d), y+19.25*H/24+pet(d))

  //3
  ctx.fillStyle = "#4875D1"
  ctx.beginPath()
  ctx.moveTo(x+13*W/24+pet(d), y+18*H/24+pet(d))
  ctx.lineTo(x+13*W/24+pet(d), y+20*H/24+pet(d))
  ctx.lineTo(x+20*W/24+pet(d), y+20*H/24+pet(d))
  ctx.lineTo(x+20*W/24+pet(d), y+18*H/24+pet(d))
  ctx.lineTo(x+13*W/24+pet(d), y+18*H/24+pet(d))
  ctx.fill()
  ctx.fillStyle = "#ffffff"
  ctx.fillText("Learn more", x+14.5*W/24+pet(d), y+19.25*H/24+pet(d))
  //4
  ctx.beginPath()
  ctx.moveTo(x+4*W/24+pet(d), y+4*H/24+pet(d))
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+6*W/24+pet(d), y+5*H/24+pet(d))
  ctx.stroke()

  ctx.strokeStyle = "#000000"
  ctx.beginPath()
  ctx.moveTo(x+19.5*W/24+pet(d), y+3.5*H/24+pet(d))
  ctx.lineTo(x+20.5*W/24+pet(d), y+4.5*H/24+pet(d))
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+19.5*W/24+pet(d), y+4.5*H/24+pet(d))
  ctx.lineTo(x+20.5*W/24+pet(d), y+3.5*H/24+pet(d))
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+19*W/24+pet(d), y+16*H/24+pet(d))
  ctx.lineTo(x+20*W/24+pet(d), y+16*H/24+pet(d))
  ctx.lineTo(x+20*W/24+pet(d), y+7.5*H/24+pet(d))
  ctx.lineTo(x+19*W/24+pet(d), y+7.5*H/24+pet(d))
  ctx.lineTo(x+19*W/24+pet(d), y+16*H/24+pet(d))
  ctx.fillStyle = "#eeeeee"
  ctx.fill()

  //11
  ctx.beginPath()
  ctx.moveTo(x+19*W/24+pet(d), y+9*H/24+pet(d))
  ctx.lineTo(x+19*W/24+pet(d), y+11*H/24+pet(d))
  ctx.lineTo(x+20*W/24+pet(d), y+11*H/24+pet(d))
  ctx.lineTo(x+20*W/24+pet(d), y+9*H/24+pet(d))
  ctx.lineTo(x+19*W/24+pet(d), y+9*H/24+pet(d))
  ctx.fillStyle = "#cccccc"
  ctx.fill()
  redStopAt(x+6*W/24,y+8.7*H/24,1*W/24,color)
  redStopAt(x+6*W/24,y+10.7*H/24,1*W/24,color)
  redStopAt(x+6*W/24,y+12.7*H/24,1*W/24,color)
  redStopAt(x+6*W/24,y+14.7*H/24,1*W/24,color)
  ctx.fillStyle = "#000000"
  ctx.font = ""+(W*0.02)+"pt Arial"

  ctx.fillText("Not fast enough.",x+7.6*W/24,y+9.5*H/24)
  ctx.fillText("Not smart enough.",x+7.6*W/24,y+11.5*H/24)
  ctx.fillText("Not pretty enough.",x+7.6*W/24,y+13.5*H/24)
  ctx.fillText("Just kinda meh.",x+7.6*W/24,y+15.5*H/24)

}

function requirements2At (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  let f = randomPick(atList)
  window [f] (x,y,W,color)
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  //1
  ctx.fillStyle = "#ffffff"
  ctx.beginPath()
  ctx.moveTo(x+0*W/24+pet(d), y+6*H/24+pet(d))
  ctx.lineTo(x+24*W/24+pet(d), y+6*H/24+pet(d))
  ctx.lineTo(x+24*W/24+pet(d), y+18*H/24+pet(d))
  ctx.lineTo(x+0*W/24+pet(d), y+18*H/24+pet(d))
  ctx.lineTo(x+0*W/24+pet(d), y+6*H/24+pet(d))
  ctx.fill()
  //ctx.stroke()
  ctx.fillStyle = "#000000"
  ctx.font = ""+(W*0.03)+"pt Arial"
  ctx.fillText("This card requires Windows 11.",+x+4*W/24+pet(d), y+11*H/24+pet(d))
  //2\ light gray fill
  ctx.beginPath()
  ctx.moveTo(x+0*W/24+pet(d), y+14*H/24+pet(d))
  ctx.lineTo(x+24*W/24+pet(d), y+14*H/24+pet(d))
  ctx.lineTo(x+24*W/24+pet(d), y+18*H/24+pet(d))
  ctx.lineTo(x+0*W/24+pet(d), y+18*H/24+pet(d))
  ctx.lineTo(x+0*W/24+pet(d), y+14*H/24+pet(d))
  ctx.fillStyle = "#cccccc"
  ctx.fill()

  ctx.beginPath()
  ctx.moveTo(x+0*W/24+pet(d), y+6*H/24+pet(d))
  ctx.lineTo(x+24*W/24+pet(d), y+6*H/24+pet(d))
  ctx.lineTo(x+24*W/24+pet(d), y+18*H/24+pet(d))
  ctx.lineTo(x+0*W/24+pet(d), y+18*H/24+pet(d))
  ctx.lineTo(x+0*W/24+pet(d), y+6*H/24+pet(d))
  ctx.stroke()

  //OK button
  ctx.beginPath()
  ctx.moveTo(x+16*W/24+pet(d), y+15*H/24+pet(d))
  ctx.lineTo(x+16*W/24+pet(d), y+17*H/24+pet(d))
  ctx.lineTo(x+23*W/24+pet(d), y+17*H/24+pet(d))
  ctx.lineTo(x+23*W/24+pet(d), y+15*H/24+pet(d))
  ctx.lineTo(x+16*W/24+pet(d), y+15*H/24+pet(d))
  ctx.fill()
  ctx.strokeStyle = "#4875D1" 
  ctx.lineWidth *=1.2
  ctx.stroke()
  ctx.lineWidth /=1.2
  ctx.fillStyle = "#000000"
  
  ctx.font = ""+(W*0.03)+"pt Arial"
  ctx.fillText("OK",+x+19*W/24+pet(d), y+16.25*H/24+pet(d))

  //4 "Error"
  ctx.fillStyle = "#000000"
  ctx.font = ""+(W*0.03)+"pt Arial"
  ctx.fillText("Error", x+0.5*W/24+pet(d), y+7*H/24+pet(d))

  //5
  redStopAt(x+1*W/24+pet(d), y+9.5*H/24+pet(d),2*W/24, color)

  /8
  ctx.strokeStyle = "#000000"
  ctx.beginPath()
  ctx.moveTo(x+22.5*W/24+pet(d), y+6.5*H/24+pet(d))
  ctx.lineTo(x+23.5*W/24+pet(d), y+7.5*H/24+pet(d))
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+22.5*W/24+pet(d), y+7.5*H/24+pet(d))
  ctx.lineTo(x+23.5*W/24+pet(d), y+6.5*H/24+pet(d))
  ctx.stroke()
}

function redStopAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+6*W/24+pet(d), y+23*H/24+pet(d))
  ctx.lineTo(x+18*W/24+pet(d), y+23*H/24+pet(d))
  ctx.lineTo(x+23*W/24+pet(d), y+18*H/24+pet(d))
  ctx.lineTo(x+23*W/24+pet(d), y+6*H/24+pet(d))
  ctx.lineTo(x+18*W/24+pet(d), y+1*H/24+pet(d))
  ctx.lineTo(x+6*W/24+pet(d), y+1*H/24+pet(d))
  ctx.lineTo(x+1*W/24+pet(d), y+6*H/24+pet(d))
  ctx.lineTo(x+1*W/24+pet(d), y+18*H/24+pet(d))
  ctx.lineTo(x+6*W/24+pet(d), y+23*H/24+pet(d))
  ctx.fillStyle = "#ff0000"
  ctx.fill()

  //2
  ctx.strokeStyle = "#ffffff"
  ctx.lineWidth = W/12
  ctx.beginPath()
  ctx.moveTo(x+6*W/24+pet(d), y+6*H/24+pet(d))
  ctx.lineTo(x+18*W/24+pet(d), y+18*H/24+pet(d))
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+6*W/24+pet(d), y+18*H/24+pet(d))
  ctx.lineTo(x+18*W/24+pet(d), y+6*H/24+pet(d))
  ctx.stroke()
}

function zodiacAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = [], d = W/24
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/100 
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  // see natal
  let angle = 0, inc = Math.PI*2/12
  let i = 0, j = 0, R = W/2
  let cx = x + W/2, cy = y + H/2
  let x2, y2, x0, y0
  for (; j < 2; j++) {
    i = 0
    for (; i < 12; i++) {
      x0 = (R) * Math.cos(angle)+cx
      y0 = (R) * Math.sin(angle)+cy
      x2 = (R/2) * Math.cos(angle)+cx
      y2 = (R/2) * Math.sin(angle)+cy
      ctx.beginPath()
      ctx.moveTo(x2+pet(d/2),y2+pet(d/2))
      ctx.lineTo(x0+pet(d/2),y0+pet(d/2))
      ctx.stroke()
      angle += inc
    }
    ctx.beginPath()
    ctx.arc(cx+pet(d/2),cy+pet(d/2),R/2,0,2*Math.PI)
    ctx.stroke()
  }
  i = 0
  angle += inc/2
  let T = Math.random()>0.5
  let functions = shuffle(["stainAt","swimming_in_circlesAt", "lithomancyAt", "phaseAt", "piechartAt", 
    "virusAt","heads_or_tailsAt","magic_8_ballAt","peace_symbolAt","oocyteAt","snakeAt",
    "tidally_lockedAt","vinylAt","coreAt", "sigilAt"])
  R *= 0.8
  document.getElementById("featuresize").value /= 6
  for (; i < 12; i++) {
    x0 = (R) * Math.cos(angle)+cx
    y0 = (R) * Math.sin(angle)+cy
    f = functions[i % functions.length]
   // j = 0
   // for (; j < 1; j++) {
      window[f](x0-W/10+pet(d/5),y0-W/10+pet(d/5),W/5,color,T)
    //}
    angle += inc
  }
  document.getElementById("featuresize").value *= 6
  ctx.fillStyle = color
  angle = Math.random()*6.2
  R *= 1.3
  ctx.beginPath()
  ctx.arc(cx,cy,R,angle,angle+Math.PI)
  ctx.globalAlpha /= 4
  ctx.fill()
  ctx.globalAlpha *= 4

  let planets = (["\u2640","\u263F","\u2642", "\u2643", 
    "\u2644", "\u2609", "\u263D"])
  let fs = W*0.07
  i = 0, R = W/6
  for (; i < planets.length; i++) {
    //angle += 0.32
    if (planets[i] === "\u2640" || planets[i] === "\u2642")
      fs = W * 0.1
    else
      fs = W * 0.07
    ctx.font = fs+"pt serif"
    angle = Math.random() * Math.PI*2
    x0 = (R) * Math.cos(angle)+cx
    y0 = (R) * Math.sin(angle)+cy
    ctx.fillText(planets[i],x0-18,y0+18)
  }
}

function story_diagramAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = [], d = W/60
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/100 
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let functions = shuffle(["flameAt","treasureAt", "bribeAt", "bent_figureAt", "spiderAt", "evidenceAt","birdAt","gunAt", "bird_cageAt","figureRAt", "figureRAt", "mailboxAt", "figureRAt", "victim1At", "heartAt", "envelopeAt","houseAt","keyAt"])
  let j = 0
  for (; j < 3; j++) {
    //1
    ctx.beginPath()
    ctx.moveTo(x+0*W/24+pet(d), y+6*H/24+pet(d))
    ctx.lineTo(x+24*W/24+pet(d), y+6*H/24+pet(d))
    ctx.stroke()

    //2
    ctx.beginPath()
    ctx.moveTo(x+8*W/24+pet(d), y+4*H/24+pet(d))
    ctx.lineTo(x+8*W/24+pet(d), y+6*H/24+pet(d))
    ctx.stroke()

    //3
    ctx.beginPath()
    ctx.moveTo(x+17*W/24+pet(d), y+4*H/24+pet(d))
    ctx.lineTo(x+18*W/24+pet(d), y+6*H/24+pet(d))
    ctx.stroke()

    //4
    ctx.beginPath()
    ctx.moveTo(x+9*W/24+pet(d), y+6*H/24+pet(d))
    ctx.lineTo(x+10*W/24+pet(d), y+10*H/24+pet(d))
    ctx.lineTo(x+15*W/24+pet(d), y+10*H/24+pet(d))
    ctx.stroke()

    //5
    ctx.beginPath()
    ctx.moveTo(x+19*W/24+pet(d), y+6*H/24+pet(d))
    ctx.lineTo(x+20*W/24+pet(d), y+10*H/24+pet(d))
    ctx.lineTo(x+24*W/24+pet(d), y+10*H/24+pet(d))
    ctx.stroke()

    //6
    ctx.beginPath()
    ctx.moveTo(x+12*W/24+pet(d), y+10*H/24+pet(d))
    ctx.lineTo(x+15*W/24+pet(d), y+13*H/24+pet(d))
    ctx.stroke()

    //7
    ctx.beginPath()
    ctx.moveTo(x+3*W/24+pet(d), y+15*H/24+pet(d))
    ctx.lineTo(x+23*W/24+pet(d), y+15*H/24+pet(d))
    ctx.stroke()

    //8
    ctx.beginPath()
    ctx.moveTo(x+4*W/24+pet(d), y+15*H/24+pet(d))
    ctx.lineTo(x+5*W/24+pet(d), y+19*H/24+pet(d))
    ctx.lineTo(x+10*W/24+pet(d), y+19*H/24+pet(d))
    ctx.stroke()

    //9
    ctx.beginPath()
    ctx.moveTo(x+8*W/24+pet(d), y+13*H/24+pet(d))
    ctx.lineTo(x+8*W/24+pet(d), y+15*H/24+pet(d))
    ctx.stroke()

    //10
    ctx.beginPath()
    ctx.moveTo(x+12*W/24+pet(d), y+15*H/24+pet(d))
    ctx.lineTo(x+13*W/24+pet(d), y+19*H/24+pet(d))
    ctx.lineTo(x+18*W/24+pet(d), y+19*H/24+pet(d))
    ctx.stroke()

    //11
    ctx.beginPath()
    ctx.moveTo(x+18*W/24+pet(d), y+22*H/24+pet(d))
    ctx.lineTo(x+15*W/24+pet(d), y+19*H/24+pet(d))
    ctx.stroke()

    //12
    ctx.beginPath()
    ctx.moveTo(x+16*W/24+pet(d), y+15*H/24+pet(d))
    ctx.lineTo(x+17*W/24+pet(d), y+13*H/24+pet(d))
    ctx.stroke()

    //13
    ctx.beginPath()
    ctx.moveTo(x+20*W/24+pet(d), y+15*H/24+pet(d))
    ctx.lineTo(x+21*W/24+pet(d), y+19*H/24+pet(d))
    ctx.stroke()
    //35
    ctx.beginPath()
    ctx.moveTo(x+1*W/24+pet(d), y+6*H/24+pet(d))
    ctx.lineTo(x+3*W/24+pet(d), y+15*H/24+pet(d))
    ctx.stroke()
    //4
    ctx.beginPath()
    ctx.moveTo(x+6*W/24+pet(d), y+19*H/24+pet(d))
    ctx.lineTo(x+6*W/24+pet(d), y+21*H/24+pet(d))
    ctx.stroke()
    //5
    ctx.beginPath()
    ctx.moveTo(x+4*W/24+pet(d), y+6*H/24+pet(d))
    ctx.lineTo(x+4*W/24+pet(d), y+8*H/24+pet(d))
    ctx.stroke()

    // figures
    document.getElementById("featuresize").value /= 4
    d /= 2
    let i = 0
    window [functions[i++%functions.length]] (x+1*W/24+pet(d), y+2*H/24+pet(d), 3*W/24, color)
    window [functions[i++%functions.length]] (x+9*W/24+pet(d), y+2*H/24+pet(d), 3*W/24, color)
    window [functions[i++%functions.length]] (x+13.6*W/24+pet(d), y+2*H/24+pet(d), 3*W/24, color)
    window [functions[i++%functions.length]] (x+15*W/24+pet(d), y+7*H/24+pet(d), 3*W/24, color)
    window [functions[i++%functions.length]] (x+21*W/24+pet(d), y+7*H/24+pet(d), 3*W/24, color)
    window [functions[i++%functions.length]] (x+3*W/24+pet(d), y+11*H/24+pet(d), 3*W/24, color)
    window [functions[i++%functions.length]] (x+5*W/24+pet(d), y+7*H/24+pet(d), 3*W/24, color)
    window [functions[i++%functions.length]] (x+7*W/24+pet(d), y+20*H/24+pet(d), 3*W/24, color)
    window [functions[i++%functions.length]] (x+12*W/24+pet(d), y+20*H/24+pet(d), 3*W/24, color)

    window [functions[i++%functions.length]] (x+19*W/24+pet(d), y+20*H/24+pet(d), 3*W/24, color)
    window [functions[i++%functions.length]] (x+17.3*W/24+pet(d), y+11*H/24+pet(d), 3*W/24, color)
    window [functions[i++%functions.length]] (x+6*W/24+pet(d), y+16*H/24+pet(d), 3*W/24, color)
    window [functions[i++%functions.length]] (x+15*W/24+pet(d), y+16*H/24+pet(d), 3*W/24, color)
    window [functions[i++%functions.length]] (x+21*W/24+pet(d), y+11*H/24+pet(d), 3*W/24, color)
    window [functions[i++%functions.length]] (x+21*W/24+pet(d), y+16*H/24+pet(d), 3*W/24, color)
    window [functions[i++%functions.length]] (x+20*W/24+pet(d), y+2*H/24+pet(d), 3*W/24, color)
    window [functions[i++%functions.length]] (x+10*W/24+pet(d), y+11*H/24+pet(d), 3*W/24, color)
    document.getElementById("featuresize").value *= 4
  }
}

function captchaAt (x,y,W,color,INVERT) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  let savedF = ctx.fillStyle
  ctx.fillStyle = color
  x+= 3*W/24
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let w = (16*W/24)/3, p = w/2
  let functions = shuffle(["traffic_lightAt","traffic_lightAt","stay_in_your_laneAt",
    "houseAt","swingAt","racetrackAt","uphillAt","traffic_lightAt","bridgeAt","dormerAt",
    "ladderAt","suburbsAt"])
  
  // top fill header rect
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+0*H/24)
  ctx.lineTo(x+17*W/24, y+0*H/24)
  ctx.lineTo(x+17*W/24, y+w)
  ctx.lineTo(x+1*W/24, y+w)
  ctx.lineTo(x+1*W/24, y+0*H/24)
  ctx.fill()
  ctx.stroke()
  ctx.fillStyle = savedF
  ctx.font = (W*0.03) +"pt Arial"
  ctx.fillText("Select all squares with a", x+1.5*W/24, y+1.2*H/24)
  ctx.font = "800 "+(W*0.04) +"pt Arial"
  ctx.fillText("traffic light", x+1.5*W/24, y+2.9*H/24)
  ctx.font = (W*0.03) +"pt Arial"
  ctx.fillText("Then select Verify.", x+1.5*W/24, y+4.5*H/24)
   //1
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+4*w)
  ctx.lineTo(x+1*W/24, y+24*H/24)
  ctx.lineTo(x+17*W/24, y+24*H/24)
  ctx.lineTo(x+17*W/24, y+4*w)
  ctx.lineTo(x+1*W/24, y+4*w)
  ctx.stroke()

  ctx.fillStyle = color
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+22*H/24)
  ctx.lineTo(x+12*W/24, y+23.5*H/24)
  ctx.lineTo(x+16.5*W/24, y+23.5*H/24)
  ctx.lineTo(x+16.5*W/24, y+22*H/24)
  ctx.lineTo(x+12*W/24, y+22*H/24)
  ctx.fill()
  ctx.fillStyle = savedF
  ctx.fillText("Verify",x+13.3*W/24, y+23*H/24)
  ctx.beginPath()
  ctx.arc(x+2.6*W/24, y+22.7*H/24, 0.75*W/24, 1.8*Math.PI, 1.4*Math.PI)
  ctx.stroke()
  headphonesAt(x+4*W/24, y+22*H/24, 1.8*W/24,color)
  ctx.beginPath()
  ctx.moveTo(x+7.0*W/24, y+22*H/24)
  ctx.lineTo(x+7.0*W/24, y+22.2*H/24)
  ctx.moveTo(x+7.0*W/24, y+22.6*H/24)
  ctx.lineTo(x+7.0*W/24, y+23.3*H/24)
  ctx.stroke()
  // 3X3 cells
  let i = 0, j = 0
  let y0 = y, x0 = x
  for (; i < 9; i++) {
    if (i > 0 && i % 3 === 0) {
      y += w
      x = x0
    }
    ctx.save()
    ctx.beginPath()
    ctx.moveTo(x+W/24, y+w)
    ctx.lineTo(x+w+W/24, y+w)
    ctx.lineTo(x+w+W/24, y+w+w)
    ctx.lineTo(x+W/24, y+w+w)
    ctx.lineTo(x+W/24, y+w)
    ctx.stroke()
    ctx.clip()
    window [functions[i%functions.length]] (x+pet(p), y+w+pet(p), w*1.2+pet(p*1.5), color, Math.random() > 0.5)
    ctx.restore()
    x += w
  }
}

function headphonesAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  //1
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+10*H/24)
  cpx = x+4*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+0*H/24)
  cpx = x+20*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+10*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+10*H/24)
  cpx = x+6*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+10*H/24)
  cpx = x+7*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+11*H/24)
  cpx = x+7*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+17*H/24)
  cpx = x+7*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+18*H/24)
  cpx = x+4*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+18*H/24)
  cpx = x+3*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+17*H/24)
  cpx = x+3*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+11*H/24)
  cpx = x+3*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+10*H/24)
  ctx.fill()

  //3
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+10*H/24)
  cpx = x+21*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+11*H/24)
  cpx = x+21*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+17*H/24)
  cpx = x+21*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+18*H/24)
  cpx = x+18*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+18*H/24)
  cpx = x+17*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+17*H/24)
  cpx = x+17*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+11*H/24)
  cpx = x+17*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+10*H/24)
  cpx = x+20*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+10*H/24)
  ctx.fill()
}
function cookie_policyAt (x,y,W,color,INVERT) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = [], d = W/48
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  let savedF = ctx.fillStyle
  ctx.fillStyle = savedF
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let f = randomPick(atList)
  window [f] (x,y,W,color)
  ctx.lineWidth = 3// + document.getElementById("featuresize").value/50
 y -= 4*H/24
  ctx.fillStyle = savedF
//4
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+10*H/24)
  ctx.lineTo(x+24*W/24, y+10*H/24)
  ctx.lineTo(x+24*W/24, y+23*H/24)
  ctx.lineTo(x+0*W/24, y+23*H/24)
  ctx.lineTo(x+0*W/24, y+10*H/24)
  ctx.shadowColor= color
  ctx.shadowBlur = 1.25*W/24
  ctx.shadowOffsetX = 0.15*W/24
  ctx.shadowOffsetY = 0.15*W/24
  ctx.fill() 
  ctx.shadowBlur = 0
  ctx.shadowOffsetX = 0
  ctx.shadowOffsetY = 0
  ctx.stroke() 
  ctx.fillStyle = color

  //1
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+20*H/24)
  ctx.lineTo(x+23*W/24, y+20*H/24)
  ctx.lineTo(x+23*W/24, y+22*H/24)
  ctx.lineTo(x+17*W/24, y+22*H/24)
  ctx.lineTo(x+17*W/24, y+20*H/24)
  if (!INVERT)
    ctx.fill()
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+20*H/24)
  ctx.lineTo(x+1*W/24, y+22*H/24)
  ctx.lineTo(x+7*W/24, y+22*H/24)
  ctx.lineTo(x+7*W/24, y+20*H/24)
  ctx.lineTo(x+1*W/24, y+20*H/24)
  if (INVERT)
    ctx.fill()
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+20*H/24)
  ctx.lineTo(x+9*W/24, y+22*H/24)
  ctx.lineTo(x+15*W/24, y+22*H/24)
  ctx.lineTo(x+15*W/24, y+20*H/24)
  ctx.lineTo(x+9*W/24, y+20*H/24)
  ctx.stroke()
  
  //2
  ctx.font = "bold "+(1*W/24)+"pt Arial"
  ctx.fillStyle = color
  ctx.fillText("We value your privacy",x+1*W/24, y+12*H/24)
  ctx.font = (0.75*W/24)+"pt Arial"
  ctx.fillText("We use cookies to enhance your tarot reading,",x+1*W/24, y+14*H/24)
  ctx.fillText("experience, serve personalized ads, and  ",x+1*W/24, y+15.5*H/24)
  ctx.fillText("analyze our web traffic. By selecting \"Accept all\",",x+1*W/24, y+17*H/24)
  ctx.fillText("you consent to our use of cookies.",x+1*W/24, y+18.5*H/24)
  let w = ctx.measureText("you consent to our use of cookies. ").width
ctx.font = "bold "+(0.75*W/24)+"pt Arial"
  ctx.fillText("Learn more.",x+1*W/24+w, y+18.5*H/24)

  if (!INVERT)
    ctx.fillStyle = savedF
  else
    ctx.fillStyle = color
  ctx.font = (0.7*W/24)+"pt Arial"
  ctx.fillText("Accept all",x+18*W/24, y+21.3*H/24)
  if (INVERT)
    ctx.fillStyle = savedF
  else
    ctx.fillStyle = color
  
  ctx.fillText("Reject all",x+2.2*W/24, y+21.3*H/24)
  ctx.fillStyle = color
  ctx.fillText("Only needed",x+9.3*W/24, y+21.3*H/24)
}

function subscription_requiredAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = [], d = W/48
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  let savedF = ctx.fillStyle
  ctx.fillStyle = savedF
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let f = randomPick(atList)
  window [f] (x,y,W,color)
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  y -= 4*H/24
  //1
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+22*H/24)
  cpx = x+23*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+22*H/24)
  cpx = x+25*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+25*W/24, y+20*H/24)
  cpx = x+25*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+25*W/24, y+12*H/24)
  cpx = x+25*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+10*H/24)
  cpx = x+1*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+10*H/24)
  cpx = x-1*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x-1*W/24, y+12*H/24)
  cpx = x-1*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x-1*W/24, y+20*H/24)
  cpx = x-1*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+22*H/24)
  ctx.fillStyle = savedF
  ctx.shadowColor= color
  ctx.shadowBlur = 0.5*W/24
  ctx.shadowOffsetX = 0.5*W/24
  ctx.shadowOffsetY = 0.5*W/24
  ctx.fill()
  ctx.shadowBlur = 0
  ctx.shadowOffsetX = 0
  ctx.shadowOffsetY = 0
  ctx.lineWidth *= 3
  ctx.stroke()
  ctx.lineWidth /= 3
  
  //2
  ctx.font = (2.2*W/24)+"pt Garamonf"
  ctx.fillStyle = color
  ctx.fillText("Subscribe to see ",x+2*W/24, y+13*H/24)
  ctx.fillText("more of this card.",x+2*W/24, y+16.4*H/24)

  // button
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+21*H/24)
  cpx = x+19*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+21*H/24)
  cpx = x+19*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+18*H/24)
  cpx = x+5*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+18*H/24)
  cpx = x+5*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+21*H/24)
  ctx.fill()
  ctx.fillStyle = savedF
  ctx.font = (1*W/24)+"pt Arial"
  let w = ctx.measureText("SIGN UP NOW").width
  ctx.fillText("SIGN UP NOW",x+W/2-w/2, y+20*H/24)
}

function coordinatesAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = [], d = W/48
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let rx = W/16+Math.random()*W-W/20,
      ry = H/16+Math.random()*H-H/20
    
  let px = 0, py = 0
  px = rx/(W/12) - 6
  py = 6 - ry/(W/12)
  px = Math.round(100*px)/100
  py = Math.round(100*py)/100

  ctx.font = "100 italic "+(W*0.04)+"pt Garamond"
  //1
  let i = 0
  for (; i < 3; i++) {
    ctx.beginPath()
    ctx.moveTo(x+-0.2*W/24+pet(d), y+12*H/24+pet(d))
    cpx = x+12*W/24+pet(d)
    cpy = y+12*H/24+pet(d)
    ctx.quadraticCurveTo(cpx, cpy, x+24.2*W/24+pet(d), y+12*H/24+pet(d))
    ctx.stroke()
    //2
    ctx.beginPath()
    ctx.moveTo(x+12*W/24+pet(d), y+0*H/24+pet(d))
    cpx = x+12*W/24+pet(d)
    cpy = y+12*H/24+pet(d)
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24+pet(d), y+24*H/24+pet(d))
    ctx.stroke()

    apointAt(x+rx+pet(d/2),y+ry+pet(d/2),W/48, color)
    let w = ctx.measureText("("+px+", "+py+")").width
   
    ctx.fillText("("+px+", "+py+")", x+rx+pet(d/3)-w/2, y+ry+1.8*W/24+pet(d/3))
    let j = 0, inc = 2, off = -0.5*W/24
    for (; j < 13; j++) {
      if (j !== 6)
      ticAt(x+(j*inc)*W/24+off+pet(d/2), y+11.2*H/24+pet(d/2), 1.5*W/24+pet(d/2), color)
    }
    j = 0
    for (; j < 13; j++) {
      if (j !== 6)
      vticAt(x+11.5*W/24+pet(d/2), y+(j*inc)*H/24+pet(d/2)+off, 1.5*W/24+pet(d/2), color)
    }
  }
}
function number_lineAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = [], d = W/48
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  let i = 0
  for (; i < 3; i++) {
    ctx.beginPath()
    ctx.moveTo(x+-0.2*W/24+pet(d), y+12*H/24+pet(d))
    cpx = x+12*W/24+pet(d)
    cpy = y+12*H/24+pet(d)
    ctx.quadraticCurveTo(cpx, cpy, x+24.2*W/24+pet(d), y+12*H/24+pet(d))
    ctx.stroke()

    //2
    ctx.beginPath()
    ctx.moveTo(x+12*W/24+pet(d), y+0*H/24+pet(d))
    cpx = x+12*W/24+pet(d)
    cpy = y+12*H/24+pet(d)
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24+pet(d), y+24*H/24+pet(d))
   // ctx.stroke()

    zeroAt(x+11.0*W/24+pet(d/2), y+13.3*H/24+pet(d/2), 1.7*W/24,color)
    //piAt(x+18.3*W/24+pet(d/2), y+7.8*H/24+pet(d/2), 1.7*W/24,color)
    //leaningStrokeAt(x+18.1*W/24+pet(d/2), y+10*H/24+pet(d/2), 1.7*W/24,color)
   // eAt(x+16.5*W/24+pet(d/2), y+7.8*H/24+pet(d/2), 1.7*W/24,color)

    let j = 0, inc = 2, off = -0.5*W/24
    for (; j < 13; j++) {
      ticAt(x+(j*inc)*W/24+off+pet(d/2), y+11.2*H/24+pet(d/2), 1.5*W/24+pet(d/2), color)
    }
  }
}

function leaningStrokeAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let d = W/12
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+16*W/24+pet(d), y+0*H/24+pet(d))
  cpx = x+10*W/24+pet(d)
  cpy = y+12*H/24+pet(d)
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24+pet(d), y+24*H/24+pet(d))
  ctx.stroke()
}

function vticAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = [], d = W/9
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+0*W/24+pet(d), y+12*H/24+pet(d))
  ctx.lineTo(x+24*W/24+pet(d), y+12*H/24+pet(d))
  ctx.stroke()
}
function ticAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = [], d = W/9
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/100
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+11*W/24+pet(d)+pet(d), y+24*H/24+pet(d)+pet(d))
  ctx.lineTo(x+13*W/24+pet(d)+pet(d), y+0*H/24+pet(d)+pet(d))
  ctx.stroke()
}
function zeroAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = [], d = W/9
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/100
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+12*W/24+pet(d), y+24*H/24+pet(d))
  cpx = x+19*W/24+pet(d)
  cpy = y+24*H/24+pet(d)
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+20*W/24+pet(d)
  cpy = y+0*H/24+pet(d)
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24+pet(d), y+0*H/24+pet(d))
  cpx = x+6*W/24+pet(d)
  cpy = y+0*H/24+pet(d)
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+4*W/24+pet(d)
  cpy = y+24*H/24+pet(d)
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24+pet(d), y+24*H/24+pet(d))
  ctx.stroke()
}
function apointAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = [], d = W/3, i = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/100
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+12*W/24+pet(d), y+24*H/24+pet(d))
  cpx = x+22*W/24+pet(d)
  cpy = y+24*H/24+pet(d)
  ctx.quadraticCurveTo(cpx, cpy, x+24*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+24*W/24+pet(d)
  cpy = y+0*H/24+pet(d)
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24+pet(d), y+0*H/24+pet(d))
  cpx = x+2*W/24+pet(d)
  cpy = y+0*H/24+pet(d)
  ctx.quadraticCurveTo(cpx, cpy, x+0*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+0*W/24+pet(d)
  cpy = y+24*H/24+pet(d)
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24+pet(d), y+24*H/24+pet(d))
  ctx.stroke()
}

function iAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = [], d = W/24
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/100
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  //4
  ctx.beginPath()
  ctx.moveTo(x+2*W/24+pet(d), y+8*H/24+pet(d))
  cpx = x+3*W/24+pet(d)
  cpy = y+14*H/24+pet(d)
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24+pet(d), y+20*H/24+pet(d))
  cpx = x+6*W/24+pet(d)
  cpy = y+10*H/24+pet(d)
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24+pet(d), y+3*H/24+pet(d))
  cpx = x+15*W/24+pet(d)
  cpy = y+3*H/24+pet(d)
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24+pet(d), y+3*H/24+pet(d))
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+8*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+10*W/24+pet(d)
  cpy = y+12*H/24+pet(d)
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24+pet(d), y+12*H/24+pet(d))
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+13*W/24+pet(d), y+20*H/24+pet(d))
  cpx = x+15*W/24+pet(d)
  cpy = y+12*H/24+pet(d)
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24+pet(d), y+5*H/24+pet(d))
  cpx = x+16*W/24+pet(d)
  cpy = y+7*H/24+pet(d)
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24+pet(d), y+9*H/24+pet(d))
  ctx.stroke()
}

function sisyphusAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let d = W/40, cx = x+W/2, cy = y+H/2+2*W/24, r = W/3
  lawn_mowerAt(x+7.5*W/24, y, 7.3*W/24, color)
  ctx.beginPath()
  ctx.arc(cx, cy,r,Math.PI*1.6, Math.PI*1.4)
  ctx.stroke()
  let r2 = r*1.3 //rays (see tearsAt)
  let dec = (r2-r)/102

  i = 0, a = Math.PI*1.6, inc = (Math.PI*1.8)/100
  for (; i < 100; i++) {
    ctx.beginPath()
    x1 = cx + r * Math.cos(a)
    y1 = cy + r * Math.sin(a)
    ctx.moveTo(x1, y1) // point on original arc
    x2 = cx + r2 * Math.cos(a)
    y2 = cy + r2 * Math.sin(a)
    r2 -= dec
    ctx.lineTo(x2,y2) // point on arc with larger radius
   
    ctx.stroke()
    a += inc
  }
}


function timelineAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/400
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let d = W/40, i = 0
  let functions = shuffle(["gunAt","lawn_mowerAt","walk_it_backAt","if_you_meet_the_buddhaAt","lampAt"])

  for (; i < 3; i++) {
  //1
    ctx.beginPath()
    ctx.moveTo(x+0*W/24+pet(d), y+12*H/24+pet(d))
    cpx = x+12*W/24+pet(d)
    cpy = y+12*H/24+pet(d)
    ctx.quadraticCurveTo(cpx, cpy, x+24*W/24+pet(d), y+12*H/24+pet(d))
    ctx.stroke()

      //4
    ctx.beginPath()
    ctx.moveTo(x+3*W/24+pet(d/3), y+7*H/24+pet(d))
    ctx.lineTo(x+3*W/24+pet(d), y+11.7*H/24+pet(d/3))
    ctx.stroke()
    dirtyxAt(x+2*W/24+pet(d/2),y+H/2-1*W/24+pet(d/2),2*H/24+pet(d),color)
    ctx.beginPath()
    ctx.moveTo(x+10*W/24+pet(d/3), y+12.3*H/24+pet(d))
    ctx.lineTo(x+10*W/24+pet(d/3), y+16*H/24+pet(d))
    ctx.stroke()
    dirtyxAt(x+9*W/24+pet(d/2),y+H/2-1*W/24+pet(d/2),2*H/24+pet(d/2),color)
    ctx.beginPath()
    ctx.moveTo(x+13*W/24+pet(d/3), y+7*H/24+pet(d/2))
    ctx.lineTo(x+13*W/24+pet(d/3), y+11.6*H/24+pet(d/2))
    ctx.stroke()
    dirtyxAt(x+12*W/24+pet(d/2),y+H/2-1*W/24+pet(d/2),1.7*H/24+pet(d),color)
    ctx.beginPath()
    ctx.moveTo(x+17*W/24+pet(d/2), y+12.4*H/24+pet(d/3))
    ctx.lineTo(x+17*W/24+pet(d/3), y+16*H/24+pet(d/2))
    ctx.stroke()

    ctx.beginPath()
    ctx.moveTo(x+21*W/24+pet(d), y+7*H/24+pet(d))
    ctx.lineTo(x+21*W/24+pet(d), y+11.6*H/24+pet(d))
    ctx.stroke()
    dirtyxAt(x+20*W/24+pet(d/2),y+H/2-1*W/24+pet(d/2),1.7*H/24+pet(d),color)
    d/=2
    document.getElementById("featuresize").value  /= 3  
    dirtyxAt(x+15.2*W/24+pet(d/2),y+H/2-1.8*W/24+pet(d/2),3.2*H/24+pet(d/2),color)
    window [functions[2]](x+0.3*W/24+pet(d), y+1*H/24+pet(d), 6*H/24+pet(d),color)
    window [functions[3]](x+10.5*W/24+pet(d), y+1*H/24+pet(d), 6*H/24+pet(d),color)
    window [functions[4]](x+7.5*W/24+pet(d), y+16*H/24+pet(d), 6*H/24+pet(d),color)
    window [functions[1]](x+14.5*W/24+pet(d), y+16*H/24+pet(d), 6*H/24+pet(d),color)
    window [functions[0]](x+17.7*W/24+pet(d), y+1*H/24+pet(d), 6*H/24+pet(d),color)
    ctx.beginPath()
    ctx.moveTo(x+24*W/24+pet(d), y+10*H/24+pet(d))
    ctx.lineTo(x+24*W/24+pet(d), y+14*H/24+pet(d))
    ctx.stroke()
    d*=2
    document.getElementById("featuresize").value  *= 3  
  }
}

function dirtyxAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let d = W/32
  //1
  ctx.beginPath()
  ctx.moveTo(x+5*W/24+pet(d), y+0*H/24+pet(d))
  ctx.lineTo(x+19*W/24+pet(d), y+24*H/24+pet(d))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+0*W/24+pet(d), y+24*H/24+pet(d))
  ctx.lineTo(x+24*W/24+pet(d), y+0*H/24+pet(d))
  ctx.stroke()
}

function dino4At (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+20*W/24+pet(d), y+14*H/24+pet(d))
  ctx.lineTo(x+19*W/24+pet(d), y+11*H/24+pet(d))
  ctx.lineTo(x+18*W/24+pet(d), y+13*H/24+pet(d))
  ctx.lineTo(x+17*W/24+pet(d), y+10*H/24+pet(d))
  ctx.lineTo(x+16*W/24+pet(d), y+12*H/24+pet(d))
  ctx.lineTo(x+15*W/24+pet(d), y+9*H/24+pet(d))
  ctx.lineTo(x+14*W/24+pet(d), y+11*H/24+pet(d))
  ctx.lineTo(x+13*W/24+pet(d), y+8*H/24+pet(d))
  ctx.lineTo(x+12*W/24+pet(d), y+11*H/24+pet(d))
  ctx.lineTo(x+11*W/24+pet(d), y+9*H/24+pet(d))
  ctx.lineTo(x+10*W/24+pet(d), y+12*H/24+pet(d))
  ctx.lineTo(x+9*W/24+pet(d), y+10*H/24+pet(d))
  ctx.lineTo(x+8*W/24+pet(d), y+13*H/24+pet(d))
  ctx.lineTo(x+7*W/24+pet(d), y+11*H/24+pet(d))
  ctx.lineTo(x+6*W/24+pet(d), y+14*H/24+pet(d))
  cpx = x+6*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+0*W/24+pet(d), y+22*H/24+pet(d))
  cpx = x+7*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+7*W/24+pet(d), y+17*H/24+pet(d))
  ctx.lineTo(x+7*W/24+pet(d), y+22*H/24+pet(d))
  ctx.lineTo(x+11*W/24+pet(d), y+22*H/24+pet(d))
  ctx.lineTo(x+11*W/24+pet(d), y+20*H/24+pet(d))
  ctx.lineTo(x+16*W/24+pet(d), y+20*H/24+pet(d))
  ctx.lineTo(x+16*W/24+pet(d), y+22*H/24+pet(d))
  ctx.lineTo(x+20*W/24+pet(d), y+22*H/24+pet(d))
  ctx.lineTo(x+20*W/24+pet(d), y+19*H/24+pet(d))
  cpx = x+20*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+22*W/24+pet(d), y+17*H/24+pet(d))
  cpx = x+24*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+24*W/24+pet(d), y+16*H/24+pet(d))
  cpx = x+24*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+22*W/24+pet(d), y+15*H/24+pet(d))
  cpx = x+20*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20*W/24+pet(d), y+14*H/24+pet(d))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+9*W/24+pet(d), y+20*H/24+pet(d))
  ctx.lineTo(x+9*W/24+pet(d), y+22*H/24+pet(d))
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+18*W/24+pet(d), y+20*H/24+pet(d))
  ctx.lineTo(x+18*W/24+pet(d), y+22*H/24+pet(d))
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+22*W/24+pet(d), y+16*H/24+pet(d))
  ctx.stroke()
}

function dino3At (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+5*W/24+pet(d), y+14*H/24+pet(d))
  cpx = x+5*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+6*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+7*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+7*W/24+pet(d), y+14*H/24+pet(d))
  cpx = x+7*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+7*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+7*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*W/24+pet(d), y+10*H/24+pet(d))
  cpx = x+9*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+9*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+9*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+9*W/24+pet(d), y+10*H/24+pet(d))
  cpx = x+9*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+10*W/24+pet(d), y+8*H/24+pet(d))
  cpx = x+11*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+11*W/24+pet(d), y+10*H/24+pet(d))
  cpx = x+11*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+11*W/24+pet(d), y+8*H/24+pet(d))
  cpx = x+11*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+6*H/24+pet(d))
  cpx = x+13*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+13*W/24+pet(d), y+8*H/24+pet(d))
  cpx = x+13*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+13*W/24+pet(d), y+10*H/24+pet(d))
  cpx = x+13*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+14*W/24+pet(d), y+8*H/24+pet(d))
  cpx = x+15*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+15*W/24+pet(d), y+10*H/24+pet(d))
  cpx = x+15*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+15*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+15*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*W/24+pet(d), y+10*H/24+pet(d))
  cpx = x+17*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+17*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+17*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+17*W/24+pet(d), y+14*H/24+pet(d))
  cpx = x+17*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+19*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+19*W/24+pet(d), y+14*H/24+pet(d))
  cpx = x+20*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20*W/24+pet(d), y+13*H/24+pet(d))
  cpx = x+20*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+22*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+24*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+24*W/24+pet(d), y+13*H/24+pet(d))
  cpx = x+24*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+22*W/24+pet(d), y+14*H/24+pet(d))
  cpx = x+22*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+22*W/24+pet(d), y+16*H/24+pet(d))
  cpx = x+22*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20*W/24+pet(d), y+18*H/24+pet(d))
  ctx.lineTo(x+20*W/24+pet(d), y+22*H/24+pet(d))
  ctx.lineTo(x+16*W/24+pet(d), y+22*H/24+pet(d))
  ctx.lineTo(x+16*W/24+pet(d), y+20*H/24+pet(d))
  ctx.lineTo(x+11*W/24+pet(d), y+20*H/24+pet(d))
  ctx.lineTo(x+11*W/24+pet(d), y+22*H/24+pet(d))
  ctx.lineTo(x+7*W/24+pet(d), y+22*H/24+pet(d))
  ctx.lineTo(x+7*W/24+pet(d), y+17*H/24+pet(d))
  cpx = x+7*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+0*W/24+pet(d), y+22*H/24+pet(d))
  cpx = x+5*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+5*W/24+pet(d), y+14*H/24+pet(d))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+9*W/24+pet(d), y+20*H/24+pet(d))
  ctx.lineTo(x+9*W/24+pet(d), y+22*H/24+pet(d))
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+18*W/24+pet(d), y+20*H/24+pet(d))
  ctx.lineTo(x+18*W/24+pet(d), y+22*H/24+pet(d))
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+1*W/24+pet(d), y+22*H/24+pet(d))
  ctx.lineTo(x+1*W/24+pet(d), y+21*H/24+pet(d))
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+2*W/24+pet(d), y+21*H/24+pet(d))
  ctx.lineTo(x+2*W/24+pet(d), y+20*H/24+pet(d))
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+22*W/24+pet(d), y+13*H/24+pet(d))
  ctx.stroke()
}

function dino2At (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+20*W/24+pet(d), y+16*H/24+pet(d))
  cpx = x+20*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+19*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+18*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*W/24+pet(d), y+10*H/24+pet(d))
  cpx = x+17*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*W/24+pet(d), y+10*H/24+pet(d))
  cpx = x+16*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*W/24+pet(d), y+8*H/24+pet(d))
  cpx = x+15*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+14*W/24+pet(d), y+8*H/24+pet(d))
  cpx = x+14*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+14*W/24+pet(d), y+6*H/24+pet(d))
  cpx = x+13*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+6*H/24+pet(d))
  cpx = x+12*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+8*H/24+pet(d))
  cpx = x+11*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+10*W/24+pet(d), y+8*H/24+pet(d))
  cpx = x+10*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+10*W/24+pet(d), y+10*H/24+pet(d))
  cpx = x+9*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*W/24+pet(d), y+10*H/24+pet(d))
  cpx = x+8*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+7*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+6*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+6*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+0*W/24+pet(d), y+22*H/24+pet(d))
  cpx = x+7*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+7*W/24+pet(d), y+17*H/24+pet(d))
  ctx.lineTo(x+7*W/24+pet(d), y+22*H/24+pet(d))
  ctx.lineTo(x+11*W/24+pet(d), y+22*H/24+pet(d))
  ctx.lineTo(x+11*W/24+pet(d), y+20*H/24+pet(d))
  ctx.lineTo(x+16*W/24+pet(d), y+20*H/24+pet(d))
  ctx.lineTo(x+16*W/24+pet(d), y+22*H/24+pet(d))
  ctx.lineTo(x+20*W/24+pet(d), y+22*H/24+pet(d))
  ctx.lineTo(x+20*W/24+pet(d), y+18*H/24+pet(d))
  ctx.moveTo(x+22*W/24+pet(d), y+16*H/24+pet(d))
  cpx = x+22*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+22*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+24*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+24*W/24+pet(d), y+11*H/24+pet(d))
  cpx = x+24*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+22*W/24+pet(d), y+10*H/24+pet(d))
  cpx = x+20*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+20*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20*W/24+pet(d), y+16*H/24+pet(d))
  ctx.stroke()

   ctx.beginPath()
  ctx.arc(x+22*W/24+pet(d), y+11*H/24+pet(d),W/90,0,2*Math.PI)
  ctx.stroke()
  //2
  ctx.beginPath()
  ctx.moveTo(x+9*W/24+pet(d), y+20*H/24+pet(d))
  ctx.lineTo(x+9*W/24+pet(d), y+22*H/24+pet(d))
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+18*W/24+pet(d), y+20*H/24+pet(d))
  ctx.lineTo(x+18*W/24+pet(d), y+22*H/24+pet(d))
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+8*W/24+pet(d), y+12*H/24+pet(d))
  ctx.lineTo(x+8*W/24+pet(d), y+15*H/24+pet(d))
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+10*W/24+pet(d), y+10*H/24+pet(d))
  ctx.lineTo(x+10*W/24+pet(d), y+13*H/24+pet(d))
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+12*W/24+pet(d), y+8*H/24+pet(d))
  ctx.lineTo(x+12*W/24+pet(d), y+11*H/24+pet(d))
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+14*W/24+pet(d), y+8*H/24+pet(d))
  ctx.lineTo(x+14*W/24+pet(d), y+11*H/24+pet(d))
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+16*W/24+pet(d), y+10*H/24+pet(d))
  ctx.lineTo(x+16*W/24+pet(d), y+13*H/24+pet(d))
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+18*W/24+pet(d), y+12*H/24+pet(d))
  ctx.lineTo(x+18*W/24+pet(d), y+15*H/24+pet(d))
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+20*W/24+pet(d), y+18*H/24+pet(d))
  cpx = x+22*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+22*W/24+pet(d), y+16*H/24+pet(d))
  ctx.stroke()

  //11
  ctx.beginPath()
  ctx.moveTo(x+22*W/24+pet(d), y+11*H/24+pet(d))
  ctx.stroke()
}

function dinosaurAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let i = 0
  for (; i < 1; i++) {
    //1
    ctx.beginPath()
    ctx.moveTo(x+0*W/24+pet(d), y+22*H/24+pet(d))
    cpx = x+5*W/24
    cpy = y+22*H/24
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+5*W/24+pet(d), y+14*H/24+pet(d))
    cpx = x+5*W/24
    cpy = y+8*H/24
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12.5*W/24+pet(d), y+8*H/24+pet(d))
    cpx = x+20*W/24
    cpy = y+8*H/24
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20*W/24+pet(d), y+14*H/24+pet(d))
    cpx = x+20*W/24
    cpy = y+6*H/24
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20*W/24+pet(d), y+6*H/24+pet(d))
    cpx = x+20*W/24
    cpy = y+4*H/24
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+22*W/24+pet(d), y+4*H/24+pet(d))
    cpx = x+24*W/24
    cpy = y+4*H/24
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+24*W/24+pet(d), y+5*H/24+pet(d))
    cpx = x+24*W/24
    cpy = y+6*H/24
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+22*W/24+pet(d), y+6*H/24+pet(d))
    cpx = x+22*W/24
    cpy = y+16*H/24
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+22*W/24+pet(d), y+16*H/24+pet(d))
    cpx = x+22*W/24
    cpy = y+18*H/24
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20*W/24+pet(d), y+18*H/24+pet(d))
    ctx.lineTo(x+20*W/24+pet(d), y+22*H/24+pet(d))
    ctx.lineTo(x+16*W/24+pet(d), y+22*H/24+pet(d))
    ctx.lineTo(x+16*W/24+pet(d), y+20*H/24+pet(d))
    ctx.lineTo(x+11*W/24+pet(d), y+20*H/24+pet(d))
    ctx.lineTo(x+11*W/24+pet(d), y+22*H/24+pet(d))
    ctx.lineTo(x+7*W/24+pet(d), y+22*H/24+pet(d))
    ctx.lineTo(x+7*W/24+pet(d), y+17*H/24+pet(d))
    cpx = x+7*W/24
    cpy = y+22*H/24
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+0*W/24+pet(d), y+22*H/24+pet(d))
    ctx.stroke()

    //2
    ctx.beginPath()
    ctx.moveTo(x+9*W/24+pet(d), y+20*H/24+pet(d))
    ctx.lineTo(x+9*W/24+pet(d), y+22*H/24+pet(d))
    ctx.stroke()

    //3
    ctx.beginPath()
    ctx.moveTo(x+18*W/24+pet(d), y+20*H/24+pet(d))
    ctx.lineTo(x+18*W/24+pet(d), y+22*H/24+pet(d))
    ctx.stroke()

    //4
    ctx.beginPath()
    ctx.arc(x+22*W/24+pet(d), y+5*H/24+pet(d), W/82,0,2*Math.PI)
    ctx.stroke()
  }
}

function finger_walkingAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+23*H/24)
  cpx = x+12*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+16*H/24)
  cpx = x+8*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+12*H/24)
  cpx = x+8*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+2.5*H/24)
  cpx = x+10*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+0*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+23*H/24)
  cpx = x+14*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+20*H/24)
  cpx = x+13*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+13*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+16*H/24)
  cpx = x+8*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+23*H/24)
  cpx = x+4.75*W/24
  cpy = y+23.2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7.3*W/24, y+18*H/24)
  cpx = x+8*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+12*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+2.5*H/24)
  cpx = x+15*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+8*H/24)
  cpx = x+14*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+8*H/24)
  cpx = x+14.5*W/24
  cpy = y+9.6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13.4*W/24, y+9.6*H/24)
  cpx = x+15*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+11*H/24)
  cpx = x+15*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+9*H/24)
  ctx.stroke()

  //1 new pinky
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+11*H/24)
  cpx = x+14*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+13*H/24)
  cpx = x+15*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+13*H/24)
  cpx = x+17*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+9*H/24)
  cpx = x+16*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+11*H/24)
  cpx = x+14*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+10*H/24)
  cpx = x+13*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+6*H/24)
  cpx = x+14*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+2.5*H/24)
 // ctx.stroke()

   ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+11*H/24)
  cpx = x+15*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+13*H/24)
  cpx = x+16*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+10*H/24)
  cpx = x+17*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+9*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+13*H/24)
  cpx = x+14*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+15*H/24)
  cpx = x+15*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+13*H/24)
  ctx.stroke()

   //2
  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+13*H/24)
  cpx = x+15*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16.5*W/24, y+14*H/24)
  cpx = x+17.5*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16.6*W/24, y+11*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+9*H/24)
  cpx = x+16*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+7*H/24)
  cpx = x+16*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+2*H/24)
  cpx = x+15*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+0*H/24)
  ctx.stroke()
}

function el_viaje_del_héroeAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  let v = document.getElementById("featuresize").value
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = W/72, i = 0, pick = Math.floor(Math.random()*8)
  ctx.lineWidth /= 4
  for (; i < 4; i++) {
    //1
    ctx.beginPath()
    ctx.moveTo(x+12*W/24+pet(p), y+18*H/24+pet(p))
    cpx = x+18*W/24+pet(p)
    cpy = y+18*H/24+pet(p)
    ctx.quadraticCurveTo(cpx, cpy, x+18*W/24+pet(p), y+12*H/24+pet(p))
    cpx = x+18*W/24+pet(p)
    cpy = y+6*H/24+pet(p)
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24+pet(p), y+6*H/24+pet(p))
    cpx = x+6*W/24+pet(p)
    cpy = y+6*H/24+pet(p)
    ctx.quadraticCurveTo(cpx, cpy, x+6*W/24+pet(p), y+12*H/24+pet(p))
    cpx = x+6*W/24+pet(p)
    cpy = y+18*H/24+pet(p)
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24+pet(p), y+18*H/24+pet(p))
    ctx.stroke()

    //2
    ctx.beginPath()
    ctx.moveTo(x+5*W/24+pet(p), y+11*H/24+pet(p))
    cpx = x+6*W/24+pet(p)
    cpy = y+11*H/24+pet(p)
    ctx.quadraticCurveTo(cpx, cpy, x+6*W/24+pet(p), y+12*H/24+pet(p))
    cpx = x+6*W/24+pet(p)
    cpy = y+11*H/24+pet(p)
    ctx.quadraticCurveTo(cpx, cpy, x+7*W/24+pet(p), y+11*H/24+pet(p))
    ctx.stroke()

    //3
    ctx.beginPath()
    ctx.moveTo(x+19*W/24+pet(p), y+13*H/24+pet(p))
    cpx = x+18*W/24+pet(p)
    cpy = y+13*H/24+pet(p)
    ctx.quadraticCurveTo(cpx, cpy, x+18*W/24+pet(p), y+12*H/24+pet(p))
    cpx = x+18*W/24+pet(p)
    cpy = y+13*H/24+pet(p)
    ctx.quadraticCurveTo(cpx, cpy, x+17*W/24+pet(p), y+13*H/24+pet(p))
    ctx.stroke()
  
    //4
    ctx.beginPath()
    ctx.moveTo(x+1*W/24+pet(p), y+12*H/24+pet(p))
    ctx.lineTo(x+23*W/24+pet(p), y+12*H/24+pet(p))
    //ctx.lineTo(x+23*W/24, y+23*H/24)
    //ctx.lineTo(x+1*W/24, y+23*H/24)
    ctx.stroke()
    document.getElementById("featuresize").value /= 4
    walk_it_backAt(x+8.5*W/24+pet(p), y+0*H/24+pet(p), 7*W/24, color)
    
    if (pick === 0)
      lawn_mowerAt(x+9*W/24+pet(p), y+18*H/24+pet(p), 7*W/24, color)
    if (pick === 1)
      cakeAt(x+9*W/24+pet(p*1.2), y+18*H/24+pet(p*1.2), 7*W/24, color)
    if (pick === 2)
      lighthouseAt(x+8.5*W/24+pet(p), y+18*H/24+pet(p), 7*W/24, color)
    if (pick === 3)
      monsterAt(x+9*W/24+pet(p), y+18*H/24+pet(p), 7*W/24, color)
    if (pick === 4)
      skullAt(x+8.8*W/24+pet(p), y+18.4*H/24+pet(p), 6.0*W/24, color)
    if (pick === 5)
      zero_knowledge_proofAt(x+8*W/24+pet(p), y+17*H/24+pet(p/2), 8*W/24, color)
    if (pick === 6)
      gunAt(x+9*W/24+pet(p), y+18*H/24+pet(p/2), 7*W/24, color)
    if (pick === 7)
      flameAt(x+8.5*W/24+pet(p), y+18*H/24+pet(p/2), 7*W/24, color)
    dirtyAstrixAt(x+2*W/24,y+13*H/24, 4*W/24, color)
    dirtyspiralAt(x+18*W/24,y+7*H/24, 4*W/24, color)
    document.getElementById("featuresize").value *= 4
  }
  
  scriptAt (x+9*W/24,y+10*H/24,W/24,color,1,canvas)
  scriptAt (x+9*W/24,y+14*H/24,W/24,color,1,canvas)
  
  ctx.lineWidth *= 4
  //ctx.globalAlpha *= 3
  //5
  ctx.globalAlpha /= 4
  ctx.beginPath()
  ctx.moveTo(x+6*W/24+pet(p), y+12*H/24+pet(p))
  ctx.lineTo(x+18*W/24+pet(p), y+12*H/24+pet(p))
  cpx = x+18*W/24+pet(p)
  cpy = y+18*H/24+pet(p)
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24+pet(p), y+18*H/24+pet(p))
  cpx = x+6*W/24+pet(p)
  cpy = y+18*H/24+pet(p)
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24+pet(p), y+12*H/24+pet(p))
  ctx.fill()
  ctx.globalAlpha *= 4
}

function dirtyspiralAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, d = W/12, angle = pet(360)

  //1
  ctx.beginPath()
  p = rotatePoint(x+12*W/24+pet(d), y+22*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+22*W/24+pet(d)
  cpy = y+22*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+22*W/24+pet(d), y+12*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+22*W/24+pet(d)
  cpy = y+2*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24+pet(d), y+2*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+2*W/24+pet(d)
  cpy = y+2*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+2*W/24+pet(d), y+12*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+2*W/24+pet(d)
  cpy = y+20*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24+pet(d), y+20*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+20*W/24+pet(d)
  cpy = y+20*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+20*W/24+pet(d), y+12*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+20*W/24+pet(d)
  cpy = y+4*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24+pet(d), y+4*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+4*W/24+pet(d)
  cpy = y+4*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+4*W/24+pet(d), y+12*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+4*W/24+pet(d)
  cpy = y+18*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24+pet(d), y+18*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+18*W/24+pet(d)
  cpy = y+18*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+18*W/24+pet(d), y+12*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+18*W/24+pet(d)
  cpy = y+6*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24+pet(d), y+6*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+6*W/24+pet(d)
  cpy = y+6*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+6*W/24+pet(d), y+12*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+6*W/24+pet(d)
  cpy = y+16*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24+pet(d), y+16*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+16*W/24+pet(d)
  cpy = y+16*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+16*W/24+pet(d), y+12*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+16*W/24+pet(d)
  cpy = y+8*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24+pet(d), y+8*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+8*W/24+pet(d)
  cpy = y+8*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+8*W/24+pet(d), y+12*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+8*W/24+pet(d)
  cpy = y+14*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24+pet(d), y+14*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+14*W/24+pet(d)
  cpy = y+14*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+14*W/24+pet(d), y+12*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+14*W/24+pet(d)
  cpy = y+10*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24+pet(d), y+10*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+10*W/24+pet(d)
  cpy = y+10*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+10*W/24+pet(d), y+12*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()
}

function dirtyAstrixAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, d = W/24, angle = pet(17)

  //1
  ctx.beginPath()
  p = rotatePoint(x+10*W/24+pet(d), y+14*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+2*W/24+pet(d), y+22*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //2
  ctx.beginPath()
  p = rotatePoint(x+12*W/24+pet(d), y+15*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+12*W/24+pet(d), y+23*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //3
  ctx.beginPath()
  p = rotatePoint(x+14*W/24+pet(d), y+14*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+22*W/24+pet(d), y+22*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //4
  ctx.beginPath()
  p = rotatePoint(x+15*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+23*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //5
  ctx.beginPath()
  p = rotatePoint(x+9*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+1*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //6
  ctx.beginPath()
  p = rotatePoint(x+10*W/24+pet(d), y+10*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+2*W/24+pet(d), y+2*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //7
  ctx.beginPath()
  p = rotatePoint(x+12*W/24+pet(d), y+9*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+12*W/24+pet(d), y+1*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //8
  ctx.beginPath()
  p = rotatePoint(x+14*W/24+pet(d), y+10*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+22*W/24+pet(d), y+2*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()
}

function small_handsAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.fillStyle = color
  ctx.globalAlpha /= 2
  //2
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+24*H/24)
  ctx.lineTo(x+2*W/24, y+17*H/24)
  ctx.lineTo(x+10*W/24, y+17*H/24)
  ctx.lineTo(x+10*W/24, y+24*H/24)
  ctx.fill()
  //3
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+24*H/24)
  ctx.lineTo(x+14*W/24, y+17*H/24)
  ctx.lineTo(x+22*W/24, y+17*H/24)
  ctx.lineTo(x+22*W/24, y+24*H/24)
  ctx.fill()
  ctx.globalAlpha *= 2
  //1
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+24*H/24)
  ctx.lineTo(x+10*W/24, y+14*H/24)
  ctx.lineTo(x+2*W/24, y+14*H/24)
  ctx.lineTo(x+2*W/24, y+24*H/24)
  ctx.stroke()
  //2
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+24*H/24)
  ctx.lineTo(x+14*W/24, y+14*H/24)
  ctx.lineTo(x+22*W/24, y+14*H/24)
  ctx.lineTo(x+22*W/24, y+24*H/24)
  ctx.stroke()
  //3
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+17*H/24)
  ctx.lineTo(x+10*W/24, y+17*H/24)
  ctx.stroke()
  //4
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+17*H/24)
  ctx.lineTo(x+22*W/24, y+17*H/24)
  ctx.stroke()
//1
x -= W/48
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+14*H/24)
  cpx = x+4*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+11*H/24)
  ctx.stroke()
  //8
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+14*H/24)
  cpx = x+9*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+11*H/24)
  ctx.stroke()
x += W/48
x += W/48
  //3
  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+14*H/24)
  cpx = x+15*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+11*H/24)
  ctx.stroke()
  //10
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+14*H/24)
  cpx = x+20*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+11*H/24)
  ctx.stroke()
x -= W/48
  //9
  x -= W/48
  smallhandleftAt(x-0.4*W/24, y+1.5*H/24, 13.3*W/24)
  x += W/48
  smallhandrightAt(x+11.3*W/24, y+1.5*H/24, 13.5*W/24)
  //11
  ctx.beginPath()
  ctx.arc(x+9*W/24, y+15.5*H/24, W/72,0,2*Math.PI)
  ctx.stroke()
  //12
  ctx.beginPath()
  ctx.arc(x+15*W/24, y+15.5*H/24, W/72,0,2*Math.PI)
  ctx.stroke()
}

function smallhandleftAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+14.4*W/24, y+17*H/24)
  cpx = x+17*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+14*H/24)
  cpx = x+17*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+6*H/24)
  cpx = x+17*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+4*H/24)
  cpx = x+15*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+6*H/24)
  cpx = x+15*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+9*H/24)
  cpx = x+15*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+4*H/24)
  cpx = x+15*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+2*H/24)
  cpx = x+13*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+4*H/24)
  cpx = x+13*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+8*H/24)
  cpx = x+13*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+3*H/24)
  cpx = x+13*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+1*H/24)
  cpx = x+11*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+3*H/24)
  cpx = x+11*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+8*H/24)
  cpx = x+11*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+4*H/24)
  cpx = x+11*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+2*H/24)
  cpx = x+9*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+4*H/24)
  cpx = x+9*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+9*H/24)
  cpx = x+9*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+6*H/24)
  cpx = x+6*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+7*H/24)
  cpx = x+7*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+12*H/24)
  cpx = x+7*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+17*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+10*H/24)
  cpx = x+12*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+14*H/24)
  ctx.stroke()
}

function smallhandrightAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+17*H/24)
  cpx = x+17*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+12*H/24)
  cpx = x+17*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+7*H/24)
  cpx = x+18*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+6*H/24)
  cpx = x+15*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+9*H/24)
  cpx = x+15*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+4*H/24)
  cpx = x+15*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+2*H/24)
  cpx = x+13*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+4*H/24)
  cpx = x+13*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+8*H/24)
  cpx = x+13*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+3*H/24)
  cpx = x+13*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+1*H/24)
  cpx = x+11*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+2*H/24)
  cpx = x+11*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+8*H/24)
  cpx = x+11*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+4*H/24)
  cpx = x+11*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+2*H/24)
  cpx = x+9*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+4*H/24)
  cpx = x+9*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+9*H/24)
  cpx = x+9*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+6*H/24)
  cpx = x+9*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+4*H/24)
  cpx = x+7*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+6*H/24)
  cpx = x+7*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+14*H/24)
  cpx = x+7*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9.5*W/24, y+17*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+10*H/24)
  cpx = x+12*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+14*H/24)
  ctx.stroke()
}

function where_your_sleeves_meet_your_waistbandAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "round"
  ctx.lineJoin = "miter"
  //1
  ctx.lineWidth *= 1.1
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+10*H/24)
  cpx = x+12*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+10*H/24)
  ctx.stroke()
  ctx.lineWidth /= 1.1

  ctx.beginPath()
  ctx.moveTo(x+23*W/24, y+9.5*H/24)
  ctx.lineTo(x+22*W/24, y+10*H/24)
  ctx.lineTo(x+23*W/24, y+10.5*H/24)
  ctx.fill()

  //2
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+9*H/24)
  ctx.lineTo(x+6*W/24, y+12*H/24)
  ctx.lineTo(x+7*W/24, y+23*H/24)
  ctx.lineTo(x+11*W/24, y+23*H/24)
  ctx.lineTo(x+12*W/24, y+16.5*H/24)
  ctx.lineTo(x+13*W/24, y+23*H/24)
  ctx.lineTo(x+17*W/24, y+23*H/24)
  ctx.lineTo(x+18*W/24, y+12*H/24)
  ctx.lineTo(x+18*W/24, y+9*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+24*H/24)
  cpx = x+8*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+23*H/24)
  cpx = x+10*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+24*H/24)
  cpx = x+8*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+24*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+24*H/24)
  cpx = x+14*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+23*H/24)
  cpx = x+16*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+24*H/24)
  cpx = x+14*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+24*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+4*H/24)
  cpx = x+6*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+5*H/24)
  cpx = x+3*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+8*H/24)
  cpx = x+3*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+14*H/24)
  cpx = x+3*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+16*H/24)
  cpx = x+6*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5.5*W/24, y+14*H/24)
  cpx = x+6*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+12*H/24)
  ctx.stroke()

   //27
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+4*H/24)
  cpx = x+18*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+5*H/24)
  cpx = x+21*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+8*H/24)
  cpx = x+21*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+11*H/24)
  ctx.stroke()
  //25
  ctx.beginPath()
  ctx.moveTo(x+21*W/24, y+11*H/24)
  cpx = x+21*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+14*H/24)
  cpx = x+21*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+16*H/24)
  cpx = x+18*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18.5*W/24, y+14*H/24)
  cpx = x+18*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+12*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+4*H/24)
  ctx.lineTo(x+12*W/24, y+6*H/24)
  ctx.lineTo(x+14*W/24, y+4*H/24)
  ctx.stroke()
  //14
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+4*H/24)
  ctx.lineTo(x+12*W/24, y+6*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+4*H/24)
  cpx = x+8*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+2*H/24)
  cpx = x+7*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7.*W/24, y+0*H/24)
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+4*H/24)
  cpx = x+16*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+2*H/24)
  cpx = x+17*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+0*H/24)
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+3*H/24)
  cpx = x+12*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+3*H/24)
  ctx.stroke()

   //20
  ctx.beginPath()
  ctx.moveTo(x+8.0*W/24, y+0*H/24)
  cpx = x+8*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+3*H/24)
  ctx.stroke()

  //21
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+0*H/24)
  cpx = x+16*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+3*H/24)
  ctx.stroke()

  //11
  ctx.beginPath()
  ctx.arc(x+12*W/24, y+1.5*H/24, W/45, Math.PI*0.9, Math.PI*2.1)
  ctx.lineTo(x+12*W/24, y+1.5*H/24)
  ctx.globalAlpha /= 2
  ctx.fill()
  ctx.globalAlpha *= 2
  ctx.stroke()

  ctx.beginPath()
  ctx.arc(x+12*W/24, y+1.5*H/24, W/33, Math.PI*0.95, Math.PI*2.05)
  ctx.stroke()

  //21
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+4*H/24)
  ctx.lineTo(x+11*W/24, y+7*H/24)
  ctx.lineTo(x+12*W/24, y+6*H/24)
  ctx.lineTo(x+13*W/24, y+7*H/24)
  ctx.lineTo(x+14*W/24, y+4*H/24)
  ctx.stroke()
  //16
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+2*H/24)
  cpx = x+10*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+0.2*H/24)
  cpx = x+14*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+2*H/24)
  ctx.stroke()
  //17
  ctx.beginPath()
  ctx.moveTo(x+10.6*W/24, y+3*H/24)
  cpx = x+11*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+4*H/24)
  cpx = x+13*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13.4*W/24, y+3*H/24)
  ctx.stroke()
  //18
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+2*H/24)
  cpx = x+12*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+2*H/24)
  ctx.stroke()

  //22
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+15*H/24)
  cpx = x+10*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+16*H/24)
  cpx = x+14*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+15*H/24)
  ctx.stroke()

  // NOSE
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+0*H/24)
  cpx = x+12*W/24
  cpy = y+0.5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+0*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+11*H/24)
  cpx = x+12*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+11*H/24)
  ctx.lineTo(x+18*W/24, y+13*H/24)
  ctx.lineTo(x+17*W/24, y+23*H/24)
  ctx.lineTo(x+13*W/24, y+23*H/24)
  ctx.lineTo(x+12*W/24, y+16*H/24)
  ctx.lineTo(x+11*W/24, y+23*H/24)
  ctx.lineTo(x+7*W/24, y+23*H/24)
  ctx.lineTo(x+6*W/24, y+14*H/24)
  ctx.lineTo(x+6*W/24, y+11*H/24)
  ctx.globalAlpha /= 2
  ctx.fill()
  ctx.globalAlpha *= 2

  ctx.fillStyle = "#ffa000"
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+0*H/24)
  cpx = x+8*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+3*H/24)
  cpx = x+10*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+4*H/24)
  cpx = x+14*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+3*H/24)
  cpx = x+16*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+0*H/24)
  ctx.globalAlpha /= 3
  ctx.fill()
  ctx.globalAlpha *= 3

y+=1.5*H/24
  //23
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+8*H/24)
  cpx = x+9*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+9*H/24)
  ctx.stroke()

  //24
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+9*H/24)
  cpx = x+15*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+8*H/24)
  ctx.stroke()
}

function tacoAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  let savedF = ctx.fillStyle
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+23*H/24)
  cpx = x+17*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+18*H/24)
  cpx = x+23*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+13*H/24)
  cpx = x+23*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+4*H/24)
  cpx = x+7*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+18*H/24)
  cpx = x+7*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+23*H/24)
  cpx = x+1*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+19*H/24)
  cpx = x+2*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+4*H/24)
  cpx = x+12*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13.5*W/24, y+4*H/24)
  ctx.stroke()

  ctx.save()
  //2
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+23*H/24)
  ctx.lineTo(x+4*W/24, y+23*H/24)
  cpx = x+7*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+18*H/24)
  cpx = x+7*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+4*H/24)
  ctx.lineTo(x+14*W/24, y+0*H/24)
  ctx.lineTo(x+0*W/24, y+0*H/24)
  ctx.lineTo(x+0*W/24, y+23*H/24)
  ctx.closePath()
  ctx.clip()
  //draw bits
  let i = 0, xc, yc
  for (; i < 180; i++) {
    xc = x + W/12+Math.random()*W/2
    yc = y + H/6+Math.random()*H*0.65
    choppingsAt(xc, yc, W/10+pet(W/15), color)
  }
  ctx.restore()
  //3 redraw edge
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+23*H/24)
  cpx = x+7*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+18*H/24)
  cpx = x+7*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+4*H/24)
  ctx.stroke()
}

function choppingsAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  //ctx.strokeStyle = color
  //ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, d = 2, angle = pet(360)
  let i = Math.floor(Math.random()*6)
  //1
  ctx.beginPath()
  p = rotatePoint(x+0*W/24+pet(d), y+24*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+24*W/24+pet(d), y+24*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+12*W/24+pet(d), y+2*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+0*W/24+pet(d), y+24*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  if (i === 0) {
    ctx.fill()
    ctx.stroke()
  }

  //2
  ctx.beginPath()
  p = rotatePoint(x+2*W/24+pet(d), y+2*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+5*W/24+pet(d), y+23*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+23*W/24+pet(d), y+20*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+21*W/24+pet(d), y+1*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+2*W/24+pet(d), y+2*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  if (i === 1) {
    ctx.fill()
    ctx.stroke()
  }

  //3
  ctx.beginPath()
  p = rotatePoint(x+12*W/24+pet(d), y+24*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+12*W/24+pet(d), y+0*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  cpx = x+0*W/24+pet(d)
  cpy = y+0*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+0*W/24+pet(d), y+12*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+0*W/24+pet(d)
  cpy = y+24*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24+pet(d), y+24*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  if (i === 2) {
    ctx.fill()
    ctx.stroke()
  }
  //1
  ctx.beginPath()
  p = rotatePoint(x+4*W/24+pet(d), y+6*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+0*W/24+pet(d)
  cpy = y+6*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+0*W/24+pet(d), y+3*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+0*W/24+pet(d)
  cpy = y+0*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+4*W/24+pet(d), y+0*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+12*W/24+pet(d)
  cpy = y+0*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24+pet(d), y+12*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+12*W/24+pet(d)
  cpy = y+18*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+20*W/24+pet(d), y+18*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+24*W/24+pet(d)
  cpy = y+18*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+24*W/24+pet(d), y+21*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+24*W/24+pet(d)
  cpy = y+24*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+20*W/24+pet(d), y+24*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+6*W/24+pet(d)
  cpy = y+22*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+6*W/24+pet(d), y+14*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+6*W/24+pet(d)
  cpy = y+8*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+4*W/24+pet(d), y+6*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  if (i === 3) {
    ctx.fill()
    ctx.stroke()
  }

  //2
  ctx.beginPath()
  p = rotatePoint(x+12*W/24+pet(d), y+0*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+24*W/24+pet(d)
  cpy = y+0*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+24*W/24+pet(d), y+12*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+24*W/24+pet(d)
  cpy = y+24*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24+pet(d), y+24*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+4*W/24+pet(d)
  cpy = y+24*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+4*W/24+pet(d), y+24*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+0*W/24+pet(d)
  cpy = y+24*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+0*W/24+pet(d), y+20*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+0*W/24+pet(d)
  cpy = y+16*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+4*W/24+pet(d), y+16*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+16*W/24+pet(d)
  cpy = y+16*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+16*W/24+pet(d), y+12*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+16*W/24+pet(d)
  cpy = y+8*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+4*W/24+pet(d), y+8*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+0*W/24+pet(d)
  cpy = y+8*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+0*W/24+pet(d), y+4*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+0*W/24+pet(d)
  cpy = y+0*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24+pet(d), y+0*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  if (i === 4) {
    ctx.fill()
    ctx.stroke()
  }
  //3
  ctx.beginPath()
  p = rotatePoint(x+15*W/24+pet(d), y+3*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+19*W/24+pet(d)
  cpy = y+0*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+22*W/24+pet(d), y+2*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+24*W/24+pet(d)
  cpy = y+6*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+20*W/24+pet(d), y+9*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+10*W/24+pet(d)
  cpy = y+16*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+8*W/24+pet(d), y+21*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+6*W/24+pet(d)
  cpy = y+24*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+2*W/24+pet(d), y+21*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+1*W/24+pet(d)
  cpy = y+16*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+8*W/24+pet(d), y+11*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+13*W/24+pet(d)
  cpy = y+7*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+15*W/24+pet(d), y+3*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  if (i === 5) {
    ctx.fill()
    ctx.stroke()
  }
}

function leftgrassAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/100
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+12*W/24+pet(d), y+24*H/24+pet(d))
  cpx = x+12*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*W/24+pet(d), y+0*H/24+pet(d))
  ctx.stroke()
}

function rightgrassAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/100
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+12*W/24+pet(d), y+24*H/24+pet(d))
  cpx = x+12*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*W/24+pet(d), y+0*H/24+pet(d))
  ctx.stroke()
}

function shelterAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = [], MIRROR = false
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let xi = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]
  if (MIRROR)
    xi.reverse()
  //1
  ctx.beginPath()
  ctx.moveTo(x+xi[22]*W/24, y+24*H/24)
  cpx = x+xi[24]*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[24]*W/24, y+17*H/24)
  cpx = x+xi[24]*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[22]*W/24, y+10*H/24)
  cpx = x+xi[20]*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[20]*W/24, y+17*H/24)
  cpx = x+xi[20]*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[22]*W/24, y+24*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+xi[7]*W/24, y+21*H/24)
  cpx = x+xi[7]*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[5]*W/24, y+24*H/24)
  cpx = x+xi[3]*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[3]*W/24, y+17*H/24)
  cpx = x+xi[3]*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[5]*W/24, y+10*H/24)
  cpx = x+xi[7]*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[7]*W/24, y+17*H/24)
  cpx = x+xi[7]*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[7]*W/24, y+19*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+xi[4]*W/24, y+4*H/24)
  ctx.lineTo(x+xi[3]*W/24, y+2*H/24)
  ctx.lineTo(x+xi[1]*W/24, y+2*H/24)
  ctx.lineTo(x+xi[0]*W/24, y+4*H/24)
  ctx.lineTo(x+xi[1]*W/24, y+4*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+xi[5]*W/24, y+10*H/24)
  ctx.lineTo(x+xi[22]*W/24, y+10*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+xi[5]*W/24, y+24*H/24)
  ctx.lineTo(x+xi[22]*W/24, y+24*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+xi[20]*W/24, y+19*H/24)
  ctx.lineTo(x+xi[7]*W/24, y+19*H/24)
  ctx.lineTo(x+xi[5]*W/24, y+20*H/24)
  ctx.lineTo(x+xi[5]*W/24, y+21*H/24)
  ctx.lineTo(x+xi[20]*W/24, y+21*H/24)
  ctx.lineTo(x+xi[20]*W/24, y+20*H/24)
  ctx.lineTo(x+xi[5]*W/24, y+20*H/24)
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+xi[0]*W/24, y+6*H/24)
  cpx = x+xi[2]*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[3]*W/24, y+6*H/24)
  cpx = x+xi[5]*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[5]*W/24, y+5*H/24)
  cpx = x+xi[6]*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[8]*W/24, y+5*H/24)
  cpx = x+xi[9]*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[9]*W/24, y+5*H/24)
  cpx = x+xi[10]*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[10]*W/24, y+6*H/24)
  cpx = x+xi[13]*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[13]*W/24, y+6*H/24)
  cpx = x+xi[17]*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[17]*W/24, y+5*H/24)
  cpx = x+xi[19]*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[19]*W/24, y+6*H/24)
  cpx = x+xi[20]*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[22]*W/24, y+5*H/24)
  cpx = x+xi[23]*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[24]*W/24, y+6*H/24)
  ctx.stroke()

  //10

  bombAt(x+9.3*W/24, y+0*H/24, 6*W/24, color)

  //1
  ctx.beginPath()
  ctx.moveTo(x+xi[5]*W/24, y+14*H/24)
  cpx = x+5.5*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5.5*W/24, y+13*H/24)
  cpx = x+5.5*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[5]*W/24, y+12*H/24)
  cpx = x+4.5*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4.5*W/24, y+13*H/24)
  cpx = x+4.5*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[5]*W/24, y+14*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+xi[5]*W/24, y+14*H/24)
  cpx = x+xi[3]*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[3]*W/24, y+14*H/24)
  cpx = x+xi[1]*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[1]*W/24, y+12*H/24)
  ctx.lineTo(x+xi[1]*W/24, y+4*H/24)
  ctx.lineTo(x+xi[3]*W/24, y+4*H/24)
  ctx.stroke()
  //18
  ctx.beginPath()
  ctx.moveTo(x+xi[5]*W/24, y+12*H/24)
  cpx = x+xi[4]*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[4]*W/24, y+12*H/24)
  cpx = x+xi[3]*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[3]*W/24, y+11*H/24)
  cpx = x+xi[3]*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[3]*W/24, y+4*H/24)
  ctx.stroke()

  //19
  ctx.beginPath()
  ctx.moveTo(x+xi[3]*W/24, y+4*H/24)
  ctx.lineTo(x+xi[4]*W/24, y+4*H/24)
  ctx.stroke()
  //11
  ctx.beginPath()
  ctx.moveTo(x+xi[16]*W/24, y+15*H/24)
  cpx = x+xi[17]*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[17]*W/24, y+14*H/24)
  cpx = x+xi[17]*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[16]*W/24, y+12*H/24)
  cpx = x+xi[15]*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[15]*W/24, y+13*H/24)
  cpx = x+xi[15]*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[16]*W/24, y+15*H/24)
  ctx.stroke()

  //12
  ctx.beginPath()
  ctx.moveTo(x+xi[18]*W/24, y+19*H/24)
  cpx = x+xi[18]*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[16]*W/24, y+15*H/24)
  cpx = x+xi[14]*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[14]*W/24, y+19*H/24)
  ctx.stroke()

  //13
  ctx.beginPath()
  ctx.moveTo(x+xi[15]*W/24, y+19*H/24)
  ctx.lineTo(x+xi[13]*W/24, y+20*H/24)
  ctx.lineTo(x+xi[13]*W/24, y+22*H/24)
  ctx.lineTo(x+xi[12]*W/24, y+23*H/24)
  ctx.stroke()

  //14
  ctx.beginPath()
  ctx.moveTo(x+xi[17]*W/24, y+19*H/24)
  ctx.lineTo(x+xi[16]*W/24, y+20*H/24)
  ctx.lineTo(x+xi[16]*W/24, y+22*H/24)
  ctx.lineTo(x+xi[15]*W/24, y+23*H/24)
  ctx.stroke()

  //15
  ctx.beginPath()
  ctx.moveTo(x+14.5*W/24, y+16*H/24)
  ctx.lineTo(x+xi[13]*W/24, y+18*H/24)
  ctx.lineTo(x+xi[12]*W/24, y+19*H/24)
  ctx.stroke()

  //16
  ctx.beginPath()
  ctx.moveTo(x+17.5*W/24, y+16*H/24)
  ctx.lineTo(x+xi[19]*W/24, y+18*H/24)
  ctx.lineTo(x+xi[18]*W/24, y+19*H/24)
  ctx.stroke()

  //17
  ctx.beginPath()
  ctx.moveTo(x+xi[22]*W/24, y+17*H/24)
  cpx = x+xi[23]*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[23]*W/24, y+14*H/24)
  cpx = x+xi[23]*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[22]*W/24, y+11*H/24)
  cpx = x+xi[21]*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[21]*W/24, y+14*H/24)
  cpx = x+xi[21]*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[22]*W/24, y+17*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+xi[24]*W/24, y+6*H/24)
  cpx = x+xi[23]*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[22]*W/24, y+5*H/24)
  cpx = x+xi[20]*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[19]*W/24, y+6*H/24)
  cpx = x+xi[17]*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[17]*W/24, y+5*H/24)
  cpx = x+xi[13]*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[13]*W/24, y+6*H/24)
  cpx = x+xi[10]*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[10]*W/24, y+6*H/24)
  cpx = x+xi[9]*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[8]*W/24, y+5*H/24)
  cpx = x+xi[6]*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[5]*W/24, y+5*H/24)
  cpx = x+xi[3]*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[3]*W/24, y+6*H/24)
  cpx = x+xi[2]*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[0]*W/24, y+6*H/24)
  cpx = x+xi[0]*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[0]*W/24, y+24*H/24)
  cpx = x+xi[5]*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[5]*W/24, y+24*H/24)
  cpx = x+xi[3]*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[3]*W/24, y+17*H/24)
  cpx = x+xi[3]*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[5]*W/24, y+10*H/24)
  cpx = x+xi[22]*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[22]*W/24, y+10*H/24)
  cpx = x+xi[24]*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[24]*W/24, y+17*H/24)
  cpx = x+xi[24]*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[22]*W/24, y+24*H/24)
  ctx.lineTo(x+xi[24]*W/24, y+24*H/24)
  ctx.lineTo(x+xi[24]*W/24, y+6*H/24)
  ctx.fillStyle = color
  ctx.globalAlpha /= 4
  ctx.fill()
  ctx.globalAlpha *= 4
}

function meditationAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+8*W/24+pet(d), y+15*H/24+pet(d))
  ctx.lineTo(x+3*W/24+pet(d), y+17*H/24+pet(d))
  ctx.lineTo(x+1*W/24+pet(d), y+18*H/24+pet(d))
  ctx.lineTo(x+3*W/24+pet(d), y+21*H/24+pet(d))
  ctx.lineTo(x+14*W/24+pet(d), y+19*H/24+pet(d))
  ctx.lineTo(x+17*W/24+pet(d), y+21*H/24+pet(d))
  ctx.lineTo(x+18*W/24+pet(d), y+21*H/24+pet(d))
  ctx.lineTo(x+15*W/24+pet(d), y+17*H/24+pet(d))
  ctx.lineTo(x+6*W/24+pet(d), y+18*H/24+pet(d))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+6.4*W/24+pet(d), y+20.4*H/24+pet(d))
  ctx.lineTo(x+6*W/24+pet(d), y+21*H/24+pet(d))
  ctx.lineTo(x+7*W/24+pet(d), y+21*H/24+pet(d))
  ctx.lineTo(x+8.2*W/24+pet(d), y+20*H/24+pet(d))
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+8*W/24+pet(d), y+15*H/24+pet(d))
  ctx.lineTo(x+7*W/24+pet(d), y+11*H/24+pet(d))
  ctx.lineTo(x+3*W/24+pet(d), y+17*H/24+pet(d))
  ctx.lineTo(x+1*W/24+pet(d), y+18*H/24+pet(d))
  ctx.lineTo(x+1*W/24+pet(d), y+16*H/24+pet(d))
  ctx.lineTo(x+6*W/24+pet(d), y+7*H/24+pet(d))
  ctx.lineTo(x+10*W/24+pet(d), y+6*H/24+pet(d))
  ctx.lineTo(x+10*W/24+pet(d), y+2*H/24+pet(d))
  ctx.lineTo(x+12*W/24+pet(d), y+1*H/24+pet(d))
  ctx.lineTo(x+14*W/24+pet(d), y+2*H/24+pet(d))
  ctx.lineTo(x+14*W/24+pet(d), y+6*H/24+pet(d))
  ctx.lineTo(x+18*W/24+pet(d), y+7*H/24+pet(d))
  ctx.lineTo(x+23*W/24+pet(d), y+16*H/24+pet(d))
  ctx.lineTo(x+23*W/24+pet(d), y+18*H/24+pet(d))
  ctx.lineTo(x+21*W/24+pet(d), y+17*H/24+pet(d))
  ctx.lineTo(x+17*W/24+pet(d), y+11*H/24+pet(d))
  ctx.lineTo(x+16*W/24+pet(d), y+15*H/24+pet(d))
  ctx.lineTo(x+21*W/24+pet(d), y+17*H/24+pet(d))
  ctx.lineTo(x+23*W/24+pet(d), y+18*H/24+pet(d))
  ctx.lineTo(x+21*W/24+pet(d), y+21*H/24+pet(d))
  ctx.lineTo(x+17.4*W/24+pet(d), y+20*H/24+pet(d))
  ctx.stroke()

   //4
  ctx.beginPath()
  ctx.moveTo(x+18*W/24+pet(d), y+18*H/24+pet(d))
  ctx.lineTo(x+15.4*W/24+pet(d), y+17.5*H/24+pet(d))
  ctx.stroke()

  //chakra at 'random' y
  let locs = [12]
  let chakra = new point(x+12*W/24+pet(d), y+randomPick(locs)*H/24+pet(d))
  let f = randomPick(["spiralAt","deadlockAt","swimming_in_circlesAt",
     "salamanderAt", "ouroborosAt","progress_indicatorAt",
  "snakeAt","tidally_lockedAt","coreAt","gunAt"])
  document.getElementById("featuresize").value /= 3
  window [f] (chakra.x-3*W/24, chakra.y-W/24, 6*W/24, color) // magic_8
  document.getElementById("featuresize").value *= 3
}

function metalAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+20*W/24+pet(d), y+24*H/24+pet(d))
  cpx = x+20*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20*W/24+pet(d), y+18*H/24+pet(d))
  cpx = x+20*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20*W/24+pet(d), y+4*H/24+pet(d))
  cpx = x+20*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*W/24+pet(d), y+2*H/24+pet(d))
  cpx = x+17*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+17*W/24+pet(d), y+4*H/24+pet(d))
  cpx = x+17*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+17*W/24+pet(d), y+9*H/24+pet(d))
  cpx = x+17*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+15*W/24+pet(d), y+8*H/24+pet(d))
  cpx = x+14*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+14*W/24+pet(d), y+9*H/24+pet(d))
  cpx = x+14*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+8*H/24+pet(d))
  cpx = x+11*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+11*W/24+pet(d), y+9*H/24+pet(d))
  cpx = x+11*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+11*W/24+pet(d), y+13*H/24+pet(d))
  cpx = x+11*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+15*H/24+pet(d))
  cpx = x+14*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+14*W/24+pet(d), y+13*H/24+pet(d))
  cpx = x+14*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+15*W/24+pet(d), y+15*H/24+pet(d))
  cpx = x+17*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+17*W/24+pet(d), y+13*H/24+pet(d))
  cpx = x+17*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+17*W/24+pet(d), y+9*H/24+pet(d))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+14*W/24+pet(d), y+9*H/24+pet(d))
  ctx.lineTo(x+14*W/24+pet(d), y+13*H/24+pet(d))
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+11*W/24+pet(d), y+9*H/24+pet(d))
  cpx = x+11*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+11*W/24+pet(d), y+2*H/24+pet(d))
  cpx = x+11*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+9*W/24+pet(d), y+0*H/24+pet(d))
  cpx = x+8*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*W/24+pet(d), y+2*H/24+pet(d))
  cpx = x+8*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*W/24+pet(d), y+18*H/24+pet(d))
  cpx = x+8*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*W/24+pet(d), y+13*H/24+pet(d))
  cpx = x+8*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+6*W/24+pet(d), y+11*H/24+pet(d))
  cpx = x+5*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+5*W/24+pet(d), y+13*H/24+pet(d))
  cpx = x+5*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+5*W/24+pet(d), y+18*H/24+pet(d))
  cpx = x+5*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+6*W/24+pet(d), y+24*H/24+pet(d))
  ctx.stroke()
}

function vitruvian_manAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = W/32
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/180
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let i = 0
  for (; i < 4; i++) {
  //1
  ctx.beginPath()
  ctx.moveTo(x+3*W/24+pet(d), y+23*H/24+pet(d))
  ctx.lineTo(x+21*W/24+pet(d), y+23*H/24+pet(d))
  ctx.lineTo(x+21*W/24+pet(d), y+5*H/24+pet(d))
  ctx.lineTo(x+3*W/24+pet(d), y+5*H/24+pet(d))
  ctx.lineTo(x+3*W/24+pet(d), y+23*H/24+pet(d))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+9*W/24+pet(d), y+16*H/24+pet(d))
  ctx.lineTo(x+15*W/24+pet(d), y+16*H/24+pet(d))
  cpx = x+15*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+8*H/24+pet(d))
  cpx = x+9*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+9*W/24+pet(d), y+16*H/24+pet(d))
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+12*W/24+pet(d), y+8*H/24+pet(d))
  cpx = x+13*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+13*W/24+pet(d), y+7*H/24+pet(d))
  cpx = x+13*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+5*H/24+pet(d))
  cpx = x+11*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+11*W/24+pet(d), y+6*H/24+pet(d))
  cpx = x+11*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+8*H/24+pet(d))
  ctx.stroke()

  //18
  ctx.beginPath()
  ctx.moveTo(x+14*W/24+pet(d), y+9*H/24+pet(d))
  ctx.lineTo(x+19*W/24+pet(d), y+9*H/24+pet(d))
  ctx.lineTo(x+21*W/24+pet(d), y+9*H/24+pet(d))
  ctx.stroke()

  //19
  ctx.beginPath()
  ctx.moveTo(x+10*W/24+pet(d), y+9*H/24+pet(d))
  ctx.lineTo(x+5*W/24+pet(d), y+9*H/24+pet(d))
  ctx.lineTo(x+3*W/24+pet(d), y+9*H/24+pet(d))
  ctx.stroke()

  //20
  ctx.beginPath()
  ctx.moveTo(x+10*W/24+pet(d), y+8.7*H/24+pet(d))
  ctx.lineTo(x+5*W/24+pet(d), y+6*H/24+pet(d))
  ctx.lineTo(x+3*W/24+pet(d), y+5*H/24+pet(d))
  ctx.stroke()

  //21
  ctx.beginPath()
  ctx.moveTo(x+14*W/24+pet(d), y+8.7*H/24+pet(d))
  ctx.lineTo(x+19*W/24+pet(d), y+6*H/24+pet(d))
  ctx.lineTo(x+21*W/24+pet(d), y+5*H/24+pet(d))
  ctx.stroke()
  //4
  ctx.beginPath()
  ctx.moveTo(x+14.5*W/24+pet(d), y+16*H/24+pet(d))
  ctx.lineTo(x+18*W/24+pet(d), y+21.5*H/24+pet(d))
  ctx.lineTo(x+20*W/24+pet(d), y+20.5*H/24+pet(d))
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+9.5*W/24+pet(d), y+16*H/24+pet(d))
  ctx.lineTo(x+6*W/24+pet(d), y+21.5*H/24+pet(d))
  ctx.lineTo(x+4*W/24+pet(d), y+20.5*H/24+pet(d))
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+11*W/24+pet(d), y+16*H/24+pet(d))
  ctx.lineTo(x+11*W/24+pet(d), y+22.5*H/24+pet(d))
  ctx.lineTo(x+9*W/24+pet(d), y+22.5*H/24+pet(d))
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+13*W/24+pet(d), y+16*H/24+pet(d))
  ctx.lineTo(x+13*W/24+pet(d), y+22.5*H/24+pet(d))
  ctx.lineTo(x+15*W/24+pet(d), y+22.5*H/24+pet(d))
  ctx.stroke()

  //12
  ctx.beginPath()
  ctx.arc(x+12*W/24+pet(d), y+11.6*H/24+pet(d), 11.4*W/24, 0, Math.PI*2)
  ctx.stroke()
}

let xo = 0
xo = scriptAt(x+2*W/24, y+24*H/24, W/33 ,color, 0.06, canvas)
xo = scriptAt(xo+W/32, y+24*H/24, W/32 ,color, 0.06, canvas)
xo = scriptAt(xo+W/32, y+24*H/24, W/32 ,color, 0.06, canvas)
xo = scriptAt(xo+W/32, y+24*H/24, W/31 ,color, 0.06, canvas)
ctx.globalAlpha = 1

}

function state_machineAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/150
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  //19
  ctx.beginPath()
  ctx.moveTo(x+21*W/24+pet(d), y+0*H/24+pet(d))
  cpx = x+12*W/24
  cpy = y+-2*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+4*W/24+pet(d), y+0*H/24+pet(d))
  ctx.stroke()
  ctx.beginPath()
  ctx.moveTo(x+13*W/24+pet(d), y-2*H/24+pet(d))
ctx.lineTo(x+12*W/24+pet(d), y-1*H/24+pet(d))
ctx.lineTo(x+13*W/24+pet(d), y+pet(d))
  ctx.stroke()

   //1
  ctx.beginPath()
  ctx.moveTo(x+4*W/24+pet(d), y+4*H/24+pet(d))
  cpx = x+6*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+6*W/24+pet(d), y+2*H/24+pet(d))
  cpx = x+6*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+4*W/24+pet(d), y+0*H/24+pet(d))
  cpx = x+2*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+2*W/24+pet(d), y+2*H/24+pet(d))
  cpx = x+2*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+4*W/24+pet(d), y+4*H/24+pet(d))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+21*W/24+pet(d), y+4*H/24+pet(d))
  cpx = x+23*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+23*W/24+pet(d), y+2*H/24+pet(d))
  cpx = x+23*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+21*W/24+pet(d), y+0*H/24+pet(d))
  cpx = x+19*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+19*W/24+pet(d), y+2*H/24+pet(d))
  cpx = x+19*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+21*W/24+pet(d), y+4*H/24+pet(d))
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+21*W/24+pet(d), y+10*H/24+pet(d))
  cpx = x+23*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+23*W/24+pet(d), y+8*H/24+pet(d))
  cpx = x+23*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+21*W/24+pet(d), y+6*H/24+pet(d))
  cpx = x+19*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+19*W/24+pet(d), y+8*H/24+pet(d))
  cpx = x+19*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+21*W/24+pet(d), y+10*H/24+pet(d))
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+20*W/24+pet(d), y+10*H/24+pet(d))
  cpx = x+20*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+21*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+22*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+22*W/24+pet(d), y+10*H/24+pet(d))
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+6*W/24+pet(d), y+2*H/24+pet(d))
  cpx = x+19*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+19*W/24+pet(d), y+2*H/24+pet(d))
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+0*W/24+pet(d), y+2*H/24+pet(d))
  ctx.lineTo(x+2*W/24+pet(d), y+2*H/24+pet(d))
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+4*W/24+pet(d), y+4*H/24+pet(d))
  cpx = x+4*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*W/24+pet(d), y+8*H/24+pet(d))
  cpx = x+9*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+9*W/24+pet(d), y+8*H/24+pet(d))
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+15*W/24+pet(d), y+8*H/24+pet(d))
  cpx = x+19*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+19*W/24+pet(d), y+8*H/24+pet(d))
  cpx = x+21*W/24
  cpy = y+6*H/24
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+21*W/24+pet(d), y+6*H/24+pet(d))
  cpx = x+21*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+21*W/24+pet(d), y+4*H/24+pet(d))
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+19*W/24+pet(d), y+2*H/24+pet(d))
  cpx = x+16*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*W/24+pet(d), y+5*H/24+pet(d))
  cpx = x+16*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+19*W/24+pet(d), y+8*H/24+pet(d))
  ctx.stroke()

  //11
  ctx.beginPath()
  ctx.moveTo(x+1*W/24+pet(d), y+1*H/24+pet(d))
  ctx.lineTo(x+2*W/24+pet(d), y+2*H/24+pet(d))
  ctx.lineTo(x+1*W/24+pet(d), y+3*H/24+pet(d))
  ctx.stroke()

  //12
  ctx.beginPath()
  ctx.moveTo(x+8*W/24+pet(d), y+7*H/24+pet(d))
  ctx.lineTo(x+9*W/24+pet(d), y+8*H/24+pet(d))
  ctx.lineTo(x+8*W/24+pet(d), y+9*H/24+pet(d))
  ctx.stroke()

  //13
  ctx.beginPath()
  ctx.moveTo(x+18*W/24+pet(d), y+1*H/24+pet(d))
  ctx.lineTo(x+19*W/24+pet(d), y+2*H/24+pet(d))
  ctx.lineTo(x+18*W/24+pet(d), y+3*H/24+pet(d))
  ctx.stroke()

  //14
  ctx.beginPath()
  ctx.moveTo(x+21*W/24+pet(d), y+11*H/24+pet(d))
  ctx.lineTo(x+22*W/24+pet(d), y+10*H/24+pet(d))
  ctx.lineTo(x+23*W/24+pet(d), y+11*H/24+pet(d))
  ctx.stroke()

  //15
  ctx.beginPath()
  ctx.moveTo(x+20*W/24+pet(d), y+5*H/24+pet(d))
  ctx.lineTo(x+21*W/24+pet(d), y+4*H/24+pet(d))
  ctx.lineTo(x+22*W/24+pet(d), y+5*H/24+pet(d))
  ctx.stroke()
ctx.lineWidth /= 2
  ctx.font = "italic "+(W * 0.08)+"pt Garamont"
  ctx.fillStyle = color
  //16
  ctx.strokeText("A",x+3.2*W/24+pet(d), y+2.8*H/24+pet(d))

  //17
  ctx.strokeText("B",x+20.2*W/24+pet(d), y+2.8*H/24+pet(d))

  //18
  ctx.strokeText("C",x+20.2*W/24+pet(d), y+8.8*H/24+pet(d))
}

function entscheidungsproblemAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "miter"

  state_machineAt(x, y, W, color)
  //y -= W/24
  //17
  ctx.beginPath()
  ctx.moveTo(x+0*W/24+pet(d), y+14*H/24+pet(d))
  ctx.lineTo(x+24*W/24+pet(d), y+14*H/24+pet(d))
  ctx.stroke()

  //18
  ctx.beginPath()
  ctx.moveTo(x+0*W/24+pet(d), y+20*H/24+pet(d))
  ctx.lineTo(x+24*W/24+pet(d), y+20*H/24+pet(d))
  ctx.stroke()
//1
  ctx.beginPath()
  ctx.moveTo(x+2*W/24+pet(d), y+14*H/24+pet(d))
  ctx.lineTo(x+2*W/24+pet(d), y+20*H/24+pet(d))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+6*W/24+pet(d), y+14*H/24+pet(d))
  ctx.lineTo(x+6*W/24+pet(d), y+20*H/24+pet(d))
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+10*W/24+pet(d), y+14*H/24+pet(d))
  ctx.lineTo(x+10*W/24+pet(d), y+20*H/24+pet(d))
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+14*W/24+pet(d), y+14*H/24+pet(d))
  ctx.lineTo(x+14*W/24+pet(d), y+20*H/24+pet(d))
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+18*W/24+pet(d), y+14*H/24+pet(d))
  ctx.lineTo(x+18*W/24+pet(d), y+20*H/24+pet(d))
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+22*W/24+pet(d), y+14*H/24+pet(d))
  ctx.lineTo(x+22*W/24+pet(d), y+20*H/24+pet(d))
  ctx.stroke()
 
  let digits = shuffle([0,0,1,1,1])
  let fs = W/30
  digitalAt(x+3*W/24, y+14*H/24,fs,color,digits[0])
  digitalAt(x+7*W/24, y+14*H/24,fs,color,digits[1])
  digitalAt(x+11*W/24, y+14*H/24,fs,color,digits[2])
  digitalAt(x+11*W/24, y+5*H/24,fs,color,digits[2])
  digitalAt(x+15*W/24, y+14*H/24,fs,color,digits[3])
  digitalAt(x+19*W/24, y+14*H/24,fs,color,digits[4])

//13
  ctx.beginPath()
  ctx.moveTo(x+2*W/24+pet(d), y+21*H/24+pet(d))
  ctx.lineTo(x+1*W/24+pet(d), y+22*H/24+pet(d))
  ctx.lineTo(x+2*W/24+pet(d), y+23*H/24+pet(d))
  ctx.stroke()

  //14
  ctx.beginPath()
  ctx.moveTo(x+22*W/24+pet(d), y+21*H/24+pet(d))
  ctx.lineTo(x+23*W/24+pet(d), y+22*H/24+pet(d))
  ctx.lineTo(x+22*W/24+pet(d), y+23*H/24+pet(d))
  ctx.stroke()

  //15
  ctx.beginPath()
  ctx.moveTo(x+1*W/24+pet(d), y+22*H/24+pet(d))
  ctx.lineTo(x+23*W/24+pet(d), y+22*H/24+pet(d))
  ctx.stroke()


  //11
  ctx.beginPath()
  ctx.moveTo(x+8*W/24+pet(d), y+5*H/24+pet(d))
  ctx.stroke()

  //16
  ctx.beginPath()
  ctx.moveTo(x+10*W/24+pet(d), y+5*H/24+pet(d))
  ctx.lineTo(x+14*W/24+pet(d), y+5*H/24+pet(d))
  ctx.lineTo(x+14*W/24+pet(d), y+11*H/24+pet(d))
  ctx.lineTo(x+10*W/24+pet(d), y+11*H/24+pet(d))
  ctx.lineTo(x+10*W/24+pet(d), y+5*H/24+pet(d))
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+10*W/24+pet(d), y+5*H/24+pet(d))
  ctx.lineTo(x+14*W/24+pet(d), y+5*H/24+pet(d))
  ctx.lineTo(x+14*W/24+pet(d), y+11*H/24+pet(d))
  ctx.lineTo(x+10*W/24+pet(d), y+11*H/24+pet(d))
  ctx.lineTo(x+10*W/24+pet(d), y+5*H/24+pet(d))
  ctx.stroke()
  //12
  ctx.lineWidth *= 1.75
  ctx.beginPath()
  ctx.moveTo(x+10*W/24+pet(d), y+14*H/24+pet(d))
  ctx.lineTo(x+14*W/24+pet(d), y+14*H/24+pet(d))
  ctx.lineTo(x+14*W/24+pet(d), y+20*H/24+pet(d))
  ctx.lineTo(x+10*W/24+pet(d), y+20*H/24+pet(d))
  ctx.lineTo(x+10*W/24+pet(d), y+14*H/24+pet(d))
  ctx.stroke()

  

  //7
  ctx.beginPath()
  ctx.moveTo(x+12*W/24+pet(d), y+14*H/24+pet(d))
  ctx.lineTo(x+15*W/24+pet(d), y+11*H/24+pet(d))
  ctx.lineTo(x+15*W/24+pet(d), y+4*H/24+pet(d))
  ctx.lineTo(x+9*W/24+pet(d), y+4*H/24+pet(d))
  ctx.lineTo(x+9*W/24+pet(d), y+11*H/24+pet(d))
  ctx.lineTo(x+12*W/24+pet(d), y+14*H/24+pet(d))
  ctx.stroke()

}

function backPatternAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
 // W *= 0.96
 // x += 4, y+= 4
 let H = W, cpx, cpy, points = []
  x -= 2.2*W/24
  y -= 10.36*H/24
  W *= 1.18
  H *= 1.21
  
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "round"
  ctx.lineJoin = "miter"
  ctx.lineWidth = 2
  ctx.save()
  ctx.beginPath()
  ctx.moveTo(x,y)
  ctx.lineTo(x+W,y)
  ctx.lineTo(x+W,y+H*1.5)
  ctx.lineTo(x,y+H*1.5)
  ctx.closePath()
  ctx.fillRect(x,y,W,H*1.5)
  ctx.clip()
  ctx.globalCompositeOperation = "xor"
  skinnyRingsAt(x,y,color)
  skinnyRingsAt(x+W,y,color)
  skinnyRingsAt(x+W,y+H*1.5,color)
  skinnyRingsAt(x,y+H*1.5,color)
  ctx.globalCompositeOperation = "destination-over"
  ctx.fillStyle = savedF
  ctx.fillRect(x,y,W,H*1.5)
  ctx.restore()
  ctx.globalCompositeOperation = "sorce-over"
} 

function concentric2 (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "round"
  ctx.lineJoin = "miter"
  ctx.lineWidth = 2
  let lw = 5, i = 0, r = W/48
  let cx = x+W/2, cy = y+H/2, off = 1

  for (; i < 13; i++) {
    ctx.beginPath()
    ctx.arc(cx,cy,r,0,2*Math.PI)
    ctx.closePath()
    ctx.stroke()
    r *= 1.55
    ctx.lineWidth *= W * 0.007
    cx += off
    cy += off
    off *= 1.5
  }
}

function consumeAt (x,y,W,color) { // need/want. epistemic hunger
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+8*W/24+pet(d), y+10*H/24+pet(d))
  ctx.lineTo(x+8*W/24+pet(d), y+18*H/24+pet(d))
  ctx.lineTo(x+20*W/24+pet(d), y+18*H/24+pet(d))
  ctx.lineTo(x+20*W/24+pet(d), y+10*H/24+pet(d))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+8*W/24+pet(d), y+10*H/24+pet(d))
  cpx = x+9*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+9*W/24+pet(d), y+11*H/24+pet(d))
  cpx = x+9*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+9*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+9*W/24+pet(d), y+13*H/24+pet(d))
  cpx = x+9*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*W/24+pet(d), y+14*H/24+pet(d))
  cpx = x+9*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+9*W/24+pet(d), y+15*H/24+pet(d))
  cpx = x+9*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*W/24+pet(d), y+16*H/24+pet(d))
  cpx = x+9*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+9*W/24+pet(d), y+17*H/24+pet(d))
  cpx = x+9*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*W/24+pet(d), y+18*H/24+pet(d))
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+20*W/24+pet(d), y+10*H/24+pet(d))
  cpx = x+19*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+19*W/24+pet(d), y+11*H/24+pet(d))
  cpx = x+19*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+19*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+19*W/24+pet(d), y+13*H/24+pet(d))
  cpx = x+19*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20*W/24+pet(d), y+14*H/24+pet(d))
  cpx = x+19*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+19*W/24+pet(d), y+15*H/24+pet(d))
  cpx = x+19*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20*W/24+pet(d), y+16*H/24+pet(d))
  cpx = x+19*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+19*W/24+pet(d), y+17*H/24+pet(d))
  cpx = x+19*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20*W/24+pet(d), y+18*H/24+pet(d))
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+20*W/24+pet(d), y+10*H/24+pet(d))
  cpx = x+21*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+21*W/24+pet(d), y+10*H/24+pet(d))
  cpx = x+23*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+23*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+23*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+23*W/24+pet(d), y+22*H/24+pet(d))
  ctx.stroke()

  //1
  ctx.beginPath()
  ctx.moveTo(x+1*W/24+pet(d), y+22*H/24+pet(d))
  cpx = x+1*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+3*W/24+pet(d), y+24*H/24+pet(d))
  cpx = x+21*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+21*W/24+pet(d), y+24*H/24+pet(d))
  cpx = x+23*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+23*W/24+pet(d), y+22*H/24+pet(d))
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+8*W/24+pet(d), y+10*H/24+pet(d))
  cpx = x+7*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+7*W/24+pet(d), y+10*H/24+pet(d))
  cpx = x+7*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+7*W/24+pet(d), y+9*H/24+pet(d))
  cpx = x+7*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+6*W/24+pet(d), y+8*H/24+pet(d))
  cpx = x+4*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+4*W/24+pet(d), y+10*H/24+pet(d))
  cpx = x+3*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+3*W/24+pet(d), y+10*H/24+pet(d))
  cpx = x+1*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+1*W/24+pet(d), y+13*H/24+pet(d))
  cpx = x+1*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+1*W/24+pet(d), y+22*H/24+pet(d))
  ctx.stroke()
  //3
  ctx.beginPath()
  ctx.moveTo(x+4*W/24+pet(d), y+17*H/24+pet(d))
  cpx = x+4*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+5*W/24+pet(d), y+19*H/24+pet(d))
  cpx = x+6*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+6*W/24+pet(d), y+17*H/24+pet(d))
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+12*W/24+pet(d), y+18*H/24+pet(d))
  cpx = x+12*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+14*W/24+pet(d), y+15*H/24+pet(d))
  cpx = x+16*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*W/24+pet(d), y+18*H/24+pet(d))
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+5*W/24+pet(d), y+17*H/24+pet(d))
  ctx.lineTo(x+5*W/24+pet(d), y+18*H/24+pet(d))
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+14*W/24+pet(d), y+18*H/24+pet(d))
  ctx.lineTo(x+14*W/24+pet(d), y+16*H/24+pet(d))
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.arc(x+5*W/24+pet(d), y+13*H/24+pet(d), W/48, 0, 2*Math.PI)
  ctx.stroke()

  ctx.setLineDash([W/24])
  //1
  ctx.beginPath()
  ctx.moveTo(x+14*W/24+pet(d), y+0*H/24+pet(d))
  ctx.lineTo(x+14*W/24+pet(d), y+4*H/24+pet(d))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+10*W/24+pet(d), y+1*H/24+pet(d))
  ctx.lineTo(x+10*W/24+pet(d), y+5*H/24+pet(d))
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+18*W/24+pet(d), y+1*H/24+pet(d))
  ctx.lineTo(x+18*W/24+pet(d), y+5*H/24+pet(d))
  ctx.stroke()
  ctx.setLineDash([])
  //7
  let f = randomPick(atList)
  window [f] (x+9.5*W/24+pet(d), y+4*H/24+pet(d), 9*W/24, color)
}

function fountainAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+12*W/24+pet(d), y+10*H/24+pet(d))
  cpx = x+22*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+24*W/24+pet(d), y+13*H/24+pet(d))
  ctx.stroke()

   //1
  ctx.beginPath()
  ctx.moveTo(x+10*W/24+pet(d), y+11*H/24+pet(d))
  cpx = x+21*W/24
  cpy = y+11.5*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+24*W/24+pet(d), y+20*H/24+pet(d))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+9.5*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+19.5*W/24
  cpy = y+13.0*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+21*W/24+pet(d), y+24*H/24+pet(d))
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+10*W/24+pet(d), y+13*H/24+pet(d))
  cpx = x+16*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+17*W/24+pet(d), y+24*H/24+pet(d))
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+12*W/24+pet(d), y+10*H/24+pet(d))
  cpx = x+9*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+9*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+9*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+14*H/24+pet(d))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+12*W/24+pet(d), y+10*H/24+pet(d))
  cpx = x+12*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+6*H/24+pet(d))
  cpx = x+12*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*W/24+pet(d), y+2*H/24+pet(d))
  cpx = x+4*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+4*W/24+pet(d), y+6*H/24+pet(d))
  cpx = x+4*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+4*W/24+pet(d), y+10*H/24+pet(d))
  cpx = x+2*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+2*W/24+pet(d), y+11*H/24+pet(d))
  cpx = x+2*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+4*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+4*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+4*W/24+pet(d), y+20*H/24+pet(d))
  cpx = x+4*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+1*W/24+pet(d), y+23*H/24+pet(d))
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+12*W/24+pet(d), y+14*H/24+pet(d))
  cpx = x+12*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+20*H/24+pet(d))
  cpx = x+12*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+15*W/24+pet(d), y+23*H/24+pet(d))
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+11.5*W/24+pet(d), y+9.5*H/24+pet(d))
  cpx = x+8*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+8*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+11.5*W/24+pet(d), y+14.5*H/24+pet(d))
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+8*W/24+pet(d), y+7*H/24+pet(d))
  ctx.lineTo(x+9.5*W/24+pet(d), y+9.5*H/24+pet(d))
  ctx.lineTo(x+8*W/24+pet(d), y+9.5*H/24+pet(d))
  ctx.stroke()

  //11
  ctx.beginPath()
  ctx.arc(x+6*W/24+pet(d), y+8*H/24+pet(d), W/84, 0, 2*Math.PI)
  ctx.stroke()

  //12
  ctx.beginPath()
  ctx.arc(x+10*W/24+pet(d), y+8*H/24+pet(d), W/84, 0, 2*Math.PI)
  ctx.stroke()
  //12
  ctx.beginPath()
  ctx.moveTo(x+4*W/24+pet(d), y+11*H/24+pet(d))
  cpx = x+3*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+3*W/24+pet(d), y+11*H/24+pet(d))
  ctx.stroke()
  //13
  ctx.beginPath()
  ctx.moveTo(x+5*W/24+pet(d), y+7*H/24+pet(d))
  cpx = x+5*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+6*W/24+pet(d), y+6*H/24+pet(d))
  cpx = x+7*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+7*W/24+pet(d), y+7*H/24+pet(d))
  ctx.stroke()
  //14
  ctx.beginPath()
  ctx.moveTo(x+9*W/24+pet(d), y+7*H/24+pet(d))
  cpx = x+9*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+10*W/24+pet(d), y+6*H/24+pet(d))
  cpx = x+11*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+11*W/24+pet(d), y+7*H/24+pet(d))
  ctx.stroke()
}

function _3DAt (x,y,W,color,INVERT) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = "#ff0000"
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, d = 0
  let functions = atList.filter(function(x) {
    return x.length < 20;
  });
  let filtered = []
  let i = 0
  for (; i < functions.length; i++) {
    if (!noDraw.includes(functions[i]))
      filtered.push(functions[i])
  }
  let f = randomPick(filtered)
  f=randomPick(["monitorAt", "washing_machineAt"])
  let text = ""+f
  text = titleize(text, INVERT)
  let face = "sans serif"
  ctx.font = "800 "+(W/15)+"pt " + face
  document.getElementById("featuresize").value *=3
  let w = ctx.measureText("SPECIAL 3D EDITION").width
  
  ctx.globalAlpha /= 2
  ctx.strokeStyle = "#ff0000"
  window [f] (x-0.5*W/24,y,W, ctx.strokeStyle)
  ctx.strokeStyle = "#00ffFF"
  window [f] (x+0.5*W/24,y,W, ctx.strokeStyle)
  ctx.font = "800 "+(W/15)+"pt " + face
  ctx.fillStyle = "#ff0000"
  ctx.fillText("SPECIAL 3D EDITION", x+(W/2-w/2)-0.5*W/24, y+32*H/24)
  w = ctx.measureText(text).width
  ctx.fillText(text, x+(W/2-w/2)-0.5*W/24, y+29*H/24)
  ctx.fillStyle = "#00ffff"
  w = ctx.measureText("SPECIAL 3D EDITION").width
  ctx.fillText("SPECIAL 3D EDITION", x+(W/2-w/2)+0.5*W/24, y+32*H/24)
  w = ctx.measureText(text).width
  ctx.fillText(text, x+(W/2-w/2)+0.5*W/24, y+29*H/24)
  ctx.globalAlpha *= 2
  document.getElementById("featuresize").value /=3

  ctx.fillStyle = "#000000"
  ctx.font = "800 "+(W/15)+"pt " + face
  w = ctx.measureText("SPECIAL 3D EDITION").width
  ctx.fillText("SPECIAL 3D EDITION", x+(W/2-w/2), y+32*H/24)
  w = ctx.measureText(text).width
  ctx.fillText(text, x+(W/2-w/2), y+29*H/24)
  ctx.strokeStyle = "#000000"
  window [f] (x,y,W, ctx.strokeStyle)
}

function observerAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, d = 0, angle = -45
  
  //1
  ctx.beginPath()
  p = rotatePoint(x+2*W/24+pet(d), y+22*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+24*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+2*W/24+pet(d), y+2*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()
  //2
  ctx.beginPath()
  p = rotatePoint(x+4*W/24+pet(d), y+21*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x-1*W/24+pet(d)
  cpy = y+12*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+4*W/24+pet(d), y+3*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+9*W/24+pet(d)
  cpy = y+12*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+4*W/24+pet(d), y+21*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()
}

function schrödinger_apos_s_catAt (x,y,W,color, INVERT) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+4*W/24+pet(d), y+24*H/24+pet(d))
  ctx.lineTo(x+20*W/24+pet(d), y+24*H/24+pet(d))
  ctx.lineTo(x+20*W/24+pet(d), y+8*H/24+pet(d))
  ctx.lineTo(x+4*W/24+pet(d), y+8*H/24+pet(d))
  ctx.lineTo(x+4*W/24+pet(d), y+24*H/24+pet(d))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+4*W/24+pet(d), y+8*H/24+pet(d))
  ctx.lineTo(x+16*W/24+pet(d), y+0*H/24+pet(d))
  if (INVERT) {
    ctx.stroke()
    observerAt(x+16*W/24+pet(d), y+pet(d), 6*W/24, color)
  }

  document.getElementById("featuresize").value /= 3
  let i = 0
  ctx.globalAlpha /= 2
  for (; i < 6; i++) {
    superposition_catAt(x+3*W/24+pet(d), y+7*H/24+pet(d), 18*W/24, color, INVERT, i)
  } 
  ctx.globalAlpha *= 2
  document.getElementById("featuresize").value *= 3
}

function quantity_has_a_quality_all_its_ownAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = W/48
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/100
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let j = 0
  for (; j < 3; j++) {
    let i = 0, x0 = x, y0 = y
    let xoff = W/18*1.5, yoff = 0
    for (;i < 144; i++) {
      if (i > 0 && i % 12 === 0) {
        x = x0
        yoff += W/12
      }
      dirtyxAt(x+(xoff*(i%12))+pet(d), y+yoff*1.0+pet(d), W/18+pet(d/2), color)
    }
  }
}

function meridiansAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  path = new Path2D
  
  path.moveTo(x+17*W/24, y+24*H/24)
  path.lineTo(x+17*W/24, y+10*H/24)
  path.lineTo(x+17*W/24, y+20*H/24)
  cpx = x+17*W/24
  cpy = y+22*H/24
  path.quadraticCurveTo(cpx, cpy, x+18*W/24, y+22*H/24)
  cpx = x+19*W/24
  cpy = y+22*H/24
  path.quadraticCurveTo(cpx, cpy, x+19*W/24, y+20*H/24)
  cpx = x+19*W/24
  cpy = y+8*H/24
  path.quadraticCurveTo(cpx, cpy, x+19*W/24, y+8*H/24)
  cpx = x+18.5*W/24
  cpy = y+6*H/24
  path.quadraticCurveTo(cpx, cpy, x+16*W/24, y+6*H/24)
  cpx = x+14*W/24
  cpy = y+6*H/24
  path.quadraticCurveTo(cpx, cpy, x+14*W/24, y+5*H/24)
  cpx = x+14*W/24
  cpy = y+4*H/24
  path.quadraticCurveTo(cpx, cpy, x+14*W/24, y+2*H/24)
  cpx = x+14*W/24
  cpy = y+0*H/24
  path.quadraticCurveTo(cpx, cpy, x+12*W/24, y+0*H/24)
  cpx = x+10*W/24
  cpy = y+0*H/24
  path.quadraticCurveTo(cpx, cpy, x+10*W/24, y+2*H/24)
  cpx = x+10*W/24
  cpy = y+4*H/24
  path.quadraticCurveTo(cpx, cpy, x+10*W/24, y+4*H/24)
  cpx = x+10*W/24
  cpy = y+6*H/24
  path.quadraticCurveTo(cpx, cpy, x+8*W/24, y+6*H/24)
  cpx = x+5.5*W/24
  cpy = y+6*H/24
  path.quadraticCurveTo(cpx, cpy, x+5*W/24, y+8*H/24)
  cpx = x+5*W/24
  cpy = y+20*H/24
  path.quadraticCurveTo(cpx, cpy, x+5*W/24, y+20*H/24)
  cpx = x+5*W/24
  cpy = y+22*H/24
  path.quadraticCurveTo(cpx, cpy, x+6*W/24, y+22*H/24)
  cpx = x+7*W/24
  cpy = y+22*H/24
  path.quadraticCurveTo(cpx, cpy, x+7*W/24, y+20*H/24)
  cpx = x+7*W/24
  cpy = y+10*H/24
  path.quadraticCurveTo(cpx, cpy, x+7*W/24, y+10*H/24)
  cpx = x+7*W/24
  cpy = y+24*H/24
  path.quadraticCurveTo(cpx, cpy, x+7*W/24, y+24*H/24)
  path.closePath()
  // like cancerAt
  //ctx.save()
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+24*H/24)
  ctx.lineTo(x+17*W/24, y+10*H/24)
  ctx.lineTo(x+17*W/24, y+20*H/24)
  cpx = x+17*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+22*H/24)
  cpx = x+19*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+20*H/24)
  cpx = x+19*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+8*H/24)
  cpx = x+18.5*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+6*H/24)
  cpx = x+14*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+5*H/24)
  cpx = x+14*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+2*H/24)
  cpx = x+14*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+0*H/24)
  cpx = x+10*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+2*H/24)
  cpx = x+10*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+4*H/24)
  cpx = x+10*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+6*H/24)
  cpx = x+5.5*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+8*H/24)
  cpx = x+5*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+20*H/24)
  cpx = x+5*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+22*H/24)
  cpx = x+7*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+20*H/24)
  cpx = x+7*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+10*H/24)
  cpx = x+7*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+24*H/24)
  ctx.stroke()

  ctx.fillStyle = color
  let i = 0, p
  for (; i < 360; i++) {
    p = new point(x+Math.random()*W/2, y+Math.random()*H)
    if (ctx.isPointInPath(path, p.x, p.y, "evenodd")) {
      points.push(p)
      ctx.beginPath()
      ctx.arc(p.x,p.y,W/180, 0,Math.PI*2)
      ctx.fill()
      // reflect across
      ctx.beginPath()
      ctx.arc(x+W/2+(x+W/2-p.x),p.y,W/180, 0,Math.PI*2)
      ctx.fill()
    }
  }
  let copy = shuffle(copyOf(points))
  let j = 0
  i = 0
  ctx.lineWidth /= 5
  for (;i < points.length; i++) {
    j = 0
    let p2 = copy[i]
    if (distancei(points[i], p2) < W/2.5 && Math.abs(p2.x - points[i].x) < 3.3 * W/24) {
      ctx.beginPath()
      d = pet(W/6)
      ctx.moveTo(x+W/2+(x+W/2-p2.x), p2.y)
      cpx = (p2.x+points[i].x)/2 + d 
      cpy = (p2.y+points[i].y)/2 + d 
      ctx.quadraticCurveTo(x+W/2+(x+W/2-cpx), cpy, x+W/2+(x+W/2-points[i].x), points[i].y)
     
      ctx.moveTo(p2.x, p2.y)
      cpx = (p2.x+points[i].x)/2 + d 
      cpy = (p2.y+points[i].y)/2 + d 
      ctx.quadraticCurveTo(cpx,cpy, points[i].x, points[i].y)
      ctx.stroke()
    }
  }
  ctx.lineWidth *= 5
}

function no_signalAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  // fill with gray noise
  ctx.save()
  ctx.fillStyle = "#cccccc"
  ctx.beginPath()
  ctx.moveTo(x,y)
  ctx.lineTo(x+W,y)
  ctx.lineTo(x+W,y+H)
  ctx.lineTo(x,y+H)
  ctx.closePath()
  ctx.clip()
  let v = document.getElementById("featuresize").value
  document.getElementById("featuresize").value *= 20
  ctx.fillStyle = "#eeeeee"
  ctx.fillRect(x,y,W,H)
  specksRadial("#222222")
  specksRadial("#aaaaaa")
  specksRadial("#444444")
  specksRadial("#eeeeee")
  specksRadial("#999999")
  document.getElementById("featuresize").value = v
  ctx.restore()

  //banner NO SIGNAL
  ctx.fillStyle = "#222222"
  ctx.beginPath()
  ctx.moveTo(x+1*W/24+pet(d), y+4*H/24+pet(d))
  ctx.lineTo(x+23*W/24+pet(d), y+4*H/24+pet(d))
  ctx.lineTo(x+23*W/24+pet(d), y+7*H/24+pet(d))
  ctx.lineTo(x+1*W/24+pet(d), y+7*H/24+pet(d))
  ctx.fill()

  let ns = "NO SIGNAL"
  let i = 0, offset = W*0.05*1.75
  for (; i < ns.length; i++)
    blockLetters(ns[i],x+3.*W/24+(i*offset), y+4.7*H/24, 5*W/24,"#eeeeee", W*0.02)
  let colors = getCurrentPalette()
  i = 0
  for (; i < 8; i++) {
    ctx.fillStyle = colors[i%colors.length]
    ctx.beginPath()
    ctx.moveTo(x+4*W/24+pet(d), y+10*H/24+pet(d))
    ctx.lineTo(x+6*W/24+pet(d), y+10*H/24+pet(d))
    ctx.lineTo(x+6*W/24+pet(d), y+16*H/24+pet(d))
    ctx.lineTo(x+4*W/24+pet(d), y+16*H/24+pet(d))
    ctx.lineTo(x+4*W/24+pet(d), y+10*H/24+pet(d))
    ctx.fill()
    //4
    ctx.fillStyle = colors[(i+5)%colors.length]
    ctx.beginPath()
    ctx.moveTo(x+4*W/24+pet(d), y+16*H/24+pet(d))
    ctx.lineTo(x+4*W/24+pet(d), y+17*H/24+pet(d))
    ctx.lineTo(x+6*W/24+pet(d), y+17*H/24+pet(d))
    ctx.lineTo(x+6*W/24+pet(d), y+16*H/24+pet(d))
    ctx.fill()
    //5
    ctx.fillStyle = randomPick(colors)
    ctx.beginPath()
    ctx.moveTo(x+4*W/24+pet(d), y+17*H/24+pet(d))
    ctx.lineTo(x+4*W/24+pet(d), y+19*H/24+pet(d))
    ctx.lineTo(x+6*W/24+pet(d), y+19*H/24+pet(d))
    ctx.lineTo(x+6*W/24+pet(d), y+17*H/24+pet(d))
    ctx.fill()
    x += 2*W/24
  }
  ctx.fillStyle = savedF
  ctx.strokeStyle = savedS
}

function transparent__lp_not_rp_At (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0, d1 = W/40
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  let xoff = 2*W/48
  ctx.save()
  ctx.fillStyle = "#fffffe"
  ctx.beginPath()
  ctx.moveTo(x+xoff,y+pet(d1))
  ctx.lineTo(x+W-2*xoff+pet(d1),y)
  ctx.lineTo(x+W-2*xoff,y+H+pet(d1))
  ctx.lineTo(x+xoff+pet(d1),y+H)
  ctx.shadowColor="#222222"
  ctx.shadowBlur = 6
  ctx.shadowOffsetX = 2
  ctx.shadowOffsetY = 2
  ctx.fill()
  ctx.shadowBlur = 0
  ctx.shadowOffsetX = 0
  ctx.shadowOffsetY = 0
  ctx.clip()
  paperize()
  ctx.fillStyle = "#000000"
  ctx.lineWidth = W/36
  let i = 0
  xoff *= 2, y += H/24
  ctx.font = (W * 0.04)+"pt serif"
  for (; i < 12; i++) {
    if (i === 0)
    ctx.fillText("Dear Jeffrey,", x+xoff, y + 2 * (i+1) * W/32)
  else
    ctx.fillText("girls girls girls girls girls girls girls", x+xoff, y + 2 * (i+1) * W/32)
  }
  ctx.strokeStyle = "#000000"
  i = 0
  for (; i < 12; i++) {
    ctx.beginPath()
    ctx.moveTo(x+xoff, y + 2 * (i+1) * W/32)
    if (i === 0)
      ctx.lineTo(x+W/3, y + 2 * (i+1) * W/32)
    else
      ctx.lineTo(x+W-2*xoff, y + 2 * (i+1) * W/32)
    ctx.stroke()
  }
  ctx.restore()
  
  trumpsigAt(x+W/1.7, y+19*H/24, W/4, "#000000")
  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function garden_pathAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  defs["garden_pathAt"].i = randomGP()
  defs["garden_pathAt"].u = randomGP()
  let x0 = x, y0 = y, yoff = 0
  x -= W/24
  let i = 0, w = H/48
  for (; i < 1000; i++) {
    yoff = Math.random()* H
    leftgrassAt(x+Math.random()*W/2,y+yoff, Math.log10(yoff)*w ,color)
  }
  i = 0
  x = x+W/2
  for (; i < 1000; i++) {
    yoff = Math.random()* H
    rightgrassAt(x+Math.random()*W/2,y+yoff, Math.log10(yoff)*w ,color)
  }
  x = x0, y = y0
  ctx.save()
  ctx.beginPath()
  ctx.moveTo(x+3*W/24+pet(d), y+26*H/24+pet(d))
  cpx = x+10*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+10*W/24+pet(d), y+11*H/24+pet(d))
  cpx = x+10*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+14*W/24+pet(d), y+0*H/24+pet(d))
  cpx = x+16*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*W/24+pet(d), y+0*H/24+pet(d))
  cpx = x+12*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*W/24+pet(d), y+11*H/24+pet(d))
  cpx = x+20*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*W/24+pet(d), y+26*H/24+pet(d))

  ctx.clip()
  ctx.fillStyle = savedF
  ctx.fill()
  ctx.restore()
}

function don_apos_t_care_about_why_you_switched_browsersAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+0*W/24+pet(d), y+16.5*H/24+pet(d))
  ctx.lineTo(x+0*W/24+pet(d), y+0*H/24+pet(d))
  ctx.lineTo(x+24*W/24+pet(d), y+0*H/24+pet(d))
  ctx.lineTo(x+24*W/24+pet(d), y+16.5*H/24+pet(d))
  cpx = x+12*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+0*W/24+pet(d), y+16.5*H/24+pet(d))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+0*W/24+pet(d), y+16.5*H/24+pet(d))
  cpx = x+12*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+24*W/24+pet(d), y+16.5*H/24+pet(d))
  cpx = x+24*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+24*W/24+pet(d), y+24*H/24+pet(d))
  ctx.lineTo(x+0*W/24+pet(d), y+24*H/24+pet(d))
  ctx.lineTo(x+0*W/24+pet(d), y+16.5*H/24+pet(d))
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+16*W/24+pet(d), y+14.5*H/24+pet(d))
  ctx.lineTo(x+7*W/24+pet(d), y+4*H/24+pet(d))
  ctx.lineTo(x+4*W/24+pet(d), y+4*H/24+pet(d))
  ctx.lineTo(x+4*W/24+pet(d), y+4.5*H/24+pet(d))
  cpx = x+6.5*W/24
  cpy = y+4.5*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+6.5*W/24+pet(d), y+7*H/24+pet(d))
  cpx = x+6.5*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+6.5*W/24+pet(d), y+14*H/24+pet(d))
  cpx = x+6.5*W/24
  cpy = y+16.5*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+4*W/24+pet(d), y+16.5*H/24+pet(d))
  ctx.lineTo(x+4*W/24+pet(d), y+17*H/24+pet(d))
  ctx.lineTo(x+9*W/24+pet(d), y+17*H/24+pet(d))
  ctx.lineTo(x+9*W/24+pet(d), y+16.5*H/24+pet(d))
  cpx = x+7*W/24
  cpy = y+16.5*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+7*W/24+pet(d), y+14*H/24+pet(d))
  cpx = x+7*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+7*W/24+pet(d), y+6*H/24+pet(d))
  cpx = x+14*W/24
  cpy = y+14.5*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+14.4*W/24+pet(d), y+14.5*H/24+pet(d))
  ctx.fill()

  //4
  ctx.beginPath()
  ctx.moveTo(x+16.5*W/24+pet(d), y+14.4*H/24+pet(d))
  cpx = x+16.5*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16.5*W/24+pet(d), y+7*H/24+pet(d))
  cpx = x+17*W/24
  cpy = y+4.5*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+14*W/24+pet(d), y+4.5*H/24+pet(d))
  cpx = x+14*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+14*W/24+pet(d), y+4*H/24+pet(d))
  cpx = x+19*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+19*W/24+pet(d), y+4*H/24+pet(d))
  cpx = x+19*W/24
  cpy = y+4.5*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+19*W/24+pet(d), y+4.5*H/24+pet(d))
  cpx = x+17*W/24
  cpy = y+4.5*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+17*W/24+pet(d), y+7*H/24+pet(d))
  cpx = x+17*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+17*W/24+pet(d), y+14.5*H/24+pet(d))
  ctx.fill()
}

function chessboardAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  let i = 0, offset = 3*W/24
  for (; i < 8; i++) {
    ctx.beginPath()
    ctx.moveTo(x+0*W/24+pet(d)+offset, y+3*H/24+pet(d))
    ctx.lineTo(x+3*W/24+pet(d)+offset, y+3*H/24+pet(d))
    ctx.lineTo(x+3*W/24+pet(d)+offset, y+0*H/24+pet(d))
    ctx.lineTo(x+0*W/24+pet(d)+offset, y+0*H/24+pet(d))
    ctx.fill()

    //2
    ctx.beginPath()
    ctx.moveTo(x+6*W/24+pet(d)+offset, y+0*H/24+pet(d))
    ctx.lineTo(x+6*W/24+pet(d)+offset, y+3*H/24+pet(d))
    ctx.lineTo(x+9*W/24+pet(d)+offset, y+3*H/24+pet(d))
    ctx.lineTo(x+9*W/24+pet(d)+offset, y+0*H/24+pet(d))
    ctx.fill()

    //3
    ctx.beginPath()
    ctx.moveTo(x+12*W/24+pet(d)+offset, y+0*H/24+pet(d))
    ctx.lineTo(x+12*W/24+pet(d)+offset, y+3*H/24+pet(d))
    ctx.lineTo(x+15*W/24+pet(d)+offset, y+3*H/24+pet(d))
    ctx.lineTo(x+15*W/24+pet(d)+offset, y+0*H/24+pet(d))
    ctx.fill()

    //4
    ctx.beginPath()
    ctx.moveTo(x+18*W/24+pet(d)+offset, y+0*H/24+pet(d))
    ctx.lineTo(x+18*W/24+pet(d)+offset, y+3*H/24+pet(d))
    ctx.lineTo(x+21*W/24+pet(d)+offset, y+3*H/24+pet(d))
    ctx.lineTo(x+21*W/24+pet(d)+offset, y+0*H/24+pet(d))
    ctx.fill()
    if (i%2 === 1)
      offset = 3*W/24
    else
      offset = 0
    y += 3*W/24
  }
}

function krebs_cycleAt (x,y,W,color,INVERT) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  
  let names = ["succinate","fumarate","malate","qxaloacetate","citrate","cis-aconitate", "d-isocitrate","a-ketoglutorate","succinal-coa"]
  if (INVERT) 
    names = shuffle(words.match(/\b(mis|non|dis|un)\w{2,}(ment|ic|ive|ion|ate|ness|ful)\b/g))

  let i = 0, a = 0
  for (; i < 9; i++) {
    an_arcAt (x,y,W,color, a, names[i])
    a += 40
  }
}

function an_arcAt (x,y,W,color, a, name) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  let savedF = ctx.fillStyle
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, d = 0, angle = a
  
  //1
  ctx.beginPath()
  p = rotatePoint(x+11.0*W/24+pet(d), y+22.5*H/24+pet(d) ,cx,cy,angle)
  let saved_p = copyOf(p)
  ctx.moveTo(p[0],p[1])
  cpx = x+7*W/24+pet(d)
  cpy = y+22*H/24+pet(d)
  
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+5*W/24+pet(d), y+20*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()

  //1
  ctx.beginPath()
  p = rotatePoint(x+5*W/24+pet(d), y+20*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+5*W/24+pet(d), y+21*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+6*W/24+pet(d), y+20*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+5*W/24+pet(d), y+20*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.fill()
  
  ctx.lineWidth /= 2
  ctx.beginPath()
  p = rotatePoint(x+9*W/24+pet(d), y+23*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+9*W/24+pet(d)
  cpy = y+21*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+6*W/24+pet(d), y+23*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()

  //3
  ctx.beginPath()
  p = rotatePoint(x+6*W/24+pet(d), y+22.5*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+6*W/24+pet(d), y+23*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+6.5*W/24+pet(d), y+23*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.fill()

  //1
  ctx.fillStyle = savedF
  ctx.beginPath()
  p = rotatePoint(x+10*W/24+pet(d), y+22*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+11.3*W/24+pet(d), y+22*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+11.3*W/24+pet(d), y+23*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+10*W/24+pet(d), y+23*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.fill()

  ctx.fillStyle = color
  ctx.font = "100 "+(W*0.04)+"pt Garamond"
  let wrd = name
  let w = ctx.measureText(wrd).width
  let offset = 1.5*W/24
  if (saved_p[0] > cx)
    offset += w/3
  let yoffset = 0
  if (saved_p[1] < y+2*H/24 )
    yoffset = H/24
  if (saved_p[1] > y+H-2*H/24)
   yoffset = -H/24
  ctx.fillText(wrd,saved_p[0]-offset, saved_p[1]+W*0.01-yoffset) 
  
  ctx.font = "100 "+(W*0.025)+"pt Garamond"
  w = ctx.measureText("w").width
  offset = 0
  if (saved_p[0] > cx)
    offset += w/2
  let pics = ["\u{1F701}","\u{1F702}","\u{1F703}","\u{1F704}","\u{1F70E}","\u{1F731}","\u{1F728}","\u{1F732}","\u{1F73A}","\u{1F72B}","\u{1F73C}"]
  p = rotatePoint(x+5.5*W/24+pet(d), y+23.5*H/24+pet(d) ,cx,cy,angle)
  ctx.fillText(randomPick(pics),p[0]-offset,p[1])

  //2
  p = rotatePoint(x+9*W/24+pet(d), y+23.5*H/24+pet(d) ,cx,cy,angle)
  ctx.fillText(randomPick(pics),p[0]-offset,p[1])
  ctx.fillStyle = savedF  
}


function key_exchangeAt (x,y,W,color,a) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = "#000000"
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  //1
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+8*H/24)
  ctx.lineTo(x+17*W/24, y+8*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+7*H/24)
  ctx.lineTo(x+17*W/24, y+8*H/24)
  ctx.lineTo(x+15*W/24, y+9*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+20*H/24)
  ctx.lineTo(x+7*W/24, y+20*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+19*H/24)
  ctx.lineTo(x+7*W/24, y+20*H/24)
  ctx.lineTo(x+9*W/24, y+21*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+3*H/24)
  ctx.lineTo(x+9*W/24, y+7*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+6*H/24)
  ctx.lineTo(x+9*W/24, y+7*H/24)
  ctx.lineTo(x+10*W/24, y+6*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+21*W/24, y+3*H/24)
  ctx.lineTo(x+21*W/24, y+7*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+6*H/24)
  ctx.lineTo(x+21*W/24, y+7*H/24)
  ctx.lineTo(x+22*W/24, y+6*H/24)
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+15*H/24)
  ctx.lineTo(x+3*W/24, y+19*H/24)
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+18*H/24)
  ctx.lineTo(x+3*W/24, y+19*H/24)
  ctx.lineTo(x+4*W/24, y+18*H/24)
  ctx.stroke()

  //11
  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+15*H/24)
  ctx.lineTo(x+15*W/24, y+19*H/24)
  ctx.stroke()

  //12
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+18*H/24)
  ctx.lineTo(x+15*W/24, y+19*H/24)
  ctx.lineTo(x+16*W/24, y+18*H/24)
  ctx.stroke()

  paint_bucketAt (x+W/4+W/24,y,W/6,"#ff3030",120)
  paint_bucketAt (x+W-W/6-W/24,y,W/6,"#6060ff",-120)

  paint_bucketAt (x,     y+H/5,W/4,"#ffff00",0)
  let hw = halfway("#ffff00","#ff3030")
  paint_bucketAt (x+W/4, y+H/5,W/4,hw,0)
  
  hw = halfway(hw, "#6060ff")
  paint_bucketAt (x+W-W/4,y+H/5,W/4,hw,0)
  let saved = hw

  y += W/2
  paint_bucketAt (x+W/24,y,W/6,"#ff3030",120)
  paint_bucketAt (x+W-W/2+W/24,y,W/6,"#6060ff",-120)

  hw = halfway(hw, "#ff3030")
  paint_bucketAt (x,     y+H/5,W/4,saved,0)
  hw = halfway("#ffff00", "#6060ff")
  paint_bucketAt (x+W/2, y+H/5,W/4,hw,0) 
  paint_bucketAt (x+W-W/4,y+H/5,W/4,"#ffff00",0)
  ctx.strokeStyle = color
}

function rgbStringToArraY (rgb) {
  console.log(rgb)
  rgb = rgb.replace("rgb(","")
  rgb = rgb.replace(")","")
  let a = rgb.split(",")
  
  let i = 0
  for (;i < a.length; i++)
    a[i] = parseInt(a[i])
  console.log(a)
  return a

}
//colorChannelA and colorChannelB are ints ranging from 0 to 255
function colorChannelMixer(colorChannelA, colorChannelB, amountToMix){
    var channelA = colorChannelA*amountToMix;
    var channelB = colorChannelB*(1-amountToMix);
    return parseInt(channelA+channelB);
}
//rgbA and rgbB are arrays, amountToMix ranges from 0.0 to 1.0
//example (red): rgbA = [255,0,0]
function colorMixer(rgbA, rgbB, amountToMix){
    var r = colorChannelMixer(rgbA[0],rgbB[0],amountToMix);
    var g = colorChannelMixer(rgbA[1],rgbB[1],amountToMix);
    var b = colorChannelMixer(rgbA[2],rgbB[2],amountToMix);
    return "rgb("+r+","+g+","+b+")";
}
function paint_bucketAt (x,y,W,color,a) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = "#000000"
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, d = 0, angle = 0
  if (a)
    angle = a
  //1
  ctx.beginPath()
  p = rotatePoint(x+4*W/24+pet(d), y+10*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+4*W/24+pet(d)
  cpy = y+0*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24+pet(d), y+0*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+20*W/24+pet(d)
  cpy = y+0*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+20*W/24+pet(d), y+10*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()

  //2
  ctx.beginPath()
  p = rotatePoint(x+20*W/24+pet(d), y+10*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+20*W/24+pet(d)
  cpy = y+9*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24+pet(d), y+9*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+4*W/24+pet(d)
  cpy = y+9*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+4*W/24+pet(d), y+10*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+4*W/24+pet(d)
  cpy = y+23*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+4*W/24+pet(d), y+23*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+4*W/24+pet(d)
  cpy = y+24*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24+pet(d), y+24*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+20*W/24+pet(d)
  cpy = y+24*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+20*W/24+pet(d), y+23*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+20*W/24+pet(d)
  cpy = y+10*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+20*W/24+pet(d), y+10*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()
  ctx.stroke()

  //3
  ctx.beginPath()
  p = rotatePoint(x+4*W/24+pet(d), y+10*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+4*W/24+pet(d)
  cpy = y+11*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24+pet(d), y+11*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+20*W/24+pet(d)
  cpy = y+11*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+20*W/24+pet(d), y+10*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()
}

function numerologyAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  let savedF = ctx.fillStyle
  let savedS = ctx.strokeStyle
  let fs = W*0.076
  let r = [0,1,2,3,4,5,6,7,8,9]
  ctx.globalAlpha /= 2
  
  digitalAt(x+10, y+11.5*H/24, fs,color,randomPick(r))
  digitalAt(x+10+fs*10, y+11.5*H/24, fs,color,randomPick(r))
  digitalAt(x+10, y+1*H/24, fs,color,randomPick(r))
  digitalAt(x+10+fs*10, y+1*H/24, fs,color,randomPick(r))
  ctx.globalAlpha *= 2

  
  digitalAt(x+10+fs*3.5, y+1*H/24, fs,color,8)
  digitalAt(x+10+fs*6.8, y+1*H/24, fs,color,6)

  digitalAt(x+10+fs*3.5, y+11.5*H/24, fs,color,4)
  digitalAt(x+10+fs*6.8, y+11.5*H/24, fs,color,7)
}

function slide_ruleAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  let savedF = ctx.fillStyle
  let savedS = ctx.strokeStyle
  ctx.strokeStyle = "#000000"
  ctx.fillStyle = "#e5db71"
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  let coff = 25+Math.random() * W/4
  ctx.save()
  //13
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+4*H/24)
  ctx.lineTo(x+23.8*W/24, y+4*H/24)
  ctx.lineTo(x+23.8*W/24, y+18*H/24)
  ctx.lineTo(x+0*W/24, y+18*H/24)
  ctx.lineTo(x+0*W/24, y+4*H/24)
  ctx.lineTo(x+4*W/24, y+4*H/24)
  ctx.closePath()
  ctx.clip()
  //2 C
  ctx.beginPath()
  ctx.moveTo(x+24*W/24+coff, y+9*H/24)
  ctx.lineTo(x+4*W/24+coff, y+9*H/24)
  ctx.lineTo(x+4*W/24+coff, y+13*H/24)
  ctx.lineTo(x+24*W/24+coff, y+13*H/24)
  ctx.lineTo(x+24*W/24+coff, y+9*H/24)
  ctx.fill()
ctx.stroke()
  //3 D
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+13*H/24)
  ctx.lineTo(x+4*W/24, y+17*H/24)
  ctx.lineTo(x+24*W/24, y+17*H/24)
  ctx.lineTo(x+24*W/24, y+13*H/24)
  ctx.lineTo(x+4*W/24, y+13*H/24)
  ctx.fill()
ctx.stroke()
  //4 K
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+9*H/24)
  ctx.lineTo(x+4*W/24, y+5*H/24)
  ctx.lineTo(x+24*W/24, y+5*H/24)
  ctx.lineTo(x+24*W/24, y+9*H/24)
  ctx.lineTo(x+4*W/24, y+9*H/24)
  ctx.fill()
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+5*H/24)
  ctx.lineTo(x+4*W/24, y+17*H/24)
  ctx.lineTo(x+0*W/24, y+17*H/24)
  ctx.lineTo(x+0*W/24, y+14*H/24)
  cpx = x+1*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+14*H/24)
  cpx = x+2*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+13*H/24)
  cpx = x+2*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+9*H/24)
  cpx = x+2*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+8*H/24)
  cpx = x+0*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+0*W/24, y+8*H/24)
  cpx = x+0*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+0*W/24, y+5*H/24)
  cpx = x+4*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+5*H/24)
  ctx.fillStyle = 'silver'
  ctx.fill()
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+5*H/24)
  cpx = x+10*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+4*H/24)
  ctx.lineTo(x+16*W/24, y+4*H/24)
  ctx.lineTo(x+16*W/24, y+18*H/24)
  ctx.lineTo(x+10*W/24, y+18*H/24)
  ctx.lineTo(x+10*W/24, y+5*H/24)
  ctx.fillStyle = "#e0d4bb"
  ctx.globalAlpha = 0.5
  ctx.fill()
  ctx.globalAlpha = 1
  ctx.stroke()

  // screws
  ctx.beginPath()
  ctx.arc(x+2*W/24, y+6.5*H/24, W/64, 0, Math.PI*2)
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.arc(x+1*W/24, y+16.5*H/24, W/84, 0, Math.PI*2)
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.arc(x+3*W/24, y+16.5*H/24, W/84, 0, Math.PI*2)
  ctx.stroke()
  //let coff = 25+Math.random() * W/4
  logMarksB(x+4*W/24+coff, y+9*H/24, W, coff)
  //11
  logMarksD(x+4*W/24, y+13*H/24, W)
  //12
  logMarksC(x+4*W/24+coff, y+13*H/24, W)
  logMarksA(x+4*W/24, y+9*H/24, W)

  //7 cursor line
  ctx.lineWidth = 1
  ctx.strokeStyle = '#ff0000'
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+5*H/24)
  ctx.lineTo(x+13*W/24, y+17*H/24)
  ctx.stroke()
  ctx.restore()
  ctx.fillStyle = savedF
  ctx.strokeStyle = savedS
}

function is_he_dead_yet_q_At (x,y,W,color,INVERT) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/30
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  x -= 2*W/24
  //1
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+24*H/24)
  ctx.lineTo(x+6*W/24, y+8*H/24)
  ctx.lineTo(x+8*W/24, y+0*H/24)
  ctx.lineTo(x+16*W/24, y+0*H/24)
  ctx.lineTo(x+18*W/24, y+8*H/24)
  ctx.lineTo(x+15*W/24, y+24*H/24)
  ctx.lineTo(x+9*W/24, y+24*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+24*H/24)
  ctx.lineTo(x+19*W/24, y+24*H/24)
  ctx.lineTo(x+22*W/24, y+8*H/24)
  ctx.lineTo(x+20*W/24, y+0*H/24)
  ctx.lineTo(x+16*W/24, y+0*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+8*H/24)
  ctx.lineTo(x+22*W/24, y+8*H/24)
  ctx.stroke()

   //1
  ctx.beginPath()
  ctx.moveTo(x+18.5*W/24, y+2*H/24)
  ctx.lineTo(x+19*W/24, y+4*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+19.5*W/24, y+11*H/24)
  ctx.lineTo(x+19*W/24, y+13*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+17.8*W/24, y+20*H/24)
  ctx.lineTo(x+17.3*W/24, y+22*H/24)
  ctx.stroke()

  //7
  skullAt(x+9.5*W/24, y+2*H/24, 5*W/24, color)
}

function illusion_of_controlAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+14*H/24)
  cpx = x+4*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+17*H/24)
  cpx = x+4*W/24
  cpy = y+16.5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+16*H/24)
  cpx = x+2*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+18*H/24)
  cpx = x+2*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+21*H/24)
  cpx = x+4*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+24*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+17*H/24)
  cpx = x+7*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+17*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+17*H/24)
  cpx = x+17*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+17*H/24)
  ctx.stroke()

  //1 nose
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+17*H/24)
  ctx.lineTo(x+14*W/24, y+22*H/24)
  ctx.lineTo(x+10*W/24, y+22*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+14*H/24)
  cpx = x+20*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+17*H/24)
  cpx = x+20*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+16*H/24)
  cpx = x+22*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+18*H/24)
  cpx = x+22*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+21*H/24)
  cpx = x+20*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+24*H/24)
  ctx.stroke()

  let r = 8*W/24
  ctx.beginPath()
  ctx.arc(x+12*W/24, y+14*H/24, r, Math.PI, Math.PI*2)
  ctx.stroke()
  let cx = x+12*W/24, cy = y+14*H/24
  //hairs
  ctx.lineWidth /= 2
  let i = 0, angle = Math.PI, inc = Math.PI/160, max = Math.floor(Math.PI/inc)
  let x0 = x, y0 = y
  for (; i < max; i++) {
    x0 = cx + r * Math.cos(angle)
    y0 = cy + r * Math.sin(angle)
    ctx.beginPath()
    ctx.moveTo(x0, y0) // on the arc r = 8, (r*W/24)
    x0 = cx + 8.5*W/24 * Math.cos(angle+pet(inc*6))
    y0 = cy +8.5*W/24 * Math.sin(angle+pet(inc*6))
    cpx = x0 // r = 10
    cpy = y0
    x0 = cx + 9*W/24 * Math.cos(angle+pet(inc*9))
    y0 = cy + 9*W/24 * Math.sin(angle+pet(inc*9))
    ctx.quadraticCurveTo(cpx, cpy, x0, y0) // r = 10
    x0 = cx + 11*W/24 * Math.cos(angle+pet(inc*12))
    y0 = cy + 11*W/24 * Math.sin(angle+pet(inc*12))
    cpx = x0 // r = 11
    cpy = y0
    x0 = cx + (12+Math.random()*2)*W/24 * Math.cos(angle+pet(inc*12))
    y0 = cy + (12+Math.random()*2)*W/24 * Math.sin(angle+pet(inc*12))
    ctx.quadraticCurveTo(cpx, cpy, x0, y0) //r = 12
    ctx.stroke()
    angle += inc
  }
}

function palm_readingAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  //symbols
  //13
  let i = 0, w = 0
  ctx.font = "100 "+(W/20)+"pt Garamond"
 
  let symbols = ["\u{260e}","\u{1F582}","\u{02135}","\u{02629}","\u{02646}","\u{02643}","\u{0263F}","\u{05d0}","\u{23ff}",
  "\u{02609}","\u{0260A}","\u{02126}","\u{02107}","\u{02399}","\u{02710}","\u{02204}","\u{02608}","\u{2602}",
  "\u{00B6}","\u{02625}","\u{02647}","\u{02702}","\u{0210F}","\u{0FF04}","\u{022BE}","\u{16D2}"]//,"\u{2614}","\u{2615}",
  //"\u{260E}","\u{267F}"]
  symbols = shuffle(symbols)
  y += 2*H/24
  w = ctx.measureText(symbols[i]).width
  ctx.fillText(symbols[i++],x+5.5*W/24-w/2, y+3.2*H/24)
  w = ctx.measureText(symbols[i]).width
  ctx.fillText(symbols[i++],x+5.5*W/24-w/2, y+6*H/24)
  w = ctx.measureText(symbols[i]).width
  ctx.fillText(symbols[i++],x+5.5*W/24-w/2, y+9*H/24)
  w = ctx.measureText(symbols[i]).width
  ctx.fillText(symbols[i++],x+8.5*W/24-w/2, y+1.2*H/24)
  w = ctx.measureText(symbols[i]).width
  ctx.fillText(symbols[i++],x+8.5*W/24-w/2, y+4.5*H/24)
  w = ctx.measureText(symbols[i]).width
  ctx.fillText(symbols[i++],x+8.5*W/24-w/2, y+8.5*H/24)
  w = ctx.measureText(symbols[i]).width
  ctx.fillText(symbols[i++],x+11.5*W/24-w/2, y+1.2*H/24)
  w = ctx.measureText(symbols[i]).width
  ctx.fillText(symbols[i++],x+11.5*W/24-w/2, y+4.5*H/24)
  w = ctx.measureText(symbols[i]).width
  ctx.fillText(symbols[i++],x+11.5*W/24-w/2, y+8.5*H/24)
  w = ctx.measureText(symbols[i]).width
  ctx.fillText(symbols[i++],x+14.5*W/24-w/2, y+1.2*H/24)
  w = ctx.measureText(symbols[i]).width
  ctx.fillText(symbols[i++],x+14.5*W/24-w/2, y+4.5*H/24)
  w = ctx.measureText(symbols[i]).width
  ctx.fillText(symbols[i++],x+14.5*W/24-w/2, y+8.5*H/24)
  w = ctx.measureText(symbols[i]).width
  ctx.fillText(symbols[i++],x+18.5*W/24-w/2, y+8.5*H/24)
  w = ctx.measureText(symbols[i]).width
  ctx.fillText(symbols[i++],x+18.5*W/24-w/2, y+12*H/24)
  y -= 2*H/24
  //1
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+15*H/24)
  cpx = x+20*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+24*H/24)
  cpx = x+4*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+15*H/24)
  cpx = x+4*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+3*H/24)
  cpx = x+7*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+6*H/24)
  cpx = x+7*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+12*H/24)
  cpx = x+7*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+1*H/24)
  cpx = x+10*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+4*H/24)
  cpx = x+10*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+12*H/24)
  cpx = x+10*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+0*H/24)
  cpx = x+13*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+3*H/24)
  cpx = x+13*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+12*H/24)
  cpx = x+13*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+1*H/24)
  cpx = x+16*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+4*H/24)
  cpx = x+16*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+12*H/24)
  cpx = x+16*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+14*H/24)
  cpx = x+16*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+16*H/24)
  cpx = x+17*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+11*H/24)
  cpx = x+17*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+8*H/24)
  cpx = x+20*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+15*H/24)
  ctx.stroke()
  //12
  ctx.beginPath()
  ctx.moveTo(x+12.45*W/24, y+14*H/24)
  cpx = x+11*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+21*H/24)
  //ctx.stroke()
  //27
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+12*H/24)
  cpx = x+12*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+23*H/24)
  ctx.stroke()

  //1
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+12*H/24)
  ctx.lineTo(x+16*W/24, y+12*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+8*H/24)
  ctx.lineTo(x+7*W/24, y+8*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+4*H/24)
  ctx.lineTo(x+16*W/24, y+4*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+9*H/24)
  ctx.lineTo(x+7*W/24, y+9*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+6*H/24)
  ctx.lineTo(x+7*W/24, y+6*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+12*H/24)
  ctx.lineTo(x+20*W/24, y+12*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+15*H/24)
  ctx.lineTo(x+20*W/24, y+15*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+12*H/24)
  cpx = x+13*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+15*H/24)
  cpx = x+4*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+15*H/24)
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+15*H/24)
  cpx = x+12*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+23*H/24)
  cpx = x+12*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+24*H/24)
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+15*H/24)
  cpx = x+10*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+20*H/24)
  ctx.stroke()
}

function uscustomaryAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+8*H/24)
  ctx.lineTo(x+2*W/24, y+8*H/24)
  ctx.lineTo(x+4*W/24, y+12*H/24)
  ctx.lineTo(x+2*W/24, y+16*H/24)
  ctx.lineTo(x+0*W/24, y+16*H/24)
  ctx.lineTo(x+0*W/24, y+8*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+16*H/24)
  ctx.lineTo(x+24*W/24, y+16*H/24)
  ctx.lineTo(x+24*W/24, y+8*H/24)
  ctx.lineTo(x+2*W/24, y+8*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+8*H/24)
  ctx.lineTo(x+6*W/24, y+11*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+8*H/24)
  ctx.lineTo(x+10*W/24, y+13*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+8*H/24)
  ctx.lineTo(x+14*W/24, y+11*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+8*H/24)
  ctx.lineTo(x+18*W/24, y+13*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+22*W/24, y+8*H/24)
  ctx.lineTo(x+22*W/24, y+11*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+8*H/24)
  ctx.lineTo(x+4*W/24, y+10*H/24)
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+8*H/24)
  ctx.lineTo(x+8*W/24, y+10*H/24)
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+8*H/24)
  ctx.lineTo(x+12*W/24, y+10*H/24)
  ctx.stroke()

  //11
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+8*H/24)
  ctx.lineTo(x+16*W/24, y+10*H/24)
  ctx.stroke()

  //12
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+8*H/24)
  ctx.lineTo(x+20*W/24, y+10*H/24)
  ctx.stroke()

  //13
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+14*H/24)
  ctx.stroke()

  //14
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+14*H/24)
  ctx.stroke()
}



function hands_offAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "round"
  ctx.lineJoin = "bevel"

  y -= 2*H/24
  
  //2
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+23*H/24)
  cpx = x+2*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+22*H/24)
  cpx = x+2*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+21*H/24)
  cpx = x+10*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+22*H/24)
  cpx = x+10*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+23*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+22*H/24)
  ctx.lineTo(x+2*W/24, y+26*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+22*H/24)
  ctx.lineTo(x+10*W/24, y+26*H/24)
  ctx.stroke()

  

  //8
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+22*H/24)
  cpx = x+14*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+21*H/24)
  cpx = x+22*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+22*H/24)
  cpx = x+22*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+23*H/24)
  cpx = x+14*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+22*H/24)
  cpx = x+14*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+26*H/24)
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+22*W/24, y+22*H/24)
  ctx.lineTo(x+22*W/24, y+26*H/24)
  ctx.stroke()

  y -= 1*H/24
  //1----------------------------------------------
  //5
  ctx.beginPath()
  ctx.moveTo(x+22*W/24, y+20*H/24)
  cpx = x+23*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+15*H/24)
  cpx = x+23*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+9*H/24)
  cpx = x+23*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+8*H/24)
  cpx = x+21*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+9*H/24)
  cpx = x+21*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+13*H/24)
  cpx = x+21*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+6*H/24)
  cpx = x+21*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+5*H/24)
  cpx = x+19*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+6*H/24)
  cpx = x+19*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+12*H/24)
  cpx = x+19*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+5*H/24)
  cpx = x+19*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+4*H/24)
  cpx = x+17*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+5*H/24)
  cpx = x+17*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+12*H/24)
  cpx = x+17*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+6*H/24)
  cpx = x+17*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+5*H/24)
  cpx = x+15*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+6*H/24)
  cpx = x+15*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+14*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+20*H/24)
  cpx = x+13*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+16*H/24)
  cpx = x+13*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+11*H/24)
  cpx = x+13*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+10*H/24)
  cpx = x+15*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+13*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+20*H/24)
  cpx = x+18*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+20*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+15*H/24)
  cpx = x+1*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+9*H/24)
  cpx = x+1*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+8*H/24)
  cpx = x+3*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+9*H/24)
  cpx = x+3*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+13*H/24)
  cpx = x+3*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+6*H/24)
  cpx = x+3*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+5*H/24)
  cpx = x+5*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+6*H/24)
  cpx = x+5*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+12*H/24)
  cpx = x+5*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+5*H/24)
  cpx = x+5*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+4*H/24)
  cpx = x+7*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+5*H/24)
  cpx = x+7*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+12*H/24)
  cpx = x+7*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+6*H/24)
  cpx = x+7*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+5*H/24)
  cpx = x+9*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+6*H/24)
  cpx = x+9*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+12*H/24)
  cpx = x+9*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+13*H/24)
  cpx = x+9*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+14*H/24)
  cpx = x+9*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+10*H/24)
  cpx = x+11*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+11*H/24)
  cpx = x+11*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+14*H/24)
  cpx = x+11*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+16*H/24)
  cpx = x+11*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+20*H/24)
  cpx = x+6*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+20*H/24)
  cpx = x+1*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+15*H/24)
  ctx.stroke()
}

function cancerAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.save()
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+24*H/24)
  ctx.lineTo(x+17*W/24, y+10*H/24)
  ctx.lineTo(x+17*W/24, y+20*H/24)
  cpx = x+17*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+22*H/24)
  cpx = x+19*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+20*H/24)
  cpx = x+19*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+8*H/24)
  cpx = x+18.5*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+6*H/24)
  cpx = x+14*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+5*H/24)
  cpx = x+14*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+2*H/24)
  cpx = x+14*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+0*H/24)
  cpx = x+10*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+2*H/24)
  cpx = x+10*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+4*H/24)
  cpx = x+10*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+6*H/24)
  cpx = x+5.5*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+8*H/24)
  cpx = x+5*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+20*H/24)
  cpx = x+5*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+22*H/24)
  cpx = x+7*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+20*H/24)
  cpx = x+7*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+10*H/24)
  cpx = x+7*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+24*H/24)
  ctx.stroke()
  ctx.clip()
  //2
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+22*H/24)
  cpx = x+12*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+24*H/24)
  ctx.stroke()
  let savedF = ctx.fillStyle
  ctx.fillStyle = "#ff0000"
  ctx.globalAlpha /= 4
  let i = 0, offset, yoff
  let max = randomPick([3,4,5])
  for (; i < max; i++) {
    offset = 6*W/24 + Math.random()*12*W/24
    yoff = Math.random()*H
    r = (0.35+Math.random()*0.75)*W/24
    ctx.beginPath()
    ctx.arc(x+offset, y+yoff, r, 0, Math.PI*2)
    ctx.fill()
    ctx.beginPath()
    ctx.arc(x+offset, y+yoff, r/2, 0, Math.PI*2)
    ctx.fill()
  }
  let ic = words.match(/\b\w{3,}(ous|ic)\b/g)
  let oma = words.match(/\b\w{3,}(mia|oma)\b/g)
  ctx.restore()
  ctx.globalAlpha *= 4
  ctx.fillStyle = color
  ctx.font = "italic " +(W*0.045)+"pt Garamond"
  let c = randomPick(ic)+" "+randomPick(oma)
  let w = ctx.measureText(c).width
  ctx.fillText(c, x+W/2-w/2, y+H+W/24)
}

function elementaryAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  let savedF = ctx.fillStyle
  ctx.lineCap = "round"
  ctx.lineJoin = "bevel"
  
  ctx.lineWidth *= 3
  x += W/48
  //1
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+20*H/24)
  cpx = x+3*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+13*H/24)
  cpx = x+3.5*W/24
  cpy = y+11.5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+10*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+10*H/24)
  cpx = x+13*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+10*H/24)
  cpx = x+14*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+20*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+23*H/24)
  cpx = x+7*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+14*H/24)
  cpx = x+6*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+12*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+9*H/24)
  cpx = x+17*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+6*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+5*H/24)
  cpx = x+3*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+10*H/24)
  cpx = x+3*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+11*H/24)
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+9*H/24)
  cpx = x+6*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+5*H/24)
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+17*H/24)
  cpx = x+10*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+12*H/24)
  ctx.stroke()

  ctx.fillStyle = savedF
  ctx.lineWidth /= 3
  //1 desktop
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+2*H/24)
  cpx = x+22*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+2*H/24)
  cpx = x+24*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+6*H/24)
  cpx = x+18*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+6*H/24)
  cpx = x+11*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+5*H/24)
  cpx = x+13*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+4*H/24)
  cpx = x+7*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+3*H/24)
  cpx = x+9*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+2*H/24)
  ctx.fill()
  ctx.stroke()
  //2 back
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+6*H/24)
  cpx = x+1*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+0*W/24, y+2*H/24)
  cpx = x+0*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+1*H/24)
  cpx = x+6*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+1*H/24)
  cpx = x+7*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+2*H/24)
  cpx = x+7*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+4*H/24)
  cpx = x+7*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+6*H/24)
  cpx = x+3*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+6*H/24)
  ctx.fill()
  ctx.stroke()

  //3 seat
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+10*H/24)
  cpx = x+9*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+8*H/24)
  cpx = x+10*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+9*H/24)
  cpx = x+15*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+10*H/24)
  cpx = x+11*W/24
  cpy = y+12.2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+12.2*H/24)
  cpx = x+10*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+11.2*H/24)
  cpx = x+3*W/24
  cpy = y+11.2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+10*H/24)
  ctx.fill()
  ctx.stroke()
}

function silent_musicAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = [], MIRROR = false
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  let savedF = ctx.fillStyle
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "butt"
  ctx.lineJoin = "bevel"
  let xi = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]
  if (MIRROR)
    xi.reverse()
  ctx.setLineDash([W/48])
  //1
  ctx.beginPath()
  ctx.moveTo(x+xi[10]*W/24, y+10*H/24)
  cpx = x+xi[8]*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[9]*W/24, y+15*H/24)
  cpx = x+xi[13]*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[16]*W/24, y+23*H/24)
  cpx = x+xi[23]*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[23]*W/24, y+16*H/24)
  cpx = x+xi[23]*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[15]*W/24, y+9*H/24)
  cpx = x+xi[12]*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[10]*W/24, y+10*H/24)
  ctx.stroke()

  //3
  //ctx.lineWidth *= 1.6
  ctx.beginPath()
  ctx.moveTo(x+xi[3]*W/24, y+5*H/24)
  ctx.lineTo(x+xi[0]*W/24, y+2*H/24)
  ctx.lineTo(x+xi[2]*W/24, y+0*H/24)
  ctx.lineTo(x+xi[5]*W/24, y+3*H/24)
 // ctx.lineTo(x+xi[3]*W/24, y+5*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.arc(x+xi[16]*W/24, y+16*H/24, 4*W/48,0,Math.PI*2)
  ctx.fill()

  //5
  ctx.beginPath()
  ctx.moveTo(x+xi[18]*W/24, y+20*H/24)
  ctx.lineTo(x+xi[20]*W/24, y+18*H/24)
  ctx.stroke()

  ctx.save()
  ctx.beginPath()
  ctx.moveTo(x+xi[7]*W/24, y+7*H/24)
  ctx.lineTo(x+xi[7]*W/24, y+24.5*H/24)
  ctx.lineTo(x+xi[23]*W/24, y+24.5*H/24)
  ctx.closePath()
  ctx.clip()

  y+=1*H/24, x -= W/24
  ctx.beginPath()
  ctx.moveTo(x+xi[10]*W/24, y+10*H/24)
  cpx = x+xi[8]*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[9]*W/24, y+15*H/24)
  cpx = x+xi[13]*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[16]*W/24, y+23*H/24)
  cpx = x+xi[23]*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[23]*W/24, y+16*H/24)
  cpx = x+xi[23]*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[15]*W/24, y+9*H/24)
  cpx = x+xi[12]*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[10]*W/24, y+10*H/24)
  ctx.stroke()
  ctx.restore()
  y -= 1*H/24, x += W/24
  //2
  ctx.beginPath()
  ctx.moveTo(x+11.25*W/24, y+13*H/24)
  ctx.lineTo(x+xi[13]*W/24, y+11.25*H/24)
  ctx.lineTo(x+xi[5]*W/24, y+3.25*H/24)
  ctx.lineTo(x+3.25*W/24, y+5*H/24)
  ctx.lineTo(x+11.25*W/24, y+13*H/24)
  ctx.fillStyle = savedF
  ctx.fill()
  ctx.stroke()
  ctx.fillStyle = color
  ctx.setLineDash([])
}

function gunAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = [], MIRROR = false
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/30
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let xi = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]
  if (MIRROR)
    xi.reverse()
  //1
  ctx.beginPath()
  ctx.moveTo(x+xi[3]*W/24, y+5*H/24)
  ctx.lineTo(x+xi[3]*W/24, y+4*H/24)
  ctx.lineTo(x+xi[6]*W/24, y+4*H/24)
  ctx.lineTo(x+xi[6]*W/24, y+5*H/24)
  ctx.lineTo(x+xi[23]*W/24, y+5*H/24)
  ctx.lineTo(x+xi[23]*W/24, y+8*H/24)
  ctx.lineTo(x+xi[21]*W/24, y+8*H/24)
  ctx.lineTo(x+xi[21]*W/24, y+10*H/24)
  ctx.lineTo(x+xi[9]*W/24, y+10*H/24)
  ctx.lineTo(x+xi[9]*W/24, y+22*H/24)
  ctx.lineTo(x+xi[1]*W/24, y+22*H/24)
  ctx.lineTo(x+xi[2]*W/24, y+5*H/24)
  ctx.lineTo(x+xi[3]*W/24, y+5*H/24)
  ctx.fill()

  //2
  ctx.beginPath()
  ctx.moveTo(x+xi[9]*W/24, y+14*H/24)
  ctx.lineTo(x+xi[12]*W/24, y+14*H/24)
  cpx = x+xi[14]*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[14]*W/24, y+12*H/24)
  cpx = x+xi[14]*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[14]*W/24, y+10*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+xi[10]*W/24, y+10*H/24)
  cpx = x+xi[10]*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[11]*W/24, y+13*H/24)
  ctx.stroke()
}

function symbolic_fencingAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = [], MIRROR = false
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "round"
  ctx.lineJoin = "bevel"
  let xi = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]
  if (MIRROR)
    xi.reverse()
  //1
  ctx.beginPath()
  ctx.moveTo(x+xi[12]*W/24, y+23*H/24)
  cpx = x+xi[11]*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[11]*W/24, y+3*H/24)
  ctx.lineTo(x+xi[10]*W/24, y+3*H/24)
  ctx.lineTo(x+xi[11]*W/24, y+23*H/24)
  ctx.lineTo(x+xi[12]*W/24, y+23*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+xi[0]*W/24, y+6*H/24)
  cpx = x+xi[9]*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11.3*W/24, y+5*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+9.9*W/24, y+6*H/24)
  cpx = x+xi[14]*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[24]*W/24, y+5*H/24)
  ctx.stroke()
}

function calculatorAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = [], MIRROR = false
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let xi = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]
  if (MIRROR)
    xi.reverse()
  //1
  ctx.globalAlpha /= 4

  //1
  ctx.beginPath()
  ctx.moveTo(x+xi[5]*W/24, y+7*H/24)
  ctx.lineTo(x+xi[8]*W/24, y+7*H/24)
  ctx.lineTo(x+xi[8]*W/24, y+10*H/24)
  ctx.lineTo(x+xi[5]*W/24, y+10*H/24)
  ctx.lineTo(x+xi[5]*W/24, y+7*H/24)
  ctx.fillStyle = "#ee8787"
  ctx.fill()

  //2
  ctx.beginPath()
  ctx.moveTo(x+xi[17]*W/24, y+7*H/24)
  ctx.lineTo(x+xi[20]*W/24, y+7*H/24)
  ctx.lineTo(x+xi[20]*W/24, y+10*H/24)
  ctx.lineTo(x+xi[17]*W/24, y+10*H/24)
  ctx.lineTo(x+xi[17]*W/24, y+7*H/24)
  ctx.fillStyle = "#00ffff"
  ctx.fill()

  //3
  ctx.beginPath()
  ctx.moveTo(x+xi[8]*W/24, y+7*H/24)
  ctx.lineTo(x+xi[17]*W/24, y+7*H/24)
  ctx.lineTo(x+xi[17]*W/24, y+10*H/24)
  ctx.lineTo(x+xi[20]*W/24, y+10*H/24)
  ctx.lineTo(x+xi[20]*W/24, y+22*H/24)
  ctx.lineTo(x+xi[5]*W/24, y+22*H/24)
  ctx.lineTo(x+xi[5]*W/24, y+10*H/24)
  ctx.lineTo(x+xi[8]*W/24, y+10*H/24)
  ctx.lineTo(x+xi[8]*W/24, y+7*H/24)
  ctx.fillStyle = color
  ctx.fill()
  ctx.globalAlpha *= 4

  ctx.beginPath()
  ctx.moveTo(x+xi[5]*W/24, y+2*H/24)
  ctx.lineTo(x+xi[20]*W/24, y+2*H/24)
  ctx.lineTo(x+xi[20]*W/24, y+22*H/24)
  ctx.lineTo(x+xi[5]*W/24, y+22*H/24)
  ctx.lineTo(x+xi[5]*W/24, y+2*H/24)
  ctx.stroke()

  //2 outline display
  ctx.beginPath()
  ctx.moveTo(x+xi[6]*W/24, y+7*H/24)
  cpx = x+xi[5]*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[5]*W/24, y+6*H/24)
  cpx = x+xi[5]*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[5]*W/24, y+3*H/24)
  cpx = x+xi[5]*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[6]*W/24, y+2*H/24)
  cpx = x+xi[19]*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[19]*W/24, y+2*H/24)
  cpx = x+xi[20]*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[20]*W/24, y+3*H/24)
  cpx = x+xi[20]*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[20]*W/24, y+6*H/24)
  cpx = x+xi[20]*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[19]*W/24, y+7*H/24)
  cpx = x+xi[6]*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[6]*W/24, y+7*H/24)
  ctx.stroke()

  //11
  ctx.beginPath()
  ctx.moveTo(x+xi[5]*W/24, y+23*H/24)
  ctx.lineTo(x+xi[20]*W/24, y+23*H/24)
  cpx = x+xi[21]*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[21]*W/24, y+22*H/24)
  cpx = x+xi[21]*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[21]*W/24, y+2*H/24)
  cpx = x+xi[21]*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[20]*W/24, y+1*H/24)
  cpx = x+xi[5]*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[5]*W/24, y+1*H/24)
  cpx = x+xi[4]*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[4]*W/24, y+2*H/24)
  cpx = x+xi[4]*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[4]*W/24, y+22*H/24)
  cpx = x+xi[4]*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[5]*W/24, y+23*H/24)
  ctx.lineWidth *= 2
  ctx.stroke()
  ctx.lineWidth /= 2

  let i = 0, offset = 3*W/24, x0 = x
  x = x0
  ctx.font = "800 "+(W*0.08)+"pt Courier"
  let w = ctx.measureText("5138008.").width // 580086i8
  let fs = W/60
  digitalAt(x+W/2-w/2 + 5*W/24, y+4*H/24, fs,color,5)
  digitalAt(x+W/2-w/2 + 6.2*W/24, y+4*H/24, fs,color,3)
  digitalAt(x+W/2-w/2 + 7.4*W/24, y+4*H/24, fs,color,1)
  digitalAt(x+W/2-w/2 + 8.6*W/24, y+4*H/24, fs,color,8)
  digitalAt(x+W/2-w/2 + 9.8*W/24, y+4*H/24, fs,color,0)
  digitalAt(x+W/2-w/2 + 11*W/24, y+4*H/24, fs,color,0)
  digitalAt(x+W/2-w/2 + 12.2*W/24, y+4*H/24, fs,color,8)

  ctx.font = "800 "+(W*0.05)+"pt Courier"
  let chars = "c()Mp789/s456xs123-=0.%+".split("")
  chars[3] = "\u{03C0}"
  chars[4] = "on"
  chars[8] = "\u{00f7}"
  chars[9] = "\u{221a}"
  chars[13] = "\u{00D7}"
  chars[14] = "x\u{00b2}"
  ctx.fillStyle = "#ffffff"
  for (;i < chars.length; i++) {
    if (i === 19) {
      ctx.beginPath()
      ctx.moveTo(x+xi[5]*W/24, y+8*H/24)
      cpx = x+xi[5]*W/24
      cpy = y+7*H/24
      ctx.quadraticCurveTo(cpx, cpy, x+xi[6]*W/24, y+7*H/24)
      cpx = x+xi[7]*W/24
      cpy = y+7*H/24
      ctx.quadraticCurveTo(cpx, cpy, x+xi[7]*W/24, y+7*H/24)
      cpx = x+xi[8]*W/24
      cpy = y+7*H/24
      ctx.quadraticCurveTo(cpx, cpy, x+xi[8]*W/24, y+8*H/24)
      cpx = x+xi[8]*W/24
      cpy = y+12*H/24
      ctx.quadraticCurveTo(cpx, cpy, x+xi[8]*W/24, y+12*H/24)
      cpx = x+xi[8]*W/24
      cpy = y+13*H/24
      ctx.quadraticCurveTo(cpx, cpy, x+xi[7]*W/24, y+13*H/24)
      cpx = x+xi[6]*W/24
      cpy = y+13*H/24
      ctx.quadraticCurveTo(cpx, cpy, x+xi[6]*W/24, y+13*H/24)
      cpx = x+xi[5]*W/24
      cpy = y+13*H/24
      ctx.quadraticCurveTo(cpx, cpy, x+xi[5]*W/24, y+12*H/24)
      cpx = x+xi[5]*W/24
      cpy = y+8*H/24
      ctx.quadraticCurveTo(cpx, cpy, x+xi[5]*W/24, y+8*H/24)
      ctx.stroke()

    } else {
      ctx.beginPath()
      ctx.moveTo(x+xi[6]*W/24, y+10*H/24)
      cpx = x+xi[5]*W/24
      cpy = y+10*H/24
      ctx.quadraticCurveTo(cpx, cpy, x+xi[5]*W/24, y+9*H/24)
      cpx = x+xi[5]*W/24
      cpy = y+8*H/24
      ctx.quadraticCurveTo(cpx, cpy, x+xi[5]*W/24, y+8*H/24)
      cpx = x+xi[5]*W/24
      cpy = y+7*H/24
      ctx.quadraticCurveTo(cpx, cpy, x+xi[6]*W/24, y+7*H/24)
      cpx = x+xi[7]*W/24
      cpy = y+7*H/24
      ctx.quadraticCurveTo(cpx, cpy, x+xi[7]*W/24, y+7*H/24)
      cpx = x+xi[8]*W/24
      cpy = y+7*H/24
      ctx.quadraticCurveTo(cpx, cpy, x+xi[8]*W/24, y+8*H/24)
      cpx = x+xi[8]*W/24
      cpy = y+9*H/24
      ctx.quadraticCurveTo(cpx, cpy, x+xi[8]*W/24, y+9*H/24)
      cpx = x+xi[8]*W/24
      cpy = y+10*H/24
      ctx.quadraticCurveTo(cpx, cpy, x+xi[7]*W/24, y+10*H/24)
      cpx = x+xi[6]*W/24
      cpy = y+10*H/24
      ctx.quadraticCurveTo(cpx, cpy, x+xi[6]*W/24, y+10*H/24)
      ctx.stroke()
    }

    if (chars[i] === "=")
      y += 1.5*H/24
    if (i === 4 || i === 14)
      x -= 0.5*W/24
    
    ctx.fillText(chars[i], x+6*W/24, y+9*H/24)
    if (i === 4 || i === 14)
      x += 0.5*W/24
    if (chars[i] === "=")
      y -= 1.5*H/24
    x += offset
    if (x > x0+14*W/24) {
      x = x0
      y += offset
    }
  }
}

function wheel_of_consumptionAt (x,y,W,color) { // windAt
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/30
  let v = document.getElementById("featuresize").value
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, angle = 0, d = 0
  
  document.getElementById("featuresize").value /= 2
  let icons = ["amazonAt","googleAt","applelogoAt","walmartlogoAt","twitterAt","microsoftlogoAt","instaAt","targetlogoAt","mcdAt"]
  let fills = ["#000000", "#ffffff",  "#000000",     "#0071CE",     "#000000",  "#ffffff",       "#000000","#ffffff",      "#cc0000"]
  
  ctx.save()
  ctx.beginPath()
  ctx.arc(cx,cy,W/2,0,Math.PI*2)
  ctx.closePath()
  ctx.clip()
  angle = 0
  let icon = randomPick(icons)
  let i = 0, r = W/1.5, inc = (Math.PI*2)/9
  let x0 = x, y0 = y
  for (; i < 9; i++) {
    x0 = cx + r * Math.cos(angle)
    y0 = cy + r * Math.sin(angle)
    ctx.beginPath()
    ctx.moveTo(cx,cy)
    ctx.lineTo(x0,y0)
    angle += inc
    x0 = cx + r * Math.cos(angle)
    y0 = cy + r * Math.sin(angle)
    ctx.lineTo(x0,y0)
    ctx.fillStyle = fills[i]
    ctx.closePath()
    ctx.fill()
  }
  ctx.restore()
  i = 0, angle = (Math.PI*2)/18
  cx -= W/12, cy -= W/12
  r = W/2.6
  let c = color = "#ffffff"
  for (; i < 9; i++) {
    x0 = cx + r * Math.cos(angle)
    y0 = cy + r * Math.sin(angle)
    window [icons[i]] (x0, y0, W/6, c)
    angle += inc
  }
  cx += W/12, cy += W/12
  angle = Math.random() * 360
  ctx.shadowColor="#222222"
  ctx.shadowBlur = 7
  ctx.shadowOffsetX = 5
  ctx.shadowOffsetY  = 5
  //arrow
  ctx.beginPath()
  p = rotatePoint(x+10*W/24+pet(d), y+19*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+11*W/24+pet(d), y+19*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+12*W/24+pet(d), y+18*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+13*W/24+pet(d), y+19*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+14*W/24+pet(d), y+19*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+14*W/24+pet(d), y+17*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+13*W/24+pet(d), y+16*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+13*W/24+pet(d), y+8*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+14*W/24+pet(d), y+8*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+12*W/24+pet(d), y+5*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+10*W/24+pet(d), y+8*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+11*W/24+pet(d), y+8*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+11*W/24+pet(d), y+16*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+10*W/24+pet(d), y+17*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+10*W/24+pet(d), y+19*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.fillStyle = savedF
  ctx.fill()
  
  ctx.shadowBlur = 0
  ctx.shadowOffsetX = 0
  ctx.shadowOffsetY  = 0
  ctx.stroke()
  document.getElementById("featuresize").value = v
  ctx.fillStyle = savedF
  ctx.strokeStyle = savedS
}

function walmartlogoAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = "#FCB61A"
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, d = 0, angle = 0//pet(180)
  let i = 0
  for (; i < 6; i++) {
    //1
    ctx.beginPath()
    p = rotatePoint(x+12*W/24+pet(d), y+1*H/24+pet(d) ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    cpx = x+9.5*W/24+pet(d)
    cpy = y+1*H/24+pet(d)
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+10*W/24+pet(d), y+4*H/24+pet(d),cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    cpx = x+11*W/24+pet(d)
    cpy = y+8*H/24+pet(d)
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+11*W/24+pet(d), y+8.25*H/24+pet(d),cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    cpx = x+11*W/24+pet(d)
    cpy = y+9*H/24+pet(d)
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+12*W/24+pet(d), y+9*H/24+pet(d),cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    cpx = x+13*W/24+pet(d)
    cpy = y+9*H/24+pet(d)
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+13*W/24+pet(d), y+8.25*H/24+pet(d),cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    cpx = x+14*W/24+pet(d)
    cpy = y+4*H/24+pet(d)
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+14*W/24+pet(d), y+4*H/24+pet(d),cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    cpx = x+14.5*W/24+pet(d)
    cpy = y+1*H/24+pet(d)
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+12*W/24+pet(d), y+1*H/24+pet(d),cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    ctx.fill()
    angle += 60
  }
}

function targetlogoAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = [], MIRROR = false
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = "#cc0000"
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let xi = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]
  if (MIRROR)
    xi.reverse()
  //1
  ctx.beginPath()
  ctx.arc(x+xi[12]*W/24, y+12*H/24, 3*W/24,0,Math.PI*2)
  ctx.closePath()
  ctx.fill()

  //2
  ctx.beginPath()
  ctx.arc(x+xi[12]*W/24, y+12*H/24, 6*W/24, Math.PI*1.5, Math.PI*1.5+Math.PI*2)
  ctx.lineTo(x+xi[12]*W/24, y+2*H/24)
  ctx.arc(x+xi[12]*W/24, y+12*H/24, 9*W/24, Math.PI*1.5, Math.PI*1.5-Math.PI*2, -1)
  ctx.fill()
}

function microsoftlogoAt (x,y,W,color) {
  let colors = ["#eb4f23", "#f6b409", "#7cb506", "#05a1e8"]

  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = [], MIRROR = false
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let xi = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]
  if (MIRROR)
    xi.reverse()
  //1
  ctx.beginPath()
  ctx.moveTo(x+xi[0]*W/24, y+0*H/24)
  ctx.lineTo(x+xi[11]*W/24, y+0*H/24)
  ctx.lineTo(x+xi[11]*W/24, y+11*H/24)
  ctx.lineTo(x+xi[0]*W/24, y+11*H/24)
  ctx.lineTo(x+xi[0]*W/24, y+0*H/24)
  ctx.fillStyle = colors[0]
  ctx.fill()

  //2
  ctx.beginPath()
  ctx.moveTo(x+xi[0]*W/24, y+12*H/24)
  ctx.lineTo(x+xi[11]*W/24, y+12*H/24)
  ctx.lineTo(x+xi[11]*W/24, y+22*H/24)
  ctx.lineTo(x+xi[11]*W/24, y+23*H/24)
  ctx.lineTo(x+xi[0]*W/24, y+23*H/24)
  ctx.lineTo(x+xi[0]*W/24, y+12*H/24)
  ctx.fillStyle = colors[3]
  ctx.fill()

  //3
  ctx.beginPath()
  ctx.moveTo(x+xi[12]*W/24, y+11*H/24)
  ctx.lineTo(x+xi[23]*W/24, y+11*H/24)
  ctx.lineTo(x+xi[23]*W/24, y+0*H/24)
  ctx.lineTo(x+xi[12]*W/24, y+0*H/24)
  ctx.lineTo(x+xi[12]*W/24, y+11*H/24)
  ctx.fillStyle = colors[2]
  ctx.fill()

  //4
  ctx.beginPath()
  ctx.moveTo(x+xi[12]*W/24, y+12*H/24)
  ctx.lineTo(x+xi[12]*W/24, y+23*H/24)
  ctx.lineTo(x+xi[23]*W/24, y+23*H/24)
  ctx.lineTo(x+xi[23]*W/24, y+12*H/24)
  ctx.lineTo(x+xi[12]*W/24, y+12*H/24)
  ctx.fillStyle = colors[1]
  ctx.fill()
}

function enronlogoAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  x *= 1.1, y *= 1.2
  W *= 0.67
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = W/24//1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "miter"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, d = 0, angle = 45

  //1
  ctx.beginPath()
  p = rotatePoint(x+0*W/24+pet(d), y+24*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+0*W/24+pet(d), y+0*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+5*W/24+pet(d), y+0*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+5*W/24+pet(d), y+16*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+9*W/24+pet(d), y+16*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+9*W/24+pet(d), y+0*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+14*W/24+pet(d), y+0*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+14*W/24+pet(d), y+16*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+18*W/24+pet(d), y+16*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+18*W/24+pet(d), y+0*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+23*W/24+pet(d), y+0*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+23*W/24+pet(d), y+24*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //2
  ctx.beginPath()
  p = rotatePoint(x+0*W/24+pet(d), y+19*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+3*W/24+pet(d), y+19*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //3
  ctx.beginPath()
  p = rotatePoint(x+0*W/24+pet(d), y+24*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+3*W/24+pet(d), y+24*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //4
  ctx.beginPath()
  p = rotatePoint(x+0*W/24+pet(d), y+21.5*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+3*W/24+pet(d), y+21.5*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()


  ctx.beginPath()
  p = rotatePoint(x+5*W/24+pet(d), y+24*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+5*W/24+pet(d), y+19*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()
  //5
  ctx.lineJoin = "round"

  ctx.beginPath()
  p = rotatePoint(x+5*W/24+pet(d), y+24*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+5*W/24+pet(d), y+19*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+8*W/24+pet(d), y+24*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+8*W/24+pet(d), y+19*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()
  ctx.lineJoin = "miter"

  ctx.beginPath()
  p = rotatePoint(x+8*W/24+pet(d), y+24*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+8*W/24+pet(d), y+19*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  // R
  ctx.beginPath()
  p = rotatePoint(x+10*W/24+pet(d), y+24*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+10*W/24+pet(d), y+19*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+11*W/24+pet(d), y+19*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  cpx = x+12*W/24+pet(d)
  cpy = y+19*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24+pet(d), y+19*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+13*W/24+pet(d)
  cpy = y+19*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+13*W/24+pet(d), y+20.5*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+13*W/24+pet(d)
  cpy = y+21*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+10*W/24+pet(d), y+21*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+12*W/24+pet(d)
  cpy = y+21*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24+pet(d), y+21*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+13*W/24+pet(d)
  cpy = y+21*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+13*W/24+pet(d), y+24*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
 // ctx.stroke()

 ctx.beginPath()
  p = rotatePoint(x+10*W/24+pet(d), y+24*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+10*W/24+pet(d), y+19*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+12*W/24+pet(d), y+19*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  cpx = x+13*W/24+pet(d)
  cpy = y+19*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+13*W/24+pet(d), y+20*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+13*W/24+pet(d)
  cpy = y+21.5*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24+pet(d), y+21.5*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  p = rotatePoint(x+10*W/24+pet(d), y+21.5*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+12*W/24+pet(d), y+21.5*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  cpx = x+13*W/24+pet(d)
  cpy = y+21.5*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+13*W/24+pet(d), y+22.5*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  p = rotatePoint(x+13*W/24+pet(d), y+24*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //7
  ctx.beginPath()
  p = rotatePoint(x+15*W/24+pet(d), y+20*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+15*W/24+pet(d)
  cpy = y+19*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+16.5*W/24+pet(d), y+19*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+18*W/24+pet(d)
  cpy = y+19*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+18*W/24+pet(d), y+20*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+18*W/24+pet(d)
  cpy = y+23*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+18*W/24+pet(d), y+23*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+18*W/24+pet(d)
  cpy = y+24*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+16.5*W/24+pet(d), y+24*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+15*W/24+pet(d)
  cpy = y+24*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+15*W/24+pet(d), y+23*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+15*W/24+pet(d)
  cpy = y+19*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+15*W/24+pet(d), y+20*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()
x += 15*W/24

  ctx.beginPath()
  p = rotatePoint(x+5*W/24+pet(d), y+24*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+5*W/24+pet(d), y+19*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()
  ctx.lineJoin = "round"
  ctx.beginPath()
  p = rotatePoint(x+5*W/24+pet(d), y+24*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+5*W/24+pet(d), y+19*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+8*W/24+pet(d), y+24*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+8*W/24+pet(d), y+19*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()
  ctx.lineJoin = "miter"
}

function applelogoAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = [], MIRROR = false
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = "#ffffff"
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let xi = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]
  if (MIRROR)
    xi.reverse()

  //1
  ctx.beginPath()
  ctx.moveTo(x+xi[12]*W/24, y+6*H/24)
  cpx = x+xi[12]*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[17]*W/24, y+1*H/24)
  cpx = x+xi[17]*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[12]*W/24, y+6*H/24)
  ctx.fill()
  
  ctx.beginPath()
  ctx.moveTo(x+xi[8]*W/24, y+23*H/24)
  cpx = x+xi[12]*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[16]*W/24, y+23*H/24)
  cpx = x+xi[21]*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[22]*W/24, y+17*H/24)
  cpx = x+xi[19]*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[19]*W/24, y+13*H/24)
  cpx = x+xi[19]*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[22]*W/24, y+8*H/24)
  cpx = x+xi[21]*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[17]*W/24, y+6*H/24)
  cpx = x+xi[12]*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[8]*W/24, y+6*H/24)
  cpx = x+xi[2]*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[2]*W/24, y+13*H/24)
  cpx = x+xi[4]*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[8]*W/24, y+23*H/24)
  ctx.fill()
}


function chip2At (cx,cy,r,color) {
  let canvas = document.getElementById("myCanvas");
  let ctx = canvas.getContext("2d");
  let x = cx
  let y = cy
  ctx.fillStyle = color
  //for (var t = 0; t < 5; t++) {
    let radius = r
    let r0 = radius
    x = 0
    y = 0
    angle = Math.random() * 6.42
    ctx.beginPath();
    var edges = 3+Math.random()*11;
    let max = Math.PI * 2
    let increase = Math.PI * 2/edges;
    let turn = 0
    for (var i = 0; i < 100; i++) {
      increase += Math.random()/100
      radius = r0+pet(r/2)
      x = radius * Math.cos(angle)+cx;
      y = radius * Math.sin(angle)+cy;
      ctx.lineTo(x, y);
      angle += increase;
      turn += increase
      if (turn >= max)
        break;
    }
    ctx.closePath();
    ctx.fill()
  //}
}

function mcdAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = [], MIRROR = false
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = "#ffcc00"
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let xi = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]
  if (MIRROR)
    xi.reverse()
  //1
  ctx.beginPath()
  ctx.moveTo(x+xi[21]*W/24, y+24*H/24)
  cpx = x+xi[20]*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[17]*W/24, y+2*H/24)
  cpx = x+xi[14]*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13.5*W/24, y+22*H/24)
  cpx = x+xi[11]*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10.5*W/24, y+22*H/24)
  cpx = x+xi[10]*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[7]*W/24, y+2*H/24)
  cpx = x+xi[4]*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[3]*W/24, y+24*H/24)
  cpx = x+xi[0]*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[0]*W/24, y+24*H/24)
  cpx = x+xi[1]*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[7]*W/24, y+0*H/24)
  cpx = x+xi[10]*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[12]*W/24, y+8*H/24)
  cpx = x+xi[14]*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[17]*W/24, y+0*H/24)
  cpx = x+xi[23]*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[24]*W/24, y+24*H/24)
  cpx = x+xi[21]*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[21]*W/24, y+24*H/24)
  ctx.fill()
}

function knock_knockAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/30
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "round"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, d = 0, angle = 0
  //1
  ctx.beginPath()
  p = rotatePoint(x+3*W/24+pet(d), y+3*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+0.5*W/24+pet(d), y+3*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //2
  ctx.beginPath()
  p = rotatePoint(x+3.2*W/24+pet(d), y+2*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+2*W/24+pet(d), y+0*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //3
  ctx.beginPath()
  p = rotatePoint(x+3.2*W/24+pet(d), y+4*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+2*W/24+pet(d), y+6*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()
  angle = -64
  x -= 1*W/24
  //1
  ctx.beginPath()
  p = rotatePoint(x+7*W/24+pet(d), y+26*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+4*W/24+pet(d), y+20*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+4*W/24+pet(d), y+9*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+5*W/24+pet(d), y+8*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+7*W/24+pet(d), y+8*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+8*W/24+pet(d), y+9*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+8*W/24+pet(d), y+14*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+7*W/24+pet(d), y+15*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+5*W/24+pet(d), y+15*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+4*W/24+pet(d), y+14*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //2
  ctx.beginPath()
  p = rotatePoint(x+8*W/24+pet(d), y+9*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+8*W/24+pet(d), y+7*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+9*W/24+pet(d), y+6*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+11*W/24+pet(d), y+6*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+12*W/24+pet(d), y+7*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //3
  ctx.beginPath()
  p = rotatePoint(x+8*W/24+pet(d), y+13*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+9*W/24+pet(d), y+14*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+11*W/24+pet(d), y+14*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+12*W/24+pet(d), y+13*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+12*W/24+pet(d), y+10*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  ctx.beginPath()
  p = rotatePoint(x+12*W/24+pet(d), y+7*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+12*W/24+pet(d), y+4*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+13*W/24+pet(d), y+3*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+15*W/24+pet(d), y+3*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+16*W/24+pet(d), y+4*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+16*W/24+pet(d), y+7*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+16*W/24+pet(d), y+2*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+17*W/24+pet(d), y+1*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+19*W/24+pet(d), y+1*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+20*W/24+pet(d), y+2*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+20*W/24+pet(d), y+7*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+21*W/24+pet(d), y+8*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+22*W/24+pet(d), y+13*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+22*W/24+pet(d), y+21*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+20*W/24+pet(d), y+24*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  ctx.beginPath()
  p = rotatePoint(x+20*W/24+pet(d), y+7*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+12*W/24+pet(d), y+7*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+12*W/24+pet(d), y+10*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+12*W/24+pet(d), y+9*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+14*W/24+pet(d), y+11*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+18*W/24+pet(d), y+11*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+19*W/24+pet(d), y+10*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+18*W/24+pet(d), y+11*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+18*W/24+pet(d), y+13*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+18*W/24+pet(d), y+13*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()
  //7
  x -= H/24
  ctx.beginPath()
  p = rotatePoint(x+15*W/24+pet(d), y+23*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+13*W/24+pet(d), y+21*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+12*W/24+pet(d), y+14*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+15*W/24+pet(d), y+11*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()
}

function disruptorAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = [], MIRROR = false
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/30
  let v = document.getElementById("featuresize").value
  let savedF = ctx.fillStyle
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "round"
  ctx.lineJoin = "bevel"
  let xi = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]

  tntstickAt (x+xi[0]*W/24, y-3.2*H/24,W*0.9,color, savedF)
  tntstickAt (x+xi[2]*W/24, y+0*H/24,W*0.9,color, savedF)
  tntstickAt (x+xi[4]*W/24, y+3*H/24,W*0.9,color, savedF)
  tntstickAt (x+xi[4]*W/24, y-3.5*H/24,W*0.9,color, savedF)
  tntstickAt (x+xi[6]*W/24, y+0*H/24,W*0.9,color, savedF)

  //11
  ctx.beginPath()
  ctx.moveTo(x+xi[9]*W/24, y+11*H/24)
  ctx.lineTo(x+xi[18]*W/24, y+2*H/24)
  ctx.lineTo(x+xi[20]*W/24, y+11*H/24)
  ctx.lineTo(x+xi[12]*W/24, y+20*H/24)
  ctx.lineTo(x+xi[9]*W/24, y+11*H/24)
  ctx.fillStyle = savedF
  ctx.fill()
  ctx.stroke()

  //18
  ctx.beginPath()
  ctx.moveTo(x+xi[12]*W/24, y+20*H/24)
  ctx.lineTo(x+xi[13]*W/24, y+20*H/24)
  ctx.lineTo(x+xi[10]*W/24, y+11*H/24)
  ctx.lineTo(x+xi[19]*W/24, y+2*H/24)
  ctx.lineTo(x+xi[18]*W/24, y+2*H/24)
  ctx.lineTo(x+xi[9]*W/24, y+11*H/24)
  ctx.lineTo(x+xi[12]*W/24, y+20*H/24)
  ctx.fill()
  ctx.stroke()

  //19
  ctx.beginPath()
  ctx.moveTo(x+xi[10]*W/24, y+11*H/24)
  ctx.lineTo(x+xi[19]*W/24, y+2*H/24)
  ctx.lineTo(x+xi[21]*W/24, y+11*H/24)
  ctx.lineTo(x+xi[13]*W/24, y+20*H/24)
  ctx.lineTo(x+xi[10]*W/24, y+11*H/24)
  ctx.fill()
  ctx.stroke()

  //1
  ctx.beginPath()
  ctx.moveTo(x+xi[12]*W/24, y+8*H/24)
  ctx.lineTo(x+xi[10]*W/24, y+10*H/24)
  ctx.lineTo(x+5.5*W/24, y+10*H/24)
  ctx.lineTo(x+7.5*W/24, y+8*H/24)
  ctx.lineTo(x+xi[12]*W/24, y+8*H/24)
  ctx.fill()
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+xi[15]*W/24, y+5*H/24)
  ctx.lineTo(x+10.5*W/24, y+5*H/24)
  ctx.lineTo(x+12.5*W/24, y+3*H/24)
  ctx.lineTo(x+xi[17]*W/24, y+3*H/24)
  ctx.lineTo(x+xi[15]*W/24, y+5*H/24)
  ctx.fill()
  ctx.stroke()

  ctx.fillStyle = color
  ctx.beginPath()
  ctx.arc(x+xi[17]*W/24, y+14*H/24, W/48,0,Math.PI*2)
  ctx.fill()
  // 0:30
  let slw = ctx.lineWidth
  v = document.getElementById("featuresize").value
  document.getElementById("featuresize").value *= 3

  blockLetters("O",x+12.*W/24, y+11*H/24,4*W/24,color, W*0.05)
  blockLetters(":",x+14.*W/24, y+9.5*H/24, 4*W/24,color, W*0.05)

  let N = randomPick(["O",1,2,3,4,5])
  blockLetters(""+N,x+15.2*W/24, y+7.8*H/24, 4*W/24,color, W*0.05)

  N = randomPick(["O",1,2,3,4,5,6,7,8,9])
  blockLetters(""+N,x+17.5*W/24, y+5.5*H/24, 4*W/24,color, W*0.05)

  document.getElementById("featuresize").value = v
  ctx.lineWidth = slw
  // wires
  //1
  ctx.beginPath()
  ctx.moveTo(x+xi[7]*W/24, y+22*H/24)
  cpx = x+xi[20]*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[20]*W/24, y+18*H/24)
  cpx = x+xi[20]*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[17]*W/24, y+14*H/24)
  ctx.lineWidth *= 3
  ctx.strokeStyle = color
  ctx.stroke()
  ctx.lineWidth /= 3
  ctx.lineWidth *= 2
  ctx.strokeStyle = "#ddcc00" 
  ctx.stroke()
  ctx.lineWidth /= 2
  //2
  ctx.beginPath()
  ctx.moveTo(x+xi[5]*W/24, y+19*H/24)
  cpx = x+xi[22]*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[22]*W/24, y+15*H/24)
  cpx = x+xi[22]*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[17]*W/24, y+14*H/24)
  ctx.lineWidth *= 3
  ctx.strokeStyle = color
  ctx.stroke()
  ctx.lineWidth /= 3
  ctx.lineWidth *= 2
  ctx.strokeStyle = "#ddcc00" 
  ctx.stroke()
  ctx.lineWidth /= 2
  //3
  ctx.beginPath()
  ctx.moveTo(x+2.5*W/24, y+15.5*H/24)
  cpx = x+xi[3]*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[16]*W/24, y+23*H/24)
  cpx = x+xi[23]*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[23]*W/24, y+17*H/24)
  cpx = x+xi[23]*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[17]*W/24, y+14*H/24)
  ctx.lineWidth *= 3
  ctx.strokeStyle = color
  ctx.stroke()
  ctx.lineWidth /= 3
  ctx.lineWidth *= 2
  ctx.strokeStyle = "#ddcc00" 
  ctx.stroke()
  ctx.lineWidth /= 2
  //4
  ctx.beginPath()
  ctx.moveTo(x+6.5*W/24, y+15.5*H/24)
  cpx = x+xi[6]*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[18]*W/24, y+23*H/24)
  cpx = x+xi[23]*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[17]*W/24, y+14*H/24)
  ctx.lineWidth *= 3
  ctx.strokeStyle = color
  ctx.stroke()
  ctx.lineWidth /= 3
  ctx.lineWidth *= 2
  ctx.strokeStyle = "#ddcc00" 
  ctx.stroke()
  ctx.lineWidth /= 2
  //5
  ctx.beginPath()
  ctx.moveTo(x+8.5*W/24, y+19*H/24)
  cpx = x+xi[9]*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[13]*W/24, y+23*H/24)
  cpx = x+xi[19]*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[19]*W/24, y+18*H/24)
  cpx = x+xi[19]*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[17]*W/24, y+14*H/24)
  ctx.lineWidth *= 3
  ctx.strokeStyle = color
  ctx.stroke()
  ctx.lineWidth /= 3
  ctx.lineWidth *= 2
  ctx.strokeStyle = "#ddcc00" 
  ctx.stroke()
  ctx.lineWidth /= 2
  ctx.fillStyle = savedF
  ctx.strokeStyle = color
}

function votiveAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = [], MIRROR = false
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  savedF = ctx.fillStyle
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let xi = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]
  if (MIRROR)
    xi.reverse()
  
  //5
  ctx.beginPath()
  ctx.arc(x+8.6*W/24, y+19*H/24, 5.2*W/48,0,Math.PI*2)
  ctx.fill()

  //6
  ctx.beginPath()
  ctx.arc(x+20.5*W/24, y+15.5*H/24, 4.5*W/48,0,Math.PI*2)
  ctx.fill()
  //2
  ctx.beginPath()
  ctx.moveTo(x+xi[0]*W/24, y+15*H/24)
  ctx.lineTo(x+xi[8]*W/24, y+9*H/24)
  ctx.lineTo(x+xi[23]*W/24, y+10*H/24)
  ctx.lineTo(x+xi[23]*W/24, y+13*H/24)
  ctx.lineTo(x+xi[22]*W/24, y+14*H/24)
  ctx.lineTo(x+xi[21]*W/24, y+13.5*H/24)
  ctx.lineTo(x+19*W/24, y+14*H/24)
  ctx.lineTo(x+18.5*W/24, y+15.6*H/24)
  ctx.lineTo(x+xi[11]*W/24, y+18.2*H/24)
  ctx.lineTo(x+9.5*W/24, y+16.6*H/24)
  ctx.lineTo(x+xi[7]*W/24, y+17*H/24)
  ctx.lineTo(x+xi[6]*W/24, y+19*H/24)
  ctx.lineTo(x+xi[4]*W/24, y+19*H/24)
  ctx.fillStyle = savedF
  ctx.fill()
  ctx.stroke()

  ctx.fillStyle = color

  //1
  ctx.beginPath()
  ctx.moveTo(x+xi[0]*W/24, y+17*H/24)
  ctx.lineTo(x+xi[4]*W/24, y+19*H/24)
  ctx.lineTo(x+xi[4]*W/24, y+17*H/24)
  ctx.lineTo(x+xi[0]*W/24, y+15*H/24)
  ctx.lineTo(x+xi[0]*W/24, y+17*H/24)
  ctx.stroke()

  //14
  ctx.beginPath()
  ctx.moveTo(x+xi[4]*W/24, y+17*H/24)
  ctx.lineTo(x+xi[8]*W/24, y+13.9*H/24)
  ctx.stroke() 

  //3 front windshield
  ctx.beginPath()
  ctx.moveTo(x+3.3*W/24, y+12.5*H/24)
  ctx.lineTo(x+xi[8]*W/24, y+14*H/24)
  ctx.lineTo(x+xi[12]*W/24, y+9.5*H/24)
  ctx.lineTo(x+xi[8]*W/24, y+9*H/24)
  ctx.fill()

   //15 front trim
   ctx.beginPath()
   ctx.moveTo(x+xi[0]*W/24, y+18*H/24)
   ctx.lineTo(x+xi[4]*W/24, y+20*H/24)
   ctx.lineTo(x+6.3*W/24, y+20*H/24)
   ctx.lineTo(x+6.3*W/24, y+19*H/24)
   ctx.lineTo(x+xi[4]*W/24, y+19*H/24)
   ctx.lineTo(x+xi[0]*W/24, y+17*H/24)
   ctx.fill()
 
   //16 side 
   ctx.beginPath()
   ctx.moveTo(x+xi[11]*W/24, y+18*H/24)
   ctx.lineTo(x+xi[11]*W/24, y+19*H/24)
   ctx.lineTo(x+xi[19]*W/24, y+16.5*H/24)
   ctx.lineTo(x+xi[19]*W/24, y+15.5*H/24)
   ctx.fill()
 
   //17 back
   ctx.beginPath()
   ctx.moveTo(x+xi[22]*W/24, y+14*H/24)
   ctx.lineTo(x+xi[22]*W/24, y+15*H/24)
   ctx.lineTo(x+xi[23]*W/24, y+14*H/24)
   ctx.lineTo(x+xi[23]*W/24, y+13*H/24)
   ctx.lineTo(x+xi[22]*W/24, y+14*H/24)
   ctx.fill()
 
  //4 side window
  ctx.beginPath()
  ctx.moveTo(x+8.75*W/24, y+14.25*H/24)
  ctx.lineTo(x+12.5*W/24, y+10.0*H/24)
  ctx.lineTo(x+xi[18]*W/24, y+10.25*H/24)
  ctx.lineTo(x+xi[18]*W/24, y+11.5*H/24)
  ctx.lineTo(x+8.75*W/24, y+14.25*H/24)
  ctx.fill()

  flame2At(x+W/5,y+H/8,W/3,color)
}

function tntstickAt (x,y,W,color, fill) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  let v =  document.getElementById("featuresize").value
  ctx.strokeStyle = color
  ctx.fillStyle = fill
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, d = 0, angle = 0

  //1
   ctx.beginPath()
   p = rotatePoint(x+4.4*W/24+pet(d), y+22.5*H/24+pet(d) ,cx,cy,angle)
   ctx.moveTo(p[0],p[1])
   cpx = x+19*W/24+pet(d)
   cpy = y+8*H/24+pet(d)
   cp = rotatePoint(cpx,cpy,cx,cy,angle)
   p = rotatePoint(x+19*W/24+pet(d), y+8*H/24+pet(d),cx,cy,angle)
   ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
   cpx = x+20*W/24+pet(d)
   cpy = y+4*H/24+pet(d)
   cp = rotatePoint(cpx,cpy,cx,cy,angle)
   p = rotatePoint(x+16*W/24+pet(d), y+5*H/24+pet(d),cx,cy,angle)
   ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
   cpx = x+2*W/24+pet(d)
   cpy = y+19*H/24+pet(d)
   cp = rotatePoint(cpx,cpy,cx,cy,angle)
   p = rotatePoint(x+1.8*W/24+pet(d), y+19.3*H/24+pet(d),cx,cy,angle)
   ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
   ctx.fill()
  ctx.fill()
  ctx.stroke()

  //2
  ctx.beginPath()
  p = rotatePoint(x+3*W/24+pet(d), y+23*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+1*W/24+pet(d)
  cpy = y+23*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+1*W/24+pet(d), y+21*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+1*W/24+pet(d)
  cpy = y+19*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+3*W/24+pet(d), y+19*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+5*W/24+pet(d)
  cpy = y+19*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+5*W/24+pet(d), y+21*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+5*W/24+pet(d)
  cpy = y+23*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+3*W/24+pet(d), y+23*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()
  ctx.stroke()
  ctx.fillStyle = color
  ctx.beginPath()
  ctx.arc(x+3*W/24, y+21*H/24, 1.5*W/48,0,Math.PI*2)
  ctx.fill()
}

function iglooAt (x,y,W,color) { // igloo clip curve
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = [], MIRROR = false
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let xi = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]
  if (MIRROR)
    xi.reverse()
  //1
  ctx.save()
  ctx.beginPath()
  ctx.moveTo(x+xi[10]*W/24, y+20*H/24)
  cpx = x+xi[24]*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[24]*W/24, y+20*H/24)
  cpx = x+xi[24]*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[12]*W/24, y+4*H/24)
  cpx = x+xi[0]*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[0]*W/24, y+20*H/24)
  cpx = x+xi[0]*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[4]*W/24, y+14*H/24)
  cpx = x+xi[6]*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[6]*W/24, y+14*H/24)
  cpx = x+xi[7]*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[7]*W/24, y+14*H/24)
  cpx = x+xi[10]*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[10]*W/24, y+20*H/24)
  ctx.stroke()
  ctx.clip()
  let i = 0
  for (; i < 12; i++) {
    ctx.beginPath()
    ctx.moveTo(x,y+2*i*H/24)
    ctx.lineTo(x+W,y+2*i*H/24)
    ctx.stroke()
  }
  i = 0
  //draw vertcal segments - staggered
  let j = 0, xoff = 0, yoff = 0, x0 = x
  for (; j < 12; j++) {
    i = 0
    for (; i < 12; i++) {
      ctx.beginPath()
      ctx.moveTo(x+xoff,y+yoff)
      ctx.lineTo(x+xoff,y+2*H/24+yoff)
      ctx.stroke()
      x += 2*W/24
    }
    x = x0
    yoff += 2*H/24
    if (xoff === 0)
      xoff = 1*W/24
    else
      xoff = 0
  }
  ctx.restore()
  x = x0
  // entrance
  ctx.beginPath()
  ctx.moveTo(x+xi[2]*W/24, y+20*H/24)
  cpx = x+xi[2]*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[4]*W/24, y+16*H/24)
  cpx = x+xi[6]*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[6]*W/24, y+20*H/24)
  ctx.globalAlpha /= 2
  ctx.fill()
  ctx.globalAlpha *= 2
  ctx.stroke()
  //27
  ctx.beginPath()
  ctx.moveTo(x+xi[4]*W/24, y+14*H/24)
  cpx = x+xi[8]*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[8]*W/24, y+20*H/24)
  ctx.stroke()
  //24
  ctx.beginPath()
  ctx.moveTo(x+5.7*W/24, y+17.3*H/24)
  ctx.lineTo(x+7.3*W/24, y+16*H/24)
  ctx.lineTo(x+9.4*W/24, y+16*H/24)
  ctx.stroke()
  //25
  ctx.beginPath()
  ctx.moveTo(x+xi[4]*W/24, y+16*H/24)
  ctx.lineTo(x+xi[4]*W/24, y+14*H/24)
  ctx.stroke()
  //26
  ctx.beginPath()
  ctx.moveTo(x+2.3*W/24, y+17.3*H/24)
  ctx.lineTo(x+0.7*W/24, y+16*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+xi[0]*W/24, y+20*H/24)
  ctx.lineTo(x+xi[10]*W/24, y+20*H/24)
  ctx.stroke()

  //1
  ctx.beginPath()
  ctx.moveTo(x+xi[6]*W/24, y+18.5*H/24)
  ctx.lineTo(x+7.8*W/24, y+18*H/24)
  ctx.lineTo(x+xi[10]*W/24, y+18*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+xi[2]*W/24, y+18.5*H/24)
  ctx.lineTo(x+xi[0]*W/24, y+18*H/24)
  ctx.stroke()

  //1
  ctx.beginPath()
  ctx.moveTo(x+xi[5]*W/24, y+16.3*H/24)
  ctx.lineTo(x+6.15*W/24, y+14.6*H/24)

  ctx.lineTo(x+8.6*W/24, y+14.6*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+xi[3]*W/24, y+16.3*H/24)
  ctx.lineTo(x+xi[2]*W/24, y+14.6*H/24)
  ctx.stroke()
}

function disappearedAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = [], MIRROR = false
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let xi = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]
  if (MIRROR)
    xi.reverse()
  //1
  ctx.save()
  ctx.beginPath()
  ctx.moveTo(x+14.7*W/24, y+8*H/24)
  ctx.lineTo(x+xi[15]*W/24, y+23*H/24)
  ctx.lineTo(x+xi[13]*W/24, y+23*H/24)
  ctx.lineTo(x+xi[12]*W/24, y+16*H/24)
  ctx.lineTo(x+xi[11]*W/24, y+23*H/24)
  ctx.lineTo(x+xi[9]*W/24, y+23*H/24)
  ctx.lineTo(x+9.3*W/24, y+8*H/24)
  ctx.lineTo(x+xi[9]*W/24, y+14*H/24)
  cpx = x+xi[9]*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+15*H/24)
  cpx = x+xi[7]*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[7]*W/24, y+14*H/24)
  cpx = x+xi[7]*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[7]*W/24, y+8*H/24)
  cpx = x+7.3*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[9]*W/24, y+6*H/24)
  cpx = x+10.5*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[10]*W/24, y+4.5*H/24)
  cpx = x+xi[10]*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[10]*W/24, y+2*H/24)
  cpx = x+xi[10]*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[12]*W/24, y+1*H/24)
  cpx = x+xi[14]*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[14]*W/24, y+2*H/24)
  cpx = x+xi[14]*W/24
  cpy = y+4.5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[14]*W/24, y+5*H/24)
  cpx = x+13.5*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[15]*W/24, y+6*H/24)
  cpx = x+16.7*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[17]*W/24, y+8*H/24)
  cpx = x+xi[17]*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[17]*W/24, y+14*H/24)
  cpx = x+xi[17]*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[16]*W/24, y+15*H/24)
  cpx = x+xi[15]*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[15]*W/24, y+14*H/24)
  //ctx.stroke()
  ctx.clip()
  let i = 0, x0 = x, y0 = y
  for (; i < 32; i++) {
    ctx.beginPath()
    ctx.moveTo(x+xi[7]*W/24, y+1*H/24)
    ctx.lineTo(x+17*W/24, y-10*H/24)
    ctx.stroke()
    y += 1*H/24

  }
  ctx.restore()
}

function canceledAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = [], MIRROR = false
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  let savedF = ctx.fillStyle
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let forbidden = ["accessible","activism","activists","advocacy","advocate","advocates","affirming care","all-inclusive","allyship","anti-racism","antiracist","assigned at birth","assigned female at birth","assigned male at birth","at risk","barrier","barriers","belong","bias","biased","biased toward","biases","biases towards","biologically female","biologically male","BIPOC","Black","breastfeed + people","breastfeed + person","chestfeed + people","chestfeed + person","clean energy","climate crisis","climate science","commercial sex worker","community diversity","community equity","confirmation bias","cultural competence","cultural differences","cultural heritage","cultural sensitivity","culturally appropriate","culturally responsive","DEI","DEIA","DEIAB","DEIJ","disabilities","disability","discriminated","discrimination","discriminatory","disparity","diverse","diverse backgrounds","diverse communities","diverse community","diverse group","diverse groups","diversified","diversify","diversifying","diversity","enhance the diversity","enhancing diversity","environmental quality","equal opportunity","equality","equitable","equitableness","equity","ethnicity","excluded","exclusion","expression","female","females","feminism","fostering inclusivity","GBV","gender","gender based","gender based violence","gender diversity","gender identity","gender ideology","gender-affirming care","genders","Gulf of Mexico","hate speech","health disparity","health equity","hispanic minority","historically","identity","immigrants","implicit bias","implicit biases","inclusion","inclusive","inclusive leadership","inclusiveness","inclusivity","increase diversity","increase the diversity","indigenous community","inequalities","inequality","inequitable","inequities","inequity","injustice","institutional","intersectional","intersectionality","key groups","key people","key populations","Latinx","LGBT","LGBTQ","marginalize","marginalized","men who have sex with men","mental health","minorities","minority","most risk","MSM","multicultural","Mx","Native American","non-binary","nonbinary","oppression","oppressive","orientation","people + uterus","people-centered care","person-centered","person-centered care","polarization","political","pollution","pregnant people","pregnant person","pregnant persons","prejudice","privilege","privileges","promote diversity","promoting diversity","pronoun","pronouns","prostitute","race","race and ethnicity","racial","racial diversity","racial identity","racial inequality","racial justice","racially","racism","segregation","sense of belonging","sex","sexual preferences","sexuality","social justice","sociocultural","socioeconomic","status","stereotype","stereotypes","systemic","systemically","they/them","trans","transgender","transsexual","trauma","traumatic","tribal","unconscious bias","underappreciated","underprivileged","underrepresentation","underrepresented","underserved","undervalued","victim","victims","vulnerable populations","women","women and underrepresented"]
  forbidden = shuffle(forbidden)
  let xi = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]
  
  ctx.save()
  ctx.beginPath()
  ctx.moveTo(x+xi[0]*W/24, y-1*H/24)
  ctx.lineTo(x+xi[24]*W/24, y-1*H/24)
  ctx.lineTo(x+xi[24]*W/24, y+24*H/24)
  ctx.lineTo(x+xi[0]*W/24, y+24*H/24)
  ctx.lineTo(x+xi[0]*W/24, y-1*H/24)
  ctx.closePath()
  ctx.clip()
  let lw = ctx.lineWidth
  ctx.lineWidth = 1
  let fs = (W*0.026)
  ctx.font = "100 "+(fs) + "pt Courier"
  let i = 0, xpos = x, ypos = y-fs, x0 = x
  let wrd, w
  for (; i < forbidden.length; i++) {
    wrd = forbidden[i]
    w = ctx.measureText(wrd).width
    ctx.fillText(wrd, x,ypos+fs)
    ctx.beginPath()
    ctx.moveTo(x, ypos+fs/1.8)
    ctx.lineTo(x + w, ypos+fs/1.8)
    ctx.stroke()
    x += fs
    if (x > x0+W*1.2) {
      x = x0
      ypos += fs*1.5
      w = 0
    }
    x += w
  }
  x = x0
  //1
  ctx.restore()
  ctx.lineWidth = lw
  userAt(x,y,W,color)
  ctx.fillSytle = savedF
  tape_over_mouth(x,y,W,color,savedF)
}

function tape_over_mouth (x,y,W,color,fill) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = [], MIRROR = false
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/80
  ctx.strokeStyle = color
  ctx.fillStyle = fill
  ctx.lineCap = "butt"
  ctx.lineJoin = "miter"
  let xi = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]

  //1
  ctx.beginPath()
  ctx.moveTo(x+xi[8]*W/24, y+9*H/24)
  ctx.lineTo(x+xi[16]*W/24, y+8*H/24)
  ctx.lineTo(x+xi[16]*W/24, y+7*H/24)
  ctx.lineTo(x+xi[8]*W/24, y+8*H/24)
  ctx.lineTo(x+xi[8]*W/24, y+9*H/24)
  ctx.fill()
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+xi[8]*W/24+0.25*H/24, y+7*H/24-0.5*H/24)
  ctx.lineTo(x+xi[8]*W/24, y+8*H/24-0.5*H/24)
  ctx.lineTo(x+xi[16]*W/24-0.25*H/24, y+9*H/24+0.5*H/24)
  ctx.lineTo(x+xi[16]*W/24, y+8*H/24+0.5*H/24)
  ctx.lineTo(x+xi[8]*W/24, y+7*H/24-0.5*H/24)
  ctx.fill()
  ctx.stroke()
  return
  //1
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+8.5*H/24)
  ctx.lineTo(x+16.7*W/24, y+9*H/24)
  ragged(ctx,x+16*W/24, y+7*H/24, x+16.7*W/24, y+9*H/24)
  ctx.lineTo(x+7.5*W/24, y+6.5*H/24)
  ragged(ctx,x+8*W/24, y+8.5*H/24, x+7.5*W/24, y+6.5*H/24)
  ctx.fill()
  ctx.stroke()
}

function optimal_dishwasher_loadingAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = [], MIRROR = false
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/40
  let savedFill = ctx.fillStyle
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let xi = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]
  y += 2*H/24
  //1
  ctx.beginPath()
  ctx.moveTo(x+xi[2]*W/24, y+3*H/24)
  cpx = x+xi[2]*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[4]*W/24, y+1*H/24)
  cpx = x+xi[20]*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[20]*W/24, y+1*H/24)
  cpx = x+xi[22]*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[22]*W/24, y+3*H/24)
  cpx = x+xi[22]*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[22]*W/24, y+20*H/24)
  cpx = x+xi[22]*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[20]*W/24, y+22*H/24)
  cpx = x+xi[4]*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[4]*W/24, y+22*H/24)
  cpx = x+xi[2]*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[2]*W/24, y+20*H/24)
  cpx = x+xi[2]*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[2]*W/24, y+3*H/24)
  ctx.lineWidth *= 2
  ctx.stroke()
  ctx.lineWidth /= 4
  let i = 0, x0 = x, y0 = y
  for (; i < 18; i++) {
    ctx.beginPath()
    ctx.moveTo(x+xi[2]*W/24, y+20*H/24)
    cpx = x+xi[2]*W/24
    cpy = y+21*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+xi[3]*W/24, y+21*H/24)
    cpx = x+xi[6]*W/24
    cpy = y+21*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+xi[6]*W/24, y+21*H/24)
    cpx = x+xi[7]*W/24
    cpy = y+21*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+xi[7]*W/24, y+20*H/24)
    cpx = x+xi[8]*W/24
    cpy = y+20*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+xi[8]*W/24, y+20*H/24)
    cpx = x+xi[8]*W/24
    cpy = y+21*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+xi[9]*W/24, y+21*H/24)
    cpx = x+xi[12]*W/24
    cpy = y+21*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+xi[12]*W/24, y+21*H/24)
    cpx = x+xi[15]*W/24
    cpy = y+21*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+xi[15]*W/24, y+21*H/24)
    cpx = x+xi[16]*W/24
    cpy = y+21*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+xi[16]*W/24, y+20*H/24)
    cpx = x+xi[17]*W/24
    cpy = y+20*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+xi[17]*W/24, y+20*H/24)
    cpx = x+xi[17]*W/24
    cpy = y+21*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+xi[18]*W/24, y+21*H/24)
    cpx = x+xi[21]*W/24
    cpy = y+21*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+xi[21]*W/24, y+21*H/24)
    cpx = x+xi[22]*W/24
    cpy = y+21*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+xi[22]*W/24, y+20*H/24)
    ctx.stroke()
    y -= H/24
  }
  ctx.lineWidth *= 2
  y = y0
  let n = 1+Math.floor(Math.random()*9)
  //n = 10
  let cup = " cups"
  if (n === 1)
    cup = " cup"
  blockLetters(n+""+cup, x+8*W/24, y-1.7*H/24,2*W/24,color, W*0.05)
  i = 0, xoff = 0, yoff = W/4.9
  for (;i < n; i++) {
    teacupAt(x+2*W/24+xoff, y+1.5*H/24+(i%4*yoff), W/4, color, savedFill)
    if (i === 3) {
      xoff += W/4
    }
    if (i === 7) {
      xoff += 1.3*W/4
    }
  }
}

function teacupAt (x,y,W,color,fill) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/30
  ctx.strokeStyle = color
  ctx.fillStyle = fill
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, d = 0, angle = randomPick([0,90,180,-90])+pet(35)

  ctx.beginPath()
  p = rotatePoint(x+6.2*W/24+pet(d), y+19.8*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+3*W/24+pet(d)
  cpy = y+23*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+3*W/24+pet(d), y+23*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+1*W/24+pet(d)
  cpy = y+23*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+1*W/24+pet(d), y+21*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+4*W/24+pet(d)
  cpy = y+18*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+4.2*W/24+pet(d), y+17.8*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()
  ctx.stroke()

  //3
  ctx.beginPath()
  p = rotatePoint(x+12*W/24+pet(d), y+21*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+21*W/24+pet(d)
  cpy = y+21*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+21*W/24+pet(d), y+12*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+21*W/24+pet(d)
  cpy = y+3*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24+pet(d), y+3*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+3*W/24+pet(d)
  cpy = y+3*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+3*W/24+pet(d), y+12*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+3*W/24+pet(d)
  cpy = y+21*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24+pet(d), y+21*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()
  ctx.stroke()
  //4
  ctx.beginPath()
  p = rotatePoint(x+12*W/24+pet(d), y+15*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+15*W/24+pet(d)
  cpy = y+15*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+15*W/24+pet(d), y+12*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+15*W/24+pet(d)
  cpy = y+9*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24+pet(d), y+9*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+9*W/24+pet(d)
  cpy = y+9*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+9*W/24+pet(d), y+12*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+9*W/24+pet(d)
  cpy = y+15*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24+pet(d), y+15*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()
  ctx.stroke()
}

function reactorAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = [], MIRROR = false
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  let fill = ctx.fillStyle
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let xi = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]
  if (MIRROR)
    xi.reverse()
//1
  ctx.beginPath()
  ctx.moveTo(x+xi[2]*W/24, y+18*H/24)
  cpx = x+xi[2]*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[2]*W/24, y+20*H/24)
  cpx = x+xi[2]*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[12]*W/24, y+24*H/24)
  cpx = x+xi[22]*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[22]*W/24, y+20*H/24)
  cpx = x+xi[22]*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[22]*W/24, y+18*H/24)
  cpx = x+xi[21]*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[22]*W/24, y+16*H/24)
  cpx = x+xi[22]*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[22]*W/24, y+12*H/24)
  cpx = x+xi[22]*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[12]*W/24, y+8*H/24)
  cpx = x+xi[2]*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[2]*W/24, y+12*H/24)
  cpx = x+xi[2]*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[2]*W/24, y+16*H/24)
  cpx = x+xi[3]*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[2]*W/24, y+18*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+xi[2]*W/24, y+12*H/24)
  cpx = x+xi[2]*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[12]*W/24, y+16*H/24)
  cpx = x+xi[22]*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[22]*W/24, y+12*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+xi[0]*W/24, y+16*H/24)
  ctx.lineTo(x+xi[2]*W/24, y+16*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+xi[0]*W/24, y+18*H/24)
  ctx.lineTo(x+xi[2]*W/24, y+18*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+xi[24]*W/24, y+16*H/24)
  ctx.lineTo(x+xi[22]*W/24, y+16*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+xi[24]*W/24, y+18*H/24)
  ctx.lineTo(x+xi[22]*W/24, y+18*H/24)
  ctx.stroke()
  let n = 1+Math.floor(Math.random()*9)
  let fills = []
  let i = 0
  for (; i < 10; i++)
    fills.push(true)
  i = 0
  for (; i < n; i++)
    fills[i] = false
  fills = shuffle(fills)
  controlrodAt(x+-1.4*W/24, y+4*H/24, W/2,color,fill,fills[0])
  controlrodAt(x+0.6*W/24, y+1.7*H/24, W/2,color,fill,fills[1])
  controlrodAt(x+2.2*W/24, y+6.8*H/24, W/2,color,fill,fills[2])
  controlrodAt(x+3.6*W/24, y+3.5*H/24, W/2,color,fill,fills[3])
  controlrodAt(x+5.2*W/24, y+1*H/24, W/2,color,fill,fills[4])
  controlrodAt(x+6.8*W/24, y+6.8*H/24, W/2,color,fill,fills[5])
  controlrodAt(x+8.3*W/24, y+4.3*H/24, W/2,color,fill,fills[6])
  controlrodAt(x+10*W/24, y+1.5*H/24, W/2,color,fill,fills[7])
  controlrodAt(x+12*W/24, y+5.6*H/24, W/2,color,fill,fills[8])
  controlrodAt(x+14*W/24, y+3.3*H/24, W/2,color,fill,fills[9])
  let suf = "rods"
  if (n === 1)
    suf = "rod"
  blockLetters((n)+" control "+suf+" pulled",x+1*W/24, y+-1*H/24, 1.9*W/24,color, W*0.05)
}

function controlrodAt (x,y,W,color,fill,inserted) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = [], MIRROR = false
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/80
  ctx.strokeStyle = color
  ctx.fillStyle = fill
  ctx.lineCap = "butt"
  ctx.lineJoin = "bevel"
  let xi = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]
  if (!inserted) {
  ctx.beginPath()
  ctx.moveTo(x+xi[11]*W/24, y+1*H/24)
  cpx = x+xi[11]*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[12]*W/24, y+2*H/24)
  cpx = x+xi[13]*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[13]*W/24, y+1*H/24)
  cpx = x+xi[13]*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[13]*W/24, y+16*H/24)
  cpx = x+xi[13]*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[12]*W/24, y+17*H/24)
  cpx = x+xi[11]*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[11]*W/24, y+16*H/24)
  cpx = x+xi[11]*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[11]*W/24, y+1*H/24)
  ctx.closePath()
    ctx.fill()
    ctx.fillStyle = color
    ctx.globalAlpha /= 4
    ctx.fill()
    ctx.globalAlpha *= 4
    ctx.stroke()

  ctx.setLineDash([])
  ctx.beginPath()
  ctx.moveTo(x+xi[12]*W/24, y+2*H/24)
  cpx = x+xi[13]*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[13]*W/24, y+1*H/24)
  cpx = x+xi[13]*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[12]*W/24, y+0*H/24)
  cpx = x+xi[11]*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[11]*W/24, y+1*H/24)
  cpx = x+xi[11]*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[12]*W/24, y+2*H/24)
  ctx.stroke()
  }
  
  y += 15*H/24
  ctx.setLineDash([W/48])
  
  ctx.beginPath()
  ctx.moveTo(x+xi[11]*W/24, y+1*H/24)
  cpx = x+xi[11]*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[12]*W/24, y+2*H/24)
  cpx = x+xi[13]*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[13]*W/24, y+1*H/24)
  cpx = x+xi[13]*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[13]*W/24, y+16*H/24)
  cpx = x+xi[13]*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[12]*W/24, y+17*H/24)
  cpx = x+xi[11]*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[11]*W/24, y+16*H/24)
  cpx = x+xi[11]*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[11]*W/24, y+1*H/24)
  ctx.stroke()

  ctx.setLineDash([])
  ctx.beginPath()
  ctx.moveTo(x+xi[12]*W/24, y+2*H/24)
  cpx = x+xi[13]*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[13]*W/24, y+1*H/24)
  cpx = x+xi[13]*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[12]*W/24, y+0*H/24)
  cpx = x+xi[11]*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[11]*W/24, y+1*H/24)
  cpx = x+xi[11]*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[12]*W/24, y+2*H/24)
  if(inserted)
  ctx.stroke()
}

function ikebanaAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/100
  let savedF = ctx.fillStyle
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let cx = x+W/2, cy = y+H/2
  let CX = cx

  let n = 1 + Math.floor(Math.random()*10), i = 0
  let d = []
  for (; i < 10; i++)
    d.push(false)
  i = 0
  for (; i < n; i++)
    d[i] = true
  d = shuffle(d)

  if (d[0]) {
    flowerstem(x+W/10,y+W/10,W,color,CX+pet(W/15),y)
    five_sided(x,y,W/5,color,savedF)
  }
  if (d[1]) {
    flowerstem(x+3.6*W/24+W/10,y+H/24+W/10,W,color,CX+pet(W/25),y)
    five_sided(x+3.6*W/24,     y+H/24,W/5,color,savedF)
  }
  if (d[2]) {
    flowerstem(x+7*W/24+W/10,y+3*H/24+W/10,W,color,CX+pet(W/25),y)
    five_sided(x+7*W/24,     y+3*H/24,W/5,color,savedF)
  }
  if (d[3]) {
    flowerstem(x+1*W/24+W/10,y+3*H/24+W/10,W,color,CX+pet(W/25),y)
    five_sided(x+1*W/24,     y+3*H/24,W/5,color,savedF)
    }
  if (d[4]) {
    flowerstem(x+4*W/24+W/10,y+7*H/24+W/10,W,color,CX+pet(W/25),y)
    five_sided(x+4*W/24,     y+7*H/24,W/5,color,savedF)
  }
  if (d[5]) {
    flowerstem(x+20*W/24+W/10, y+W/10, W,color,CX+pet(W/25),y)
    five_sided(x+20*W/24,      y, W/5, color,savedF)
  }
  if (d[6]) {
    flowerstem(x+18*W/24+W/10, y+2*H/24+W/10, W,color,CX+pet(W/25),y)
    five_sided(x+18*W/24, y+2*H/24, W/5, color,savedF)
  }
  if (d[7]) {
    flowerstem(x+16*W/24+W/10, y+5*H/24+W/10, W,color,CX+pet(W/25),y)
    five_sided(x+16*W/24,      y+5*H/24, W/5, color,savedF)
  }
  if (d[8]) {
    flowerstem(x+14*W/24+W/10, y+3*H/24+W/10, W,color,CX+pet(W/25),y)
    five_sided(x+14*W/24,      y+3*H/24, W/5, color,savedF)
  }
  if (d[9]) {
    flowerstem(x+11*W/24+W/10, y+1*H/24+W/10, W,color,CX+pet(W/25),y)
    five_sided(x+11*W/24,      y+1*H/24, W/5, color,savedF)
  }

  //1
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+16*H/24)
  cpx = x+14*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+15*H/24)
  cpx = x+14*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+14*H/24)
  cpx = x+10*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+15*H/24)
  cpx = x+10*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+16*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+15*H/24)
  cpx = x+11*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+23*H/24)
  cpx = x+12*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+23*H/24)
  cpx = x+13*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+15*H/24)
  ctx.stroke()
  let suf = " blooms"
  if (n === 1)
    suf = " bloom"
  blockLetters(n+suf,x+8*W/24, y+-1*H/24, 1.9*W/24,color, W*0.05)

 // blockLetters(n+"",x+17*W/24, y+17.5*H/24, 2*W/24,color, W*0.05)
 // blockLetters(suf,x+14.5*W/24, y+20.5*H/24, 2*W/24,color, W*0.05)
}

function flowerstem (x,y,W,color,CX,Y0) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/100
  let savedF = ctx.fillStyle
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let cx = CX
  let cy = y+H/2
  ctx.beginPath()
  ctx.moveTo(x,y)
  cpx = cx
  cpy = y
  ctx.quadraticCurveTo(cpx, cpy, cx, Y0+H*0.94 + pet(W/48))
  ctx.stroke()
}

function meatAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, d = 0, angle = 0

  //1
  ctx.beginPath()
  ctx.beginPath()
  p = rotatePoint(x+13*W/24+pet(d), y+23*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+22*W/24+pet(d)
  cpy = y+23*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+23*W/24+pet(d), y+22*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+23*W/24+pet(d)
  cpy = y+20*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+23*W/24+pet(d), y+20*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+19*W/24+pet(d)
  cpy = y+20*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+19*W/24+pet(d), y+19*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+18*W/24+pet(d)
  cpy = y+17*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+15*W/24+pet(d), y+17*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+18*W/24+pet(d)
  cpy = y+17*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+19*W/24+pet(d), y+19*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+21*W/24+pet(d)
  cpy = y+12*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+19*W/24+pet(d), y+5*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+16*W/24+pet(d)
  cpy = y+5*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+16*W/24+pet(d), y+5*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+23*W/24+pet(d)
  cpy = y+5*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+23*W/24+pet(d), y+4*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+23*W/24+pet(d)
  cpy = y+2*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+23*W/24+pet(d), y+2*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+20*W/24+pet(d)
  cpy = y+3*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+18*W/24+pet(d), y+2*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+14*W/24+pet(d)
  cpy = y+0*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+8*W/24+pet(d), y+1*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+4*W/24+pet(d)
  cpy = y+6*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+4*W/24+pet(d), y+6*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+7*W/24+pet(d)
  cpy = y+8*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+7*W/24+pet(d), y+11*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+6*W/24+pet(d)
  cpy = y+14*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+6*W/24+pet(d), y+18*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+6*W/24+pet(d)
  cpy = y+23*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+13*W/24+pet(d), y+23*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()

  ctx.setLineDash([W/40])
  ctx.lineWidth /= 2
  //2
  ctx.beginPath()
  p = rotatePoint(x+12*W/24+pet(d), y+6*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+14*W/24+pet(d)
  cpy = y+12*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24+pet(d), y+16*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()

  //3
  ctx.beginPath()
  p = rotatePoint(x+7*W/24+pet(d), y+9*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+12*W/24+pet(d)
  cpy = y+6*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24+pet(d), y+6*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+11*W/24+pet(d)
  cpy = y+3*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+8*W/24+pet(d), y+2*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()

  //4
  ctx.beginPath()
  p = rotatePoint(x+12*W/24+pet(d), y+16*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+11*W/24+pet(d)
  cpy = y+18*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24+pet(d), y+22*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()

  //5
  ctx.beginPath()
  p = rotatePoint(x+12*W/24+pet(d), y+6*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+16*W/24+pet(d)
  cpy = y+5*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+16*W/24+pet(d), y+5*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+16*W/24+pet(d)
  cpy = y+2*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+16*W/24+pet(d), y+2*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()

  //6
  ctx.beginPath()
  p = rotatePoint(x+13*W/24+pet(d), y+11*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+10*W/24+pet(d)
  cpy = y+12*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+7*W/24+pet(d), y+12*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()

  //7
  ctx.beginPath()
  p = rotatePoint(x+12*W/24+pet(d), y+16*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+14*W/24+pet(d)
  cpy = y+16*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+15*W/24+pet(d), y+17*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+16*W/24+pet(d)
  cpy = y+20*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+16*W/24+pet(d), y+23*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()

  //8
  ctx.beginPath()
  p = rotatePoint(x+12*W/24+pet(d), y+16*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+8*W/24+pet(d)
  cpy = y+16*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+6.5*W/24+pet(d), y+15*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()
//9
ctx.beginPath()
p = rotatePoint(x+16*W/24+pet(d), y+20*H/24+pet(d) ,cx,cy,angle)
ctx.moveTo(p[0],p[1])
cpx = x+19*W/24+pet(d)
cpy = y+20*H/24+pet(d)
cp = rotatePoint(cpx,cpy,cx,cy,angle)
p = rotatePoint(x+20*W/24+pet(d), y+22*H/24+pet(d),cx,cy,angle)
ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
ctx.stroke()

//10
ctx.beginPath()
p = rotatePoint(x+10*W/24+pet(d), y+16*H/24+pet(d) ,cx,cy,angle)
ctx.moveTo(p[0],p[1])
cpx = x+9*W/24+pet(d)
cpy = y+19*H/24+pet(d)
cp = rotatePoint(cpx,cpy,cx,cy,angle)
p = rotatePoint(x+9*W/24+pet(d), y+22*H/24+pet(d),cx,cy,angle)
ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
ctx.stroke()

//11
ctx.beginPath()
p = rotatePoint(x+19*W/24+pet(d), y+8*H/24+pet(d) ,cx,cy,angle)
ctx.moveTo(p[0],p[1])
cpx = x+16*W/24+pet(d)
cpy = y+10*H/24+pet(d)
cp = rotatePoint(cpx,cpy,cx,cy,angle)
p = rotatePoint(x+13*W/24+pet(d), y+10*H/24+pet(d),cx,cy,angle)
ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
ctx.stroke()

//12
ctx.beginPath()
p = rotatePoint(x+13*W/24+pet(d), y+13*H/24+pet(d) ,cx,cy,angle)
ctx.moveTo(p[0],p[1])
cpx = x+17*W/24+pet(d)
cpy = y+13*H/24+pet(d)
cp = rotatePoint(cpx,cpy,cx,cy,angle)
p = rotatePoint(x+17*W/24+pet(d), y+13*H/24+pet(d),cx,cy,angle)
ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
cpx = x+17*W/24+pet(d)
cpy = y+15*H/24+pet(d)
cp = rotatePoint(cpx,cpy,cx,cy,angle)
p = rotatePoint(x+16*W/24+pet(d), y+17*H/24+pet(d),cx,cy,angle)
ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
ctx.stroke()

//13
ctx.beginPath()
p = rotatePoint(x+17*W/24+pet(d), y+9*H/24+pet(d) ,cx,cy,angle)
ctx.moveTo(p[0],p[1])
cpx = x+17*W/24+pet(d)
cpy = y+13*H/24+pet(d)
cp = rotatePoint(cpx,cpy,cx,cy,angle)
p = rotatePoint(x+17*W/24+pet(d), y+13*H/24+pet(d),cx,cy,angle)
ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
ctx.stroke()

  ctx.setLineDash([])
//y += 2*H/24
//x += 3*W/24
let cuts = ["\u{0260F}","\u{02135}","\u{02629}","\u{02646}","\u{02643}","\u{0263F}",
    "\u{02609}","\u{0260A}","\u{02126}","\u{02107}","\u{02399}","\u{02710}","\u{02204}","\u{02608}",
    "\u{00B6}","\u{02625}","\u{02647}","\u{02702}","\u{0210F}","\u{0FF04}","\u{022BE}","\u{16D2}" ]
    cuts = shuffle(cuts)
  ctx.font = "100 italic " + (W*0.05) + "pt Garamond"

  p = rotatePoint(x+9.2*W/24+pet(d), y+21*H/24+pet(d) ,cx,cy,angle)
  ctx.fillText(cuts[0],p[0],p[1])
 
  //14
  p = rotatePoint(x+6*W/24+pet(d), y+6*H/24+pet(d) ,cx,cy,angle)
  ctx.fillText(cuts[1],p[0],p[1])

  p = rotatePoint(x+8*W/24+pet(d), y+10*H/24+pet(d) ,cx,cy,angle)
  ctx.fillText(cuts[2],p[0],p[1])
 
  p = rotatePoint(x+7*W/24+pet(d), y+14*H/24+pet(d) ,cx,cy,angle)
  ctx.fillText(cuts[3],p[0],p[1])

  p = rotatePoint(x+14*W/24+pet(d), y+8*H/24+pet(d) ,cx,cy,angle)
  ctx.fillText(cuts[4],p[0],p[1])

  //18
  p = rotatePoint(x+13*W/24+pet(d), y+15*H/24+pet(d) ,cx,cy,angle)
  ctx.fillText(cuts[5],p[0],p[1])

  p = rotatePoint(x+14*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
  ctx.fillText(cuts[6],p[0],p[1])

  p = rotatePoint(x+12*W/24+pet(d), y+19*H/24+pet(d) ,cx,cy,angle)
  ctx.fillText(cuts[7],p[0],p[1])

  p = rotatePoint(x+11*W/24+pet(d), y+3*H/24+pet(d) ,cx,cy,angle)
  ctx.fillText(cuts[8],p[0],p[1])

  p = rotatePoint(x+17*W/24+pet(d), y+4.5*H/24+pet(d) ,cx,cy,angle)
  ctx.fillText(cuts[9],p[0],p[1])

  p = rotatePoint(x+16.2*W/24+pet(d), y+22*H/24+pet(d) ,cx,cy,angle)
  ctx.fillText(cuts[10],p[0],p[1])

  p = rotatePoint(x+16*W/24+pet(d), y+19*H/24+pet(d) ,cx,cy,angle)
  ctx.fillText(cuts[11],p[0],p[1])
  
  p = rotatePoint(x+6.2*W/24+pet(d), y+18*H/24+pet(d) ,cx,cy,angle)
  ctx.fillText(cuts[12],p[0],p[1])

  p = rotatePoint(x+17.3*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
  ctx.fillText(cuts[13],p[0],p[1])
}

function digitalAt (x,y,W,color,N) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
 // console.log(W)
  W /= 3
  let fs = W
  let H = W = fs, cpx, cpy, points = [], MIRROR = false
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "butt"
  ctx.lineJoin = "bevel"
  let baseline = y+fs*H
//  let N = 24
//  let DIV = 4
//  W/=DIV, H/=DIV
 // W*=fs, H*=fs
  y -= 3
  ctx.beginPath()
  ctx.moveTo(x+1*W, y+12*H)
  ctx.lineTo(x+2*W, y+11*H)
  ctx.lineTo(x+2*W, y+6*H)
  ctx.lineTo(x+1*W, y+5*H)
  ctx.lineTo(x+0*W, y+6*H)
  ctx.lineTo(x+0*W, y+11*H)
  ctx.lineTo(x+1*W, y+12*H)
  if ([0,8,9,6,5,4].includes(N))
  ctx.fill()

  //2680 lower left vert
  ctx.beginPath()
  ctx.moveTo(x+1*W, y+12*H)
  ctx.lineTo(x+0*W, y+13*H)
  ctx.lineTo(x+0*W, y+18*H)
  ctx.lineTo(x+1*W, y+19*H)
  ctx.lineTo(x+2*W, y+18*H)
  ctx.lineTo(x+2*W, y+13*H)
  ctx.lineTo(x+1*W, y+12*H)
  if ([2,6,8, 0].includes(N))
  ctx.fill()

  //23567890 horz top
  ctx.beginPath()
  ctx.moveTo(x+2*W+1, skew(x+2*W, y+4*H))
  ctx.lineTo(x+1*W+1, skew(x+1*W, y+5*H))
  ctx.lineTo(x+2*W+1, skew(x+2*W, y+6*H))
  ctx.lineTo(x+6*W-1, skew(x+6*W, y+6*H))
  ctx.lineTo(x+7*W-1, skew(x+7*W, y+5*H))
  ctx.lineTo(x+6*W-1, skew(x+6*W, y+4*H))
  ctx.lineTo(x+2*W+1, skew(x+2*W, y+4*H))
  if ([2,3,5,6,7,8,9,0].includes(N))
  ctx.fill()

  ctx.beginPath()
  ctx.moveTo(x+2*W, y+4*H)
  ctx.lineTo(x+1*W, y+5*H)
  ctx.lineTo(x+2*W, y+6*H)
  ctx.lineTo(x+6*W, y+6*H)
  ctx.lineTo(x+7*W, y+5*H)
  ctx.lineTo(x+6*W, y+4*H)
  ctx.lineTo(x+2*W, y+4*H)
  if ([2,3,5,6,7,8,9,0].includes(N))
  ;//ctx.stroke()

  //12347890 vert top
  ctx.beginPath()
  ctx.moveTo(italicize(x+7*W, y+5*H, baseline) , y+5*H)
  ctx.lineTo(italicize(x+8*W, y+6*H, baseline), y+6*H)
  ctx.lineTo(italicize(x+8*W, y+11*H, baseline), y+11*H)
  ctx.lineTo(italicize(x+7*W, y+12*H, baseline), y+12*H)
  ctx.lineTo(italicize(x+6*W, y+11*H, baseline), y+11*H)
  ctx.lineTo(italicize(x+6*W, y+6*H, baseline), y+6*H)
  ctx.lineTo(italicize(x+7*W, y+5*H, baseline), y+5*H)
  if ([1,2,3,4,7,8,9,0].includes(N))
  ctx.fill()

  //1356890
  ctx.beginPath()
  ctx.moveTo(x+7*W, y+12*H)
  ctx.lineTo(x+6*W, y+13*H)
  ctx.lineTo(x+6*W, y+18*H)
  ctx.lineTo(x+7*W, y+19*H)
  ctx.lineTo(x+8*W, y+18*H)
  ctx.lineTo(x+8*W, y+13*H)
  ctx.lineTo(x+7*W, y+12*H)
  if ([1,3,4,5,6,7,8,9,0].includes(N))
  ctx.fill()

  //2356890
  ctx.beginPath()
  ctx.moveTo(x+7*W-1, y+19*H)
  ctx.lineTo(x+6*W-1, y+20*H)
  ctx.lineTo(x+2*W+1, y+20*H)
  ctx.lineTo(x+1*W+1, y+19*H)
  ctx.lineTo(x+2*W+1, y+18*H)
  ctx.lineTo(x+6*W-1, y+18*H)
  if ([2,3,5,6,8,9,0].includes(N))
  ctx.fill()

  //5423986 mid horz
  ctx.beginPath()
  ctx.moveTo(x+2*W+1, y+11*H)
  ctx.lineTo(x+6*W-1, y+11*H)
  ctx.lineTo(x+7*W-1, y+12*H)
  ctx.lineTo(x+6*W-1, y+13*H)
  ctx.lineTo(x+2*W+1, y+13*H)
  ctx.lineTo(x+1*W+1, y+12*H)
  ctx.lineTo(x+2*W+1, y+11*H)
  if ([2,3,4,5,6,8,9,].includes(N))
  ctx.fill()
}

function skew (x,y) {// skew up right side
  return y// (y - x/3)
}

function italicize (x,y, baseline) {// \, but reverse to: /
  //console.log(y,baseline)
  return x//(x + (baseline-y)/3)
}

function frownAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = [], MIRROR = false
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let xi = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]
  if (MIRROR)
    xi.reverse()
  //1
  ctx.beginPath()
  ctx.moveTo(x+xi[12]*W/24, y+22*H/24)
  cpx = x+xi[22]*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[22]*W/24, y+12*H/24)
  cpx = x+xi[22]*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[12]*W/24, y+2*H/24)
  cpx = x+xi[2]*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[2]*W/24, y+12*H/24)
  cpx = x+xi[2]*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[12]*W/24, y+22*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+xi[7]*W/24, y+17*H/24)
  cpx = x+xi[12]*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[17]*W/24, y+17*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.arc(x+xi[9]*W/24, y+10*H/24, W/24,0,Math.PI*2)
  ctx.fill()

  //4
  ctx.beginPath()
  ctx.arc(x+xi[15]*W/24, y+10*H/24, W/24,0,Math.PI*2)
  ctx.fill()
}

function smileAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = [], MIRROR = false
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let xi = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]
  if (MIRROR)
    xi.reverse()
  //1
  ctx.beginPath()
  ctx.moveTo(x+xi[12]*W/24, y+22*H/24)
  cpx = x+xi[22]*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[22]*W/24, y+12*H/24)
  cpx = x+xi[22]*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[12]*W/24, y+2*H/24)
  cpx = x+xi[2]*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[2]*W/24, y+12*H/24)
  cpx = x+xi[2]*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[12]*W/24, y+22*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+xi[7]*W/24, y+15*H/24)
  cpx = x+xi[12]*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[17]*W/24, y+15*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.arc(x+xi[9]*W/24, y+10*H/24, W/24,0,Math.PI*2)
  ctx.fill()

  //4
  ctx.beginPath()
  ctx.arc(x+xi[15]*W/24, y+10*H/24, W/24,0,Math.PI*2)
  ctx.fill()
}

function empty_roomsAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = [], MIRROR = false
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let xi = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]
  if (MIRROR)
    xi.reverse()
  let i = 0, x0 = x, y0 = y, offset = W/3
  x+= W/48, H -= 3*H/24, y += W/48
  for (; i < 9; i++) {
    ctx.globalAlpha /= 4
    //7
    ctx.beginPath()
    ctx.moveTo(x+xi[0]*W/24, y+6*H/24)
    ctx.lineTo(x+xi[1]*W/24, y+6*H/24)
    ctx.lineTo(x+xi[0]*W/24, y+4*H/24)
    ctx.fill()

    //8
    ctx.beginPath()
    ctx.moveTo(x+xi[0]*W/24, y+0*H/24)
    ctx.lineTo(x+xi[0]*W/24, y+2*H/24)
    ctx.lineTo(x+xi[1]*W/24, y+4*H/24)
    ctx.lineTo(x+xi[1]*W/24, y+2*H/24)
    ctx.lineTo(x+xi[3]*W/24, y+2*H/24)
    ctx.lineTo(x+xi[2]*W/24, y+0*H/24)
    ctx.fill()

    //9
    ctx.beginPath()
    ctx.moveTo(x+xi[4]*W/24, y+0*H/24)
    ctx.lineTo(x+xi[5]*W/24, y+2*H/24)
    ctx.lineTo(x+xi[6]*W/24, y+2*H/24)
    ctx.lineTo(x+xi[6]*W/24, y+0*H/24)
    ctx.fill()
    ctx.globalAlpha *= 4
    ////1
    ctx.beginPath()
    ctx.moveTo(x+xi[0]*W/24, y+0*H/24)
    ctx.lineTo(x+xi[2]*W/24, y+0*H/24)
    ctx.lineTo(x+xi[3]*W/24, y+2*H/24)
    ctx.lineTo(x+xi[1]*W/24, y+2*H/24)
    ctx.lineTo(x+xi[0]*W/24, y+0*H/24)
    ctx.lineTo(x+xi[0]*W/24, y+2*H/24)
    ctx.lineTo(x+xi[1]*W/24, y+4*H/24)
    ctx.lineTo(x+xi[1]*W/24, y+2*H/24)
    ctx.stroke()

    //2
    ctx.beginPath()
    ctx.moveTo(x+xi[4]*W/24, y+0*H/24)
    ctx.lineTo(x+xi[5]*W/24, y+2*H/24)
    ctx.lineTo(x+xi[6]*W/24, y+2*H/24)
    ctx.lineTo(x+xi[6]*W/24, y+0*H/24)
    ctx.lineTo(x+xi[4]*W/24, y+0*H/24)
    ctx.stroke()

    //3
    ctx.beginPath()
    ctx.moveTo(x+xi[6]*W/24, y+0*H/24)
    ctx.lineTo(x+xi[7]*W/24, y+2*H/24)
    ctx.lineTo(x+xi[7]*W/24, y+4*H/24)
    ctx.lineTo(x+xi[6]*W/24, y+2*H/24)
    ctx.stroke()

    //4
    ctx.beginPath()
    ctx.moveTo(x+xi[0]*W/24, y+6*H/24)
    ctx.lineTo(x+xi[1]*W/24, y+8*H/24)
    ctx.lineTo(x+xi[3]*W/24, y+8*H/24)
    ctx.lineTo(x+xi[2]*W/24, y+6*H/24)
    ctx.lineTo(x+xi[0]*W/24, y+6*H/24)
    ctx.lineTo(x+xi[0]*W/24, y+4*H/24)
    ctx.lineTo(x+xi[1]*W/24, y+6*H/24)
    ctx.stroke()

    //5
    ctx.beginPath()
    ctx.moveTo(x+xi[4]*W/24, y+6*H/24)
    ctx.lineTo(x+xi[5]*W/24, y+8*H/24)
    ctx.lineTo(x+xi[7]*W/24, y+8*H/24)
    ctx.lineTo(x+xi[6]*W/24, y+6*H/24)
    ctx.lineTo(x+xi[4]*W/24, y+6*H/24)
    ctx.stroke()

    //6
    ctx.beginPath()
    ctx.moveTo(x+xi[6]*W/24, y+6*H/24)
    ctx.lineTo(x+xi[6]*W/24, y+4*H/24)
    ctx.lineTo(x+xi[7]*W/24, y+6*H/24)
    ctx.lineTo(x+xi[7]*W/24, y+8*H/24)
    ctx.stroke()
    x += offset
    if (x >= x0+W) {
      x = x0 + W/48
      y += offset
    }
  }
}

function dissatisfactionAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = [], MIRROR = false
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "butt"
  ctx.lineJoin = "miter"
  let xi = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]
  ctx.font = "100 italic " + (W*0.04) + "pt Garamond"
  /*
  as cd decrease -> 
  td decreases -> 
  to maintain a constant ld
  at cd = 0, ld is undefined
  */
  ctx.fillText("\"Meh\" point", x+1.2*W/24, y+5.8*H/24)
  ctx.fillText("Threshold for", x+10.3*W/24, y+5*H/24)
  ctx.fillText("dissatisfaction", x+10.3*W/24, y+6.6*H/24)
  ctx.fillText("is lowered", x+18.3*W/24, y+7.8*H/24)
  ctx.fillText("as...", x+18.3*W/24, y+9.4*H/24)
  ctx.fillText("Causes of", x+18.2*W/24, y+12*H/24)
  ctx.fillText("dissatisfaction", x+18.2*W/24, y+13.6*H/24)
  ctx.fillText("decrease;", x+17*W/24, y+16.2*H/24)
  ctx.fillText("maintaining...", x+15.3*W/24, y+17.8*H/24)
  ctx.fillText("a constant Level of dissatisfaction.", x+5.4*W/24, y+19.8*H/24)  
  ctx.font = "800 italic " + (W*0.04) + "pt Garamond"
  ctx.fillText("TD", x+7.8*W/24, y+3*H/24)
  ctx.fillText("LD", x+4.2*W/24, y+21*H/24)
  ctx.fillText("CD", x+22*W/24, y+15.3*H/24)

  ctx.beginPath()
  ctx.arc(x+12.25*W/24, y+12.25*H/24, W/60,0,Math.PI*2)
  ctx.fill()
  //2
  ctx.beginPath()
  ctx.moveTo(x+17.75*W/24, y+10*H/24)
  ctx.lineTo(x+xi[18]*W/24, y+11*H/24)
  ctx.lineTo(x+18.25*W/24, y+10*H/24)
  ctx.stroke()
  //3
  ctx.beginPath()
  ctx.moveTo(x+16.65*W/24, y+15*H/24)
  ctx.lineTo(x+xi[16]*W/24, y+16*H/24)
  ctx.lineTo(x+xi[17]*W/24, y+15.35*H/24)
  ctx.stroke()
  //4
  ctx.beginPath()
  ctx.moveTo(x+xi[11]*W/24, y+17.75*H/24)
  ctx.lineTo(x+xi[10]*W/24, y+18*H/24)
  ctx.lineTo(x+xi[11]*W/24, y+18.25*H/24)
  ctx.stroke()
  //11
  ctx.beginPath()
  ctx.moveTo(x+9.75*W/24, y+3*H/24)
  ctx.lineTo(x+xi[10]*W/24, y+2*H/24)
  ctx.lineTo(x+10.25*W/24, y+3*H/24)
  ctx.stroke()
  //12
  ctx.beginPath()
  ctx.moveTo(x+xi[22]*W/24, y+13.75*H/24)
  ctx.lineTo(x+xi[23]*W/24, y+14*H/24)
  ctx.lineTo(x+xi[22]*W/24, y+14.25*H/24)
  ctx.stroke()
  //13
  ctx.beginPath()
  ctx.moveTo(x+3.5*W/24, y+20*H/24)
  ctx.lineTo(x+xi[3]*W/24, y+21*H/24)
  ctx.lineTo(x+xi[4]*W/24, y+20.5*H/24)
  ctx.stroke()
  //10
  ctx.beginPath()
  ctx.moveTo(x+11.75*W/24, y+11.75*H/24)
  ctx.lineTo(x+xi[4]*W/24, y+6*H/24)
  ctx.lineWidth /= 2
  ctx.stroke()
  ctx.lineWidth *= 2
  let v = document.getElementById("featuresize").value
  document.getElementById("featuresize").value /= 2
  smileAt( x+14.2*W/24, y+10.5*H/24,W/12,color)
  frownAt(x+9.5*W/24, y+14.2*H/24, W/12,color)
  document.getElementById("featuresize").value = v
  ctx.lineWidth = 1+v/50
  //1
  ctx.beginPath()
  ctx.moveTo(x+xi[6]*W/24, y+11*H/24)
  ctx.lineTo(x+xi[14]*W/24, y+11*H/24)
  ctx.lineTo(x+xi[14]*W/24, y+18*H/24)
  ctx.lineTo(x+xi[6]*W/24, y+18*H/24)
  ctx.lineTo(x+xi[6]*W/24, y+11*H/24)
  ctx.stroke()
  //2
  ctx.beginPath()
  ctx.moveTo(x+xi[10]*W/24, y+14*H/24)
  ctx.lineTo(x+xi[18]*W/24, y+14*H/24)
  ctx.lineTo(x+xi[18]*W/24, y+7*H/24)
  ctx.lineTo(x+xi[10]*W/24, y+7*H/24)
  ctx.lineTo(x+xi[10]*W/24, y+14*H/24)
  ctx.stroke()
  //3
  ctx.beginPath()
  ctx.moveTo(x+xi[14]*W/24, y+11*H/24)
  ctx.lineTo(x+xi[18]*W/24, y+7*H/24)
  ctx.stroke()
  //4
  ctx.beginPath()
  ctx.moveTo(x+xi[14]*W/24, y+18*H/24)
  ctx.lineTo(x+xi[18]*W/24, y+14*H/24)
  ctx.stroke()
  //5
  ctx.beginPath()
  ctx.moveTo(x+xi[6]*W/24, y+11*H/24)
  ctx.lineTo(x+xi[10]*W/24, y+7*H/24)
  ctx.stroke()
  //6
  ctx.beginPath()
  ctx.moveTo(x+xi[3]*W/24, y+21*H/24)
  ctx.lineTo(x+xi[10]*W/24, y+14*H/24)
  ctx.stroke()
  //7
  ctx.beginPath()
  ctx.moveTo(x+xi[10]*W/24, y+7*H/24)
  ctx.lineTo(x+xi[10]*W/24, y+2*H/24)
  ctx.stroke()
  //8
  ctx.beginPath()
  ctx.moveTo(x+xi[18]*W/24, y+14*H/24)
  ctx.lineTo(x+xi[23]*W/24, y+14*H/24)
  ctx.stroke()
  //9
  ctx.beginPath()
  ctx.moveTo(x+xi[10]*W/24, y+14*H/24)
  ctx.lineTo(x+xi[14]*W/24, y+11*H/24)
  ctx.setLineDash([W/48])
  ctx.stroke()
  ctx.setLineDash([])
}

function tealeavesAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, d = W/10, angle = pet(360)

  //1
  ctx.beginPath()
  p = rotatePoint(x+2*W/24+pet(d), y+21*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+2*W/24+pet(d)
  cpy = y+22*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+4*W/24+pet(d), y+22*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+5*W/24+pet(d)
  cpy = y+20*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+7*W/24+pet(d), y+15*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+10*W/24+pet(d)
  cpy = y+14*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+13*W/24+pet(d), y+12*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+17*W/24+pet(d)
  cpy = y+10*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+22*W/24+pet(d), y+7*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+21*W/24+pet(d)
  cpy = y+6*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+21*W/24+pet(d), y+6*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+22*W/24+pet(d)
  cpy = y+5*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+22*W/24+pet(d), y+5*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+21*W/24+pet(d)
  cpy = y+4*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+21*W/24+pet(d), y+4*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+16*W/24+pet(d)
  cpy = y+7*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+14*W/24+pet(d), y+8*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+11*W/24+pet(d)
  cpy = y+9*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+8*W/24+pet(d), y+12*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+5*W/24+pet(d)
  cpy = y+13*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+4*W/24+pet(d), y+17*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+2*W/24+pet(d)
  cpy = y+19*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+2*W/24+pet(d), y+19*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+3*W/24+pet(d)
  cpy = y+20*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+3*W/24+pet(d), y+20*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+2*W/24+pet(d)
  cpy = y+21*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+2*W/24+pet(d), y+21*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+15*W/24+pet(d)
  cpy = y+18*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  if (Math.random() > 0.9)
    ctx.fill()

  //2
  ctx.beginPath()
  p = rotatePoint(x+12*W/24+pet(d), y+20*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+14*W/24+pet(d)
  cpy = y+19*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+15*W/24+pet(d), y+20*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+16*W/24+pet(d)
  cpy = y+19*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+16*W/24+pet(d), y+18*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+15*W/24+pet(d)
  cpy = y+16*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+13*W/24+pet(d), y+17*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+12*W/24+pet(d)
  cpy = y+18*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24+pet(d), y+19*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+12*W/24+pet(d)
  cpy = y+19*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  if (Math.random() > 0.9) ctx.fill()

  //3
  ctx.beginPath()
  p = rotatePoint(x+6*W/24+pet(d), y+7*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+7*W/24+pet(d)
  cpy = y+7*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+7*W/24+pet(d), y+6*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+7*W/24+pet(d)
  cpy = y+5*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+7*W/24+pet(d), y+5*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+6*W/24+pet(d)
  cpy = y+4*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+6*W/24+pet(d), y+4*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+5*W/24+pet(d)
  cpy = y+6*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+5*W/24+pet(d), y+6*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+5*W/24+pet(d)
  cpy = y+7*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+5*W/24+pet(d), y+7*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+6*W/24+pet(d)
  cpy = y+7*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+6*W/24+pet(d), y+7*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  if (Math.random() > 0.9) ctx.fill()

  //4
  ctx.beginPath()
  p = rotatePoint(x+1*W/24+pet(d), y+9*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+2*W/24+pet(d)
  cpy = y+8*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+2*W/24+pet(d), y+7*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+5*W/24+pet(d)
  cpy = y+8*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+6*W/24+pet(d), y+9*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+9*W/24+pet(d)
  cpy = y+11*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+9*W/24+pet(d), y+11*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+12*W/24+pet(d)
  cpy = y+15*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+14*W/24+pet(d), y+15*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+18*W/24+pet(d)
  cpy = y+15*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+20*W/24+pet(d), y+16*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+20*W/24+pet(d)
  cpy = y+17*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+20*W/24+pet(d), y+17*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+18*W/24+pet(d)
  cpy = y+17*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+17*W/24+pet(d), y+16*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+17*W/24+pet(d)
  cpy = y+18*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+17*W/24+pet(d), y+18*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+13*W/24+pet(d)
  cpy = y+18*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+11*W/24+pet(d), y+17*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+8*W/24+pet(d)
  cpy = y+15*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+7*W/24+pet(d), y+14*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+8*W/24+pet(d)
  cpy = y+13*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+6*W/24+pet(d), y+12*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+4*W/24+pet(d)
  cpy = y+11*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+2*W/24+pet(d), y+10*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  if (Math.random() > 0.9) ctx.fill()

  //5
  ctx.beginPath()
  p = rotatePoint(x+10*W/24+pet(d), y+6*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+10*W/24+pet(d)
  cpy = y+3*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+11*W/24+pet(d), y+2*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+13*W/24+pet(d)
  cpy = y+2*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+15*W/24+pet(d), y+3*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+17*W/24+pet(d)
  cpy = y+4*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+19*W/24+pet(d), y+4*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+18*W/24+pet(d)
  cpy = y+7*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+18*W/24+pet(d), y+7*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+14*W/24+pet(d)
  cpy = y+6*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+13*W/24+pet(d), y+5*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+12*W/24+pet(d)
  cpy = y+6*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+13*W/24+pet(d), y+8*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+11*W/24+pet(d)
  cpy = y+8*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+11*W/24+pet(d), y+8*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+11*W/24+pet(d)
  cpy = y+6*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+10*W/24+pet(d), y+6*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  if (Math.random() > 0.9) ctx.fill()

  //6
  ctx.beginPath()
  p = rotatePoint(x+19*W/24+pet(d), y+7*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+18*W/24+pet(d)
  cpy = y+12*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+17*W/24+pet(d), y+13*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+16*W/24+pet(d)
  cpy = y+19*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+18*W/24+pet(d), y+21*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+18*W/24+pet(d)
  cpy = y+23*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+19*W/24+pet(d), y+23*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+21*W/24+pet(d)
  cpy = y+22*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+19*W/24+pet(d), y+19*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+18*W/24+pet(d)
  cpy = y+15*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+20*W/24+pet(d), y+11*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+21*W/24+pet(d)
  cpy = y+7*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+20*W/24+pet(d), y+8*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+2*W/24+pet(d)
  cpy = y+15*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  if (Math.random() > 0.9) ctx.fill()

  //7
  ctx.beginPath()
  p = rotatePoint(x+2*W/24+pet(d), y+15*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+3*W/24+pet(d)
  cpy = y+14*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+3*W/24+pet(d), y+13*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+2*W/24+pet(d)
  cpy = y+12*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+1*W/24+pet(d), y+13*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+1*W/24+pet(d)
  cpy = y+14*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+2*W/24+pet(d), y+15*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  if (Math.random() > 0.9) ctx.fill()

  //8
  ctx.beginPath()
  p = rotatePoint(x+8*W/24+pet(d), y+18*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+8*W/24+pet(d)
  cpy = y+20*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+9*W/24+pet(d), y+20*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+10*W/24+pet(d)
  cpy = y+19*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+10*W/24+pet(d), y+19*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+9*W/24+pet(d)
  cpy = y+18*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+9*W/24+pet(d), y+18*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  if (Math.random() > 0.9) ctx.fill()

  //9
  ctx.beginPath()
  p = rotatePoint(x+13*W/24+pet(d), y+10*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+14*W/24+pet(d)
  cpy = y+12*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+14*W/24+pet(d), y+12*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+16*W/24+pet(d)
  cpy = y+11*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+16*W/24+pet(d), y+10*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+14*W/24+pet(d)
  cpy = y+10*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+13*W/24+pet(d), y+10*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  if (Math.random() > 0.9) ctx.fill()

  //10
  ctx.beginPath()
  p = rotatePoint(x+8*W/24+pet(d), y+8*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+8*W/24+pet(d)
  cpy = y+10*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+8*W/24+pet(d), y+10*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+9*W/24+pet(d)
  cpy = y+10*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+10*W/24+pet(d), y+9*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+10*W/24+pet(d)
  cpy = y+8*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+9*W/24+pet(d), y+7*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+9*W/24+pet(d)
  cpy = y+8*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+8*W/24+pet(d), y+8*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  if (Math.random() > 0.9) ctx.fill()

  //11
  ctx.beginPath()
  p = rotatePoint(x+22*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+20*W/24+pet(d)
  cpy = y+12*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+20*W/24+pet(d), y+13*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+21*W/24+pet(d)
  cpy = y+15*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+22*W/24+pet(d), y+14*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+22*W/24+pet(d)
  cpy = y+13*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+23*W/24+pet(d), y+12*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  if (Math.random() > 0.9) ctx.fill()

  //12
  ctx.beginPath()
  p = rotatePoint(x+1*W/24+pet(d), y+4*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+2*W/24+pet(d)
  cpy = y+3*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+2*W/24+pet(d), y+3*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+7*W/24+pet(d)
  cpy = y+7*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+7*W/24+pet(d), y+8*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+8*W/24+pet(d)
  cpy = y+14*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+8*W/24+pet(d), y+14*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+6*W/24+pet(d)
  cpy = y+15*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+6*W/24+pet(d), y+11*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+6*W/24+pet(d)
  cpy = y+8*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+4*W/24+pet(d), y+6*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+2*W/24+pet(d)
  cpy = y+5*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+2*W/24+pet(d), y+5*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  if (Math.random() > 0.9) ctx.fill()

  //13
  ctx.beginPath()
  p = rotatePoint(x+15*W/24+pet(d), y+3*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+15*W/24+pet(d)
  cpy = y+5*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+16*W/24+pet(d), y+5*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+17*W/24+pet(d)
  cpy = y+5*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+17*W/24+pet(d), y+3*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+16*W/24+pet(d)
  cpy = y+2*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+15*W/24+pet(d), y+2*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  if (Math.random() > 0.9) ctx.fill()

  //14
  ctx.beginPath()
  p = rotatePoint(x+8*W/24+pet(d), y+4*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+9*W/24+pet(d)
  cpy = y+4*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+9*W/24+pet(d), y+4*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+9*W/24+pet(d)
  cpy = y+3*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+8*W/24+pet(d), y+3*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+8*W/24+pet(d)
  cpy = y+4*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  if (Math.random() > 0.9) ctx.fill()

  //15
  ctx.beginPath()
  p = rotatePoint(x+6*W/24+pet(d), y+22*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+7*W/24+pet(d)
  cpy = y+22*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+7*W/24+pet(d), y+21*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+7*W/24+pet(d)
  cpy = y+20*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+6*W/24+pet(d), y+20*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+5*W/24+pet(d)
  cpy = y+21*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+6*W/24+pet(d), y+21*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  if (Math.random() > 0.9) ctx.fill()

  //16
  ctx.beginPath()
  p = rotatePoint(x+9*W/24+pet(d), y+23*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+12*W/24+pet(d)
  cpy = y+22*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+14*W/24+pet(d), y+20*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+15*W/24+pet(d)
  cpy = y+16*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+15*W/24+pet(d), y+13*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+16*W/24+pet(d)
  cpy = y+9*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+18*W/24+pet(d), y+9*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+18*W/24+pet(d)
  cpy = y+8*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+18*W/24+pet(d), y+8*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+14*W/24+pet(d)
  cpy = y+10*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+14*W/24+pet(d), y+12*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+14*W/24+pet(d)
  cpy = y+15*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+13*W/24+pet(d), y+20*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+10*W/24+pet(d)
  cpy = y+21*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+9*W/24+pet(d), y+22*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+9*W/24+pet(d)
  cpy = y+22*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  if (Math.random() > 0.9) 
    ctx.fill()
}

function printerAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+19*W/24, y+6*H/24)
  ctx.lineTo(x+19*W/24, y+2*H/24)
  ctx.lineTo(x+17*W/24, y+1*H/24)
  ctx.lineTo(x+11*W/24, y+1*H/24)
  cpx = x+9*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+2*H/24)
  cpx = x+9*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+3*H/24)
  cpx = x+8*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+3*H/24)
  cpx = x+6*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+4*H/24)
  ctx.lineTo(x+6*W/24, y+9*H/24)
  ctx.lineTo(x+5*W/24, y+9*H/24)
  ctx.lineTo(x+5*W/24, y+22*H/24)
  ctx.lineTo(x+20*W/24, y+22*H/24)
  ctx.lineTo(x+20*W/24, y+6*H/24)
  ctx.lineTo(x+19*W/24, y+6*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+9*H/24)
  ctx.lineTo(x+10*W/24, y+9*H/24)
  ctx.lineTo(x+10*W/24, y+6*H/24)
  ctx.lineTo(x+19*W/24, y+6*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+21*H/24)
  ctx.lineTo(x+6*W/24, y+10*H/24)
  ctx.lineTo(x+19*W/24, y+10*H/24)
  ctx.lineTo(x+19*W/24, y+21*H/24)
  ctx.lineTo(x+6*W/24, y+21*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+21*H/24)
  ctx.lineTo(x+8*W/24, y+14*H/24)
  ctx.lineTo(x+17*W/24, y+14*H/24)
  ctx.lineTo(x+17*W/24, y+21*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+16*H/24)
  ctx.lineTo(x+17*W/24, y+16*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+18*H/24)
  ctx.lineTo(x+17*W/24, y+18*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+14*H/24)
  ctx.lineTo(x+9*W/24, y+15*H/24)
  ctx.lineTo(x+12*W/24, y+15*H/24)
  ctx.lineTo(x+13*W/24, y+14*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+16*H/24)
  ctx.lineTo(x+9*W/24, y+17*H/24)
  ctx.lineTo(x+12*W/24, y+17*H/24)
  ctx.lineTo(x+13*W/24, y+16*H/24)
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+18*H/24)
  ctx.lineTo(x+9*W/24, y+19*H/24)
  ctx.lineTo(x+12*W/24, y+19*H/24)
  ctx.lineTo(x+13*W/24, y+18*H/24)
  ctx.stroke()
  ctx.fillStyle = color
  //10
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+22*H/24)
  ctx.lineTo(x+6*W/24, y+23*H/24)
  ctx.lineTo(x+7*W/24, y+23*H/24)
  ctx.lineTo(x+7*W/24, y+22*H/24)
  ctx.fill()

  //11
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+22*H/24)
  ctx.lineTo(x+18*W/24, y+23*H/24)
  ctx.lineTo(x+19*W/24, y+23*H/24)
  ctx.lineTo(x+19*W/24, y+22*H/24)
  ctx.fill()

  //12
  ctx.beginPath()
  ctx.moveTo(x+19*W/24, y+6*H/24)
  ctx.lineTo(x+23*W/24, y+4*H/24)
  ctx.stroke()

  //13
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+3*H/24)
  ctx.lineTo(x+10*W/24, y+5*H/24)
  ctx.lineTo(x+16*W/24, y+5*H/24)
  ctx.lineTo(x+16*W/24, y+3*H/24)
  ctx.lineTo(x+10*W/24, y+3*H/24)
  ctx.globalAlpha /= 4
  ctx.fillStyle = color
  ctx.fill()
  ctx.globalAlpha *= 4
  ctx.stroke()

  //20
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+4*H/24)
  ctx.lineTo(x+5*W/24, y+4*H/24)
  ctx.lineTo(x+5*W/24, y+9*H/24)
  ctx.stroke()

  //21
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+9*H/24)
  ctx.lineTo(x+1*W/24, y+6*H/24)
  ctx.lineTo(x+3.5*W/24, y+6*H/24)
  ctx.lineTo(x+5*W/24, y+7*H/24)
  ctx.lineTo(x+5*W/24, y+6*H/24)
  ctx.lineTo(x+1*W/24, y+3*H/24)
  ctx.lineTo(x+3.5*W/24, y+3*H/24)
  ctx.lineTo(x+5*W/24, y+4*H/24)
  ctx.stroke()
  //22
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+11*H/24)
  ctx.lineTo(x+13*W/24, y+11*H/24)
  ctx.stroke()
  //23
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+7*H/24)
  ctx.lineTo(x+9*W/24, y+8*H/24)
  ctx.stroke()
  //16
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+6*H/24)
  ctx.lineTo(x+10*W/24, y+6*H/24)
  ctx.stroke()
}

function phono_armAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+22*W/24, y+11*H/24)
  ctx.lineTo(x+22*W/24, y+1*H/24)
  ctx.lineTo(x+10*W/24, y+8*H/24)
  ctx.lineTo(x+10*W/24, y+10*H/24)
  ctx.lineTo(x+6*W/24, y+12*H/24)
  ctx.lineTo(x+2*W/24, y+12*H/24)
  ctx.lineTo(x+2*W/24, y+10*H/24)
  ctx.lineTo(x+6*W/24, y+8*H/24)
  ctx.lineTo(x+10*W/24, y+8*H/24)
  ctx.lineTo(x+6*W/24, y+10*H/24)
  ctx.lineTo(x+2*W/24, y+10*H/24)
  ctx.lineTo(x+6*W/24, y+10*H/24)
  ctx.lineTo(x+6*W/24, y+12*H/24)
  ctx.lineTo(x+4*W/24, y+12*H/24)
  ctx.lineTo(x+4*W/24, y+14*H/24)
  ctx.stroke()
}

function turntableAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+20*H/24)
  ctx.lineTo(x+24*W/24, y+20*H/24)
  ctx.lineTo(x+24*W/24, y+14*H/24)
  ctx.lineTo(x+6*W/24, y+14*H/24)
  ctx.lineTo(x+6*W/24, y+20*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+14*H/24)
  ctx.lineTo(x+6*W/24, y+8*H/24)
  ctx.lineTo(x+24*W/24, y+8*H/24)
  ctx.lineTo(x+24*W/24, y+14*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+20*H/24)
  ctx.lineTo(x+0*W/24, y+16*H/24)
  ctx.lineTo(x+0*W/24, y+10*H/24)
  ctx.lineTo(x+6*W/24, y+14*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+10*H/24)
  ctx.lineTo(x+0*W/24, y+4*H/24)
  ctx.lineTo(x+6*W/24, y+8*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+4*H/24)
  ctx.lineTo(x+18*W/24, y+4*H/24)
  ctx.lineTo(x+24*W/24, y+8*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.ellipse(x+10*W/24, y+11*H/24, 2.4*W/24, 7*W/24, Math.PI/2, 0, Math.PI*2)
  ctx.stroke()

  ctx.beginPath()
  ctx.ellipse(x+10*W/24, y+11*H/24, 0.6*W/24, 1.75*W/24, Math.PI/2, 0, Math.PI*2)
  ctx.stroke()

  //3 spindle
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+11*H/24)
  ctx.lineTo(x+10*W/24, y+10*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+4*H/24)
  ctx.lineTo(x+18*W/24, y+10*H/24)
  ctx.lineTo(x+24*W/24, y+14*H/24)
  ctx.stroke()
  //3
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+10*H/24)
  ctx.lineTo(x+3.7*W/24, y+10*H/24)
  ctx.stroke()
  //5
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+10*H/24)
  ctx.lineTo(x+16.3*W/24, y+10*H/24)
  ctx.stroke()

  phono_armAt(x+12*W/24, y+8*H/24, W/4, color)

  //1
  ctx.globalAlpha = 0.2
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+4*H/24)
  ctx.lineTo(x+0*W/24, y+10*H/24)
  ctx.lineTo(x+6*W/24, y+14*H/24)
  ctx.lineTo(x+24*W/24, y+14*H/24)
  ctx.lineTo(x+24*W/24, y+8*H/24)
  ctx.lineTo(x+18*W/24, y+4*H/24)
  ctx.lineTo(x+0*W/24, y+4*H/24)
  ctx.fill()

  //5
  ctx.globalAlpha = 0.5
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+10*H/24)
  ctx.lineTo(x+0*W/24, y+16*H/24)
  ctx.lineTo(x+6*W/24, y+20*H/24)
  ctx.lineTo(x+24*W/24, y+20*H/24)
  ctx.lineTo(x+24*W/24, y+14*H/24)
  ctx.lineTo(x+6*W/24, y+14*H/24)
  ctx.lineTo(x+0*W/24, y+10*H/24)
  ctx.fill()

  ctx.globalAlpha = 1

}

function reading_tea_leavesAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/30
  let savedF = ctx.fillStyle
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "round"
  ctx.lineJoin = "round"
  let labels = ["a.","b.","c.","d.","e."], i = 0
  let def1 = shuffle(tealeaves_u).slice(0,5), d1 = ""
  let def2 = shuffle(tealeaves_u).slice(0,5), d2 = ""
  defs["reading_tea_leavesAt"].i = "" 
  defs["reading_tea_leavesAt"].u = ""
  for (; i < labels.length; i++) {
    defs["reading_tea_leavesAt"].i += labels[i] +" "+def1[i] +','
    defs["reading_tea_leavesAt"].u += labels[i] +" "+def2[i] +','
  }
  ctx.globalAlpha /= 4
  let d = W/30, cx = x+W/2, cy = y+H/2, angle
  
  //1 tea stains
  angle = pet(360)
  ctx.beginPath()
  p = rotatePoint(x+12*W/24+pet(d), y+17*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+13*W/24+pet(d)
  cpy = y+17*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+13*W/24+pet(d), y+16*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+13*W/24+pet(d)
  cpy = y+15*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24+pet(d), y+15*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+11*W/24+pet(d)
  cpy = y+15*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+10*W/24+pet(d), y+14*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+9*W/24+pet(d)
  cpy = y+14*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+9*W/24+pet(d), y+15*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+9*W/24+pet(d)
  cpy = y+17*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24+pet(d), y+17*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()

  //3
  angle = pet(360)
  ctx.beginPath()
  p = rotatePoint(x+10*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
  ctx.arc(p[0],p[1], 2+Math.random()*W/50, 0, Math.PI*2)
  ctx.fill()
  angle = pet(360)
  ctx.beginPath()
  p = rotatePoint(x+14*W/24+pet(d), y+10*H/24+pet(d) ,cx,cy,angle)
  ctx.arc(p[0],p[1], 2+Math.random()*W/50, 0, Math.PI*2)
  ctx.fill()
  
  ctx.globalAlpha *= 4
  //1
  ctx.lineWidth /= 2
  ctx.beginPath()
  ctx.arc(x+12*W/24, y+12*H/24, W/5,0,Math.PI*2)
  ctx.stroke()
  ctx.lineWidth *= 4
  ctx.beginPath()
  ctx.arc(x+12*W/24, y+12*H/24, W/2.1,0,Math.PI*2)
  ctx.stroke()
  //2
  ctx.beginPath()
  ctx.moveTo(x+22*W/24, y+24*H/24)
  cpx = x+24*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+24*W/24, y+22*H/24)
  cpx = x+21*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+19*H/24)
  ctx.stroke()
  //3
  ctx.beginPath()
  ctx.moveTo(x+19*W/24, y+21*H/24)
  cpx = x+22*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+24*H/24)
  ctx.stroke()
  let ws = [30,40,35,25]
  let x0 = x, y0 = y,  r0 = W/3.5, r = r0
  i = 0
  for (; i < 193; i++) {
    angle = Math.random()*2*Math.PI
    r = r0/2+pet(r0)
    x = cx + r * Math.cos(angle) - randomPick(ws)
    y = cy + r * Math.sin(angle) - randomPick(ws)
    tealeavesAt(x, y, randomPick(ws), color)
  }
  let fs = W*0.06
  ctx.font = "italic "+fs+"pt Garamond"
  ctx.lineWidth /= 2
  r = r0*1.45, offset = Math.PI/4
  let r2 = r/1.9
  angle = Math.random()*2*Math.PI
  i = 0
  for (; i < labels.length; i++) {
    angle += offset
    x = cx + r * Math.cos(angle)
    y = cy + r * Math.sin(angle)
    ctx.fillText(labels[i],x-fs/2,y+fs/2)
    let x2 = cx + r*0.87 * Math.cos(angle)
    let y2 = cy + r*0.87 * Math.sin(angle)
    ctx.beginPath()
    ctx.moveTo(x2, y2)
    r2 += pet(W/20)
    x2 = cx + r2 * Math.cos(angle)
    y2 = cy + r2 * Math.sin(angle)
    ctx.lineTo(x2 +pet(W/20), y2+pet(W/20))
    ctx.stroke()
  }

}

function rock_paper_scissorsAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = [], MIRROR = false
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "butt"
  ctx.lineJoin = "miter"
  let xi = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]
  ctx.font = "100 italic " + (W*0.04) + "pt Garamond"

  ctx.fillText("Outcome", x+1.2*W/24, y+5.8*H/24)
  ctx.fillText("Rock", x+10.2*W/24, y+6.6*H/24)
  ctx.fillText("Wraps", x+18*W/24, y+6.8*H/24)
  ctx.fillText("Win", x+14.2*W/24, y+12*H/24)
  ctx.fillText("Paper", x+18.2*W/24, y+13.6*H/24)
  ctx.fillText("Breaks", x+2.2*W/24, y+11*H/24)
  ctx.fillText("Cuts", x+13.5*W/24, y+19.2*H/24)
  ctx.fillText("Scissors", x+6*W/24, y+19.2*H/24)
  ctx.fillText("Lose", x+10*W/24, y+15.2*H/24)
  ctx.font = "800 italic " + (W*0.04) + "pt Garamond"
  ctx.fillText("R", x+8.4*W/24, y+3*H/24)
  ctx.fillText("S", x+4.2*W/24, y+21*H/24)
  ctx.fillText("P", x+22*W/24, y+15.3*H/24)
  //1
  ctx.beginPath()
  ctx.moveTo(x+15.25*W/24, y+16.25*H/24)
  ctx.lineTo(x+xi[16]*W/24, y+16*H/24)
  ctx.lineTo(x+15.75*W/24, y+16.75*H/24)
  ctx.stroke()
  //2
  ctx.beginPath()
  ctx.moveTo(x+xi[15]*W/24, y+6.75*H/24)
  ctx.lineTo(x+xi[14]*W/24, y+7*H/24)
  ctx.lineTo(x+xi[15]*W/24, y+7.25*H/24)
  ctx.stroke()
  //3
  ctx.beginPath()
  ctx.moveTo(x+5.75*W/24, y+13.5*H/24)
  ctx.lineTo(x+xi[6]*W/24, y+14.5*H/24)
  ctx.lineTo(x+6.25*W/24, y+13.5*H/24)
  ctx.stroke()
  //11
  ctx.beginPath()
  ctx.moveTo(x+9.75*W/24, y+3*H/24)
  ctx.lineTo(x+xi[10]*W/24, y+2*H/24)
  ctx.lineTo(x+10.25*W/24, y+3*H/24)
  ctx.stroke()
  //12
  ctx.beginPath()
  ctx.moveTo(x+xi[22]*W/24, y+13.75*H/24)
  ctx.lineTo(x+xi[23]*W/24, y+14*H/24)
  ctx.lineTo(x+xi[22]*W/24, y+14.25*H/24)
  ctx.stroke()
  //13
  ctx.beginPath()
  ctx.moveTo(x+3.5*W/24, y+20*H/24)
  ctx.lineTo(x+xi[3]*W/24, y+21*H/24)
  ctx.lineTo(x+xi[4]*W/24, y+20.5*H/24)
  ctx.stroke()
  //10
  ctx.beginPath()
  ctx.moveTo(x+xi[12]*W/24, y+12*H/24)
  ctx.lineTo(x+xi[4]*W/24, y+6*H/24)
  ctx.lineWidth /= 2
  ctx.stroke()
  ctx.lineWidth *= 2
  //1
  ctx.beginPath()
  ctx.moveTo(x+xi[6]*W/24, y+11*H/24)
  ctx.lineTo(x+xi[14]*W/24, y+11*H/24)
  ctx.lineTo(x+xi[14]*W/24, y+18*H/24)
  ctx.lineTo(x+xi[6]*W/24, y+18*H/24)
  ctx.lineTo(x+xi[6]*W/24, y+11*H/24)
  ctx.stroke()
  //2
  ctx.beginPath()
  ctx.moveTo(x+xi[10]*W/24, y+14*H/24)
  ctx.lineTo(x+xi[18]*W/24, y+14*H/24)
  ctx.lineTo(x+xi[18]*W/24, y+7*H/24)
  ctx.lineTo(x+xi[10]*W/24, y+7*H/24)
  ctx.lineTo(x+xi[10]*W/24, y+14*H/24)
  ctx.stroke()
  //3
  ctx.beginPath()
  ctx.moveTo(x+xi[14]*W/24, y+11*H/24)
  ctx.lineTo(x+xi[18]*W/24, y+7*H/24)
  ctx.stroke()
  //4
  ctx.beginPath()
  ctx.moveTo(x+xi[14]*W/24, y+18*H/24)
  ctx.lineTo(x+xi[18]*W/24, y+14*H/24)
  ctx.stroke()
  //5
  ctx.beginPath()
  ctx.moveTo(x+xi[6]*W/24, y+11*H/24)
  ctx.lineTo(x+xi[10]*W/24, y+7*H/24)
  ctx.stroke()
  //6
  ctx.beginPath()
  ctx.moveTo(x+xi[3]*W/24, y+21*H/24)
  ctx.lineTo(x+xi[10]*W/24, y+14*H/24)
  ctx.stroke()
  //7
  ctx.beginPath()
  ctx.moveTo(x+xi[10]*W/24, y+7*H/24)
  ctx.lineTo(x+xi[10]*W/24, y+2*H/24)
  ctx.stroke()
  //8
  ctx.beginPath()
  ctx.moveTo(x+xi[18]*W/24, y+14*H/24)
  ctx.lineTo(x+xi[23]*W/24, y+14*H/24)
  ctx.stroke()
  //9
  ctx.beginPath()
  ctx.moveTo(x+xi[10]*W/24, y+14*H/24)
  ctx.lineTo(x+xi[14]*W/24, y+11*H/24)
  ctx.setLineDash([W/48])
  ctx.stroke()
  ctx.setLineDash([])
}

function canadaAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.fillStyle = "#ff0000"
  ctx.beginPath()
  ctx.moveTo(x+11.8*W/24, y+18*H/24)
  ctx.lineTo(x+6*W/24, y+19*H/24)
  ctx.lineTo(x+7*W/24, y+17*H/24)
  ctx.lineTo(x+1*W/24, y+12*H/24)
  ctx.lineTo(x+2*W/24, y+11*H/24)
  ctx.lineTo(x+1*W/24, y+7*H/24)
  ctx.lineTo(x+4*W/24, y+8*H/24)
  ctx.lineTo(x+5*W/24, y+6*H/24)
  ctx.lineTo(x+9*W/24, y+10*H/24)
  ctx.lineTo(x+7*W/24, y+3*H/24)
  ctx.lineTo(x+10*W/24, y+4*H/24)
  ctx.lineTo(x+12*W/24, y+0*H/24)
  ctx.lineTo(x+14*W/24, y+4*H/24)
  ctx.lineTo(x+17*W/24, y+3*H/24)
  ctx.lineTo(x+15*W/24, y+10*H/24)
  ctx.lineTo(x+19*W/24, y+6*H/24)
  ctx.lineTo(x+20*W/24, y+8*H/24)
  ctx.lineTo(x+23*W/24, y+7*H/24)
  ctx.lineTo(x+22*W/24, y+11*H/24)
  ctx.lineTo(x+23*W/24, y+12*H/24)
  ctx.lineTo(x+17*W/24, y+17*H/24)
  ctx.lineTo(x+18*W/24, y+19*H/24)
  ctx.lineTo(x+12.2*W/24, y+18*H/24)
  ctx.lineTo(x+12.5*W/24, y+24*H/24)
  ctx.lineTo(x+11.5*W/24, y+24*H/24)
  ctx.lineTo(x+11.8*W/24, y+18*H/24)
  ctx.fill()
}

function bottled_waterAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1 cap fill blue
  ctx.fillStyle = "#16247f"
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+3*H/24)
  ctx.lineTo(x+10*W/24, y+0*H/24)
  ctx.lineTo(x+14*W/24, y+0*H/24)
  ctx.lineTo(x+14*W/24, y+3*H/24)
  ctx.lineTo(x+10*W/24, y+3*H/24)
  ctx.fill()

  ctx.save()
  ctx.fillStyle = "#85effb"
  //2 clip bottle body
  ctx.save()
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+3*H/24)
  cpx = x+10*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+7*H/24)
  cpx = x+7*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+11*H/24)
  cpx = x+8*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+19*H/24)
  cpx = x+7*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+22*H/24)
  cpx = x+7*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+24*H/24)
  cpx = x+15*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+24*H/24)
  cpx = x+17*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+22*H/24)
  cpx = x+17*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+19*H/24)
  cpx = x+16*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+11*H/24)
  cpx = x+17*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+7*H/24)
  cpx = x+14*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+3*H/24)
  ctx.fill()

  ctx.clip()
  ctx.globalAlpha = 0.3
  let fills = ["#00ccff", "#eeeeff"]
  let offs = [W/19, W/22, W/29, W/26, -W/20, -W/22, -W/26, -W/29]
  let i = 0, o1, o2
  let x0 = x, y0 = y
  for (; i < 400; i++) {
    ctx.fillStyle = randomPick(fills)
    x = x0+W/4+Math.random()*W/1.8, y = y0+Math.random()*H
    ctx.beginPath()
    ctx.moveTo(x,y)
    o1 = randomPick(offs)+pet(o2)
    o2 = randomPick(offs)+pet(o1)
    ctx.lineTo(x+o1, y+o2)
    o1 = randomPick(offs)+pet(o1)
    o2 = randomPick(offs)+pet(o2)
    ctx.lineTo(x+o2, y+o1)
    o1 = randomPick(offs)+pet(o2)
    o2 = randomPick(offs)+pet(o1)
    if (Math.random() > 0.5)
    ctx.lineTo(x+o2, y+o1)
    o1 = randomPick(offs)
    o2 = randomPick(offs)
   // ctx.lineTo(x+o2, y+o1)
    ctx.closePath()
    ctx.fill()
  }
  ctx.restore()
}

function tin_foil_hatAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+24*H/24)
  cpx = x+2*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+21*H/24)
  cpx = x+2*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+18*H/24)
  cpx = x+9*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+14*H/24)
  cpx = x+9*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+10*H/24)
  cpx = x+9*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+7*H/24)
  cpx = x+15*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+10*H/24)
  cpx = x+15*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+14*H/24)
  cpx = x+15*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+18*H/24)
  cpx = x+22*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+21*H/24)
  cpx = x+22*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+24*H/24)
  ctx.stroke()
let d = W/40
  ctx.save()
  ctx.fillStyle = "#aaaaaa"
  ctx.beginPath()
  ctx.moveTo(x+12*W/24+pet(d), y+1*H/24+pet(d))
  ctx.lineTo(x+11*W/24+pet(d), y+2*H/24+pet(d))
  ctx.lineTo(x+10*W/24+pet(d), y+3*H/24+pet(d))
  ctx.lineTo(x+9*W/24+pet(d), y+4*H/24+pet(d))
  ctx.lineTo(x+8*W/24+pet(d), y+5*H/24+pet(d))
  ctx.lineTo(x+7*W/24+pet(d), y+6*H/24+pet(d))
  ctx.lineTo(x+6*W/24+pet(d), y+8*H/24+pet(d))
  ctx.lineTo(x+6*W/24+pet(d), y+9*H/24+pet(d))
  ctx.lineTo(x+6*W/24+pet(d), y+10*H/24+pet(d))
  ctx.lineTo(x+6*W/24+pet(d), y+11*H/24+pet(d))
  ctx.lineTo(x+6*W/24+pet(d), y+12*H/24+pet(d))
  ctx.lineTo(x+7*W/24+pet(d), y+12*H/24+pet(d))
  ctx.lineTo(x+8*W/24+pet(d), y+12*H/24+pet(d))
  ctx.lineTo(x+9*W/24+pet(d), y+12*H/24+pet(d))
  ctx.lineTo(x+10*W/24+pet(d), y+12*H/24+pet(d))
  ctx.lineTo(x+11*W/24+pet(d), y+12*H/24+pet(d))
  ctx.lineTo(x+12*W/24+pet(d), y+12*H/24+pet(d))
  ctx.lineTo(x+13*W/24+pet(d), y+12*H/24+pet(d))
  ctx.lineTo(x+14*W/24+pet(d), y+12*H/24+pet(d))
  ctx.lineTo(x+15*W/24+pet(d), y+12*H/24+pet(d))
  ctx.lineTo(x+16*W/24+pet(d), y+12*H/24+pet(d))
  ctx.lineTo(x+17*W/24+pet(d), y+12*H/24+pet(d))
  ctx.lineTo(x+18*W/24+pet(d), y+12*H/24+pet(d))
  ctx.lineTo(x+18*W/24+pet(d), y+11*H/24+pet(d))
  ctx.lineTo(x+18*W/24+pet(d), y+10*H/24+pet(d))
  ctx.lineTo(x+18*W/24+pet(d), y+9*H/24+pet(d))
  ctx.lineTo(x+18*W/24+pet(d), y+8*H/24+pet(d))
  ctx.lineTo(x+17*W/24+pet(d), y+6*H/24+pet(d))
  ctx.lineTo(x+16*W/24+pet(d), y+5*H/24+pet(d))
  ctx.lineTo(x+15*W/24+pet(d), y+4*H/24+pet(d))
  ctx.lineTo(x+14*W/24+pet(d), y+3*H/24+pet(d))
  ctx.lineTo(x+13*W/24+pet(d), y+2*H/24+pet(d))
  ctx.lineTo(x+12*W/24+pet(d), y+1*H/24+pet(d))
  ctx.closePath()
  ctx.fill()
  ctx.clip()
  ctx.globalAlpha = 0.3
  let fills = ["#ffffff", "#000000"]//, "#aaaaaa", "#777777", "#eeeeee"]
  let offs = [W/19, W/22, W/29, W/26, -W/20, -W/22, -W/26, -W/29]
  let i = 0, o1, o2
  let x0 = x, y0 = y
  for (; i < 400; i++) {
    ctx.fillStyle = randomPick(fills)
    x = x0+W/4+Math.random()*W/1.8, y = y0+Math.random()*H/2
    ctx.beginPath()
    ctx.moveTo(x,y)
    o1 = randomPick(offs)+pet(o2)
    o2 = randomPick(offs)+pet(o1)
    ctx.lineTo(x+o1, y+o2)
    o1 = randomPick(offs)+pet(o1)
    o2 = randomPick(offs)+pet(o2)
    ctx.lineTo(x+o2, y+o1)
    o1 = randomPick(offs)+pet(o2)
    o2 = randomPick(offs)+pet(o1)
    if (Math.random() > 0.5)
    ctx.lineTo(x+o2, y+o1)
    o1 = randomPick(offs)
    o2 = randomPick(offs)
   // ctx.lineTo(x+o2, y+o1)
    ctx.closePath()
    ctx.fill()
  }
  ctx.globalAlpha = 1
  ctx.restore()
}

function no_kingsAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 0.5// + document.getElementById("featuresize").value/200
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let i = 0, p = W/16
  for (; i < 21; i++) {
    if (i < 3) 
      ctx.lineWidth = 3
    else
      ctx.lineWidth = 0.5
    //1
    ctx.beginPath()
    ctx.moveTo(x+2*W/24+pet(p), y+5*H/24+pet(p))
    ctx.lineTo(x+22*W/24+pet(p), y+5*H/24+pet(p))
    ctx.stroke()

    //2
    ctx.beginPath()
    ctx.moveTo(x+2*W/24+pet(p), y+21*H/24+pet(p))
    ctx.lineTo(x+8*W/24+pet(p), y+12*H/24+pet(p))
    ctx.stroke()

    //3
    ctx.beginPath()
    ctx.moveTo(x+2*W/24+pet(p), y+5*H/24+pet(p))
    ctx.lineTo(x+2*W/24+pet(p), y+21*H/24+pet(p))
    ctx.stroke()

    //4
    ctx.beginPath()
    ctx.moveTo(x+22*W/24+pet(p), y+5*H/24+pet(p))
    ctx.lineTo(x+22*W/24+pet(p), y+21*H/24+pet(p))
    ctx.stroke()

    //5
    ctx.beginPath()
    ctx.moveTo(x+22*W/24+pet(p), y+21*H/24+pet(p))
    ctx.lineTo(x+16*W/24+pet(p), y+12*H/24+pet(p))
    ctx.stroke()

    //6
    ctx.beginPath()
    ctx.moveTo(x+8*W/24+pet(p), y+12*H/24+pet(p))
    ctx.lineTo(x+12*W/24+pet(p), y+21*H/24+pet(p))
    ctx.stroke()

    //7
    ctx.beginPath()
    ctx.moveTo(x+12*W/24+pet(p), y+21*H/24+pet(p))
    ctx.lineTo(x+16*W/24+pet(p), y+12*H/24+pet(p))
    ctx.stroke()
  }
}

function spell_checkAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+9*H/24)
  ctx.lineTo(x+2*W/24, y+9*H/24)
  ctx.lineTo(x+2*W/24, y+10*H/24)
  ctx.lineTo(x+4*W/24, y+10*H/24)
  ctx.lineTo(x+4*W/24, y+14*H/24)
  cpx = x+4*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+15*H/24)
  ctx.lineTo(x+7*W/24, y+15*H/24)
  ctx.lineTo(x+7*W/24, y+14*H/24)
  ctx.lineTo(x+5*W/24, y+14*H/24)
  ctx.lineTo(x+5*W/24, y+10*H/24)
  ctx.lineTo(x+7*W/24, y+10*H/24)
  ctx.lineTo(x+7*W/24, y+9*H/24)
  ctx.lineTo(x+6*W/24, y+9*H/24)
  ctx.lineTo(x+5*W/24, y+9*H/24)
  ctx.lineTo(x+5*W/24, y+7*H/24)
  ctx.lineTo(x+4*W/24, y+7*H/24)
  ctx.lineTo(x+4*W/24, y+9*H/24)
  ctx.fill()

  //2
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+6*H/24)
  ctx.lineTo(x+17*W/24, y+6*H/24)
  ctx.lineTo(x+17*W/24, y+15*H/24)
  ctx.lineTo(x+18*W/24, y+15*H/24)
  ctx.lineTo(x+18*W/24, y+6*H/24)
  ctx.fill()

  //3
  ctx.beginPath()
  ctx.moveTo(x+21*W/24, y+15*H/24)
  ctx.lineTo(x+22*W/24, y+15*H/24)
  ctx.lineTo(x+22*W/24, y+11*H/24)
  ctx.lineTo(x+21*W/24, y+11*H/24)
  ctx.lineTo(x+21*W/24, y+15*H/24)
  ctx.fill()

  //4
  ctx.beginPath()
  ctx.moveTo(x+22*W/24, y+11*H/24)
  cpx = x+22*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+9*H/24)
  cpx = x+17*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+11*H/24)
  cpx = x+18*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+10*H/24)
  cpx = x+21*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+11*H/24)
  ctx.fill()

  //1
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+11*H/24)
  ctx.lineTo(x+10*W/24, y+12*H/24)
  ctx.lineTo(x+14*W/24, y+12*H/24)
  ctx.lineTo(x+14*W/24, y+11*H/24)
  ctx.fill()

  //2
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+12*H/24)
  ctx.lineTo(x+15*W/24, y+12*H/24)
  cpx = x+15*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+9*H/24)
  cpx = x+9*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+12*H/24)
  cpx = x+9*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+15*H/24)
  cpx = x+12*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+14*H/24)
  cpx = x+10*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+12*H/24)
  cpx = x+10*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+10*H/24)
  cpx = x+14*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+12*H/24)
  ctx.fill()

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+15*H/24)
  cpx = x+15*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+13*H/24)
  cpx = x+14*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+13*H/24)
  cpx = x+14*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+14*H/24)
  ctx.fill()

  let i = 0
  ctx.strokeStyle = "#ff0000"
  ctx.beginPath()
  ctx.lineJoin = "round"
  ctx.lineCap = "round"
  ctx.lineWidth *= 3
  ctx.moveTo(x+2*W/24, y+16*H/24)
  for (; i < 6; i++) {
    ctx.lineTo(x+3.5*W/24, y+18*H/24)
    ctx.lineTo(x+5*W/24, y+16*H/24)
    ctx.lineTo(x+6.5*W/24, y+18*H/24)
    x += 3*W/24
  }
  ctx.stroke()
  ctx.strokeStyle = color
}

function color_modelAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = [], MIRROR = false
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "butt"
  ctx.lineJoin = "miter"
  let xi = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]
  ctx.font = "100 italic " + (W*0.04) + "pt Garamond"

  ctx.fillText("Gray Scale", x+1.2*W/24, y+5.8*H/24)
  ctx.fillText("Magenta", x+10.2*W/24, y+6.6*H/24)
  ctx.fillText("Blue", x+18*W/24, y+6.8*H/24)
  ctx.fillText("Black", x+14.2*W/24, y+12*H/24)
  ctx.fillText("Cyan", x+18.2*W/24, y+13.6*H/24)
  ctx.fillText("Red", x+3.8*W/24, y+11*H/24)
  ctx.fillText("Green", x+13.5*W/24, y+19.2*H/24)
  ctx.fillText("Yellow", x+6*W/24, y+19.2*H/24)
  ctx.fillText("White", x+10*W/24, y+15.2*H/24)
  ctx.font = "800 italic " + (W*0.04) + "pt Garamond"
  ctx.fillText("M", x+8.4*W/24, y+3*H/24)
  ctx.fillText("Y", x+4.2*W/24, y+21*H/24)
  ctx.fillText("C", x+22*W/24, y+15.3*H/24)

  //11
  ctx.beginPath()
  ctx.moveTo(x+9.75*W/24, y+3*H/24)
  ctx.lineTo(x+xi[10]*W/24, y+2*H/24)
  ctx.lineTo(x+10.25*W/24, y+3*H/24)
  ctx.stroke()

  //12
  ctx.beginPath()
  ctx.moveTo(x+xi[22]*W/24, y+13.75*H/24)
  ctx.lineTo(x+xi[23]*W/24, y+14*H/24)
  ctx.lineTo(x+xi[22]*W/24, y+14.25*H/24)
  ctx.stroke()

  //13
  ctx.beginPath()
  ctx.moveTo(x+3.5*W/24, y+20*H/24)
  ctx.lineTo(x+xi[3]*W/24, y+21*H/24)
  ctx.lineTo(x+xi[4]*W/24, y+20.5*H/24)
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+xi[12]*W/24, y+12*H/24)
  ctx.lineTo(x+xi[4]*W/24, y+6*H/24)
  ctx.lineWidth /= 2
  ctx.stroke()
  ctx.lineWidth *= 2

  //1
  ctx.beginPath()
  ctx.moveTo(x+xi[6]*W/24, y+11*H/24)
  ctx.lineTo(x+xi[14]*W/24, y+11*H/24)
  ctx.lineTo(x+xi[14]*W/24, y+18*H/24)
  ctx.lineTo(x+xi[6]*W/24, y+18*H/24)
  ctx.lineTo(x+xi[6]*W/24, y+11*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+xi[10]*W/24, y+14*H/24)
  ctx.lineTo(x+xi[18]*W/24, y+14*H/24)
  ctx.lineTo(x+xi[18]*W/24, y+7*H/24)
  ctx.lineTo(x+xi[10]*W/24, y+7*H/24)
  ctx.lineTo(x+xi[10]*W/24, y+14*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+xi[14]*W/24, y+11*H/24)
  ctx.lineTo(x+xi[18]*W/24, y+7*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+xi[14]*W/24, y+18*H/24)
  ctx.lineTo(x+xi[18]*W/24, y+14*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+xi[6]*W/24, y+11*H/24)
  ctx.lineTo(x+xi[10]*W/24, y+7*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+xi[3]*W/24, y+21*H/24)
  ctx.lineTo(x+xi[10]*W/24, y+14*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+xi[10]*W/24, y+7*H/24)
  ctx.lineTo(x+xi[10]*W/24, y+2*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+xi[18]*W/24, y+14*H/24)
  ctx.lineTo(x+xi[23]*W/24, y+14*H/24)
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+xi[10]*W/24, y+14*H/24)
  ctx.lineTo(x+xi[14]*W/24, y+11*H/24)
  ctx.setLineDash([W/48])
  ctx.stroke()
  ctx.setLineDash([])
}

function volvelleAt (x,y,W,color, fill) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  let v = document.getElementById("featuresize").value
  let savedF = ctx.fillStyle
  ctx.strokeStyle = color
  ctx.fillStyle = fill
  ctx.lineCap = "round"
  ctx.lineJoin = "miter"
  let xi = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]
  let n = 60
  let cx = x+W/2, cy = y+H/2, d = 0, angle = pet(360)
  let r1 = W * 0.48, r2 = W * 0.42
  let x0, y0, i = 0, inc = (Math.PI*2)/n/2
  ctx.beginPath()
  for (; i < n*2+2; i++) {
    x0 = cx + r2 * Math.cos(angle)
    y0 = cy + r2 * Math.sin(angle)
    if (i === 0)
      ctx.moveTo(x0,y0)
    else
    if (i % 2 === 1) {
      cpx = cx + r1 * Math.cos(angle)
      cpy = cy + r1 * Math.sin(angle)
      //angle += inc
    } else 
    if (i % 2 === 0 && i > 0){
      x0 = cx + r2 * Math.cos(angle)
      y0 = cy + r2 * Math.sin(angle)
      ctx.quadraticCurveTo(cpx, cpy, x0, y0)
    }
    angle += inc
  }
  ctx.fillStyle = savedF
  ctx.fill()
  ctx.stroke()

  let savedS = ctx.strokeStyle
  ctx.lineWidth *= 3
  ctx.globalAlpha /= 3
  ctx.strokeStyle = "#333333"
  //1
  ctx.beginPath()
  ctx.moveTo(x+xi[9]*W/24, y+9*H/24)
  ctx.lineTo(x+xi[9]*W/24, y+3*H/24)
  ctx.lineTo(x+xi[15]*W/24, y+3*H/24)
  ctx.stroke()
  //2
  ctx.beginPath()
  ctx.moveTo(x+xi[5]*W/24, y+20*H/24)
  ctx.lineTo(x+xi[5]*W/24, y+18*H/24)
  ctx.lineTo(x+xi[19]*W/24, y+18*H/24)
  ctx.stroke()
  //3
  ctx.beginPath()
  ctx.moveTo(x+xi[3]*W/24, y+12*H/24)
  cpx = x+xi[3]*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[5]*W/24, y+10*H/24)
  ctx.stroke()
  //4
  ctx.beginPath()
  ctx.moveTo(x+xi[18]*W/24, y+12*H/24)
  cpx = x+18.25*W/24
  cpy = y+8.3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[22]*W/24, y+8*H/24)
  ctx.stroke()

  ctx.strokeStyle = savedS
  ctx.lineWidth /= 3
  ctx.globalAlpha *=3

  document.getElementById("featuresize").value /= 2
  let icon = randomPick(atList)
  window [icon] (x+9*W/24, y + 3*H/24, W/4, color)
  document.getElementById("featuresize").value = v
  let cn = cardnumber(icon)

  ctx.font = "800 italic "+W*0.07+"pt Garamond"
  ctx.fillStyle = color
  ctx.fillText(cn, x+3.3*W/24, y+12.5*H/24)
  ctx.font = W*0.032+"pt Garamond"
  ctx.fillStyle = color

  let name = cardNamePrint(icon)
  let w = ctx.measureText(name).width
  ctx.fillText(name, x+W/2-w/2, y+19.5*H/24)

  //1
  ctx.beginPath()
  ctx.moveTo(x+xi[3]*W/24, y+23*H/24)
  ctx.lineTo(x+xi[12]*W/24, y+23*H/24)
  ctx.moveTo(x+xi[12]*W/24, y+20*H/24)
  ctx.lineTo(x+xi[5]*W/24, y+20*H/24)
  ctx.lineTo(x+xi[5]*W/24, y+18*H/24)
  ctx.lineTo(x+xi[19]*W/24, y+18*H/24)
  ctx.lineTo(x+xi[19]*W/24, y+20*H/24)
  ctx.lineTo(x+xi[12]*W/24, y+20*H/24)
  ctx.moveTo(x+xi[12]*W/24, y+23*H/24)
  ctx.lineTo(x+xi[21]*W/24, y+23*H/24)
  cpx = x+xi[23]*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[23]*W/24, y+21*H/24)
  cpx = x+xi[23]*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[23]*W/24, y+16*H/24)
  cpx = x+xi[18]*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[18]*W/24, y+12*H/24)
  cpx = x+xi[18]*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[23]*W/24, y+8*H/24)
  cpx = x+xi[23]*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[23]*W/24, y+3*H/24)
  cpx = x+xi[23]*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[21]*W/24, y+1*H/24)
  ctx.lineTo(x+xi[12]*W/24, y+1*H/24)
  ctx.lineTo(x+xi[12]*W/24, y+3*H/24)
  ctx.lineTo(x+xi[15]*W/24, y+3*H/24)
  ctx.lineTo(x+xi[15]*W/24, y+9*H/24)
  ctx.lineTo(x+xi[9]*W/24, y+9*H/24)
  ctx.lineTo(x+xi[9]*W/24, y+3*H/24)
  ctx.lineTo(x+xi[12]*W/24, y+3*H/24)
  ctx.lineTo(x+xi[12]*W/24, y+1*H/24)
  cpx = x+xi[3]*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[3]*W/24, y+1*H/24)
  cpx = x+xi[1]*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[1]*W/24, y+3*H/24)
  cpx = x+xi[1]*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[1]*W/24, y+12*H/24)
  cpx = x+xi[3]*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[3]*W/24, y+12*H/24)
  cpx = x+xi[3]*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[5]*W/24, y+10*H/24)
  cpx = x+xi[7]*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[7]*W/24, y+12*H/24)
  cpx = x+xi[7]*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[5]*W/24, y+14*H/24)
  cpx = x+xi[3]*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[3]*W/24, y+12*H/24)
  cpx = x+xi[1]*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[1]*W/24, y+12*H/24)
  cpx = x+xi[1]*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[1]*W/24, y+21*H/24)
  cpx = x+xi[1]*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[3]*W/24, y+23*H/24)
  ctx.fillStyle = savedF
  ctx.fill()
  ctx.fillStyle = color
  ctx.globalAlpha /=3
  ctx.fill()
  ctx.globalAlpha *=3

  
  


  //3
  ctx.beginPath()
  ctx.moveTo(x+xi[3]*W/24, y+23*H/24)
  ctx.lineTo(x+xi[21]*W/24, y+23*H/24)
  cpx = x+xi[23]*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[23]*W/24, y+21*H/24)
  cpx = x+xi[23]*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[23]*W/24, y+16*H/24)
  cpx = x+xi[18]*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[18]*W/24, y+12*H/24)
  cpx = x+xi[18]*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[23]*W/24, y+8*H/24)
  cpx = x+xi[23]*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[23]*W/24, y+3*H/24)
  cpx = x+xi[23]*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[21]*W/24, y+1*H/24)
  cpx = x+xi[3]*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[3]*W/24, y+1*H/24)
  cpx = x+xi[1]*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[1]*W/24, y+3*H/24)
  cpx = x+xi[1]*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[1]*W/24, y+21*H/24)
  cpx = x+xi[1]*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[3]*W/24, y+23*H/24)
  ctx.stroke()
  //1
  ctx.beginPath()
  ctx.moveTo(x+xi[3]*W/24, y+12*H/24)
  cpx = x+xi[3]*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[5]*W/24, y+10*H/24)
  cpx = x+xi[7]*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[7]*W/24, y+12*H/24)
  cpx = x+xi[7]*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[5]*W/24, y+14*H/24)
  cpx = x+xi[3]*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[3]*W/24, y+12*H/24)
  ctx.stroke()
 //2
  ctx.beginPath()
  ctx.moveTo(x+xi[5]*W/24, y+20*H/24)
  ctx.lineTo(x+xi[19]*W/24, y+20*H/24)
  ctx.lineTo(x+xi[19]*W/24, y+18*H/24)
  ctx.lineTo(x+xi[5]*W/24, y+18*H/24)
  ctx.lineTo(x+xi[5]*W/24, y+20*H/24)
  ctx.stroke()
  //3
  ctx.beginPath()
  ctx.moveTo(x+xi[9]*W/24, y+9*H/24)
  ctx.lineTo(x+xi[9]*W/24, y+3*H/24)
  ctx.lineTo(x+xi[15]*W/24, y+3*H/24)
  ctx.lineTo(x+xi[15]*W/24, y+9*H/24)
  ctx.lineTo(x+xi[9]*W/24, y+9*H/24)
  ctx.stroke()
  ctx.beginPath()
  ctx.arc(x+xi[12]*W/24, y+12*H/24, W/24,0,Math.PI*2)
  ctx.fillStyle = "gold"
  ctx.fill()
  ctx.stroke()
}

function five_sided (x,y,W,color, fill) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/40
  let savedF = ctx.fillStyle
  ctx.strokeStyle = color
  ctx.fillStyle = fill
  ctx.lineCap = "square"
  ctx.lineJoin = "miter"
  let cx = x+W/2, cy = y+H/2, d = 0, angle = pet(360)
  let r1 = W * 0.5, r2 = W * 0.1
  let x0, y0, i = 0, inc = (Math.PI*2)/10
  ctx.beginPath()
  for (; i < 12; i++) {
    x0 = cx + r1 * Math.cos(angle)
    y0 = cy + r1 * Math.sin(angle)
    if (i === 0)
      ctx.moveTo(x0,y0)
    else
    if (i % 2 === 1) {
      cpx = cx + r2 * Math.cos(angle)
      cpy = cy + r2 * Math.sin(angle)
      //angle += inc
    } else 
    if (i % 2 === 0 && i > 0){
      x0 = cx + r1 * Math.cos(angle)
      y0 = cy + r1 * Math.sin(angle)
      ctx.quadraticCurveTo(cpx, cpy, x0, y0)
    }
    angle += inc
  }
  ctx.fill()
  ctx.stroke()
}

function knifeRAt (x,y,W,color, fill) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/100
  let savedF = ctx.fillStyle
  ctx.strokeStyle = color
  ctx.fillStyle = fill
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, d = 0, angle = -24+pet(90)
  if (Math.random() > 0.5) {
  // reverse blade
  //1
  ctx.beginPath()
  p = rotatePoint(x+10*W/24+pet(d), y+16*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+12*W/24+pet(d), y+16*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+12*W/24+pet(d), y+0*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  cpx = x+10*W/24+pet(d)
  cpy = y+2*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+10*W/24+pet(d), y+5*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+10*W/24+pet(d)
  cpy = y+16*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+10*W/24+pet(d), y+16*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()
  ctx.stroke()

  //2
  ctx.beginPath()
  p = rotatePoint(x+10.3*W/24+pet(d), y+16*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+10.3*W/24+pet(d)
  cpy = y+5*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+10.3*W/24+pet(d), y+5*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+10.3*W/24+pet(d)
  cpy = y+2*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24+pet(d), y+0*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()
  // reverse blade
} else {
  //1
  ctx.beginPath()
  p = rotatePoint(x+10*W/24+pet(d), y+16*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+10*W/24+pet(d), y+0*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  cpx = x+12*W/24+pet(d)
  cpy = y+2*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24+pet(d), y+6*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+12*W/24+pet(d)
  cpy = y+16*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24+pet(d), y+16*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+10*W/24+pet(d)
  cpy = y+16*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+10*W/24+pet(d), y+16*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()
  ctx.stroke()

  //5
  ctx.beginPath()
  p = rotatePoint(x+11.7*W/24+pet(d), y+16*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+11.7*W/24+pet(d)
  cpy = y+6*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+11.7*W/24+pet(d), y+6*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+11.7*W/24+pet(d)
  cpy = y+2*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+10*W/24+pet(d), y+0*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()
}
  //2
  ctx.beginPath()
  p = rotatePoint(x+10*W/24+pet(d), y+16*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+10*W/24+pet(d)
  cpy = y+22*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+10*W/24+pet(d), y+22*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+10*W/24+pet(d)
  cpy = y+23*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+11*W/24+pet(d), y+23*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+12*W/24+pet(d)
  cpy = y+23*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24+pet(d), y+22*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+12*W/24+pet(d)
  cpy = y+16*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24+pet(d), y+16*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()
  ctx.fillStyle = color
  ctx.globalAlpha /= 4
  ctx.fill()
  ctx.globalAlpha *= 4
  ctx.stroke()
  ctx.fillStyle = fill

  //3
  ctx.beginPath()
  p = rotatePoint(x+11*W/24+pet(d), y+22*H/24+pet(d) ,cx,cy,angle)
  ctx.arc(p[0],p[1], W/48,0,Math.PI*2)
  ctx.fill()
  ctx.stroke()

  //4
  ctx.beginPath()
  p = rotatePoint(x+11*W/24+pet(d), y+17*H/24+pet(d) ,cx,cy,angle)
  ctx.arc(p[0],p[1], W/48,0,Math.PI*2)
  ctx.fill()
  ctx.stroke()
}

function knife_drawerAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = [], MIRROR = false
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  let savedF = ctx.fillStyle
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let xi = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]
  //6
  ctx.beginPath()
  ctx.moveTo(x+xi[24]*W/24, y+5*H/24)
  ctx.lineTo(x+xi[21]*W/24, y+5*H/24)
  ctx.lineTo(x+xi[24]*W/24, y+19*H/24)
  ctx.lineTo(x+xi[24]*W/24, y+24*H/24)
  ctx.lineTo(x+xi[4]*W/24, y+24*H/24)
  ctx.lineTo(x+xi[0]*W/24, y+5*H/24)
  ctx.lineTo(x+xi[0]*W/24, y+24*H/24)
  ctx.lineTo(x+xi[24]*W/24, y+24*H/24)
  ctx.lineTo(x+xi[24]*W/24, y+5*H/24)
  ctx.globalAlpha /=4
  //ctx.fill()
  ctx.globalAlpha *=4
 
  //1
  ctx.beginPath()
  ctx.moveTo(x+xi[4]*W/24, y+24*H/24)
  ctx.lineTo(x+xi[4]*W/24, y+19*H/24)
  ctx.lineTo(x+xi[24]*W/24, y+19*H/24)
  ctx.lineTo(x+xi[24]*W/24, y+24*H/24)
  ctx.lineTo(x+xi[4]*W/24, y+24*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+xi[4]*W/24, y+20*H/24)
  ctx.lineTo(x+xi[24]*W/24, y+20*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+xi[5]*W/24, y+19*H/24)
  ctx.lineTo(x+xi[1]*W/24, y+0*H/24)
  ctx.lineTo(x+xi[0]*W/24, y+0*H/24)
  ctx.lineTo(x+xi[4]*W/24, y+19*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+xi[24]*W/24, y+19*H/24)
  ctx.lineTo(x+xi[20]*W/24, y+0*H/24)
  ctx.lineTo(x+xi[19]*W/24, y+0*H/24)
  ctx.lineTo(x+xi[23]*W/24, y+19*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+xi[2]*W/24, y+4*H/24)
  ctx.lineTo(x+xi[19]*W/24, y+4*H/24)
  ctx.lineTo(x+xi[22]*W/24, y+19*H/24)
  ctx.lineTo(x+xi[19]*W/24, y+4*H/24)
  ctx.lineTo(x+xi[19]*W/24, y+0*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+xi[0]*W/24, y+5*H/24)
  ctx.lineTo(x+xi[4]*W/24, y+24*H/24)
  ctx.stroke()
  //8
  ctx.beginPath()
  ctx.arc(x+xi[14]*W/24, y+22*H/24, W/32,0,Math.PI*2)
  ctx.globalAlpha /=4
  ctx.fill()
  ctx.globalAlpha *=4
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+xi[4]*W/24, y+24*H/24)
  ctx.lineTo(x+xi[24]*W/24, y+24*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+xi[0]*W/24, y+0*H/24)
  ctx.lineTo(x+xi[0]*W/24, y+5*H/24)
  ctx.stroke()
  //5
  ctx.beginPath()
  ctx.moveTo(x+xi[1]*W/24, y+0*H/24)
  ctx.lineTo(x+xi[19]*W/24, y+0*H/24)
  ctx.stroke()
  let i = 0, n = 1+Math.floor(Math.random() * 10)
  let suf = " knives"
  if (n === 1)
   suf = " knife"
    blockLetters(n+suf,x+7*W/24, y-1.9*H/24, 1.9*W/24,color, W*0.05)
  ctx.save()
  //9
  ctx.beginPath()
  ctx.moveTo(x+xi[5]*W/24, y+19*H/24-ctx.lineWidth/2)
  ctx.lineTo(x+xi[23]*W/24, y+19*H/24-ctx.lineWidth/2)
  ctx.lineTo(x+xi[19]*W/24, y+0*H/24)
  ctx.lineTo(x+xi[1]*W/24, y+0*H/24)
  ctx.lineTo(x+xi[5]*W/24, y+19*H/24-ctx.lineWidth/2)
  ctx.closePath()
  
  ctx.clip()
  let xo = x+3*W/24, yo = y+1*H/24
  for (; i < n; i++) {
    o1 = Math.random() * 8 *W/24
    o2 = Math.random() * 8 *H/24
    knifeRAt (xo+o1,yo+o2,W/2,color, savedF)
  }
  ctx.restore()
}

function off_with_their_headsAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = [], MIRROR = false
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/30
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let xi = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]
  if (MIRROR)
    xi.reverse()
  //1
  ctx.beginPath()
  ctx.moveTo(x+xi[16]*W/24, y+10*H/24)
  cpx = x+xi[16]*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[19]*W/24, y+13*H/24)
  cpx = x+xi[23]*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[23]*W/24, y+17*H/24)
  cpx = x+xi[24]*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[24]*W/24, y+24*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+xi[8]*W/24, y+10*H/24)
  cpx = x+xi[8]*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[5]*W/24, y+13*H/24)
  cpx = x+xi[1]*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[1]*W/24, y+17*H/24)
  cpx = x+xi[0]*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[0]*W/24, y+24*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+xi[8]*W/24, y+10*H/24)
  cpx = x+xi[8]*W/24
  cpy = y+8.5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[12]*W/24, y+8.5*H/24)
  cpx = x+xi[16]*W/24
  cpy = y+8.5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[16]*W/24, y+10*H/24)
  cpx = x+xi[16]*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[12]*W/24, y+12*H/24)
  cpx = x+xi[8]*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[8]*W/24, y+10*H/24)
  ctx.stroke()

  //1
  y += 0.15*H/24
  ctx.fillStyle = "#ff0000"
  ctx.beginPath()
  ctx.moveTo(x+xi[10]*W/24, y+13*H/24)
  cpx = x+xi[10]*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[11]*W/24, y+12*H/24)
  cpx = x+xi[13]*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[13]*W/24, y+12*H/24)
  cpx = x+xi[14]*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[14]*W/24, y+13*H/24)
  cpx = x+xi[13]*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[13]*W/24, y+15*H/24)
  cpx = x+xi[14]*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[14]*W/24, y+24*H/24)
  cpx = x+xi[10]*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[10]*W/24, y+24*H/24)
  cpx = x+xi[11]*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[11]*W/24, y+15*H/24)
  cpx = x+xi[10]*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[10]*W/24, y+13*H/24)
  ctx.fill()
}

function testfonttoolAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W = 1, cpx, cpy, points = [], MIRROR = false
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "butt"
  ctx.lineJoin = "bevel"
  let fs = 18
  let N = 12
  let DIV = 2
  W/=DIV, H/=DIV
  W*=fs, H*=fs
  //1
  ctx.beginPath()
  ctx.moveTo(x+0*W, y+8*H)
  cpx = x+0*W
  cpy = y+2*H
  ctx.quadraticCurveTo(cpx, cpy, x+0*W, y+2*H)
  ctx.lineTo(x+3*W, y+6*H)
  ctx.lineTo(x+6*W, y+2*H)
  ctx.lineTo(x+6*W, y+8*H)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+3*W, y+4*H)
  cpx = x+3*W
  cpy = y+8*H
  ctx.quadraticCurveTo(cpx, cpy, x+3*W, y+8*H)
  cpx = x+3*W
  cpy = y+10*H
  ctx.quadraticCurveTo(cpx, cpy, x+0*W, y+10*H)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.arc(x+3*W, y+3*H,ctx.lineWidth/2,0,Math.PI*2)
  ctx.fill()
}

function phrenologyAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = [], MIRROR = false
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/30
  let savedF = ctx.fillStyle
  ctx.strokeStyle = color
  ctx.fillStyle = savedF
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let lets = []
  let n = 1
  for (; n < 48; n++) {
  if (n < 10)
    lets.push(" "+n)
  else
    lets.push(""+n)
  }
  let selected = 1 + Math.floor(Math.random()*47)
  lets = shuffle(lets)
  n = 0
  let xi = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]
  //1
  ctx.beginPath()
  ctx.moveTo(x+xi[20]*W/24, y+24*H/24)
  cpx = x+xi[19]*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[19]*W/24, y+20*H/24)
  cpx = x+xi[20]*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[22]*W/24, y+8*H/24)
  cpx = x+xi[22]*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[12]*W/24, y+1*H/24)
  cpx = x+xi[2]*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[3]*W/24, y+11*H/24)
  cpx = x+xi[0]*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[3]*W/24, y+16*H/24)
  cpx = x+xi[3]*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[3]*W/24, y+21*H/24)
  cpx = x+xi[3]*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[5]*W/24, y+24*H/24)
  ctx.stroke()
  let xoff = W/32
  ctx.font = "100 italic "+(W*0.045) + "pt Garamond"
  y -= 1.3*H/24
  ctx.lineWidth /= 3
  let i = 0, inc = 2*W/24, cnt = 0
  for (; i < 8; i++) {
    ctx.beginPath()
    ctx.arc(x+5.5*W/24+i*inc, y+3*H/24, W/24,0,Math.PI*2)
    ctx.fill()
    ctx.stroke()
    ctx.fillStyle = color
    if (+lets[n] === selected) {
    ctx.fillStyle = color
      ctx.globalAlpha /= 3
      ctx.beginPath()
      ctx.arc(x+5.5*W/24+i*inc, y+3*H/24, W/24,0,Math.PI*2)
      ctx.fill()
      ctx.globalAlpha *= 3
    }
    ctx.fillText(lets[n++],x+5.5*W/24+i*inc-xoff, y+3*H/24+xoff/2)
    ctx.fillStyle = savedF
    cnt++
  }
  i = 0
  for (; i < 9; i++) {
    ctx.beginPath()
    ctx.arc(x+4.5*W/24+i*inc, y+5*H/24, W/24,0,Math.PI*2)
    ctx.fill()
    ctx.stroke()
    ctx.fillStyle = color
    if (+lets[n] === selected) {
      ctx.globalAlpha /= 3
      ctx.beginPath()
      ctx.arc(x+4.5*W/24+i*inc, y+5*H/24, W/24,0,Math.PI*2)
      ctx.fill()
      ctx.globalAlpha *= 3
    }
    ctx.fillText(lets[n++],x+4.5*W/24+i*inc-xoff, y+5*H/24+xoff/2)
    ctx.fillStyle = savedF
    cnt++
  }
  i = 0
  for (; i < 10; i++) {
    ctx.beginPath()
    ctx.arc(x+3.5*W/24+i*inc, y+7*H/24, W/24,0,Math.PI*2)
    ctx.fill()
    ctx.stroke()
    ctx.fillStyle = color
    if (+lets[n] === selected) {
      ctx.globalAlpha /= 3
      ctx.beginPath()
      ctx.arc(x+3.5*W/24+i*inc, y+7*H/24, W/24,0,Math.PI*2)
      ctx.fill()
      ctx.globalAlpha *= 3
    }
    ctx.fillText(lets[n++],x+3.5*W/24+i*inc-xoff, y+7*H/24+xoff/2)
    ctx.fillStyle = savedF
    cnt++
  }
  i = 0
  for (; i < 11; i++) {
    ctx.beginPath()
    ctx.arc(x+2.5*W/24+i*inc, y+9*H/24, W/24,0,Math.PI*2)
    ctx.fill()
    ctx.stroke()
    ctx.fillStyle = color
    if (+lets[n] === selected) {
      ctx.globalAlpha /= 3
      ctx.beginPath()
      ctx.arc(x+2.5*W/24+i*inc, y+9*H/24, W/24,0,Math.PI*2)
      ctx.fill()
      ctx.globalAlpha *= 3
    }
    ctx.fillText(lets[n++],x+2.5*W/24+i*inc-xoff, y+9*H/24+xoff/2)
    ctx.fillStyle = savedF
    cnt++
  }
  i = 0
  for (; i < 5; i++) {
    ctx.beginPath()
    ctx.arc(x+13.5*W/24+i*inc, y+11*H/24, W/24,0,Math.PI*2)
    ctx.fill()
    ctx.stroke()
    ctx.fillStyle = color
    if (+lets[n] === selected) {
      ctx.globalAlpha /= 3
      ctx.beginPath()
      ctx.arc(x+13.5*W/24+i*inc, y+11*H/24, W/24,0,Math.PI*2)
      ctx.fill()
      ctx.globalAlpha *= 3
    }
    ctx.fillText(lets[n++],x+13.5*W/24+i*inc-xoff, y+11*H/24+xoff/2)
    ctx.fillStyle = savedF
    cnt++
  }
  i = 0
  for (; i < 4; i++) {
    ctx.beginPath()
    ctx.arc(x+14.5*W/24+i*inc, y+13*H/24, W/24,0,Math.PI*2)
    ctx.fill()
    ctx.stroke()
    ctx.fillStyle = color
    if (+lets[n] === selected) {
      ctx.globalAlpha /= 3
      ctx.beginPath()
      ctx.arc(x+14.5*W/24+i*inc, y+13*H/24, W/24,0,Math.PI*2)
      ctx.fill()
      ctx.globalAlpha *= 3
    }
    ctx.fillText(lets[n++],x+14.5*W/24+i*inc-xoff, y+13*H/24+xoff/2)
    ctx.fillStyle = savedF
    cnt++
  }
  let iveness = words.match(/\b\w{3,}(iveness)\b/g)
 // let n_ality = words.match(/\b\w{3,}(al)?ity\b/g)
  ctx.fillStyle = color
  ctx.font = "800 "+(W*0.05) + "pt Garamond"
  let wrd = selected+": "+randomPick(iveness)
  let w = ctx.measureText(wrd).width
  
  ctx.fillText(wrd,x+W/2-w/2, y+24*H/24+xoff/2)
}

function don_apos_t_happy_com_be_worryAt (x,y,W,color,INVERT) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = [], MIRROR = false
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/25
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let xi = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]
  if (MIRROR)
    xi.reverse()
  //1
  ctx.beginPath()
  ctx.arc(x+xi[12]*W/24, y+12*H/24, 8*W/24,0,Math.PI*2)
  ctx.stroke()
  if (INVERT) {
    ctx.beginPath()
    ctx.moveTo(x+xi[8]*W/24, y+8*H/24)
    cpx = x+xi[12]*W/24
    cpy = y+11*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+xi[16]*W/24, y+8*H/24)
    ctx.stroke()
  } else {
    ctx.beginPath()
    ctx.moveTo(x+xi[8]*W/24, y+10*H/24)
    cpx = x+xi[12]*W/24
    cpy = y+7*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+xi[16]*W/24, y+10*H/24)
    ctx.stroke()
  }

  //3
  ctx.beginPath()
  ctx.arc(x+xi[9]*W/24, y+14*H/24, 0.7*W/24,0,Math.PI*2)
  ctx.fill()

  //4
  ctx.beginPath()
  ctx.arc(x+xi[15]*W/24, y+14*H/24, 0.7*W/24,0,Math.PI*2)
  ctx.fill()

  //5
  blockLetters("don't happy",x+xi[4]*W/24, y+1*H/24, W/2, color,4)

  blockLetters("be worry",x+6.5*W/24, y+21*H/24, W/2, color,4,true)

}

function unpluggedAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = [], MIRROR = false
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/40
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let xi = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]
  if (MIRROR)
    xi.reverse()
  //1
  y -= 6*H/24
  ctx.beginPath()
  ctx.moveTo(x+xi[2]*W/24, y+24*H/24)
  ctx.lineTo(x+xi[9]*W/24, y+24*H/24)
  cpx = x+xi[11]*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[11]*W/24, y+22*H/24)
  cpx = x+xi[11]*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[11]*W/24, y+15*H/24)
  cpx = x+xi[11]*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[9]*W/24, y+13*H/24)
  cpx = x+xi[2]*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[2]*W/24, y+13*H/24)
  cpx = x+xi[0]*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[0]*W/24, y+15*H/24)
  cpx = x+xi[0]*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[0]*W/24, y+22*H/24)
  cpx = x+xi[0]*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[2]*W/24, y+24*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+xi[2]*W/24, y+15*H/24)
  ctx.lineTo(x+xi[3]*W/24, y+15*H/24)
  ctx.lineTo(x+xi[3]*W/24, y+18*H/24)
  ctx.lineTo(x+xi[2]*W/24, y+18*H/24)
  ctx.lineTo(x+xi[2]*W/24, y+15*H/24)
  ctx.fill()

  //4
  ctx.beginPath()
  ctx.moveTo(x+xi[8]*W/24, y+15*H/24)
  ctx.lineTo(x+xi[9]*W/24, y+15*H/24)
  ctx.lineTo(x+xi[9]*W/24, y+18*H/24)
  ctx.lineTo(x+xi[8]*W/24, y+18*H/24)
  ctx.lineTo(x+xi[8]*W/24, y+15*H/24)
  ctx.fill()

  //5
  ctx.beginPath()
  ctx.arc(x+5.5*W/24, y+21*H/24, W/24,0,Math.PI*2)
  ctx.fill()

  //9
  ctx.beginPath()
  ctx.moveTo(x+xi[24]*W/24, y+17.5*H/24)
  ctx.lineTo(x+xi[22]*W/24, y+17.5*H/24)
  ctx.lineTo(x+xi[22]*W/24, y+15*H/24)
  cpx = x+xi[22]*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[20]*W/24, y+13*H/24)
  cpx = x+xi[16]*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[16]*W/24, y+13*H/24)
  cpx = x+xi[16]*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[16]*W/24, y+23*H/24)
  cpx = x+xi[20]*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[20]*W/24, y+23*H/24)
  cpx = x+xi[22]*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[22]*W/24, y+21*H/24)
  cpx = x+xi[22]*W/24
  cpy = y+18.5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[22]*W/24, y+18.5*H/24)
  cpx = x+xi[24]*W/24
  cpy = y+18.5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[24]*W/24, y+18.5*H/24)
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+xi[16]*W/24, y+15*H/24)
  ctx.lineTo(x+xi[13]*W/24, y+15*H/24)
  ctx.lineTo(x+xi[13]*W/24, y+16*H/24)
  ctx.lineTo(x+xi[16]*W/24, y+16*H/24)
  ctx.stroke()

  //11
  ctx.beginPath()
  ctx.moveTo(x+xi[16]*W/24, y+20*H/24)
  ctx.lineTo(x+xi[13]*W/24, y+20*H/24)
  ctx.lineTo(x+xi[13]*W/24, y+21*H/24)
  ctx.lineTo(x+xi[16]*W/24, y+21*H/24)
  ctx.stroke()
}

function blockLetters (string,x,y,W,color,FS) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = [], MIRROR = false
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/25
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let xi = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]
  if (MIRROR)
    xi.reverse()
  string = string.replace(/["]/g, "\"")
  let letters = string.toUpperCase().split("")
  //console.log(letters)
  let fs = document.getElementById("angle").value 
  if (FS)
    fs = FS
  if (fs <= 0)
    fs = 1
  let i = 0, offset = 0
  let h = fs*H/48 // letter height
  for (; i < letters.length; i++) {
    offset += alphabetAt (letters[i],x+offset*h*1.5,y,h,color)
  }
  return offset
}

function alphabetAt (Letter,x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = [], MIRROR = false
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/40
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "butt"
  ctx.lineJoin = "square"
  let xi = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]

  let m = 0

  switch (Letter) {
    case"A":
    ctx.beginPath()
    ctx.moveTo(x+xi[0]*W, y+2*H)
    ctx.lineTo(x+0.5*W, y+0*H)
    ctx.lineTo(x+1*W, y+2*H)
    ctx.stroke()
    ctx.beginPath()
    ctx.moveTo(x+0.75*W, y+1*H)
    ctx.lineTo(x+0.25*W, y+1*H)
    ctx.stroke()
    break;

    case"B":
    ctx.beginPath()
    ctx.moveTo(x+xi[0]*W+pet(m), y+2*H+pet(m))
    ctx.lineTo(x+xi[0]*W+pet(m), y+0*H+pet(m))
    ctx.lineTo(x+xi[1]*W+pet(m), y+0*H+pet(m))
    ctx.lineTo(x+xi[1]*W+pet(m), y+1*H+pet(m))
    ctx.lineTo(x+xi[0]*W+pet(m), y+1*H+pet(m))
    ctx.lineTo(x+xi[1]*W+pet(m), y+1*H+pet(m))
    ctx.lineTo(x+xi[1]*W+pet(m), y+2*H+pet(m))
    ctx.lineTo(x+xi[0]*W+pet(m), y+2*H+pet(m))
    ctx.stroke()
    break;

    case"C":
    ctx.beginPath()
    ctx.moveTo(x+xi[1]*W, y+0*H)
    ctx.lineTo(x+xi[0]*W, y+0*H)
    ctx.lineTo(x+xi[0]*W, y+2*H)
    ctx.lineTo(x+xi[1]*W, y+2*H)
    ctx.stroke()
    break;

    case"D":
    ctx.beginPath()
    ctx.moveTo(x+xi[0]*W, y+2*H)
    ctx.lineTo(x+xi[0]*W, y+0*H)
    ctx.lineTo(x+xi[1]*W, y+1*H)
    //ctx.lineTo(x+xi[1]*W, y+2*H)
    ctx.lineTo(x+xi[0]*W, y+2*H)
    ctx.stroke()
    break;

    case"E":
    ctx.beginPath()
    ctx.moveTo(x+xi[1]*W, y+0*H)
    ctx.lineTo(x+xi[0]*W, y+0*H)
    ctx.lineTo(x+xi[0]*W, y+2*H)
    ctx.lineTo(x+xi[1]*W, y+2*H)
    ctx.stroke()
    ctx.beginPath()
    ctx.moveTo(x+xi[1]*W, y+1*H)
    ctx.lineTo(x+xi[0]*W, y+1*H)
    ctx.stroke()
    break;

    case"É":
    ctx.beginPath()
    ctx.moveTo(x+xi[1]*W, y+0*H)
    ctx.lineTo(x+xi[0]*W, y+0*H)
    ctx.lineTo(x+xi[0]*W, y+2*H)
    ctx.lineTo(x+xi[1]*W, y+2*H)
    ctx.stroke()
    ctx.beginPath()
    ctx.moveTo(x+xi[1]*W, y+1*H)
    ctx.lineTo(x+xi[0]*W, y+1*H)
    ctx.stroke()

    ctx.beginPath()
    ctx.moveTo(x+0.5*W, y-0.1*H)
    ctx.lineTo(x+1*W, y-0.3*H)
    ctx.stroke()
    break;

    case"F":
    ctx.beginPath()
    ctx.moveTo(x+xi[1]*W, y+0*H)
    ctx.lineTo(x+xi[0]*W, y+0*H)
    ctx.lineTo(x+xi[0]*W, y+2*H)
    ctx.stroke()
    ctx.beginPath()
    ctx.moveTo(x+xi[1]*W, y+1*H)
    ctx.lineTo(x+xi[0]*W, y+1*H)
    ctx.stroke()
    break;

    case"G":
    ctx.beginPath()
    ctx.moveTo(x+xi[1]*W, y+0.25*H)
    ctx.lineTo(x+xi[1]*W, y+0*H)
    ctx.lineTo(x+xi[0]*W, y+0*H)
    ctx.lineTo(x+xi[0]*W, y+1*H)
    ctx.lineTo(x+xi[0]*W, y+2*H)
    ctx.lineTo(x+xi[1]*W, y+2*H)
    ctx.lineTo(x+xi[1]*W, y+1*H)
    ctx.lineTo(x+xi[0]*W+0.75*W, y+1*H)
    ctx.stroke()
    break;

    case"H":
    ctx.beginPath()
    ctx.moveTo(x+xi[0]*W, y+0*H)
    ctx.lineTo(x+xi[0]*W, y+2*H)
    ctx.stroke()

    ctx.beginPath()
    ctx.moveTo(x+xi[1]*W, y+0*H)
    ctx.lineTo(x+xi[1]*W, y+2*H)
    ctx.stroke()

    ctx.beginPath()
    ctx.moveTo(x+xi[1]*W, y+1*H)
    ctx.lineTo(x+xi[0]*W, y+1*H)
    ctx.stroke()
    break;

    case"I":
    case"|":
    ctx.beginPath()
    ctx.moveTo(x+xi[0]*W+0.5*W, y+2*H)
    ctx.lineTo(x+xi[0]*W+0.5*W, y+0*H)
    ctx.stroke()
    return 0.8
    break;

    case"J":
    ctx.beginPath()
    ctx.moveTo(x+xi[1]*W, y+0*H)
    ctx.lineTo(x+xi[1]*W, y+2*H)
    ctx.lineTo(x+xi[0]*W, y+2*H)
    ctx.lineTo(x+xi[0]*W, y+1*H)
    ctx.stroke()
    break;

    case"K":
    ctx.beginPath()
    ctx.moveTo(x+xi[0]*W, y+0*H)
    ctx.lineTo(x+xi[0]*W, y+2*H)
    ctx.stroke()

    ctx.beginPath()
    ctx.moveTo(x+xi[1]*W, y+0*H)
    ctx.lineTo(x+xi[0]*W, y+1*H)
    ctx.lineTo(x+xi[1]*W, y+2*H)
    ctx.stroke()
    break;

    case"L":
    ctx.beginPath()
    ctx.moveTo(x+xi[0]*W, y+0*H)
    ctx.lineTo(x+xi[0]*W, y+2*H)
    ctx.lineTo(x+xi[1]*W, y+2*H)
    ctx.stroke()
    break;

    case"M":
    ctx.beginPath()
    ctx.moveTo(x+xi[0]*W, y+2*H)
    ctx.lineTo(x+xi[0]*W, y+0*H)
    ctx.lineTo(x+0.5*W, y+1*H)
    ctx.lineTo(x+xi[1]*W, y+0*H)
    ctx.lineTo(x+xi[1]*W, y+2*H)
    ctx.stroke()
    break;

    case"N":
    ctx.beginPath()
    ctx.moveTo(x+xi[0]*W, y+2*H)
    ctx.lineTo(x+xi[0]*W, y+0*H)
    ctx.lineTo(x+xi[1]*W, y+2*H)
    ctx.lineTo(x+xi[1]*W, y+0*H)
    ctx.stroke()
    break;

    case"O":
    ctx.beginPath()
    ctx.moveTo(x+xi[0]*W, y+0*H)
    ctx.lineTo(x+xi[1]*W, y+0*H)
    ctx.lineTo(x+xi[1]*W, y+2*H)
    ctx.lineTo(x+xi[0]*W, y+2*H)
    ctx.lineTo(x+xi[0]*W, y+0*H)
    ctx.stroke()
    break;
    
    case"0":
    ctx.lineCap = "round"
    ctx.lineJoin = "round"
    ctx.beginPath()
    ctx.moveTo(x+xi[0]*W, y+0*H)
    ctx.lineTo(x+xi[1]*W, y+0*H)
    ctx.lineTo(x+xi[1]*W, y+2*H)
    ctx.lineTo(x+xi[0]*W, y+2*H)
    ctx.lineTo(x+xi[0]*W, y+0*H)
    ctx.stroke()

    ctx.beginPath()
    ctx.moveTo(x+1*W, y+0*H)
    ctx.lineTo(x+0*W, y+2*H)
    ctx.stroke()
    break;

    case"P":
    ctx.beginPath()
    ctx.moveTo(x+xi[0]*W, y+2*H)
    ctx.lineTo(x+xi[0]*W, y+0*H)
    ctx.lineTo(x+xi[1]*W, y+0*H)
    ctx.lineTo(x+xi[1]*W, y+1*H)
    ctx.lineTo(x+xi[0]*W, y+1*H)
    ctx.stroke()
    break;

    case"Q":
    ctx.beginPath()
    ctx.moveTo(x+xi[0]*W, y+0*H)
    ctx.lineTo(x+xi[1]*W, y+0*H)
    ctx.lineTo(x+xi[1]*W, y+2*H)
    ctx.lineTo(x+xi[0]*W, y+2*H)
    ctx.lineTo(x+xi[0]*W, y+0*H)
    ctx.stroke()

    ctx.beginPath()
    ctx.moveTo(x+0.5*W, y+1.5*H)
    ctx.lineTo(x+1.25*W, y+2.25*H)
    ctx.stroke()
    return 1.1
    break;

    case"R":
    ctx.beginPath()
    ctx.moveTo(x+xi[0]*W, y+2*H)
    ctx.lineTo(x+xi[0]*W, y+0*H)
    ctx.lineTo(x+xi[1]*W, y+0*H)
    ctx.lineTo(x+xi[1]*W, y+1*H)
    ctx.lineTo(x+xi[0]*W, y+1*H)
    ctx.stroke()
    ctx.beginPath()
    ctx.moveTo(x+xi[0]*W, y+1*H)
    ctx.lineTo(x+xi[1]*W, y+2*H)
    ctx.stroke()
    break;

    case"S":
    case"5":
    ctx.beginPath()
    ctx.moveTo(x+xi[1]*W, y+0*H)
    ctx.lineTo(x+xi[0]*W, y+0*H)
    ctx.lineTo(x+xi[0]*W, y+1*H)
    ctx.lineTo(x+xi[1]*W, y+1*H)
    ctx.lineTo(x+xi[1]*W, y+2*H)
    ctx.lineTo(x+xi[0]*W, y+2*H)
    ctx.stroke()
    break;

    case"T":
    ctx.beginPath()
    ctx.moveTo(x+xi[0]*W+0.5*W, y+2*H)
    ctx.lineTo(x+xi[0]*W+0.5*W, y+0*H)
    ctx.stroke()

    ctx.beginPath()
    ctx.moveTo(x+xi[0]*W, y+0*H)
    ctx.lineTo(x+xi[1]*W, y+0*H)
    ctx.stroke()
    break;

    case"U":
    ctx.beginPath()
    ctx.moveTo(x+xi[0]*W, y+0*H)
    ctx.lineTo(x+xi[0]*W, y+2*H)
    ctx.lineTo(x+xi[1]*W, y+2*H)
    ctx.lineTo(x+xi[1]*W, y+0*H)
    ctx.stroke()
    break;

    case"V":
    ctx.beginPath()
    ctx.moveTo(x+xi[0]*W, y+0*H)
    ctx.lineTo(x+0.5*W, y+2*H)
    ctx.lineTo(x+1*W, y+0*H)
    ctx.stroke()
    break;

    case"W":
    ctx.beginPath()
    ctx.moveTo(x+xi[0]*W, y+0*H)
    ctx.lineTo(x+xi[0]*W, y+2*H)
    ctx.lineTo(x+0.5*W, y+1*H)
    ctx.lineTo(x+1*W, y+2*H)
    ctx.lineTo(x+1*W, y+0*H)
    ctx.stroke()
    break;

    case"X":
    ctx.beginPath()
    ctx.moveTo(x+xi[0]*W, y+0*H)
    ctx.lineTo(x+xi[1]*W, y+2*H)
    ctx.stroke()

    ctx.beginPath()
    ctx.moveTo(x+xi[0]*W, y+2*H)
    ctx.lineTo(x+xi[1]*W, y+0*H)
    ctx.stroke()
   // return 2
    break;

    case"Y":
    ctx.beginPath()
    ctx.moveTo(x+xi[0]*W, y+0*H)
    ctx.lineTo(x+0.5*W, y+1*H)
    ctx.lineTo(x+0.5*W, y+2*H)
    ctx.stroke()

    ctx.beginPath()
    ctx.moveTo(x+xi[1]*W, y+0*H)
    ctx.lineTo(x+0.5*W, y+1*H)
    ctx.stroke()
    break;

    case"Z":
    ctx.beginPath()
    ctx.moveTo(x+xi[0]*W, y+0*H)
    ctx.lineTo(x+xi[1]*W, y+0*H)
    ctx.lineTo(x+xi[0]*W, y+2*H)
    ctx.lineTo(x+xi[1]*W, y+2*H)
    ctx.stroke()
    break;

    case"'":
    case"`":
    ctx.beginPath()
    ctx.moveTo(x+0.5*W, y+0*H)
    ctx.lineTo(x+0.5*W, y+1*H)
    ctx.stroke()
    break;

    case"~":
    ctx.beginPath()
    ctx.moveTo(x+xi[0]*W, y+1*H)
    cpx = x+0.25*W
    cpy = y+0.5*H
    ctx.quadraticCurveTo(cpx, cpy, x+0.5*W, y+1*H)
    cpx = x+0.75*W
    cpy = y+1.5*H
    ctx.quadraticCurveTo(cpx, cpy, x+1*W, y+1*H)
    ctx.stroke()
    break;
    case"\"":
    ctx.beginPath()
    ctx.moveTo(x+0.25*W, y+0*H)
    ctx.lineTo(x+0.25*W, y+1*H)
    ctx.stroke()
    ctx.beginPath()
    ctx.moveTo(x+0.75*W, y+0*H)
    ctx.lineTo(x+0.75*W, y+1*H)
    ctx.stroke()
    break;
    case".":
    ctx.beginPath()
    ctx.arc(x+xi[0]*W, y+2*H,ctx.lineWidth/2,0,Math.PI*2)
    ctx.fill()
    return 0.5
    break;
  
    case"*": 
    ctx.beginPath()
    ctx.moveTo(x+0.5*W, y+0.6*H)
    ctx.lineTo(x+xi[1]*W, y+1*H)
    ctx.lineTo(x+0.5*W, y+1.4*H)
    ctx.stroke()

    ctx.beginPath()
    ctx.moveTo(x+1.5*W, y+1.4*H)
    ctx.lineTo(x+xi[1]*W, y+1*H)
    ctx.lineTo(x+1.5*W, y+0.6*H)
    ctx.stroke()

    ctx.beginPath()
    ctx.moveTo(x+xi[1]*W, y+0.5*H)
    ctx.lineTo(x+xi[1]*W, y+1.5*H)
    ctx.stroke()
    return 1.5
    break;

    case"$":
    ctx.beginPath()
    ctx.moveTo(x+xi[1]*W, y+0*H)
    ctx.lineTo(x+xi[0]*W, y+0*H)
    ctx.lineTo(x+xi[0]*W, y+1*H)
    ctx.lineTo(x+xi[1]*W, y+1*H)
    ctx.lineTo(x+xi[1]*W, y+2*H)
    ctx.lineTo(x+xi[0]*W, y+2*H)
    ctx.stroke()
    ctx.beginPath()
    ctx.moveTo(x+0.5*W, y+0*H)
    ctx.lineTo(x+0.5*W, y+2*H)
    ctx.stroke()
    break;

    case",":
    ctx.beginPath()
    ctx.moveTo(x+0.25*W, y+1.75*H)
    ctx.lineTo(x+-0.25*W, y+2.25*H)
    ctx.stroke()
    return 0.5
    break;

    case" ":
    return 1
    break;

    case"!":
    ctx.beginPath()
    ctx.moveTo(x+0.25*W, y+0*H)
    ctx.lineTo(x+0.25*W, y+1.25*H)
    ctx.stroke()

    ctx.beginPath()
    ctx.arc(x+0.25*W, y+2*H,ctx.lineWidth/2,0,Math.PI*2)
    ctx.fill()
    break;

    case"?":
    ctx.beginPath()
    ctx.moveTo(x+xi[0]*W, y+0*H)
    ctx.lineTo(x+xi[1]*W, y+0*H)
    ctx.lineTo(x+xi[1]*W, y+1*H)
    ctx.lineTo(x+xi[0]*W, y+1*H)
    ctx.lineTo(x+xi[0]*W, y+1.25*H)
    ctx.stroke()

    ctx.beginPath()
    ctx.arc(x+xi[0]*W, y+2*H,ctx.lineWidth/2,0,Math.PI*2)
    ctx.fill()
    break;
    case"=":
    ctx.beginPath()
    ctx.moveTo(x+xi[0]*W, y+0.5*H)
    ctx.lineTo(x+xi[1]*W, y+0.5*H)
    ctx.stroke() 
    ctx.beginPath()
    ctx.moveTo(x+xi[0]*W, y+1.5*H)
    ctx.lineTo(x+xi[1]*W, y+1.5*H)
    ctx.stroke()
    break;
    case"#":
    ctx.beginPath()
    ctx.moveTo(x+xi[0]*W, y+1.5*H)
    ctx.lineTo(x+0.5*W, y+0.25*H)
    ctx.stroke()
    //2
    ctx.beginPath()
    ctx.moveTo(x+0.5*W, y+1.5*H)
    ctx.lineTo(x+1.0*W, y+0.25*H)
    ctx.stroke()
    //3
    ctx.beginPath()
    ctx.moveTo(x+0.1*W, y+0.6*H)
    ctx.lineTo(x+1.1*W, y+0.6*H)
    ctx.stroke()
    //4
    ctx.beginPath()
    ctx.moveTo(x-0.1*W, y+1.2*H)
    ctx.lineTo(x+0.9*W, y+1.2*H)
    ctx.stroke()
    break;

    case"-":
    ctx.beginPath()
    ctx.moveTo(x+xi[0]*W, y+1*H)
    ctx.lineTo(x+xi[1]*W, y+1*H)
    ctx.stroke()    
    break;
    case"+":
    ctx.beginPath()
    ctx.moveTo(x+xi[0]*W, y+1*H)
    ctx.lineTo(x+xi[1]*W, y+1*H)
    ctx.stroke()    
    ctx.beginPath()
    ctx.moveTo(x+0.5*W, y+0.5*H)
    ctx.lineTo(x+0.5*W, y+1.5*H)
    ctx.stroke()
    break;
    case"<":
    ctx.beginPath()
    ctx.moveTo(x+xi[1]*W, y+0.5*H)
    ctx.lineTo(x+xi[0]*W, y+1*H)
    ctx.lineTo(x+xi[1]*W, y+1.5*H)
    ctx.stroke()
    break;
    case">":
    ctx.beginPath()
    ctx.moveTo(x+xi[0]*W, y+0.5*H)
    ctx.lineTo(x+xi[1]*W, y+1*H)
    ctx.lineTo(x+xi[0]*W, y+1.5*H)
    ctx.stroke()
    break;
    
    case"1":
    ctx.beginPath()
    ctx.moveTo(x+0.5*W, y+2*H)
    ctx.lineTo(x+0.5*W, y+0*H)
    ctx.lineTo(x+0.25*W, y+0.25*H)
    ctx.stroke()
    return 0.75
    break;
    case"2":
    ctx.beginPath()
    ctx.moveTo(x+xi[0]*W, y+0*H)
    ctx.lineTo(x+xi[1]*W, y+0*H)
    ctx.lineTo(x+xi[1]*W, y+1*H)
    ctx.lineTo(x+xi[0]*W, y+1*H)
    ctx.lineTo(x+xi[0]*W, y+2*H)
    ctx.lineTo(x+xi[1]*W, y+2*H)
    ctx.stroke()
    break;
    case"3":
    ctx.beginPath()
    ctx.moveTo(x+xi[0]*W, y+0*H)
    ctx.lineTo(x+xi[1]*W, y+0*H)
    ctx.lineTo(x+xi[1]*W, y+1*H)
    ctx.lineTo(x+xi[0]*W, y+1*H)
    ctx.lineTo(x+xi[1]*W, y+1*H)
    ctx.lineTo(x+xi[1]*W, y+2*H)
    ctx.lineTo(x+xi[0]*W, y+2*H)
    ctx.stroke()
    break;
    case"4":
    ctx.beginPath()
    ctx.moveTo(x+xi[1]*W, y+2*H)
    ctx.lineTo(x+xi[1]*W, y+0*H)
    ctx.lineTo(x+xi[0]*W, y+1*H)
    ctx.lineTo(x+xi[1]*W, y+1*H)
    ctx.stroke()
    break;
    //case"5":
    //see "S"
    //break;
    case"6":
    ctx.beginPath()
    ctx.moveTo(x+xi[1]*W, y+0*H)
    ctx.lineTo(x+xi[0]*W, y+0*H)
    ctx.lineTo(x+xi[0]*W, y+2*H)
    ctx.lineTo(x+xi[1]*W, y+2*H)
    ctx.lineTo(x+xi[1]*W, y+1*H)
    ctx.lineTo(x+xi[0]*W, y+1*H)
    ctx.stroke()
    break;
    case"7":
    ctx.beginPath()
    ctx.moveTo(x+xi[0]*W, y+0*H)
    ctx.lineTo(x+xi[1]*W, y+0*H)
    ctx.lineTo(x+xi[0]*W, y+2*H)
    ctx.stroke()
    break;
    case"8":
    ctx.beginPath()
    ctx.moveTo(x+xi[0]*W, y+0*H)
    ctx.lineTo(x+xi[1]*W, y+0*H)
    ctx.lineTo(x+xi[1]*W, y+1*H)
    ctx.lineTo(x+xi[0]*W, y+1*H)
    ctx.lineTo(x+xi[0]*W, y+2*H)
    ctx.lineTo(x+xi[1]*W, y+2*H)
    ctx.lineTo(x+xi[1]*W, y+1*H)
    ctx.stroke()

    ctx.beginPath()
    ctx.moveTo(x+xi[0]*W, y+0*H)
    ctx.lineTo(x+xi[0]*W, y+1*H)
    ctx.stroke()
    break;
    case"9":
    ctx.beginPath()
    ctx.moveTo(x+xi[1]*W, y+1*H)
    ctx.lineTo(x+xi[0]*W, y+1*H)
    ctx.lineTo(x+xi[0]*W, y+0*H)
    ctx.lineTo(x+xi[1]*W, y+0*H)
    ctx.lineTo(x+xi[1]*W, y+2*H)
    ctx.lineTo(x+xi[0]*W, y+2*H)
    ctx.stroke()
    break;
    case"(":
    case"[":
    case"{":
    ctx.beginPath()
    ctx.moveTo(x+xi[1]*W, y+0*H)
    cpx = x+xi[0]*W
    cpy = y+1*H
    ctx.quadraticCurveTo(cpx, cpy, x+xi[1]*W, y+2*H)
    ctx.stroke()
    break;
    case")":
    case"]":
    case"}":
    ctx.beginPath()
    ctx.moveTo(x+xi[0]*W, y+0*H)
    cpx = x+xi[1]*W
    cpy = y+1*H
    ctx.quadraticCurveTo(cpx, cpy, x+xi[0]*W, y+2*H)
    ctx.stroke()
    break;

    case"@":
    ctx.beginPath()
    ctx.moveTo(x+1.5*W, y+0.5*H)
    ctx.arc(x+xi[1]*W, y+1*H, W/2, 0,Math.PI*2)
    ctx.quadraticCurveTo(x+1.75*W, y+H*1.4, x+2*W, y+H)
    ctx.arc(x+xi[1]*W, y+1*H, W, Math.PI*2,Math.PI/5, -1)
    ctx.stroke()
    return 1.6
    break;

    case"%":
    ctx.beginPath()
    ctx.moveTo(x+xi[0]*W, y+2*H)
    ctx.lineTo(x+xi[1]*W, y+0*H)
    ctx.stroke()
    ctx.beginPath()
    ctx.arc(x+0.25*W, y+0.25*H, ctx.lineWidth/2,0,Math.PI*2)
    ctx.fill()
    ctx.beginPath()
    ctx.arc(x+0.75*W, y+1.75*H, ctx.lineWidth/2,0,Math.PI*2)
    ctx.fill()
    break;

    case"&":
      //1
    ctx.beginPath()
    ctx.moveTo(x+0.7*W, y+0*H)
    ctx.lineTo(x+xi[0]*W, y+0*H)
    ctx.lineTo(x+xi[0]*W, y+2*H)
    ctx.lineTo(x+0.7*W, y+2*H)
    ctx.stroke()
    ctx.beginPath()
    ctx.moveTo(x+xi[0]*W, y+1*H)
    ctx.lineTo(x+1.25*W, y+1*H)
    ctx.stroke()    
    ctx.beginPath()
    ctx.moveTo(x+0.7*W, y+0.5*H)
    ctx.lineTo(x+0.7*W, y+2*H)
    ctx.stroke()
    return 1.1
    break;
    
    case"^":
    ctx.beginPath()
    ctx.moveTo(x+xi[0]*W, y+1*H)
    ctx.lineTo(x+0.5*W, y+0*H)
    ctx.lineTo(x+1*W, y+1*H)
    ctx.stroke()
    break;
    case"/":
    ctx.beginPath()
    ctx.moveTo(x+xi[0]*W, y+2*H)
    ctx.lineTo(x+xi[1]*W, y+0*H)
    ctx.stroke()
    break;
    case"\\":
    ctx.beginPath()
    ctx.moveTo(x+xi[1]*W, y+2*H)
    ctx.lineTo(x+xi[0]*W, y+0*H)
    ctx.stroke()
    break;
    case"_":
    ctx.beginPath()
    ctx.moveTo(x+xi[0]*W, y+2*H)
    ctx.lineTo(x+xi[1]*W, y+2*H)
    ctx.stroke()
    break;
    case":":
    ctx.beginPath()
    ctx.arc(x+0.25*W, y+0.5*H,ctx.lineWidth/2,0,Math.PI*2)
    ctx.fill()
    ctx.beginPath()
    ctx.arc(x+0.25*W, y+1.5*H,ctx.lineWidth/2,0,Math.PI*2)
    ctx.fill()
    return 0.5

    break;
    case";":
    ctx.beginPath()
    ctx.arc(x+xi[0]*W, y+0.5*H,ctx.lineWidth/2,0,Math.PI*2)
    ctx.fill()
    ctx.beginPath()
    ctx.moveTo(x+0.25*W, y+1.5*H)
    ctx.lineTo(x+-0.25*W, y+1.75*H)
    ctx.stroke()
    return 0.5
  }
  return 1
}

function right_over_my_headAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = [], MIRROR = false
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/40
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let xi = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]
  if (MIRROR)
    xi.reverse()
  //1
  ctx.beginPath()
  ctx.moveTo(x+xi[16]*W/24, y+24*H/24)
  cpx = x+xi[16]*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[16]*W/24, y+18*H/24)
  cpx = x+xi[16]*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[12]*W/24, y+14*H/24)
  cpx = x+xi[8]*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[8]*W/24, y+18*H/24)
  cpx = x+xi[6]*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[8]*W/24, y+20*H/24)
  cpx = x+xi[8]*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[8]*W/24, y+23*H/24)
  cpx = x+xi[8]*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[9]*W/24, y+24*H/24)
  ctx.stroke()
  //2
  ctx.beginPath()
  ctx.moveTo(x+xi[1]*W/24, y+18*H/24)
  cpx = x+xi[6]*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[6]*W/24, y+12*H/24)
  cpx = x+xi[6]*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[12]*W/24, y+6*H/24)
  cpx = x+xi[22]*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[22]*W/24, y+6*H/24)
  cpx = x+xi[23]*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[23]*W/24, y+6*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+xi[23]*W/24, y+5*H/24)
  ctx.lineTo(x+xi[24]*W/24, y+6*H/24)
  ctx.lineTo(x+xi[23]*W/24, y+7*H/24)
  ctx.lineTo(x+xi[23]*W/24, y+5*H/24)
  ctx.fill()
  ctx.stroke()

  //5
  pick = randomPick(["Riemann hypothesis","semiotics","Poincaré conjecture","postmodernism","quantum mechanics","structuralism","artspeak"])
  ctx.arc(x+xi[8]*W/24, y+2*H/24, W/48,0,Math.PI*2)
  let offset = 21-pick.length - 1
  blockLetters(pick,x+xi[3+offset]*W/24, y+2*H/24,W,color,1.4)
}

function chainsawAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = [], MIRROR = false
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/40
  let savedF = ctx.fillStyle
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let xi = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]
  if (MIRROR)
    xi.reverse()
 ///1
  ctx.beginPath()
  ctx.moveTo(x+xi[12]*W/24, y+14*H/24)
  ctx.lineTo(x+xi[22]*W/24, y+4*H/24)
  cpx = x+xi[24]*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[23]*W/24, y+1*H/24)
  cpx = x+xi[22]*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[20]*W/24, y+2*H/24)
  cpx = x+xi[11]*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[11]*W/24, y+11*H/24)
  ctx.globalAlpha /= 3
  ctx.fill()
  ctx.globalAlpha *= 3
  ctx.stroke()

  //1
  ctx.beginPath()
  ctx.arc(x+xi[5]*W/24, y+9*H/24, W/25,Math.PI/2,Math.PI*2)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.arc(x+xi[9]*W/24, y+13*H/24, W/25,Math.PI*1.5,Math.PI)
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+xi[6]*W/24, y+14*H/24)
  cpx = x+xi[6]*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[4]*W/24, y+15.5*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+xi[5]*W/24, y+10*H/24)
  ctx.lineTo(x+xi[8]*W/24, y+13*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+xi[6]*W/24, y+9*H/24)
  ctx.lineTo(x+xi[9]*W/24, y+12*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+xi[13]*W/24, y+16*H/24)
  cpx = x+xi[10]*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[10]*W/24, y+9*H/24)
  cpx = x+xi[10]*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[9]*W/24, y+8*H/24)
  ctx.lineTo(x+xi[9]*W/24, y+10*H/24)
  ctx.lineTo(x+xi[8]*W/24, y+11*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+xi[7]*W/24, y+12*H/24)
  ctx.lineTo(x+xi[3]*W/24, y+15*H/24)
  cpx = x+xi[0]*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[2]*W/24, y+22*H/24)
  ctx.lineTo(x+xi[4]*W/24, y+24*H/24)
  ctx.lineTo(x+xi[11]*W/24, y+17*H/24)
  cpx = x+xi[13]*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[13]*W/24, y+16*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+xi[6]*W/24, y+14*H/24)
  cpx = x+xi[1]*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[3]*W/24, y+21*H/24)
  cpx = x+xi[6]*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[6]*W/24, y+18*H/24)
  cpx = x+xi[6]*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[6]*W/24, y+14*H/24)
  ctx.stroke()
  //8
  ctx.beginPath()
  ctx.arc(x+xi[8]*W/24, y+16*H/24, W/24,0,Math.PI*2)
  ctx.globalAlpha /= 3
  ctx.fill()
  ctx.globalAlpha *= 3
  ctx.stroke()
  //9
  ctx.beginPath()
  ctx.arc(x+xi[22]*W/24, y+2*H/24, W/48,0,Math.PI*2)
  ctx.fillStyle = savedF
  ctx.fill()
  ctx.stroke()
  //6
  ctx.lineWidth *= 3
  ctx.lineCap = "butt"
  ctx.lineJoin = "square"
  ctx.setLineDash([W/32,W/32])
  //6
  ctx.beginPath()
  ctx.moveTo(x+xi[12]*W/24, y+14*H/24)
  ctx.lineTo(x+xi[22]*W/24, y+4*H/24)
  cpx = x+xi[24]*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[23]*W/24, y+1*H/24)
  cpx = x+xi[22]*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[20]*W/24, y+2*H/24)
  cpx = x+xi[11]*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[11]*W/24, y+11*H/24)
  ctx.stroke()
  ctx.setLineDash([])
}

function algorithmAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = [], MIRROR = false
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/40
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let xi = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]
  if (MIRROR)
    xi.reverse()
  //1
  ctx.beginPath()
  ctx.moveTo(x+xi[3]*W/24, y+24*H/24)
  ctx.lineTo(x+xi[3]*W/24, y+11*H/24)
  cpx = x+xi[3]*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[5]*W/24, y+9*H/24)
  cpx = x+xi[6]*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[6]*W/24, y+11*H/24)
  cpx = x+xi[6]*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[6]*W/24, y+3*H/24)
  cpx = x+xi[6]*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[8]*W/24, y+1*H/24)
  cpx = x+xi[9]*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[9]*W/24, y+3*H/24)
  cpx = x+xi[9]*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[9]*W/24, y+13*H/24)
  cpx = x+xi[9]*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[9]*W/24, y+2*H/24)
  cpx = x+xi[9]*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[11]*W/24, y+0*H/24)
  cpx = x+xi[12]*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[12]*W/24, y+2*H/24)
  cpx = x+xi[12]*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[12]*W/24, y+13*H/24)
  cpx = x+xi[12]*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[12]*W/24, y+3*H/24)
  cpx = x+xi[12]*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[14]*W/24, y+1*H/24)
  cpx = x+xi[15]*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[15]*W/24, y+3*H/24)
  cpx = x+xi[15]*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[15]*W/24, y+13*H/24)
  cpx = x+xi[15]*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[15]*W/24, y+4*H/24)
  cpx = x+xi[15]*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[17]*W/24, y+2*H/24)
  cpx = x+xi[18]*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[18]*W/24, y+4*H/24)
  cpx = x+xi[18]*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[18]*W/24, y+13*H/24)
  cpx = x+xi[18]*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[18]*W/24, y+6*H/24)
  cpx = x+xi[18]*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[20]*W/24, y+5*H/24)
  cpx = x+xi[21]*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[21]*W/24, y+7*H/24)
  cpx = x+xi[21]*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[21]*W/24, y+24*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+xi[6]*W/24, y+11*H/24)
  ctx.lineTo(x+xi[6]*W/24, y+17*H/24)
  ctx.stroke()

  x+= 1*W/24
  y += 5.5*H/24
  //11
  ctx.beginPath()
  ctx.moveTo(x+xi[4]*W/24, y+14*H/24)
  ctx.lineTo(x+xi[5]*W/24, y+12*H/24)
  ctx.lineTo(x+xi[6]*W/24, y+14*H/24)
  ctx.stroke()
  x+= 0.5*W/24
  //12
  ctx.beginPath()
  ctx.moveTo(x+xi[6]*W/24, y+12*H/24)
  ctx.lineTo(x+xi[6]*W/24, y+14*H/24)
  ctx.lineTo(x+xi[7]*W/24, y+14*H/24)
  ctx.stroke()
  x+= 0.5*W/24
  //13
  ctx.beginPath()
  ctx.moveTo(x+xi[8]*W/24, y+12.5*H/24)
  ctx.lineTo(x+xi[8]*W/24, y+12*H/24)
  ctx.lineTo(x+xi[7]*W/24, y+12*H/24)
  ctx.lineTo(x+xi[7]*W/24, y+14*H/24)
  ctx.lineTo(x+xi[8]*W/24, y+14*H/24)
  ctx.lineTo(x+xi[8]*W/24, y+13*H/24)
  ctx.lineTo(x+xi[7]*W/24+0.75*W/24, y+13*H/24)
  ctx.stroke()
x-= 0.5*W/24
  //14
  ctx.beginPath()
  ctx.moveTo(x+xi[9]*W/24, y+14*H/24)
  ctx.lineTo(x+xi[9]*W/24, y+12*H/24)
  ctx.lineTo(x+xi[10]*W/24, y+12*H/24)
  ctx.lineTo(x+xi[10]*W/24, y+14*H/24)
  ctx.lineTo(x+xi[9]*W/24, y+14*H/24)
  ctx.stroke()
x-= 0.5*W/24
  //15
  ctx.beginPath()
  ctx.moveTo(x+xi[11]*W/24, y+14*H/24)
  ctx.lineTo(x+xi[11]*W/24, y+12*H/24)
  ctx.lineTo(x+xi[12]*W/24, y+12*H/24)
  ctx.lineTo(x+xi[12]*W/24, y+13*H/24)
  ctx.lineTo(x+xi[11]*W/24, y+13*H/24)
  ctx.lineTo(x+xi[12]*W/24, y+14*H/24)
  ctx.stroke()
x-= 0.5*W/24
  //16
  ctx.beginPath()
  ctx.moveTo(x+xi[13]*W/24, y+12*H/24)
  ctx.lineTo(x+xi[13]*W/24, y+14*H/24)
  ctx.stroke()

  //17
  //20
  ctx.beginPath()
  ctx.moveTo(x+xi[14]*W/24, y+14*H/24)
  ctx.lineTo(x+xi[14]*W/24, y+12*H/24)
  ctx.stroke()

  //21
  ctx.beginPath()
  ctx.moveTo(x+xi[14]*W/24-0.5*W/24, y+12*H/24)
  ctx.lineTo(x+xi[14]*W/24+0.5*W/24, y+12*H/24)
  ctx.stroke()

  //18
  ctx.beginPath()
  ctx.moveTo(x+xi[15]*W/24, y+12*H/24)
  ctx.lineTo(x+xi[15]*W/24, y+14*H/24)
  ctx.lineTo(x+xi[15]*W/24, y+13*H/24)
  ctx.lineTo(x+xi[16]*W/24, y+13*H/24)
  ctx.lineTo(x+xi[16]*W/24, y+12*H/24)
  ctx.lineTo(x+xi[16]*W/24, y+14*H/24)
  ctx.stroke()
x-= 0.5*W/24
  //19
  ctx.beginPath()
  ctx.moveTo(x+xi[17]*W/24, y+14*H/24)
  ctx.lineTo(x+xi[17]*W/24, y+12*H/24)
  ctx.lineTo(x+xi[18]*W/24, y+13*H/24)
  ctx.lineTo(x+xi[19]*W/24, y+12*H/24)
  ctx.lineTo(x+xi[19]*W/24, y+14*H/24)
  ctx.stroke()
}

function victoryAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = [], MIRROR = false
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/30
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let xi = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]
  if (MIRROR)
    xi.reverse()
  //1 index
  ctx.beginPath()
  ctx.moveTo(x+xi[8]*W/24, y+11*H/24)
  cpx = x+xi[7]*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[7]*W/24, y+3*H/24)
  cpx = x+xi[7]*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[5]*W/24+0.5*W/24, y+2*H/24)
  cpx = x+xi[4]*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[4]*W/24, y+3*H/24)
  cpx = x+xi[4]*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[5]*W/24, y+12*H/24)
  ctx.stroke()
  //2 thumb
  ctx.beginPath()
  ctx.moveTo(x+xi[7]*W/24, y+23*H/24)
  cpx = x+xi[4]*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[4]*W/24, y+17*H/24)
  cpx = x+xi[4]*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[8]*W/24, y+11*H/24)
  cpx = x+xi[15]*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[15]*W/24, y+11*H/24)
  cpx = x+xi[15]*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[12]*W/24, y+14*H/24)
  cpx = x+xi[9]*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[9]*W/24, y+14*H/24)
  cpx = x+xi[10]*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[10]*W/24, y+14*H/24)
  cpx = x+xi[10]*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[8]*W/24, y+16*H/24)
  cpx = x+xi[10]*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[11]*W/24, y+20*H/24)
  ctx.stroke()

  ctx.beginPath() // middle finger
  ctx.moveTo(x+xi[10]*W/24, y+11*H/24)
  cpx = x+xi[11]*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[11]*W/24, y+3*H/24)
  cpx = x+xi[11]*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[13]*W/24-0.5*W/24, y+2*H/24)
  cpx = x+xi[14]*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[14]*W/24, y+3*H/24)
  cpx = x+xi[14]*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[13]*W/24, y+11*H/24)
  ctx.stroke()
  //4 ring
  ctx.beginPath()
  ctx.moveTo(x+xi[12]*W/24, y+14*H/24)
  cpx = x+xi[11]*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[12]*W/24, y+16*H/24)
  cpx = x+xi[13]*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[14]*W/24, y+16*H/24)
  cpx = x+xi[18]*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[18]*W/24, y+12*H/24)
  cpx = x+xi[19]*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[18]*W/24, y+10*H/24)
  cpx = x+xi[17]*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[16]*W/24, y+10*H/24)
  cpx = x+xi[15]*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[15]*W/24, y+11*H/24)
  ctx.stroke()
  //5 pinky
  ctx.beginPath()
  ctx.moveTo(x+xi[14]*W/24, y+16*H/24)
  cpx = x+xi[13]*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[14]*W/24, y+18*H/24)
  cpx = x+xi[15]*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[16]*W/24, y+18*H/24)
  cpx = x+xi[19]*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[19]*W/24, y+15*H/24)
  cpx = x+xi[20]*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[19]*W/24, y+13*H/24)
  cpx = x+xi[18]*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[17]*W/24, y+13*H/24)
  ctx.stroke()
  //6
  ctx.beginPath()
  ctx.moveTo(x+xi[18]*W/24, y+16*H/24)
  cpx = x+xi[18]*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[18]*W/24, y+19*H/24)
  cpx = x+xi[18]*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[16]*W/24, y+23*H/24)
  ctx.stroke()
  x -= 1*W/24
  y -= 0.65*W/24
  xi.reverse()
  ctx.lineWidth *= 1.2
  //3
  ctx.beginPath()
  ctx.moveTo(x+xi[6]*W/24, y+21*H/24)
  ctx.lineTo(x+xi[6]*W/24, y+23*H/24)
  ctx.lineTo(x+xi[7]*W/24, y+22*H/24)
  ctx.lineTo(x+xi[8]*W/24, y+23*H/24)
  ctx.lineTo(x+xi[8]*W/24, y+21*H/24)
  ctx.stroke()
  //4
  ctx.beginPath()
  ctx.moveTo(x+xi[9]*W/24, y+23*H/24)
  ctx.lineTo(x+xi[9]*W/24, y+21*H/24)
  ctx.lineTo(x+xi[10]*W/24, y+21*H/24)
  ctx.lineTo(x+xi[10]*W/24, y+22*H/24)
  ctx.lineTo(x+xi[9]*W/24, y+22*H/24)
  ctx.lineTo(x+xi[10]*W/24, y+23*H/24)
  ctx.stroke()
  //5
  ctx.beginPath()
  ctx.moveTo(x+xi[11]*W/24, y+23*H/24)
  ctx.lineTo(x+xi[12]*W/24, y+23*H/24)
  ctx.lineTo(x+xi[12]*W/24, y+21*H/24)
  ctx.lineTo(x+xi[11]*W/24, y+21*H/24)
  ctx.lineTo(x+xi[11]*W/24, y+23*H/24)
  ctx.stroke()
  //6
  ctx.beginPath()
  ctx.moveTo(x+xi[13]*W/24, y+23*H/24)
  ctx.lineTo(x+xi[13]*W/24, y+21*H/24)
  ctx.lineTo(x+xi[14]*W/24, y+23*H/24)
  ctx.lineTo(x+xi[14]*W/24, y+21*H/24)
  ctx.stroke()
  //7
  ctx.beginPath()
  ctx.moveTo(x+xi[16]*W/24, y+21*H/24)
  ctx.lineTo(x+xi[15]*W/24, y+21*H/24)
  ctx.lineTo(x+xi[15]*W/24, y+22*H/24)
  ctx.lineTo(x+xi[15]*W/24, y+23*H/24)
  ctx.lineTo(x+xi[16]*W/24, y+23*H/24)
  ctx.lineTo(x+xi[16]*W/24, y+22*H/24)
  ctx.lineTo(x+xi[15]*W/24 -0.7*W/24, y+22*H/24)
  ctx.stroke()
  //8
  ctx.beginPath()
  ctx.moveTo(x+xi[17]*W/24, y+21*H/24)
  ctx.lineTo(x+xi[17]*W/24, y+22.25*H/24)
  ctx.stroke()
  //9
  ctx.beginPath()
  ctx.arc(x+xi[17]*W/24, y+23*H/24, ctx.lineWidth/2,0,Math.PI*2)
  ctx.fill()
}

function tarjetas_rojasAt (x,y,W,color,INVERT) { // like credit_cardAt
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let off = document.createElement('CANVAS')
  let ctxoff = off.getContext("2d")
  off.width = canvas.width, off.height = canvas.height
  let H = W, cpx, cpy, points = [], MIRROR = false
  let savedLW = ctx.lineWidth
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/40
  let savedS = ctx.strokeStyle
  let savedF = ctx.fillStyle
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  ctx.fillStyle = "#dd0000"
  ctxoff.fillStyle = "#ffffff"
  ctx.fillRect(x,y,W,H*1.5)
  ctx.save()
  ctx.beginPath()
  ctx.moveTo(x,y)
  ctx.lineTo(x+W,y)
  ctx.lineTo(x+W,y+H*1.5)
  ctx.lineTo(x,y+H*1.5)
  ctx.closePath()
  ctx.clip()

  let xi = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]
  if (MIRROR)
    xi.reverse()
let en = "I do not wish to speak with you, answer your questions, \
or sign or hand you any documents based on my 5th \
Amendment rights under the United States Constitution. \
I do not give you permission to enter my home based \
on my 4th Amendment rights under the United States \
Constitution unless you have a warrant to enter, signed \
by a judge or magistrate with my name on it that you slide \
under the door. \
I do not give you permission to search any of my \
belongings based on my 4th Amendment rights. \
I choose to exercise my constitutional rights. "

let es = "Usted tiene derechos constitucionales: \
• NO ABRA LA PUERTA si un agente de inmigración está tocando \
la puerta. \
• NO CONTESTE NINGUNA PREGUNTA de un agente de \
inmigración si trata de hablar con usted. Usted tiene el derecho a \
guardar silencio. \
• NO FIRME NADA sin antes hablar con un abogado. Usted tiene \
el derecho de hablar con un abogado. \
• Si usted está fuera de su casa, pregúntele al agente si tiene la \
libertad de irse y si le dice que sí, váyase con tranquilidad. \
• ENTRÉGUELE ESTA TARJETA EL AGENTE. Si usted está \
dentro de su casa, muestre la tarjeta por la ventana o pásela \
debajo de la puerta."
  let words = es.split(" ")
  if(INVERT)
    words = en.split(" ")
  //console.log(words)

  let cx = off.width/1.5
  let cy = 0
  ctxoff.translate(cx, cy)
  ctxoff.rotate(Math.PI / 2)

  let fs = W*0.055
  ctxoff.font = "800 "+(fs) + "pt Garamond"
  let i = 0, w = 0, xoff = 0, yoff = 0//-100
  for (; i < words.length; i++) {
    //console.log(x+xoff)
    ctxoff.fillText(words[i], x+xoff, y+yoff)
    xoff += ctxoff.measureText(words[i]).width+ctxoff.measureText(" ").width
    if (x+xoff > x+W * 1.8 || words[i].indexOf(".") >= 0) {
      xoff = 0
      yoff += fs*1.5
    }
    if (words[i].indexOf(".") >= 0)
      yoff += fs/2
  }
  ctxoff.translate(-cx, -cy)
  ctx.ctxoff(off,0,0,off.width,off.height, x,y,W*1.5,H*1.5)
  ctx.restore()
  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
  ctx.lineWidth = savedLW
}

function anendophasiaAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = [], MIRROR = false, d = 0
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/40
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "round"
  ctx.lineJoin = "bevel"
  // inner ear w/ crossed out speech bubble inside
  inner_earAt(x,y,W,color)

  // fill the face
  ctx.beginPath()
  ctx.moveTo(x+6*W/24+pet(d), y+9*H/24+pet(d))
  ctx.lineTo(x+20*W/24+pet(d), y+9*H/24+pet(d))
  ctx.lineTo(x+14*W/24+pet(d), y+22*H/24+pet(d))
  ctx.lineTo(x+11*W/24+pet(d), y+22*H/24+pet(d))
  ctx.lineTo(x+6*W/24+pet(d), y+9*H/24+pet(d))
  ctx.fillStyle = savedF
  ctx.fill()
  let v = document.getElementById("featuresize").value
  document.getElementById("featuresize").value *= 2
  talkAt(x+7*W/24,y+1*H/24,W/2.2,color)
  ctx.fillStyle = savedF
  ctx.fill()
  ctx.stroke()
  document.getElementById("featuresize").value = v
  //1
  ctx.beginPath()
  ctx.arc(x+12*W/24+pet(d), y+5.5*H/24+pet(d), 3*W/24, 0, 2*Math.PI)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+9*W/24+pet(d), y+3*H/24+pet(d))
  ctx.lineTo(x+15*W/24+pet(d), y+8*H/24+pet(d))
  ctx.lineWidth *= 2
  ctx.strokeStyle = savedF
  ctx.stroke()
  ctx.lineWidth /= 2
  ctx.strokeStyle = color
  ctx.stroke()
  // face

  ctx.beginPath()
  ctx.moveTo(x+11*W/24+pet(d), y+11*H/24+pet(d))
  cpx = x+9.5*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*W/24+pet(d), y+11*H/24+pet(d))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+15*W/24+pet(d), y+11*H/24+pet(d))
  cpx = x+16.5*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*W/24+pet(d), y+11*H/24+pet(d))
  ctx.stroke()
  //7
  ctx.beginPath()
  ctx.moveTo(x+13*W/24+pet(d), y+11*H/24+pet(d))
  ctx.lineTo(x+15*W/24+pet(d), y+15*H/24+pet(d))
  ctx.lineTo(x+11*W/24+pet(d), y+15*H/24+pet(d))
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+11*W/24+pet(d), y+17*H/24+pet(d))
  ctx.lineTo(x+15*W/24+pet(d), y+17*H/24+pet(d))
  ctx.stroke()
}

function fifty_minute_hourAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = [], MIRROR = false
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/40
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let xi = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]
  if (MIRROR)
    xi.reverse()
  //1
  x -= W/24
  ctx.beginPath()
  ctx.moveTo(x+xi[20]*W/24, y+20*H/24)
  cpx = x+xi[3]*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[3]*W/24, y+20*H/24)
  cpx = x+xi[1]*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[1]*W/24, y+16*H/24)
  cpx = x+xi[1]*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[1]*W/24, y+14*H/24)
  cpx = x+xi[1]*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[3]*W/24, y+11*H/24)
  cpx = x+xi[7]*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[7]*W/24, y+9*H/24)
  cpx = x+xi[10]*W/24
  cpy = y+8.5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[10]*W/24, y+11*H/24)
  cpx = x+xi[10]*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[12]*W/24, y+14*H/24)
  cpx = x+xi[21]*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[21]*W/24, y+14*H/24)
  cpx = x+xi[26]*W/24+W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[22]*W/24+0.3*W/24, y+19*H/24)
  cpx = x+xi[22]*W/24-0.2*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[20]*W/24, y+20*H/24)
  ctx.globalAlpha /= 3
  ctx.fill()
  ctx.globalAlpha *= 3
  ctx.lineWidth *= 1.5
  ctx.stroke()
  ctx.lineWidth /= 1.5

  //2
  ctx.beginPath()
  ctx.moveTo(x+xi[5]*W/24, y+16*H/24)
  ctx.lineTo(x+xi[9]*W/24, y+14*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+xi[3]*W/24, y+20*H/24)
  ctx.lineTo(x+xi[3]*W/24, y+22*H/24)
  ctx.lineTo(x+xi[4]*W/24, y+22*H/24)
  ctx.lineTo(x+xi[4]*W/24, y+20*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+xi[19]*W/24, y+20*H/24)
  ctx.lineTo(x+xi[19]*W/24, y+22*H/24)
  ctx.lineTo(x+xi[20]*W/24, y+22*H/24)
  ctx.lineTo(x+xi[20]*W/24, y+20*H/24)
  ctx.stroke()

  //1
  ctx.beginPath()
  ctx.moveTo(x+xi[24]*W/24, y+16.8*H/24)
  ctx.lineTo(x+xi[24]*W/24, y+19*H/24)
  ctx.lineTo(x+xi[23]*W/24, y+19*H/24)
  ctx.lineTo(x+xi[23]*W/24, y+18.2*H/24)
  ctx.stroke()
  //5
  clockAt(x+xi[16]*W/24, y+2*H/24, 5.5*W/24, color)
}

function clockAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, angle = pet(360)
  let d = new Date()
  let h = d.getHours()
  let m = d.getMinutes()
  //1 minute
  angle = m * 6
  ctx.beginPath()
  p = rotatePoint(x+12*W/24, y+12*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+12*W/24, y+3*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+13*W/24, y+4*H/24 ,cx,cy,angle)
  p = rotatePoint(x+12*W/24, y+3*H/24 ,cx,cy,angle)
  p = rotatePoint(x+11*W/24, y+4*H/24 ,cx,cy,angle)
  ctx.stroke()
  angle = h*30 // plus small amount for minute
  angle += m*0.6
  //2 hour
  ctx.beginPath()
  p = rotatePoint(x+12*W/24, y+12*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+12*W/24, y+5*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+11*W/24, y+6*H/24 ,cx,cy,angle)
  p = rotatePoint(x+12*W/24, y+5*H/24 ,cx,cy,angle)
  p = rotatePoint(x+13*W/24, y+6*H/24 ,cx,cy,angle)
  ctx.stroke()
  //3
  ctx.beginPath()
  p = rotatePoint(x+12*W/24, y+12*H/24 ,cx,cy,angle)
  ctx.arc(p[0],p[1],11*W/24,0,Math.PI*2)
  ctx.stroke()
}

function taintAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = [], MIRROR = false
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  let savedF = ctx.fillStyle
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let xi = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]
  if (MIRROR)
    xi.reverse()
  
  let i = 0, d = W/10
  ctx.globalAlpha /= 13
  ctx.fillStyle = "#e67d32"
  for (; i < 13; i++) {
    ctx.beginPath()
    ctx.moveTo(x+xi[12]*W/24+pet(d), y+22*H/24+pet(d))
    cpx = x+xi[18]*W/24+pet(d)
    cpy = y+21*H/24+pet(d)
    ctx.quadraticCurveTo(cpx, cpy, x+xi[20]*W/24+pet(d*1.2), y+16*H/24+pet(d*1.2))
    cpx = x+xi[20]*W/24+pet(d)
    cpy = y+13*H/24+pet(d)
    ctx.quadraticCurveTo(cpx, cpy, x+xi[20]*W/24+pet(d), y+10*H/24+pet(d))
    cpx = x+xi[20]*W/24+pet(d)
    cpy = y+6*H/24+pet(d)
    ctx.quadraticCurveTo(cpx, cpy, x+xi[20]*W/24+pet(d), y+4*H/24+pet(d))
    cpx = x+xi[19]*W/24+pet(d)
    cpy = y+1*H/24+pet(d)
    ctx.quadraticCurveTo(cpx, cpy, x+xi[12]*W/24+pet(d), y+1*H/24+pet(d))
    cpx = x+xi[5]*W/24+pet(d)
    cpy = y+1*H/24+pet(d)
    ctx.quadraticCurveTo(cpx, cpy, x+xi[4]*W/24+pet(d), y+4*H/24+pet(d))
    cpx = x+xi[4]*W/24+pet(d)
    cpy = y+6*H/24+pet(d)
    ctx.quadraticCurveTo(cpx, cpy, x+xi[4]*W/24+pet(d), y+10*H/24+pet(d))
    cpx = x+xi[4]*W/24+pet(d)
    cpy = y+13*H/24+pet(d)
    ctx.quadraticCurveTo(cpx, cpy, x+xi[4]*W/24+pet(d*1.2), y+16*H/24+pet(d*1.2))
    cpx = x+xi[6]*W/24+pet(d)
    cpy = y+21*H/24+pet(d)
    ctx.quadraticCurveTo(cpx, cpy, x+xi[12]*W/24+pet(d), y+22*H/24+pet(d))
    ctx.fill()
  }
  ctx.globalAlpha *= 13
  i = 0
  ctx.globalAlpha /= 11
  ctx.fillStyle = savedF
  d *= 0.9
  for (; i < 13; i++) {
    ctx.beginPath()
    ctx.moveTo(x+xi[6]*W/24+pet(d), y+9*H/24+pet(d))
    cpx = x+xi[6]*W/24+pet(d)
    cpy = y+7*H/24+pet(d)
    ctx.quadraticCurveTo(cpx, cpy, x+xi[9]*W/24+pet(d), y+7*H/24+pet(d))
    cpx = x+xi[11]*W/24+pet(d)
    cpy = y+7*H/24+pet(d)
    ctx.quadraticCurveTo(cpx, cpy, x+xi[11]*W/24+pet(d), y+9*H/24+pet(d))
    cpx = x+xi[10]*W/24+pet(d)
    cpy = y+10*H/24+pet(d)
    ctx.quadraticCurveTo(cpx, cpy, x+xi[8]*W/24+pet(d), y+10*H/24+pet(d))
    cpx = x+xi[6]*W/24+pet(d)
    cpy = y+10*H/24+pet(d)
    ctx.quadraticCurveTo(cpx, cpy, x+xi[6]*W/24+pet(d), y+9*H/24+pet(d))
    ctx.fill()

    //2
    ctx.beginPath()
    ctx.moveTo(x+xi[13]*W/24+pet(d), y+9*H/24+pet(d))
    cpx = x+xi[13]*W/24+pet(d)
    cpy = y+7*H/24+pet(d)
    ctx.quadraticCurveTo(cpx, cpy, x+xi[15]*W/24+pet(d), y+7*H/24+pet(d))
    cpx = x+xi[18]*W/24+pet(d)
    cpy = y+7*H/24+pet(d)
    ctx.quadraticCurveTo(cpx, cpy, x+xi[18]*W/24+pet(d), y+9*H/24+pet(d))
    cpx = x+xi[18]*W/24+pet(d)
    cpy = y+10*H/24+pet(d)
    ctx.quadraticCurveTo(cpx, cpy, x+xi[17]*W/24+pet(d), y+10*H/24+pet(d))
    cpx = x+xi[14]*W/24+pet(d)
    cpy = y+10*H/24+pet(d)
    ctx.quadraticCurveTo(cpx, cpy, x+xi[13]*W/24+pet(d), y+9*H/24+pet(d))
    ctx.fill()

    ctx.beginPath()
    ctx.moveTo(x+xi[9]*W/24+pet(d), y+16*H/24+pet(d))
    cpx = x+xi[9]*W/24+pet(d)
    cpy = y+15*H/24+pet(d)
    ctx.quadraticCurveTo(cpx, cpy, x+xi[12]*W/24+pet(d), y+15*H/24+pet(d))
    cpx = x+xi[15]*W/24+pet(d)
    cpy = y+15*H/24+pet(d)
    ctx.quadraticCurveTo(cpx, cpy, x+xi[15]*W/24+pet(d), y+16*H/24+pet(d))
    cpx = x+xi[15]*W/24+pet(d)
    cpy = y+17*H/24+pet(d)
    ctx.quadraticCurveTo(cpx, cpy, x+xi[12]*W/24+pet(d), y+17*H/24+pet(d))
    cpx = x+xi[9]*W/24+pet(d)
    cpy = y+17*H/24+pet(d)
    ctx.quadraticCurveTo(cpx, cpy, x+xi[9]*W/24+pet(d), y+16*H/24+pet(d))
    ctx.fill()
  }
  ctx.globalAlpha *= 11
}

function square_peg_in_a_round_holeAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = [], MIRROR = false
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/30
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "butt"
  ctx.lineJoin = "bevel"
  let xi = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]
  if (MIRROR)
    xi.reverse()
  //1
  ctx.beginPath()
  ctx.moveTo(x+xi[7]*W/24, y+4*H/24)
  ctx.lineTo(x+xi[12]*W/24, y+7*H/24)
  ctx.lineTo(x+xi[17]*W/24, y+4*H/24)
  ctx.lineTo(x+xi[12]*W/24, y+1*H/24)
  ctx.lineTo(x+xi[7]*W/24, y+4*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+xi[7]*W/24, y+4*H/24)
  ctx.lineTo(x+xi[7]*W/24, y+14*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+xi[12]*W/24, y+7*H/24)
  ctx.lineTo(x+xi[12]*W/24, y+15*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+xi[17]*W/24, y+4*H/24)
  ctx.lineTo(x+xi[17]*W/24, y+14*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+xi[17]*W/24, y+10.4*H/24)
  cpx = x+xi[18]*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[18]*W/24, y+12*H/24)
  cpx = x+xi[18]*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[12]*W/24, y+15*H/24)
  cpx = x+xi[6]*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[6]*W/24, y+12*H/24)
  cpx = x+xi[6]*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[7]*W/24, y+10.4*H/24)
  ctx.stroke()

  ctx.setLineDash([W/48])
  //5
  ctx.beginPath()
  ctx.moveTo(x+xi[7]*W/24, y+14*H/24)
  ctx.lineTo(x+xi[7]*W/24, y+20*H/24)
  ctx.lineTo(x+xi[12]*W/24, y+23*H/24)
  ctx.lineTo(x+xi[12]*W/24, y+15*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+xi[12]*W/24, y+23*H/24)
  ctx.lineTo(x+xi[17]*W/24, y+20*H/24)
  ctx.lineTo(x+xi[17]*W/24, y+14*H/24)
  ctx.stroke()
  ctx.setLineDash([])
}

function thumbs_upAt (x,y,W,color,INVERT) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = [], MIRROR = false
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/35
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let xi = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]
  let yi = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]
  if (INVERT)
    yi.reverse()
  if (MIRROR)
    xi.reverse()
  //2
  ctx.beginPath()
  ctx.moveTo(x+xi[4]*W/24, y+yi[21]*H/24)
  cpx = x+[13]*W/24
  cpy = y+yi[20]*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+[13]*W/24, y+yi[14]*H/24)
  cpx = x+[13]*W/24
  cpy = y+yi[12]*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+[11]*W/24, y+yi[11]*H/24)
  cpx = x+[14]*W/24
  cpy = y+yi[13]*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+[15]*W/24, y+yi[6]*H/24)
  cpx = x+[15.5]*W/24
  cpy = y+yi[0]*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+[13]*W/24, y+yi[0]*H/24)
  cpx = x+[11]*W/24
  cpy = y+yi[0]*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+[11]*W/24, y+yi[4]*H/24)
  cpx = x+[10]*W/24
  cpy = y+yi[7]*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+[8]*W/24, y+yi[8]*H/24)
  cpx = x+[2]*W/24
  cpy = y+yi[9]*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+[1]*W/24, y+yi[11]*H/24)
  cpx = x+[0]*W/24
  cpy = y+yi[11]*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+[0]*W/24, y+yi[11]*H/24)
  ctx.stroke()
  //3
  ctx.beginPath()
  ctx.moveTo(x+xi[0]*W/24, y+yi[24]*H/24)
  cpx = x+[18]*W/24
  cpy = y+yi[24]*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+[18]*W/24, y+yi[24]*H/24)
  cpx = x+[20]*W/24
  cpy = y+yi[24]*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+[20]*W/24, y+yi[22]*H/24)
  cpx = x+[20]*W/24
  cpy = y+yi[20]*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+[18]*W/24, y+yi[20]*H/24)
  cpx = x+[13]*W/24
  cpy = y+yi[20]*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+[13]*W/24, y+yi[20]*H/24)
  cpx = x+[11]*W/24
  cpy = y+yi[20]*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+[11]*W/24, y+yi[22]*H/24)
  cpx = x+[11]*W/24
  cpy = y+yi[24]*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+[13]*W/24, y+yi[24]*H/24)
  ctx.stroke()
  //5
  ctx.beginPath()
  ctx.moveTo(x+xi[18]*W/24, y+yi[20]*H/24)
  cpx = x+[20]*W/24
  cpy = y+yi[20]*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+[20]*W/24, y+yi[20]*H/24)
  cpx = x+[22]*W/24
  cpy = y+yi[20]*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+[22]*W/24, y+yi[18]*H/24)
  cpx = x+[22]*W/24
  cpy = y+yi[16]*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+[20]*W/24, y+yi[16]*H/24)
  cpx = x+[14]*W/24
  cpy = y+yi[16]*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+[14]*W/24, y+yi[16]*H/24)
  cpx = x+[12.1]*W/24
  cpy = y+yi[16]*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+[12.1]*W/24, y+yi[18]*H/24)
  cpx = x+[12.1]*W/24
  cpy = y+yi[20]*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+[14]*W/24, y+yi[20]*H/24)
  ctx.stroke()
  //6
  ctx.beginPath()
  ctx.moveTo(x+xi[20]*W/24, y+yi[16]*H/24)
  cpx = x+[21]*W/24
  cpy = y+yi[16]*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+[21]*W/24, y+yi[16]*H/24)
  cpx = x+[23]*W/24
  cpy = y+yi[16]*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+[23]*W/24, y+yi[14]*H/24)
  cpx = x+[23]*W/24
  cpy = y+yi[12]*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+[21]*W/24, y+yi[12]*H/24)
  cpx = x+[15]*W/24
  cpy = y+yi[12]*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+[15]*W/24, y+yi[12]*H/24)
  cpx = x+[13]*W/24
  cpy = y+yi[12]*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+[13]*W/24, y+yi[14]*H/24)
  cpx = x+[13]*W/24
  cpy = y+yi[16]*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+[15]*W/24, y+yi[16]*H/24)
  ctx.stroke()
  //7
  ctx.beginPath()
  ctx.moveTo(x+xi[21]*W/24, y+yi[12]*H/24)
  cpx = x+[22]*W/24
  cpy = y+yi[12]*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+[22]*W/24, y+yi[12]*H/24)
  cpx = x+[24]*W/24
  cpy = y+yi[12]*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+[24]*W/24, y+yi[10]*H/24)
  cpx = x+[24]*W/24
  cpy = y+yi[8]*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+[22]*W/24, y+yi[8]*H/24)
  cpx = x+[16]*W/24
  cpy = y+yi[8]*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+[16]*W/24, y+yi[8]*H/24)
  cpx = x+[14.2]*W/24
  cpy = y+yi[8]*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+[14.2]*W/24, y+yi[10]*H/24)
  cpx = x+[14.2]*W/24
  cpy = y+yi[12]*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+[16]*W/24, y+yi[12]*H/24)
  ctx.stroke()
}

function wrongAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = [], MIRROR = true
  let xi = [0,1,2,3,4,5,6,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24] //up to grid size
  if (MIRROR)
    xi.reverse()
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/15
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "round"
  ctx.lineJoin = "round"
  //1
  ctx.beginPath()
  if (MIRROR)
    ctx.moveTo(x+23*W/24, y+6*H/24)
  else
    ctx.moveTo(x+1*W/24, y+6*H/24)
  if (MIRROR)
    ctx.lineTo(x+22*W/24, y+12*H/24)
  else
    ctx.lineTo(x+2*W/24, y+12*H/24)
  if (MIRROR)
    ctx.lineTo(x+21*W/24, y+10*H/24)
  else
    ctx.lineTo(x+3*W/24, y+10*H/24)
  if (MIRROR)
    ctx.lineTo(x+20*W/24, y+12*H/24)
  else
    ctx.lineTo(x+4*W/24, y+12*H/24)
  if (MIRROR)
    ctx.lineTo(x+19*W/24, y+6*H/24)
  else
    ctx.lineTo(x+5*W/24, y+6*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  if (MIRROR)
    ctx.moveTo(x+18*W/24, y+6*H/24)
  else
    ctx.moveTo(x+6*W/24, y+6*H/24)
  if (MIRROR)
    ctx.lineTo(x+18*W/24, y+12*H/24)
  else
    ctx.lineTo(x+6*W/24, y+12*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  if (MIRROR)
    ctx.moveTo(x+18*W/24, y+6*H/24)
  else
    ctx.moveTo(x+6*W/24, y+6*H/24)
  if (MIRROR)
    cpx = x+17*W/24
  else
    cpx = x+7*W/24
  cpy = y+6*H/24
  if (MIRROR)
    ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+6*H/24)
  else
    ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+6*H/24)
  if (MIRROR)
    cpx = x+16*W/24
  else
    cpx = x+8*W/24
  cpy = y+6*H/24
  if (MIRROR)
    ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+8*H/24)
  else
    ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+8*H/24)
  if (MIRROR)
    cpx = x+16*W/24
  else
    cpx = x+8*W/24
  cpy = y+10*H/24
  if (MIRROR)
    ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+10*H/24)
  else
    ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+10*H/24)
  if (MIRROR)
    cpx = x+18*W/24
  else
    cpx = x+6*W/24
  cpy = y+10*H/24
  if (MIRROR)
    ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+12*H/24)
  else
    ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+12*H/24)
  if (MIRROR)
    cpx = x+16*W/24
  else
    cpx = x+8*W/24
  cpy = y+12*H/24
  ctx.stroke()

  //4
  ctx.beginPath()
  if (MIRROR)
    ctx.moveTo(x+15*W/24, y+8*H/24)
  else
    ctx.moveTo(x+9*W/24, y+8*H/24)
  if (MIRROR)
    cpx = x+15*W/24
  else
    cpx = x+9*W/24
  cpy = y+6*H/24
  if (MIRROR)
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+6*H/24)
  else
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+6*H/24)
  if (MIRROR)
    cpx = x+11*W/24
  else
    cpx = x+13*W/24
  cpy = y+6*H/24
  if (MIRROR)
    ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+10*H/24)
  else
    ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+10*H/24)
  if (MIRROR)
    cpx = x+11*W/24
  else
    cpx = x+13*W/24
  cpy = y+12*H/24
  if (MIRROR)
    ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+12*H/24)
  else
    ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+12*H/24)
  if (MIRROR)
    cpx = x+15*W/24
  else
    cpx = x+9*W/24
  cpy = y+12*H/24
  if (MIRROR)
    ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+8*H/24)
  else
    ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+8*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  if (MIRROR)
    ctx.moveTo(x+10*W/24, y+12*H/24)
  else
    ctx.moveTo(x+14*W/24, y+12*H/24)
  if (MIRROR)
    cpx = x+10*W/24
  else
    cpx = x+14*W/24
  cpy = y+6*H/24
  if (MIRROR)
    ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+6*H/24)
  else
    ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+6*H/24)
  if (MIRROR)
    cpx = x+8*W/24
  else
    cpx = x+16*W/24
  cpy = y+12*H/24
  if (MIRROR)
    ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+12*H/24)
  else
    ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+12*H/24)
  if (MIRROR)
    cpx = x+8*W/24
  else
    cpx = x+16*W/24
  cpy = y+6*H/24
  if (MIRROR)
    ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+6*H/24)
  else
    ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+6*H/24)
  ctx.stroke()

  //6
  //2
  ctx.beginPath()
  if (MIRROR)
    ctx.moveTo(x+3*W/24, y+8*H/24)
  else
    ctx.moveTo(x+21*W/24, y+8*H/24)
  if (MIRROR)
    cpx = x+3*W/24
  else
    cpx = x+21*W/24
  cpy = y+6*H/24
  if (MIRROR)
    ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+6*H/24)
  else
    ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+6*H/24)
  if (MIRROR)
    cpx = x+7*W/24
  else
    cpx = x+17*W/24
  cpy = y+6*H/24
  if (MIRROR)
    ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+8*H/24)
  else
    ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+8*H/24)
  if (MIRROR)
    cpx = x+7*W/24
  else
    cpx = x+17*W/24
  cpy = y+12*H/24
  if (MIRROR)
    ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+12*H/24)
  else
    ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+12*H/24)
  if (MIRROR)
    cpx = x+3*W/24
  else
    cpx = x+21*W/24
  cpy = y+12*H/24
  if (MIRROR)
    ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+10*H/24)
  else
    ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+10*H/24)
  if (MIRROR)
    cpx = x+5*W/24
  else
    cpx = x+19*W/24
  cpy = y+10*H/24
  if (MIRROR)
    ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+10*H/24)
  else
    ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+10*H/24)
  ctx.stroke()

   //7
  ctx.beginPath()
  if (MIRROR)
    ctx.arc(x+2*W/24, y+12*H/24, ctx.lineWidth/2,0,Math.PI*2)
  else
    ctx.arc(x+22*W/24, y+12*H/24, ctx.lineWidth/2,0,Math.PI*2)
  ctx.fill()

  //8
  ctx.beginPath()
  if (MIRROR)
    ctx.moveTo(x+2*W/24, y+11*H/24)
  else
    ctx.moveTo(x+22*W/24, y+11*H/24)
  if (MIRROR)
    cpx = x+2*W/24
  else
    cpx = x+22*W/24
  cpy = y+6*H/24
  if (MIRROR)
    ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+6*H/24)
  else
    ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+6*H/24)
  ctx.stroke()
}

function detectiveAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+19*H/24)
  cpx = x+16*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+19*H/24)
  cpx = x+16*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+5*H/24)
  cpx = x+8*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+19*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+19*H/24)
  ctx.lineTo(x+7*W/24, y+22*H/24)
  ctx.lineTo(x+9*W/24, y+22*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+19*H/24)
  ctx.lineTo(x+12*W/24, y+22*H/24)
  ctx.lineTo(x+14*W/24, y+22*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+8*H/24)
  ctx.lineTo(x+11*W/24, y+12*H/24)
  ctx.lineTo(x+18*W/24, y+12*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+13*H/24)
  ctx.lineTo(x+18*W/24, y+11*H/24)
  ctx.lineTo(x+21*W/24, y+11*H/24)
  ctx.stroke()

  //2
  
  //2
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+7*H/24)
  cpx = x+18*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+4*H/24)
  cpx = x+19*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+1*H/24)
  cpx = x+15*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+4*H/24)
  cpx = x+14*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+7*H/24)
  ctx.stroke()
}

function life_cycleAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  let v = document.getElementById("featuresize").value
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.font = "800 italic "+(W*0.05) + "pt Garamond"
  ctx.fillText("Figure 1",x+9.5*W/24, y+13*H/24)

  ctx.font = "italic "+(W*0.024) + "pt Garamond"
  ctx.fillText("Rattus norvegicus",x+10.5*W/24, y+23.75*H/24)
  ctx.fillText("Ixodes scapularis",x+1*W/24, y+15*H/24)
  ctx.fillText("Culiseta melanura",x+18.3*W/24, y+15*H/24)

  document.getElementById("featuresize").value /= 2
  lungsAt(x+7.3*W/24, y+0.5*H/24,W/2.5,color)
  tickAt(x+16*W/24, y+7*H/24,W/2.5,color)
  ratAt(x+8*W/24, y+15.5*H/24,W/3,color)
  mosquitoAt(x+1*W/24, y+9*H/24,W/4,color)
  document.getElementById("featuresize").value = v
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  //5
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+3*H/24)
  cpx = x+21*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+7*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+7*H/24)
  cpx = x+3*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+3*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+21*H/24)
  cpx = x+3*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+17*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+21*H/24)
  cpx = x+21*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+17*H/24)
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+6*H/24)
  ctx.lineTo(x+21*W/24, y+7*H/24)
  ctx.lineTo(x+22*W/24, y+6*H/24)
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+20*H/24)
  ctx.lineTo(x+17*W/24, y+21*H/24)
  ctx.lineTo(x+18*W/24, y+22*H/24)
  ctx.stroke()

  //11
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+18*H/24)
  ctx.lineTo(x+3*W/24, y+17*H/24)
  ctx.lineTo(x+4*W/24, y+18*H/24)
  ctx.stroke()

  //12
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+2*H/24)
  ctx.lineTo(x+7*W/24, y+3*H/24)
  ctx.lineTo(x+6*W/24, y+4*H/24)
  ctx.stroke()
}

function ratAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+16*H/24)
  cpx = x+1*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+15*H/24)
  cpx = x+1*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+11*H/24)
  cpx = x+6*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+8*H/24)
  cpx = x+8*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+11*H/24)
  cpx = x+14*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+8*H/24)
  cpx = x+21*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+14*H/24)
  cpx = x+21*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+20*H/24)
  cpx = x+21*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+22*H/24)
  cpx = x+9*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+22*H/24)
  cpx = x+8*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+21*H/24)
  cpx = x+18*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+21*H/24)
  cpx = x+20*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+19*H/24)
  cpx = x+20*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+15*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+16*H/24)
  cpx = x+6*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+15*H/24)
  cpx = x+7*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+18*H/24)
  cpx = x+5*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+19*H/24)
  cpx = x+7*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+16*H/24)
  cpx = x+11*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+17*H/24)
  cpx = x+14*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+17*H/24)
  cpx = x+13*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+13*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+17*H/24)
  cpx = x+14*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+18*H/24)
  cpx = x+11*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+19*H/24)
  cpx = x+15*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+19*H/24)
  cpx = x+16*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+17*H/24)
  cpx = x+18*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+15*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.arc(x+5*W/24, y+13*H/24,W/48,0,Math.PI*2)
  ctx.fill()
}

function light_switchAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/30
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
   //1
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+12*H/24)
  cpx = x+14*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+2*H/24)
  ctx.lineTo(x+22*W/24, y+22*H/24)
  ctx.stroke()
  //5
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+12*H/24)
  cpx = x+6*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+2*H/24)
  ctx.lineTo(x+22*W/24, y+2*H/24)
  ctx.stroke()
 //5
  ctx.beginPath()
  ctx.moveTo(x+22*W/24, y+22*H/24)
  ctx.lineTo(x+13*W/24, y+22*H/24)
  cpx = x+12*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11.7*W/24, y+21.7*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+15*H/24)
  ctx.lineTo(x+14*W/24, y+12*H/24)
  ctx.lineTo(x+6*W/24, y+12*H/24)
  ctx.lineTo(x+1*W/24, y+15*H/24)
  ctx.lineTo(x+9*W/24, y+15*H/24)
  ctx.lineTo(x+10*W/24, y+23*H/24)
  ctx.lineTo(x+2*W/24, y+23*H/24)
  ctx.lineTo(x+1*W/24, y+15*H/24)
  ctx.stroke()
  //2
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+23*H/24)
  ctx.lineTo(x+15*W/24, y+19*H/24)
  ctx.stroke()
  //3
  ctx.beginPath()
  ctx.moveTo(x+22*W/24, y+22*H/24)
  cpx = x+15.5*W/24
  cpy = y+21.6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+19*H/24)
  ctx.stroke()
}

function brain_wormAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/40
  ctx.strokeStyle = color
  ctx.lineCap = "round"
  ctx.lineJoin = "round"
  //1
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+20*H/24)
  cpx = x+4*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+20*H/24)
  cpx = x+6*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+18*H/24)
  cpx = x+6*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+4*H/24)
  cpx = x+6*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+0*H/24)
  cpx = x+19*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+4*H/24)
  cpx = x+19*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+6*H/24)
  cpx = x+19*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+10*H/24)
  cpx = x+20*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+11*H/24)
  cpx = x+18*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+14*H/24)
  cpx = x+18*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+16*H/24)
  cpx = x+16*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+18*H/24)
  cpx = x+16*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+20*H/24)
  cpx = x+23*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+20*H/24)
  cpx = x+24*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+24*W/24, y+20*H/24)
  ctx.lineWidth *= 2
  ctx.stroke()
  //2
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+7*H/24)
  cpx = x+14*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+6.5*H/24)
  cpx = x+14*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+8*H/24)
  cpx = x+14*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+9*H/24)
  cpx = x+10*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+9*H/24)
  cpx = x+7*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+5*H/24)
  cpx = x+7*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+1*H/24)
  cpx = x+18*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+4*H/24)
  cpx = x+18*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+7*H/24)
  ctx.stroke()
  document.getElementById("featuresize").value *= 2
  lwormAt(x+10.5*W/24, y+1.8*H/24,4*W/24,color)
  document.getElementById("featuresize").value /= 2
}

function rat2At (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+15*H/24)
  cpx = x+5*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+16*H/24)
  cpx = x+3*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+16*H/24)
  cpx = x+1*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+15*H/24)
  cpx = x+3*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+11*H/24)
  cpx = x+5*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+8*H/24)
  cpx = x+7*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+10*H/24)
  cpx = x+11*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+7*H/24)
  cpx = x+24*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+24*W/24, y+11*H/24)
  cpx = x+24*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21.5*W/24, y+20*H/24)
  cpx = x+16*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+21*H/24)
  cpx = x+16*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+19*H/24)
  cpx = x+22*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+17*H/24)
  cpx = x+22.7*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22.5*W/24, y+12*H/24)
  cpx = x+21*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+18*H/24)
  cpx = x+13*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+18*H/24)
  cpx = x+13*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+18*H/24)
  cpx = x+13*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+17*H/24)
  cpx = x+16*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+17*H/24)
  cpx = x+17*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+15*H/24)
  cpx = x+15*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+10*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+15*H/24)
  cpx = x+15*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+15*H/24)
  cpx = x+12*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+16*H/24)
  cpx = x+9*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+19*H/24)
  cpx = x+7*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+18*H/24)
  cpx = x+8*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+15*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.arc(x+5*W/24, y+13*H/24,W/48,0,Math.PI*2)
  ctx.stroke()
}

function lwormAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "round"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, d = 0, angle = pet(180)

  //1
  ctx.beginPath()
  p = rotatePoint(x+2*W/24+pet(d), y+20*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+2*W/24+pet(d)
  cpy = y+24*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+6*W/24+pet(d), y+24*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+10*W/24+pet(d)
  cpy = y+24*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+10*W/24+pet(d), y+20*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+10*W/24+pet(d)
  cpy = y+16*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+6*W/24+pet(d), y+16*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+2*W/24+pet(d)
  cpy = y+16*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+2*W/24+pet(d), y+12*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+2*W/24+pet(d)
  cpy = y+8*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+6*W/24+pet(d), y+8*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+10*W/24+pet(d)
  cpy = y+8*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+10*W/24+pet(d), y+12*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+10*W/24+pet(d)
  cpy = y+16*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+14*W/24+pet(d), y+16*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+18*W/24+pet(d)
  cpy = y+16*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+18*W/24+pet(d), y+12*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+18*W/24+pet(d)
  cpy = y+8*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+14*W/24+pet(d), y+8*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+10*W/24+pet(d)
  cpy = y+8*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+10*W/24+pet(d), y+4*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+10*W/24+pet(d)
  cpy = y+0*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+14*W/24+pet(d), y+0*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+18*W/24+pet(d)
  cpy = y+0*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+18*W/24+pet(d), y+4*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+18*W/24+pet(d)
  cpy = y+8*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+22*W/24+pet(d), y+8*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()
}

function lungsAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let v = document.getElementById("featuresize").value
  document.getElementById("featuresize").value /= 3

  //1
  lwormAt(x+8.5*W/24, y+13*H/24,1.5*W/24)
  lwormAt(x+8*W/24, y+20*H/24,1.5*W/24)
  lwormAt(x+9*W/24, y+16*H/24,1.5*W/24)
  lwormAt(x+14*W/24, y+15*H/24,1.5*W/24)
  lwormAt(x+12.5*W/24, y+18*H/24,1.5*W/24)
  lwormAt(x+14*W/24, y+20*H/24,1.5*W/24)

  document.getElementById("featuresize").value = v
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50

  //1
  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+5*H/24)
  cpx = x+12*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+5*H/24)
  cpx = x+11*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+6*H/24)
  cpx = x+11*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+13*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+6*H/24)
  cpx = x+13*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+6*H/24)
  cpx = x+12*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+7*H/24)
  cpx = x+12*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+13*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+13*H/24)
  cpx = x+11*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+12*H/24)
  cpx = x+7*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+21*H/24)
  cpx = x+7*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+22*H/24)
  cpx = x+9*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+22*H/24)
  cpx = x+11*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+21*H/24)
  cpx = x+11*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+14*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+13*H/24)
  cpx = x+12*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+12*H/24)
  cpx = x+16*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+21*H/24)
  cpx = x+16*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+22*H/24)
  cpx = x+14*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+22*H/24)
  cpx = x+12*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+21*H/24)
  cpx = x+12*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+14*H/24)
  cpx = x+11*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+14*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+5*H/24)
  cpx = x+15*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+3*H/24)
  cpx = x+15*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+0*H/24)
  cpx = x+9*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+4*H/24)
  cpx = x+9*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+7*H/24)
  cpx = x+8*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+9*H/24)
  cpx = x+4*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+14*H/24)
  cpx = x+4*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+23*H/24)
  //ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+19*W/24, y+23*H/24)
  cpx = x+19*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+14*H/24)
  cpx = x+19*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+9*H/24)
  cpx = x+13*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+8*H/24)
  cpx = x+13*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+7*H/24)
  cpx = x+15*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+6*H/24)
  cpx = x+15*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+3*H/24)
  //ctx.stroke()
 //1
  ctx.beginPath()
  ctx.moveTo(x+19*W/24, y+23*H/24)
  cpx = x+19*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+14*H/24)
  cpx = x+19*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+9*H/24)
  cpx = x+13*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+8*H/24)
  cpx = x+13*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+7*H/24)
  cpx = x+15*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+6*H/24)
  cpx = x+15*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+5*H/24)
  cpx = x+16*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+4*H/24)
  cpx = x+15*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+3*H/24)
  cpx = x+15*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+0*H/24)
  cpx = x+9*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+4*H/24)
  cpx = x+9*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+7*H/24)
  cpx = x+9*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+9*H/24)
  cpx = x+4*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+14*H/24)
  cpx = x+4*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+23*H/24)
  ctx.stroke()
  //7
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+5*H/24)
  ctx.lineTo(x+19*W/24, y+3*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+6*H/24)
  ctx.lineTo(x+19*W/24, y+8*H/24)
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+5.5*H/24)
  ctx.lineTo(x+20*W/24, y+5.5*H/24)
  ctx.stroke()
}
function mosquitoAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+14*H/24)
  cpx = x+6*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+15*H/24)
  cpx = x+13*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+11*H/24)
  cpx = x+14*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+12*H/24)
  cpx = x+16*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+11*H/24)
  cpx = x+17*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+11*H/24)
  cpx = x+18*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+9*H/24)
  cpx = x+18*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+8*H/24)
  cpx = x+14*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+9*H/24)
  cpx = x+7*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+12*H/24)
  cpx = x+5*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+14*H/24)
  ctx.globalAlpha /= 4
  ctx.fill()
  ctx.globalAlpha *= 4
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+10*H/24)
  cpx = x+19*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+11*H/24)
  cpx = x+19*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+12*H/24)
  cpx = x+17*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+11*H/24)
  ctx.globalAlpha /= 4
  ctx.fill()
  ctx.globalAlpha *= 4
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+18.2*W/24, y+12*H/24)
  ctx.lineTo(x+18.8*W/24, y+14*H/24)
  ctx.stroke()
  //3
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+12*H/24)
  cpx = x+20*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+17*H/24)
  ctx.stroke()

 //1
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+8*H/24)
  cpx = x+7*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+11*H/24)
  cpx = x+6*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+8*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+8*H/24)
  cpx = x+7*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+8*H/24)
  cpx = x+5*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+8*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+11*H/24)
  ctx.lineTo(x+10*W/24, y+7*H/24)
  ctx.lineTo(x+8*W/24, y+16*H/24)
  ctx.lineTo(x+4*W/24, y+17*H/24)
  ctx.lineTo(x+2*W/24, y+18*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+11*H/24)
  ctx.lineTo(x+18*W/24, y+7*H/24)
  ctx.lineTo(x+19*W/24, y+10*H/24)
  ctx.lineTo(x+21*W/24, y+13*H/24)
  ctx.lineTo(x+24*W/24, y+15*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+11*H/24)
  ctx.lineTo(x+14*W/24, y+7*H/24)
  ctx.lineTo(x+13*W/24, y+13*H/24)
  ctx.lineTo(x+11*W/24, y+16*H/24)
  ctx.lineTo(x+9*W/24, y+17*H/24)
  ctx.stroke()
}

function mosquitoAt_ (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+14*H/24)
  cpx = x+17*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+13*H/24)
  cpx = x+17*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+7*H/24)
  cpx = x+4*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+6*H/24)
  cpx = x+2*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+7*H/24)
  cpx = x+8*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+14*H/24)
  ctx.globalAlpha /= 3
  ctx.fill()
  ctx.globalAlpha *= 3
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+14*H/24)
  cpx = x+19*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+14*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+12*H/24)
  cpx = x+11*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+4*H/24)
  cpx = x+5*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+5*H/24)
  cpx = x+10*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+12*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+4*H/24)
  cpx = x+7*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+3*H/24)
  cpx = x+14*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+12*H/24)
  cpx = x+11*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+4*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+11*H/24)
  cpx = x+3*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+8*H/24)
  cpx = x+4*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+19*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+14*H/24)
  cpx = x+16*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+15*H/24)
  cpx = x+18*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+13*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+15*H/24)
  cpx = x+22*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+21*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+12*H/24)
  cpx = x+7*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+12*H/24)
  cpx = x+7*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+19*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+13*H/24)
  cpx = x+10*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+16*H/24)
  cpx = x+11*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+19*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+13*H/24)
  cpx = x+20*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+12*H/24)
  ctx.stroke()
}
function fridgeAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "round"
  ctx.lineJoin = "round"
  //5
  ctx.beginPath()
  ctx.moveTo(x+6.7*W/24, y+24*H/24)
  ctx.lineTo(x+5.75*W/24, y+23*H/24)
  ctx.lineTo(x+5.75*W/24, y+13.4*H/24)
  ctx.lineTo(x+13.5*W/24, y+7.7*H/24)
  ctx.lineTo(x+21.1*W/24, y+11.5*H/24)
  ctx.lineTo(x+21.1*W/24, y+21.1*H/24)
  ctx.lineTo(x+24*W/24, y+22.7*H/24)
  ctx.lineTo(x+24*W/24, y+0*H/24)
  ctx.lineTo(x+0*W/24, y+0*H/24)
  ctx.lineTo(x+0*W/24, y+24*H/24)
  ctx.globalAlpha /= 3
  ctx.fill()
  ctx.globalAlpha *= 3
  W -= W/24, H -= H/24
  x += 2*W/24
  //1
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+0*H/24)
  ctx.lineTo(x+12*W/24, y+4*H/24)
  ctx.lineTo(x+4*W/24, y+10*H/24)
  ctx.lineTo(x+0*W/24, y+6*H/24)
  ctx.lineTo(x+8*W/24, y+0*H/24)
  ctx.stroke()
  //2
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+6*H/24)
  ctx.lineTo(x+0*W/24, y+20*H/24)
  ctx.lineTo(x+4*W/24, y+24*H/24)
  ctx.lineTo(x+4*W/24, y+10*H/24)
  ctx.stroke()
  //3
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+4*H/24)
  ctx.lineTo(x+12*W/24, y+18*H/24)
  ctx.lineTo(x+4*W/24, y+24*H/24)
  ctx.stroke()
  //4
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+14*H/24)
  ctx.lineTo(x+12*W/24, y+8*H/24)
  ctx.lineTo(x+20*W/24, y+12*H/24)
  ctx.lineTo(x+20*W/24, y+22*H/24)
  ctx.lineTo(x+12*W/24, y+18*H/24)
  ctx.stroke()
  //6
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+10*H/24)
  ctx.lineTo(x+5*W/24, y+12.5*H/24)
  ctx.lineWidth *=3
  ctx.stroke()
  ctx.lineWidth /=3
  //7
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+21*H/24)
  ctx.lineTo(x+12*W/24, y+15*H/24)
  ctx.lineTo(x+8*W/24, y+18*H/24)
  ctx.lineTo(x+8*W/24, y+21*H/24)
  ctx.stroke()
  //8
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+18*H/24)
  ctx.lineTo(x+12*W/24, y+12*H/24)
  ctx.lineTo(x+8.8*W/24, y+10.5*H/24)
  ctx.stroke()
  //9
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+11*H/24)
  ctx.lineTo(x+20*W/24, y+15*H/24)
  ctx.stroke()
  //10
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+15*H/24)
  ctx.lineTo(x+20*W/24, y+19*H/24)
  ctx.stroke()
  //11
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+22*H/24)
  ctx.lineTo(x+21*W/24, y+21.25*H/24)
  ctx.lineTo(x+21*W/24, y+11.25*H/24)
  ctx.lineTo(x+13*W/24, y+7.25*H/24)
  ctx.lineTo(x+12*W/24, y+8*H/24)
  ctx.stroke()
  //12
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+12*H/24)
  ctx.lineTo(x+21*W/24, y+11.25*H/24)
  ctx.stroke()
  //13
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+15*H/24)
  ctx.lineTo(x+9.75*W/24, y+13.75*H/24)
  ctx.stroke()
   //14
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+18*H/24)
  ctx.lineTo(x+5.75*W/24, y+16.75*H/24)
  ctx.stroke()
  //2
  x -= 2*W/24
  x -= 0.2*W/24
  canAt(x+14*W/24, y+8.9*H/24,2.3*W/24,color)
  canAt(x+16*W/24, y+9.9*H/24,2.3*W/24,color)
  canAt(x+18*W/24, y+10.9*H/24,2.3*W/24,color)
  canAt(x+20*W/24, y+11.9*H/24,2.3*W/24,color)

  canAt(x+14*W/24, y+15.9*H/24,2.3*W/24,color)
  canAt(x+16*W/24, y+16.9*H/24,2.3*W/24,color)
  canAt(x+18*W/24, y+17.9*H/24,2.3*W/24,color)
  canAt(x+20*W/24, y+18.9*H/24,2.3*W/24,color)

  canAt(x+14*W/24, y+12.6*H/24,2.3*W/24,color)
  canAt(x+16*W/24, y+13.6*H/24,2.3*W/24,color)
  canAt(x+18*W/24, y+14.6*H/24,2.3*W/24,color)
  canAt(x+20*W/24, y+15.6*H/24,2.3*W/24,color)
  x += 0.2*W/24
  cakeAt(x+6*W/24, y+13.3*H/24, 2.8*W/24,color)
  bottle2At(x+7.9*W/24, y+12.*H/24,2.9*W/24,color)
  cartonAt(x+9.0*W/24, y+10.5*H/24,3.5*W/24,0,color)
}

function cartonAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+22*H/24)
  ctx.lineTo(x+18*W/24, y+18*H/24)
  ctx.lineTo(x+18*W/24, y+4*H/24)
  ctx.lineTo(x+12*W/24, y+8*H/24)
  ctx.lineTo(x+12*W/24, y+22*H/24)
  ctx.lineTo(x+8*W/24, y+20*H/24)
  ctx.lineTo(x+8*W/24, y+6*H/24)
  ctx.lineTo(x+12*W/24, y+8*H/24)
  ctx.stroke()
  //2
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+6*H/24)
  ctx.lineTo(x+14*W/24, y+2*H/24)
  ctx.lineTo(x+18*W/24, y+4*H/24)
  ctx.stroke()
}
function bottle2At (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+21*H/24)
  cpx = x+6*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+10*H/24)
  ctx.stroke()
  //1
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+12*H/24)
  cpx = x+6*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+8*H/24)
  cpx = x+10*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+6*H/24)
  cpx = x+10*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+1*H/24)
  cpx = x+14*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+1*H/24)
  cpx = x+14*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+6*H/24)
  cpx = x+14*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+8*H/24)
  cpx = x+18*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+12*H/24)
  cpx = x+18*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+22*H/24)
  cpx = x+18*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+24*H/24)
  cpx = x+10*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+24*H/24)
  cpx = x+6*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+22*H/24)
  ctx.stroke()
  //2
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+1*H/24)
  cpx = x+10*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+0*H/24)
  cpx = x+14*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+1*H/24)
  ctx.stroke()
}

function canAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+4*H/24)
  cpx = x+6*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+0*H/24)
  cpx = x+20*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+4*H/24)
  cpx = x+20*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+8*H/24)
  cpx = x+6*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+4*H/24)
  cpx = x+6*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+20*H/24)
  cpx = x+6*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+24*H/24)
  cpx = x+20*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+20*H/24)
  cpx = x+20*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+4*H/24)
  ctx.stroke()
}

function trope_detective_pursuing_suspectAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  let savedF = ctx.fillStyle
  ctx.strokeStyle = color
  ctx.fillStyle = savedF
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let a = ctx.globalAlpha

  detectiveAt(x+0*W/24,y+15*H/24,W/6,color)
  x-=2*W/24
  let i = 0, offset = 3*H/24, x0 = x, y0 = y
  //////////////////////////////////////// back row
  // back row
  for (; i < 4; i++) {
    x += pet(4)
    ctx.beginPath()
    ctx.moveTo(x+24*W/24, y+17*H/24)
    ctx.lineTo(x+21*W/24, y+17*H/24)
    ctx.lineTo(x+17*W/24, y+14*H/24)
    ctx.lineTo(x+17*W/24, y+11*H/24)
    ctx.lineTo(x+20*W/24, y+11*H/24)
    ctx.lineTo(x+24*W/24, y+14*H/24)
    ctx.lineTo(x+24*W/24, y+17*H/24)
    ctx.fill()
    ctx.fillStyle = color
    ctx.globalAlpha = Math.random()/3
    ctx.fill()
    ctx.fillStyle = savedF
    ctx.globalAlpha = a
    ctx.stroke()

    //2
    ctx.beginPath()
    ctx.moveTo(x+17*W/24, y+11*H/24)
    ctx.lineTo(x+21*W/24, y+14*H/24)
    ctx.lineTo(x+24*W/24, y+14*H/24)
    ctx.stroke()
    ctx.beginPath()
    ctx.moveTo(x+21*W/24, y+14*H/24)
    ctx.lineTo(x+21*W/24, y+17*H/24)
    ctx.stroke()
    y -= offset
  }
  x = x0 - 4*W/24, y = y0
  i = 0
  for (; i < 3; i++) {
  x += pet(4)
    ctx.beginPath()
    ctx.moveTo(x+24*W/24, y+17*H/24)
    ctx.lineTo(x+21*W/24, y+17*H/24)
    ctx.lineTo(x+17*W/24, y+14*H/24)
    ctx.lineTo(x+17*W/24, y+11*H/24)
    ctx.lineTo(x+20*W/24, y+11*H/24)
    ctx.lineTo(x+24*W/24, y+14*H/24)
    ctx.lineTo(x+24*W/24, y+17*H/24)
    ctx.fill()
    ctx.fillStyle = color
    ctx.globalAlpha = Math.random()/3
    ctx.fill()
    ctx.fillStyle = savedF
    ctx.globalAlpha = a
    ctx.stroke()

    //2
    ctx.beginPath()
    ctx.moveTo(x+17*W/24, y+11*H/24)
    ctx.lineTo(x+21*W/24, y+14*H/24)
    ctx.lineTo(x+24*W/24, y+14*H/24)
    ctx.stroke()
    ctx.beginPath()
    ctx.moveTo(x+21*W/24, y+14*H/24)
    ctx.lineTo(x+21*W/24, y+17*H/24)
    ctx.stroke()
    y -= offset
  }

  x = x0 - 8*W/24, y = y0
  i = 0
  for (; i < 4; i++) {
  x += pet(4)
    ctx.beginPath()
    ctx.moveTo(x+24*W/24, y+17*H/24)
    ctx.lineTo(x+21*W/24, y+17*H/24)
    ctx.lineTo(x+17*W/24, y+14*H/24)
    ctx.lineTo(x+17*W/24, y+11*H/24)
    ctx.lineTo(x+20*W/24, y+11*H/24)
    ctx.lineTo(x+24*W/24, y+14*H/24)
    ctx.lineTo(x+24*W/24, y+17*H/24)
    ctx.fill()
    ctx.fillStyle = color
    ctx.globalAlpha = Math.random()/3
    ctx.fill()
    ctx.fillStyle = savedF
    ctx.globalAlpha = a
    ctx.stroke()

    //2
    ctx.beginPath()
    ctx.moveTo(x+17*W/24, y+11*H/24)
    ctx.lineTo(x+21*W/24, y+14*H/24)
    ctx.lineTo(x+24*W/24, y+14*H/24)
    ctx.stroke()
    ctx.beginPath()
    ctx.moveTo(x+21*W/24, y+14*H/24)
    ctx.lineTo(x+21*W/24, y+17*H/24)
    ctx.stroke()
    y -= offset
  }
  x = x0 - 12*W/24, y = y0
  i = 0
  for (; i < 2; i++) {
  x += pet(4)
    ctx.beginPath()
    ctx.moveTo(x+24*W/24, y+17*H/24)
    ctx.lineTo(x+21*W/24, y+17*H/24)
    ctx.lineTo(x+17*W/24, y+14*H/24)
    ctx.lineTo(x+17*W/24, y+11*H/24)
    ctx.lineTo(x+20*W/24, y+11*H/24)
    ctx.lineTo(x+24*W/24, y+14*H/24)
    ctx.lineTo(x+24*W/24, y+17*H/24)
    ctx.fill()
    ctx.fillStyle = color
    ctx.globalAlpha = Math.random()/3
    ctx.fill()
    ctx.fillStyle = savedF
    ctx.globalAlpha = a
    ctx.stroke()

    //2
    ctx.beginPath()
    ctx.moveTo(x+17*W/24, y+11*H/24)
    ctx.lineTo(x+21*W/24, y+14*H/24)
    ctx.lineTo(x+24*W/24, y+14*H/24)
    ctx.stroke()
    ctx.beginPath()
    ctx.moveTo(x+21*W/24, y+14*H/24)
    ctx.lineTo(x+21*W/24, y+17*H/24)
    ctx.stroke()
    y -= offset
  }
  ////////////////////// front row
  i = 0, y = y0 +4*H/24, y0 = y, x = x0+3*W/24, x0 = x
  for (; i < 3; i++) {
    x += pet(4)
    ctx.beginPath()
    ctx.moveTo(x+24*W/24, y+17*H/24)
    ctx.lineTo(x+21*W/24, y+17*H/24)
    ctx.lineTo(x+17*W/24, y+14*H/24)
    ctx.lineTo(x+17*W/24, y+11*H/24)
    ctx.lineTo(x+20*W/24, y+11*H/24)
    ctx.lineTo(x+24*W/24, y+14*H/24)
    ctx.lineTo(x+24*W/24, y+17*H/24)
    ctx.fill()
    ctx.fillStyle = color
    ctx.globalAlpha = Math.random()/3
    ctx.fill()
    ctx.fillStyle = savedF
    ctx.globalAlpha = a
    ctx.stroke()

    //2
    ctx.beginPath()
    ctx.moveTo(x+17*W/24, y+11*H/24)
    ctx.lineTo(x+21*W/24, y+14*H/24)
    ctx.lineTo(x+24*W/24, y+14*H/24)
    ctx.stroke()
    ctx.beginPath()
    ctx.moveTo(x+21*W/24, y+14*H/24)
    ctx.lineTo(x+21*W/24, y+17*H/24)
    ctx.stroke()
    y -= offset
  }
  x = x0 - 4*W/24, y = y0
  i = 0
  for (; i < 3; i++) {
  x += pet(5)
    ctx.beginPath()
    ctx.moveTo(x+24*W/24, y+17*H/24)
    ctx.lineTo(x+21*W/24, y+17*H/24)
    ctx.lineTo(x+17*W/24, y+14*H/24)
    ctx.lineTo(x+17*W/24, y+11*H/24)
    ctx.lineTo(x+20*W/24, y+11*H/24)
    ctx.lineTo(x+24*W/24, y+14*H/24)
    ctx.lineTo(x+24*W/24, y+17*H/24)
    ctx.fill()
    ctx.fillStyle = color
    ctx.globalAlpha = Math.random()/3
    ctx.fill()
    ctx.fillStyle = savedF
    ctx.globalAlpha = a
    ctx.stroke()

    //2
    ctx.beginPath()
    ctx.moveTo(x+17*W/24, y+11*H/24)
    ctx.lineTo(x+21*W/24, y+14*H/24)
    ctx.lineTo(x+24*W/24, y+14*H/24)
    ctx.stroke()
    ctx.beginPath()
    ctx.moveTo(x+21*W/24, y+14*H/24)
    ctx.lineTo(x+21*W/24, y+17*H/24)
    ctx.stroke()
    y -= offset
  }

  x = x0 - 8*W/24, y = y0
  i = 0
  for (; i < 4; i++) {
  x += pet(8)
    ctx.beginPath()
    ctx.moveTo(x+24*W/24, y+17*H/24)
    ctx.lineTo(x+21*W/24, y+17*H/24)
    ctx.lineTo(x+17*W/24, y+14*H/24)
    ctx.lineTo(x+17*W/24, y+11*H/24)
    ctx.lineTo(x+20*W/24, y+11*H/24)
    ctx.lineTo(x+24*W/24, y+14*H/24)
    ctx.lineTo(x+24*W/24, y+17*H/24)
    ctx.fill()
    ctx.fillStyle = color
    ctx.globalAlpha = Math.random()/3
    ctx.fill()
    ctx.fillStyle = savedF
    ctx.globalAlpha = a
    ctx.stroke()

    //2
    ctx.beginPath()
    ctx.moveTo(x+17*W/24, y+11*H/24)
    ctx.lineTo(x+21*W/24, y+14*H/24)
    ctx.lineTo(x+24*W/24, y+14*H/24)
    ctx.stroke()
    ctx.beginPath()
    ctx.moveTo(x+21*W/24, y+14*H/24)
    ctx.lineTo(x+21*W/24, y+17*H/24)
    ctx.stroke()
    y -= offset
  }
  x = x0 - 12*W/24, y = y0
  i = 0
  for (; i < 3; i++) {
  x += pet(4)
    ctx.beginPath()
    ctx.moveTo(x+24*W/24, y+17*H/24)
    ctx.lineTo(x+21*W/24, y+17*H/24)
    ctx.lineTo(x+17*W/24, y+14*H/24)
    ctx.lineTo(x+17*W/24, y+11*H/24)
    ctx.lineTo(x+20*W/24, y+11*H/24)
    ctx.lineTo(x+24*W/24, y+14*H/24)
    ctx.lineTo(x+24*W/24, y+17*H/24)
    ctx.fill()
    ctx.fillStyle = color
    ctx.globalAlpha = Math.random()/3
    ctx.fill()
    ctx.fillStyle = savedF
    ctx.globalAlpha = a
    ctx.stroke()

    //2
    ctx.beginPath()
    ctx.moveTo(x+17*W/24, y+11*H/24)
    ctx.lineTo(x+21*W/24, y+14*H/24)
    ctx.lineTo(x+24*W/24, y+14*H/24)
    ctx.stroke()
    ctx.beginPath()
    ctx.moveTo(x+21*W/24, y+14*H/24)
    ctx.lineTo(x+21*W/24, y+17*H/24)
    ctx.stroke()
    y -= offset
  }

}

function mute_swanAt (x,y,W,color) { // koan: what is the call of the mute swan?
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/40
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+20*H/24)
  cpx = x+12*W/24
  cpy = y+20*H/24
  ctx.moveTo(x+20*W/24, y+20*H/24)
  cpx = x+21*W/24
  cpy = y+19.5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+18*H/24)
  cpx = x+21*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+8*H/24)
  cpx = x+18*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+6*H/24)
  cpx = x+21*W/24
  cpy = y+7.2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22.5*W/24, y+7.2*H/24)
  cpx = x+21*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+5*H/24)
  cpx = x+21*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+3*H/24)
  cpx = x+16*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+7*H/24)
  cpx = x+17*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+15*H/24)
  cpx = x+18.5*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+17*H/24)
  cpx = x+14*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+10*H/24)
  cpx = x+8*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+9*H/24)
  ctx.lineTo(x+6*W/24, y+10*H/24)
  ctx.lineTo(x+5*W/24, y+10*H/24)
  ctx.lineTo(x+6*W/24, y+11*H/24)
  ctx.lineTo(x+5*W/24, y+11*H/24)
  ctx.lineTo(x+6*W/24, y+12*H/24)
  ctx.lineTo(x+5*W/24, y+12*H/24)
  cpx = x+4*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+13*H/24)
  cpx = x+4*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+15*H/24)
  cpx = x+3*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+14*H/24)
  cpx = x+1*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+16*H/24)
  cpx = x+2*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+20*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.arc(x+19*W/24, y+4.5*H/24,W/60,0,Math.PI*2)
  ctx.fill()

  //6
  ctx.beginPath()
  ctx.moveTo(x+21*W/24, y+5*H/24)
  cpx = x+20*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+6*H/24)
  ctx.stroke()
  //1
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+20*H/24)
  cpx = x+19*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+20*H/24)
  cpx = x+17*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+20*H/24)
  cpx = x+15*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+20*H/24)
  cpx = x+13*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+20*H/24)
  cpx = x+11*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+20*H/24)
  cpx = x+9*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+20*H/24)
  cpx = x+7*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+20*H/24)
  cpx = x+5*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+20*H/24)
  cpx = x+3*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+20*H/24)
  cpx = x+1*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+0*W/24, y+20*H/24)
  ctx.stroke()

}

function salamanderAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/30
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "round"
  ctx.lineJoin = "bevel"

  //12
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+6*H/24)
  cpx = x+0*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+4*H/24)
  cpx = x+14*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+4*H/24)
  cpx = x+24*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+24*W/24, y+12*H/24)
  cpx = x+24*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+20*H/24)
  cpx = x+10*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+0*W/24, y+18*H/24)
  cpx = x+16*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+18*H/24)
  cpx = x+22*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+12*H/24)
  cpx = x+22*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+6*H/24)
  cpx = x+0*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+0*W/24, y+6*H/24)
  ctx.globalAlpha /= 3
  ctx.fill()
  ctx.globalAlpha *= 3

  //1
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+18*H/24)
  cpx = x+10*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+16*H/24)
  cpx = x+20*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+12*H/24)
  cpx = x+20*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+8*H/24)
  cpx = x+4*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+8*H/24)
  cpx = x+0*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+0*W/24, y+6*H/24)
  cpx = x+0*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+4*H/24)
  cpx = x+14*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+4*H/24)
  cpx = x+24*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+24*W/24, y+12*H/24)
  cpx = x+24*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+20*H/24)
  cpx = x+10*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+0*W/24, y+18*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.arc(x+3*W/24, y+5*H/24,W/48,0,Math.PI*2)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.arc(x+3*W/24, y+7*H/24,W/48,0,Math.PI*2)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+16*H/24)
  cpx = x+14*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+14*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+15*H/24)
  cpx = x+15*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+14*H/24)
  cpx = x+15*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+13*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+20*H/24)
  cpx = x+14*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+22*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+21*H/24)
  cpx = x+15*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+22*H/24)
  cpx = x+15*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+23*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+4*H/24)
  cpx = x+9*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+2*H/24)
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+1*H/24)
  cpx = x+8*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+2*H/24)
  cpx = x+8*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+3*H/24)
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+8*H/24)
  cpx = x+9*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+10*H/24)
  ctx.stroke()

  //11
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+9*H/24)
  cpx = x+8*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+10*H/24)
  cpx = x+8*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+11*H/24)
  ctx.stroke()
}

function cul_de_sacAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let value = document.getElementById("featuresize").value
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+4*H/24)
  cpx = x+18*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+10*H/24)
  cpx = x+18*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+16*H/24)
  cpx = x+13*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+24*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+24*H/24)
  cpx = x+11*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+16*H/24)
  cpx = x+6*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+10*H/24)
  cpx = x+6*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+4*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+14*H/24)
  cpx = x+16*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+10*H/24)
  cpx = x+16*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+6*H/24)
  cpx = x+8*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+10*H/24)
  cpx = x+8*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+14*H/24)
  ctx.stroke()

  //4
  document.getElementById("featuresize").value *= 0.7
  rhouseAt(x+7.5*W/24, y+1*H/24,2.5*W/24,color,-20)
  rhouseAt(x+3*W/24, y+6*H/24,2.5*W/24,color,-75)
  rhouseAt(x+3*W/24, y+12*H/24,2.5*W/24,color,-105)
  rhouseAt(x+6*W/24, y+16.3*H/24,2.5*W/24,color,-155)
  rhouseAt(x+14.5*W/24, y+1*H/24,2.5*W/24,color,20)
  rhouseAt(x+15.6*W/24, y+16.3*H/24,2.5*W/24,color,155)
  rhouseAt(x+18.6*W/24, y+12*H/24,2.5*W/24,color,105)
  rhouseAt(x+18.6*W/24, y+6*H/24,2.5*W/24,color,75)
  document.getElementById("featuresize").value = value
}

function rhouseAt (x,y,W,color,a) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, d = 0, angle = a

  ctx.beginPath()
  p = rotatePoint(x+2*W/24+pet(d), y+24*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+2*W/24+pet(d), y+10*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+12*W/24+pet(d), y+0*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+22*W/24+pet(d), y+10*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+22*W/24+pet(d), y+24*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+2*W/24+pet(d), y+24*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //2
  ctx.beginPath()
  p = rotatePoint(x+10*W/24+pet(d), y+24*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+10*W/24+pet(d), y+19*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+14*W/24+pet(d), y+19*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+14*W/24+pet(d), y+24*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //3
  ctx.beginPath()
  p = rotatePoint(x+6*W/24+pet(d), y+10*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+6*W/24+pet(d), y+14*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+10*W/24+pet(d), y+14*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+10*W/24+pet(d), y+10*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+6*W/24+pet(d), y+10*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()
  //4
  ctx.beginPath()
  p = rotatePoint(x+14*W/24+pet(d), y+10*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+18*W/24+pet(d), y+10*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+18*W/24+pet(d), y+14*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+14*W/24+pet(d), y+14*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+14*W/24+pet(d), y+10*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //5
  ctx.beginPath()
  p = rotatePoint(x+6*W/24+pet(d), y+6*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+6*W/24+pet(d), y+0*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+9*W/24+pet(d), y+0*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+9*W/24+pet(d), y+3*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()
}

function dog_houseAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/25
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+23*H/24)
  ctx.lineTo(x+2*W/24, y+10*H/24)
  ctx.lineTo(x+12*W/24, y+0*H/24)
  ctx.lineTo(x+22*W/24, y+10*H/24)
  ctx.lineTo(x+22*W/24, y+23*H/24)
  ctx.lineTo(x+16*W/24, y+23*H/24)
  ctx.lineTo(x+16*W/24, y+16*H/24)
  cpx = x+16*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+12*H/24)
  cpx = x+8*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+16*H/24)
  cpx = x+8*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+23*H/24)
  ctx.lineTo(x+2*W/24, y+23*H/24)
  ctx.stroke()

 // let name = randomPick(words.match(/\b\w{2,}ous\b/g))
 // console.log(name)
  //2
  //ctx.globalAlpha /= 2
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+16*H/24)
  ctx.lineTo(x+8*W/24, y+23*H/24)
  ctx.lineTo(x+16*W/24, y+23*H/24)
  ctx.lineTo(x+16*W/24, y+16*H/24)
  cpx = x+16*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+12*H/24)
  cpx = x+8*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+16*H/24)
  ctx.fill()
  //ctx.globalAlpha *= 2
}

function no_such_thing_as_a_free_lunchAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

ctx.globalAlpha /= 4
//1
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+19*H/24)
  cpx = x+2*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+13*H/24)
  cpx = x+2*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+12*H/24)
  cpx = x+10*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+12*H/24)
  cpx = x+10*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+11*H/24)
  cpx = x+2*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+11*H/24)
  cpx = x+1*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+12*H/24)
  cpx = x+1*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+18*H/24)
  cpx = x+1*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+19*H/24)
  cpx = x+12*W/24
  cpy = y+19*H/24
  ctx.fill()

  //2
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+19*H/24)
  cpx = x+12*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+13*H/24)
  cpx = x+12*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+12*H/24)
  cpx = x+19*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+12*H/24)
  cpx = x+19*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+11*H/24)
  cpx = x+12*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+11*H/24)
  cpx = x+11*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+12*H/24)
  cpx = x+11*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+18*H/24)
  cpx = x+11*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+19*H/24)
  ctx.fill()

  //3
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+10*H/24)
  cpx = x+2*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+5*H/24)
  cpx = x+2*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+4*H/24)
  cpx = x+7*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+4*H/24)
  cpx = x+7*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+3*H/24)
  cpx = x+2*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+3*H/24)
  cpx = x+1*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+4*H/24)
  cpx = x+1*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+9*H/24)
  cpx = x+1*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+10*H/24)
  ctx.fill()

  //4
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+10*H/24)
  cpx = x+9*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+5*H/24)
  cpx = x+9*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+4*H/24)
  cpx = x+15*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+4*H/24)
  cpx = x+15*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+3*H/24)
  cpx = x+9*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+3*H/24)
  cpx = x+8*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+4*H/24)
  cpx = x+8*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+9*H/24)
  cpx = x+8*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+10*H/24)
  ctx.fill()

  //5
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+10*H/24)
  cpx = x+17*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+5*H/24)
  cpx = x+17*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+4*H/24)
  cpx = x+19*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+4*H/24)
  cpx = x+19*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+3*H/24)
  cpx = x+17*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+3*H/24)
  cpx = x+16*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+4*H/24)
  cpx = x+16*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+9*H/24)
  cpx = x+16*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+10*H/24)
  ctx.fill()

  //6
  ctx.beginPath()
  ctx.moveTo(x+21*W/24, y+19*H/24)
  cpx = x+21*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+5*H/24)
  cpx = x+21*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+4*H/24)
  cpx = x+23*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+4*H/24)
  cpx = x+23*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+3*H/24)
  cpx = x+21*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+3*H/24)
  cpx = x+20*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+4*H/24)
  cpx = x+20*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+18*H/24)
  cpx = x+20*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+19*H/24)
  ctx.fill()

  //7
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+19.5*H/24)
  cpx = x+0*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+20*H/24)
  cpx = x+23.5*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23.5*W/24, y+20*H/24)
  cpx = x+24*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+24*W/24, y+19.5*H/24)
  cpx = x+24*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+24*W/24, y+3*H/24)
  cpx = x+24*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23.5*W/24, y+2*H/24)
  cpx = x+23.5*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23.5*W/24, y+18*H/24)
  cpx = x+23.5*W/24
  cpy = y+19.5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+19.5*H/24)
  cpx = x+0*W/24
  cpy = y+19.5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+0*W/24, y+19.5*H/24)
  ctx.fill()
  ctx.globalAlpha *= 4

  //spoon
  ctx.beginPath()
  ctx.moveTo(x+22*W/24, y+8*H/24)
  cpx = x+22*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+17*H/24)
  cpx = x+21*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+17*H/24)
  cpx = x+21*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+8*H/24)
  cpx = x+20.3*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20.3*W/24, y+6*H/24)
  cpx = x+20.3*W/24
  cpy = y+4.5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21.5*W/24, y+4.5*H/24)
  cpx = x+22.7*W/24
  cpy = y+4.5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22.7*W/24, y+6*H/24)
  cpx = x+22.7*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+8*H/24)
  ctx.stroke()

  //1
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+20*H/24)
  ctx.lineTo(x+23*W/24, y+20*H/24)
  cpx = x+24*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+24*W/24, y+19*H/24)
  cpx = x+24*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+24*W/24, y+3*H/24)
  cpx = x+24*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+2*H/24)
  cpx = x+1*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+2*H/24)
  cpx = x+0*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+0*W/24, y+3*H/24)
  cpx = x+0*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+0*W/24, y+19*H/24)
  cpx = x+0*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+20*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+22*W/24, y+19*H/24)
  cpx = x+23*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+18*H/24)
  cpx = x+23*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+4*H/24)
  cpx = x+23*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+3*H/24)
  cpx = x+21*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+3*H/24)
  cpx = x+20*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+4*H/24)
  cpx = x+20*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+18*H/24)
  cpx = x+20*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+19*H/24)
  cpx = x+22*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+19*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+10*H/24)
  cpx = x+1*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+9*H/24)
  cpx = x+1*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+4*H/24)
  cpx = x+1*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+3*H/24)
  cpx = x+6*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+3*H/24)
  cpx = x+7*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+4*H/24)
  cpx = x+7*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+9*H/24)
  cpx = x+7*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+10*H/24)
  cpx = x+2*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+10*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+9*H/24)
  cpx = x+8*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+4*H/24)
  cpx = x+8*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+3*H/24)
  cpx = x+14*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+3*H/24)
  cpx = x+15*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+4*H/24)
  cpx = x+15*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+9*H/24)
  cpx = x+15*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+10*H/24)
  cpx = x+9*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+10*H/24)
  cpx = x+8*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+9*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+10*H/24)
  cpx = x+18*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+10*H/24)
  cpx = x+19*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+9*H/24)
  cpx = x+19*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+4*H/24)
  cpx = x+19*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+3*H/24)
  cpx = x+17*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+3*H/24)
  cpx = x+16*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+4*H/24)
  cpx = x+16*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+9*H/24)
  cpx = x+16*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+10*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+11*H/24)
  cpx = x+19*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+12*H/24)
  cpx = x+19*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+18*H/24)
  cpx = x+19*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+19*H/24)
  cpx = x+12*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+19*H/24)
  cpx = x+11*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+18*H/24)
  cpx = x+11*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+13*H/24)
  cpx = x+11*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+12*H/24)
  cpx = x+11*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+11*H/24)
  cpx = x+18*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+11*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+18*H/24)
  cpx = x+1*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+19*H/24)
  cpx = x+9*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+19*H/24)
  cpx = x+10*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+18*H/24)
  cpx = x+10*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+12*H/24)
  cpx = x+10*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+11*H/24)
  cpx = x+2*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+11*H/24)
  cpx = x+1*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+12*H/24)
  cpx = x+1*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+18*H/24)
  ctx.stroke()
}

function need_helpAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/30
  ctx.strokeStyle = color
  ctx.lineCap = "round"
  ctx.lineJoin = "round"
 //1
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+22*H/24)
  cpx = x+10*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+20*H/24)
  cpx = x+10*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+15*H/24)
  cpx = x+9*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+12*H/24)
  cpx = x+3*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+12*H/24)
  cpx = x+3*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+14*H/24)
  cpx = x+6*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+14*H/24)
  cpx = x+6*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+15*H/24)
  cpx = x+5*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+20*H/24)
  ctx.stroke()
  //2
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+13.5*H/24)
  cpx = x+9*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+6*H/24)
  cpx = x+9*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+4*H/24)
  cpx = x+7*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+6*H/24)
  cpx = x+7*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+11*H/24)
  cpx = x+7*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+5*H/24)
  cpx = x+7*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+3*H/24)
  cpx = x+5*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+5*H/24)
  cpx = x+5*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+11*H/24)
  cpx = x+5*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+6*H/24)
  cpx = x+5*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+4*H/24)
  cpx = x+3*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+6*H/24)
  cpx = x+3*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+11*H/24)
  cpx = x+3*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+8*H/24)
  cpx = x+3*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+6*H/24)
  cpx = x+1*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+8*H/24)
  cpx = x+1*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+20*H/24)
  cpx = x+1*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+22*H/24)
  ctx.stroke()
  //2
  ctx.beginPath()
  ctx.moveTo(x+22*W/24, y+22*H/24)
  cpx = x+23*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+20*H/24)
  cpx = x+23*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+15*H/24)
  cpx = x+23*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+13*H/24)
  ctx.stroke()
  //5
  ctx.beginPath()
  ctx.moveTo(x+21*W/24, y+14*H/24)
  cpx = x+22*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+12*H/24)
  cpx = x+22*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+10*H/24)
  cpx = x+22*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+9*H/24)
  cpx = x+20*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+10*H/24)
  cpx = x+20*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+12*H/24)
  cpx = x+20*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+14*H/24)
  ctx.stroke()
  //6
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+10*H/24)
  cpx = x+20*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+9*H/24)
  cpx = x+20*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+8*H/24)
  cpx = x+18*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+9*H/24)
  cpx = x+18*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+12*H/24)
  cpx = x+18*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+14*H/24)
  cpx = x+20*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+12*H/24)
  ctx.stroke()
  //7
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+12*H/24)
  cpx = x+18*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+14*H/24)
  cpx = x+16*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+12*H/24)
  cpx = x+16*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+10*H/24)
  cpx = x+16*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+9*H/24)
  cpx = x+18*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+10*H/24)
  ctx.stroke()
//3
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+20*H/24)
  cpx = x+18*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+15*H/24)
  cpx = x+19*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+14*H/24)
  cpx = x+17*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+14*H/24)
  ctx.stroke()
  //10
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+12*H/24)
  ctx.lineTo(x+16*W/24, y+13*H/24)
  cpx = x+16*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+15*H/24)
  cpx = x+14*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+13*H/24)
  cpx = x+14*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+11*H/24)
  cpx = x+14*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+10*H/24)
  cpx = x+16*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+11*H/24)
  cpx = x+16*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+12*H/24)
  ctx.stroke()
  //11
  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+22*H/24)
  cpx = x+14*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+20*H/24)
  cpx = x+14*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+13*H/24)
  ctx.stroke()
}

function climate_changeAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let tempsdata = [[1901,-0.198], [1902,-0.396], [1903,-0.648], [1904,-0.774], [1905,-0.45], [1906,-0.288], [1907,-0.612], [1908,-0.738], [1909,-0.756], [1910,-0.666], [1911,-0.72], [1912,-0.594], [1913,-0.576], [1914,-0.252], [1915,-0.144], [1916,-0.54], [1917,-0.774], [1918,-0.54], [1919,-0.414], [1920,-0.414], [1921,-0.288], [1922,-0.414], [1923,-0.45], [1924,-0.414], [1925,-0.36], [1926,-0.126], [1927,-0.306], [1928,-0.288], [1929,-0.576], [1930,-0.198], [1931,-0.09], [1932,-0.216], [1933,-0.432], [1934,-0.18], [1935,-0.27], [1936,-0.198], [1937,-0.018], [1938,0.018], [1939,0.036], [1940,0.27], [1941,0.414], [1942,0.162], [1943,0.144], [1944,0.432], [1945,0.27], [1946,-0.072], [1947,0], [1948,-0.126], [1949,-0.108], [1950,-0.234], [1951,-0.054], [1952,0.09], [1953,0.18], [1954,-0.162], [1955,-0.216], [1956,-0.288], [1957,0.108], [1958,0.162], [1959,0.126], [1960,0.018], [1961,0.144], [1962,0.09], [1963,0.126], [1964,-0.306], [1965,-0.144], [1966,-0.054], [1967,0.018], [1968,-0.09], [1969,0.18], [1970,0.09], [1971,-0.108], [1972,0.108], [1973,0.342], [1974,-0.09], [1975,0.018], [1976,-0.09], [1977,0.36], [1978,0.18], [1979,0.36], [1980,0.558], [1981,0.63], [1982,0.306], [1983,0.63], [1984,0.342], [1985,0.288], [1986,0.396], [1987,0.612], [1988,0.72], [1989,0.504], [1990,0.81], [1991,0.756], [1992,0.432], [1993,0.486], [1994,0.594], [1995,0.864], [1996,0.63], [1997,0.882], [1998,1.134], [1999,0.738], [2000,0.738], [2001,0.99], [2002,1.116], [2003,1.134], [2004,1.008], [2005,1.26], [2006,1.188], [2007,1.17], [2008,0.972], [2009,1.206], [2010,1.332], [2011,1.098], [2012,1.17], [2013,1.224], [2014,1.35], [2015,1.638], [2016,1.854], [2017,1.692], [2018,1.566], [2019,1.764], [2020,1.818], [2021,1.548], [2022,1.62], [2023,2.142]]

  let i = 0, xinc = W/tempsdata.length, yscale = H/3
  // draw a bar for each temp: above below the xaxis
  for (; i < tempsdata.length; i++) {
    ctx.beginPath()
    ctx.moveTo(x+(i*xinc), y + yscale*2)
    ctx.lineTo(x+(i*xinc), y + yscale*2 - (tempsdata[i][1] * yscale))
    ctx.lineTo(x+(i*xinc)+xinc, y + yscale*2 - (tempsdata[i][1] * yscale))
    ctx.lineTo(x+(i*xinc)+xinc, y + yscale*2)
    ctx.closePath()
    if (tempsdata[i][1] < 0)
      ctx.fillStyle = '#0000FF'
    else
      ctx.fillStyle = '#ff0000'
    ctx.fill()

  } 
  ctx.fillStyle = color
  ctx.font = "800 italic "+W*0.047+"pt Garamond"
  ctx.fillText("Temperatures Worldwide: 1901 - 2023", x, y) // top
}

function flashlightAt (x,y,W,color,INVERT) {
  if (!INVERT)
     flashlightUAt(x,y,W,color)
  else
     flashlightIAt(x,y,W,color)
}

function flashlightIAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, d = 0, angle = 180

  //1
  ctx.globalAlpha /= 3
  //1
  ctx.beginPath()
  p = rotatePoint(x+22*W/24+pet(d), y+22*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+24*W/24+pet(d)
  cpy = y+22*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+24*W/24+pet(d), y+12*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+24*W/24+pet(d)
  cpy = y+2*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+22*W/24+pet(d), y+2*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+0*W/24+pet(d)
  cpy = y+6*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+0*W/24+pet(d), y+6*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+0*W/24+pet(d)
  cpy = y+18*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+0*W/24+pet(d), y+18*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+22*W/24+pet(d)
  cpy = y+22*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+22*W/24+pet(d), y+22*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()

  //2
  ctx.beginPath()
  p = rotatePoint(x+22*W/24+pet(d), y+22*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+24*W/24+pet(d)
  cpy = y+22*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+24*W/24+pet(d), y+12*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+24*W/24+pet(d)
  cpy = y+2*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+22*W/24+pet(d), y+2*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+20*W/24+pet(d)
  cpy = y+2*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+20*W/24+pet(d), y+12*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+20*W/24+pet(d)
  cpy = y+22*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+22*W/24+pet(d), y+22*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()
  ctx.globalAlpha *= 3
}

function flashlightUAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+9*H/24)
  cpx = x+0*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+15*H/24)
  cpx = x+17*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+15*H/24)
  cpx = x+16*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+9*H/24)
  cpx = x+1*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+9*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+15*H/24)
  cpx = x+18*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+17*H/24)
  cpx = x+21*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+7*H/24)
  cpx = x+18*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+9*H/24)
  ctx.stroke()

  //3
  ctx.globalAlpha /= 3
  ctx.beginPath()
  ctx.moveTo(x+22*W/24, y+17*H/24)
  cpx = x+21*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+7*H/24)
  cpx = x+24*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+24*W/24, y+6*H/24)
  cpx = x+24*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+24*W/24, y+18*H/24)
  cpx = x+22*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+17*H/24)
  ctx.fill()
  ctx.globalAlpha *= 3

  //4
  ctx.beginPath()
  ctx.moveTo(x+22*W/24, y+7*H/24)
  cpx = x+23*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+17*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+9*H/24)
  cpx = x+12*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+8*H/24)
  cpx = x+14*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+9*H/24)
  ctx.stroke()
}

function image_not_foundAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  
  let savedF = ctx.fillStyle
  let savedS = ctx.strokeStyle
 // ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  ctx.fillStyle = "#ffffff"
  let w = W/24
  
  ctx.fillRect(x,y,W,H*1.5)
  ctx.save()
  ctx.beginPath()
  ctx.moveTo(x+w,y+w)
  ctx.lineTo(x+W-w,y+w)
  ctx.lineTo(x+W-w,y+H*1.5-w)
  ctx.lineTo(x+w,y+H*1.5-w)
  ctx.closePath()
  ctx.clip()
  
  ctx.fillStyle = "#cccccc"
  let max = 24*18, off = w, row = 0
  let i = 0, x0 = x, y0 = y
  for (; i < max; i++) {
    if (row % 2 === 1)
      off = 0
    else
      off = w
    ctx.fillRect(x0,y0,w,w)
    x0 += 2*w
    if (x0 > x+W) {
      y0 += w
      x0 =  x+off
      row++
    }
  }
  ctx.restore()
  y += 6*H/24
  ctx.fillStyle = color
  //1
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+23*H/24)
  ctx.lineTo(x+23*W/24, y+23*H/24)
  ctx.lineTo(x+23*W/24, y+1*H/24)
  ctx.lineTo(x+1*W/24, y+1*H/24)
  ctx.lineTo(x+1*W/24, y+15*H/24)
  ctx.lineTo(x+2*W/24, y+15*H/24)
  ctx.lineTo(x+2*W/24, y+15*H/24)
  ctx.lineTo(x+2*W/24, y+2*H/24)
  ctx.lineTo(x+22*W/24, y+2*H/24)
  ctx.lineTo(x+22*W/24, y+16*H/24)
  ctx.lineTo(x+20*W/24, y+14*H/24)
  ctx.lineTo(x+15*W/24, y+20*H/24)
  ctx.lineTo(x+7*W/24, y+10*H/24)
  ctx.lineTo(x+2*W/24, y+15*H/24)
  ctx.lineTo(x+1*W/24, y+15*H/24)
  ctx.lineTo(x+1*W/24, y+15*H/24)
  ctx.lineTo(x+1*W/24, y+23*H/24)
  ctx.lineTo(x+1*W/24, y+23*H/24)
  ctx.fill()

  //2
  ctx.beginPath()
  ctx.arc(x+12.5*W/24, y+6.5*H/24,2.3*W/24,0,Math.PI*2)
  ctx.fill()
  ctx.fillStyle = savedF
  ctx.strokeStyle = savedS
}

function got_your_noseAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+9*H/24)
  cpx = x+4*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+11*H/24)
  cpx = x+4*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+13*H/24)
  cpx = x+6*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+15*H/24)
  cpx = x+7*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+16*H/24)
  cpx = x+7*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+17*H/24)
  cpx = x+2*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+17*H/24)
  cpx = x+6*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+17*H/24)
  cpx = x+7*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+18*H/24)
  cpx = x+7*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+19*H/24)
  cpx = x+6*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+21*H/24)
  cpx = x+6*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+23*H/24)
  cpx = x+0*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+0*W/24, y+23*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+9*H/24)
  cpx = x+6*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+5*H/24)
  cpx = x+7*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+3*H/24)
  cpx = x+7*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+1*H/24)
  cpx = x+1*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+0*W/24, y+1*H/24)
  ctx.stroke()
  //4
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+12*H/24)
  cpx = x+4*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+10*H/24)
  cpx = x+1*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+0*W/24, y+11*H/24)
  cpx = x+1*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+12*H/24)
  cpx = x+2*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+10*H/24)
  ctx.stroke()
  //hand
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+14*H/24)
  cpx = x+8*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+13*H/24)
  cpx = x+10*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+14*H/24)
  cpx = x+10*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+18*H/24)
  cpx = x+18*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+14*H/24)
  cpx = x+18*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+10*H/24)
  cpx = x+12*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+10*H/24)
  cpx = x+11*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+9*H/24)
  cpx = x+11*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+8*H/24)
  cpx = x+15*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+8*H/24)
  cpx = x+17*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+9*H/24)
  cpx = x+14*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+5*H/24)
  cpx = x+12.7*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+3*H/24)
  cpx = x+15*W/24
  cpy = y+2.7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+4*H/24)
  cpx = x+20*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+8*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+5*H/24)
  cpx = x+15.7*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+3*H/24)
  cpx = x+18*W/24
  cpy = y+2.7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+4*H/24)
  cpx = x+22*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+8*H/24)
  cpx = x+20*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+5*H/24)
  ctx.stroke()
  //3
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+5*H/24)
  cpx = x+18.7*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+3*H/24)
  cpx = x+21*W/24
  cpy = y+2.7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+4*H/24)
  cpx = x+24*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+24*W/24, y+6*H/24)
  ctx.stroke()

  //1
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+14*H/24)
  cpx = x+8*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+20*H/24)
  cpx = x+22*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+23*H/24)
  ctx.stroke()

x += 0.5*W/24
  //5 ball
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+13*H/24)
  cpx = x+7*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+11*H/24)
  cpx = x+7*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+9*H/24)
  cpx = x+11*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+11*H/24)
  cpx = x+11*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+13*H/24)
  ctx.stroke()
}

function fallout_shelterAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  let savedF = ctx.fillStyle
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  ctx.fillStyle = "#fbc110"

  //1 
  ctx.beginPath()
  ctx.moveTo(x+21*W/24, y+1*H/24)
  ctx.lineTo(x+21*W/24, y+19*H/24)
  ctx.lineTo(x+3*W/24, y+19*H/24)
  ctx.lineTo(x+3*W/24, y+1*H/24)
  cpx = x+3*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+0*H/24)
  cpx = x+20*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+0*H/24)
  cpx = x+21*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+1*H/24)
  ctx.fill()
 //2
  ctx.fillStyle = "#000000"
  ctx.beginPath()
  ctx.arc(x+12*W/24, y+9.7*H/24,8.7*W/24,0,Math.PI*2)
  ctx.fill()

  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+23*H/24)
  ctx.lineTo(x+3*W/24, y+19*H/24)
  ctx.lineTo(x+21*W/24, y+19*H/24)
  ctx.lineTo(x+21*W/24, y+23*H/24)
  cpx = x+21*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+24*H/24)
  cpx = x+4*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+24*H/24)
  cpx = x+3*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+23*H/24)
  ctx.fill()

   //1
  ctx.fillStyle = "#fbc110"
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+22*H/24)
  ctx.lineTo(x+16*W/24, y+22*H/24)
  ctx.lineTo(x+16*W/24, y+23*H/24)
  ctx.lineTo(x+18*W/24, y+21.5*H/24)
  ctx.lineTo(x+16*W/24, y+20*H/24)
  ctx.lineTo(x+16*W/24, y+21*H/24)
  ctx.lineTo(x+7*W/24, y+21*H/24)
  ctx.lineTo(x+7*W/24, y+22*H/24)
  ctx.fill()

  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+3*H/24)
  ctx.lineTo(x+16*W/24, y+3*H/24)
  ctx.lineTo(x+8*W/24, y+16.5*H/24)
  ctx.lineTo(x+4*W/24, y+9.7*H/24)
  ctx.lineTo(x+20*W/24, y+9.7*H/24)
  ctx.lineTo(x+16*W/24, y+16.5*H/24)
  ctx.lineTo(x+8*W/24, y+3*H/24)
  ctx.fill()
  let i = 0, x0, y0
  //ctx.globalAlpha *= 0.86
  for (;i < 21; i++) {
    x0 = x+4*W/24 + Math.random()*17*W/24
    y0 = y + Math.random()*H
    ctx.globalAlpha = 1
    chip2At(x0,y0,Math.random()*3,"#57e140")//eeedco
    ctx.globalAlpha = 0.5
    chip2At(x0,y0,2+Math.random()*4,"#57e140")//eeedco
  }/*
  i = 0
  for (;i < 4; i++) {
    x0 = x+4*W/24 + Math.random()*17*W/24
    y0 = y + Math.random()*H
    chip2At(x0,y0,2+Math.random()*5,"#88300a")
  }*/
  ctx.globalAlpha = 1
  ctx.fillStyle = savedF
}

function world_upside_downAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  //1
  ctx.beginPath()
  ctx.moveTo(x+6.3*W/24, y+9*H/24)
  cpx = x+12*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17.6*W/24, y+9*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+5*H/24)
  cpx = x+12*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+5*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+10*H/24)
  cpx = x+5*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+0*H/24)
  ctx.stroke()
  //4
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+10*H/24)
  cpx = x+18*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+0*H/24)
  ctx.stroke()
  //5
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+10*H/24)
  cpx = x+9*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+0*H/24)
  ctx.stroke()
  //6
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+10*H/24)
  cpx = x+15*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+0*H/24)
  ctx.stroke()
  //7
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+10*H/24)
  ctx.lineTo(x+12*W/24, y+0*H/24)
  ctx.stroke()
  //1
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+0*H/24)
  cpx = x+2*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+10*H/24)
  cpx = x+22*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+24*W/24, y+0*H/24)
  ctx.globalAlpha /= 4
  ctx.fill()
  ctx.globalAlpha *= 4
  ctx.stroke()
  let i = 0
  y -= 5*H/24
  let angles = []
  for (; i < 5; i++) 
    angles.push(Math.random()*360)
  i = 0
  ctx.globalAlpha /= 5
  for (; i < 4; i++) {
    if (i === 3)
      ctx.globalAlpha *= 5
    figureRotatedAt(x+2*W/24, y+15*H/24,W/8,color,angles[0]+=15)
    figureRotatedAt(x+11*W/24, y+17*H/24,W/8,color,angles[1]+=15)
    figureRotatedAt(x+19*W/24, y+13*H/24,W/8,color,angles[2]+=15)
    figureRotatedAt(x+5*W/24, y+20*H/24,W/8,color,angles[3]+=15)
    figureRotatedAt(x+17*W/24, y+19*H/24,W/8,color,angles[4]+=15)
    y += 1.5*H/24
  }
}

function credit_cardAt(x,y,W,color, INVERT) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W
  ctx.fillRect(x,y,W,H*1.5)
  ctx.save()
  ctx.beginPath()
  ctx.moveTo(x,y)
  ctx.lineTo(x+W,y)
  ctx.lineTo(x+W,y+H*1.5)
  ctx.lineTo(x,y+H*1.5)
  ctx.closePath()
  ctx.clip()
  let cx = W/2, cy = cx
  let off = document.createElement("CANVAS")
  let ctxoff = off.getContext("2d")
  off.width = canvas.width, off.height = canvas.height
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  // rotate off
  cx = off.width/1.5
  cy = 0
  ctxoff.translate(cx, cy)
  ctxoff.rotate(Math.PI / 2)
  if (!INVERT)
    cardsfrontAt(0,0,off.width, color, off)
  else
    cardsbackAt(0,0,off.width, color, off)
  ctxoff.translate(-cx, -cy)
  
  ctx.drawImage(off,0,0,off.width,off.height, x,y,W*1.5,H*1.5)
  if (!INVERT) {
  // if front, add logo and "Bank of <name>"
    ctx.font = "800 "+W*0.04+"pt Arial"
    ctx.fillStyle = "#ffffff"
    if (Math.random() > 0.5)
      butterfly_effectAt(x+7*W/24, y+13*H/24, 11*W/24, "#ffffff")
    else
      invisible_handAt(x+6.5*W/24, y+13*H/24, 11*W/24, "#ffffff")
    let n_ality = words.match(/\b\w{3,}(al)?ity\b/g)
    let name = "Bank of "+ capitalize(randomPick(n_ality))
    let w = ctx.measureText(name).width
    ctx.fillText(name, x+(W/2)-w/2, y+26*H/24)
    ctx.font = "800 "+W*0.06+"pt Arial"
    ctx.fillText("\u{267b}", x+1*W/24, y+35*H/24)
  }
  ctx.restore()
}

function tarjetas_rojasAt(x,y,W,color, INVERT) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W
  let savedLW = ctx.lineWidth
  let savedS = ctx.strokeStyle
  let savedF = ctx.fillStyle
  ctx.fillStyle = "#dd0000"
  ctx.fillRect(x,y,W,H*1.5)
  ctx.save()
  ctx.beginPath()
  ctx.moveTo(x,y)
  ctx.lineTo(x+W,y)
  ctx.lineTo(x+W,y+H*1.5)
  ctx.lineTo(x,y+H*1.5)
  ctx.closePath()
  ctx.clip()
  let cx = W/2, cy = cx
  let off = document.createElement("CANVAS")
  let ctxoff = off.getContext("2d")
  off.width = canvas.width, off.height = canvas.height
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  
  ctx.strokeStyle = "#ffffff"
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  ctx.fillStyle = "#dd0000"
  // rotate off
  cx = off.width/1.5
  cy = 0
  ctxoff.translate(cx, cy)
  ctxoff.rotate(Math.PI / 2)
  if (INVERT === undefined)
    INVERT = Math.random() > 0.5
  if (!INVERT)
    rcardAt(0,0,off.width, color, off, INVERT)
  else
    rcardAt(0,0,off.width, color, off, INVERT)
  ctxoff.translate(-cx, -cy)
  ctx.drawImage(off,0,0,off.width,off.height, x,y,W*1.5,H*1.5)
  ctx.restore()
  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
  ctx.lineWidth = savedLW
}

function rcardAt (x,y,W,color,canvas,INVERT) { // redcard
  if (!canvas)
    canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  let savedS = ctx.strokeStyle
  let savedF = ctx.fillStyle
  ctx.fillStyle = "#ffffff"
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  let xi = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]
let en = "I do not wish to speak with you, answer your questions, \
or sign or hand you any documents based on my 5th \
Amendment rights under the United States Constitution. \
I do not give you permission to enter my home based \
on my 4th Amendment rights under the United States \
Constitution unless you have a warrant to enter, signed \
by a judge or magistrate with my name on it that you slide \
under the door. \
I do not give you permission to search any of my \
belongings based on my 4th Amendment rights. \
I choose to exercise my constitutional rights. "

let es = "Usted tiene derechos constitucionales: \
• NO ABRA LA PUERTA si un agente de inmigración está tocando \
la puerta. \
• NO CONTESTE NINGUNA PREGUNTA de un agente de \
inmigración si trata de hablar con usted. Usted tiene el derecho a \
guardar silencio. \
• NO FIRME NADA sin antes hablar con un abogado. Usted tiene \
el derecho de hablar con un abogado. \
• Si usted está fuera de su casa, pregúntele al agente si tiene la \
libertad de irse y si le dice que sí, váyase con tranquilidad. \
• ENTRÉGUELE ESTA TARJETA EL AGENTE. Si usted está \
dentro de su casa, muestre la tarjeta por la ventana o pásela \
debajo de la puerta."
  let words = es.split(" ")
  if(INVERT)
    words = en.split(" ")
  let cx = canvas.width/1.5
  let cy = 60
  let fs = W*0.023
  ctx.font = "800 "+(fs) + "pt Garamond"
  let i = 0, w = 0, xoff = 90, yoff = 80//-100
  for (; i < words.length; i++) {
    ctx.fillText(words[i], x+xoff, y+yoff)
    xoff += ctx.measureText(words[i]).width+ctx.measureText(" ").width
    if (x+xoff > x+W * 0.75 || words[i].indexOf(".") >= 0) {
      xoff = 80
      yoff += fs*1.5
    }
    if (words[i].indexOf(".") >= 0)
      yoff += fs/2
  }
 // ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function cardsfrontAt (x,y,W,color,canvas) {
  if (!canvas)
    canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  let savedS = ctx.strokeStyle
  let savedF = ctx.fillStyle
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.fillStyle = "#cc0000"
  ctx.beginPath()
  ctx.moveTo(x+24*W/24, y+16*H/24)
  ctx.lineTo(x+0*W/24, y+16*H/24)
  ctx.lineTo(x+0*W/24, y+0*H/24)
  ctx.lineTo(x+24*W/24, y+0*H/24)
  ctx.lineTo(x+24*W/24, y+16*H/24)
  ctx.fill()
  //2
  ctx.lineWidth = 0.005*W
   //1
  ctx.beginPath()
  ctx.moveTo(x+4*W/32, y+8*H/32)
  ctx.lineTo(x+4*W/32, y+11*H/32)
  ctx.lineTo(x+8*W/32, y+11*H/32)
  ctx.lineTo(x+8*W/32, y+8*H/32)
  ctx.lineTo(x+4*W/32, y+8*H/32)
  ctx.strokeStyle = "#505050"
  ctx.stroke()
  ctx.fillStyle = "#bbbbbb"
  ctx.fill()
  //3
  ctx.lineWidth = 0.002*W
 // ctx.strokeStyle = "#808080"
  //2
  ctx.beginPath()
  ctx.moveTo(x+4*W/32, y+10*H/32)
  ctx.lineTo(x+5*W/32, y+10*H/32)
  ctx.lineTo(x+6*W/32, y+11*H/32)
  ctx.lineTo(x+7*W/32, y+10*H/32)
  ctx.lineTo(x+8*W/32, y+10*H/32)
  ctx.lineTo(x+8*W/32, y+9*H/32)
  ctx.lineTo(x+7*W/32, y+9*H/32)
  ctx.lineTo(x+6*W/32, y+8*H/32)
  ctx.lineTo(x+5*W/32, y+9*H/32)
  ctx.lineTo(x+4*W/32, y+9*H/32)
  ctx.stroke()
  //3
  ctx.beginPath()
  ctx.moveTo(x+5*W/32, y+9*H/32)
  ctx.lineTo(x+5*W/32, y+10*H/32)
  ctx.stroke()
  //4
  ctx.beginPath()
  ctx.moveTo(x+7*W/32, y+9*H/32)
  ctx.lineTo(x+7*W/32, y+10*H/32)
  ctx.stroke()
  
  ctx.lineWidth = W*0.01
  ctx.strokeStyle = "#ffffff"
  ctx.fillStyle = "#ffffff"
  ctx.beginPath()
  ctx.arc(x+6*W/32, y+7.5*H/32,W/140,0,Math.PI*2)
  ctx.fill()

  ctx.beginPath()
  ctx.arc(x+6*W/32, y+7.5*H/32,W/48,Math.PI*1.3,Math.PI*1.7)
  ctx.stroke()

  ctx.beginPath()
  ctx.arc(x+6*W/32, y+7.4*H/32,1.8*W/48,Math.PI*1.25,Math.PI*1.75)
  ctx.stroke()

  ctx.beginPath()
  ctx.arc(x+6*W/32, y+7.3*H/32,2.6*W/48,Math.PI*1.22,Math.PI*1.78)
  ctx.stroke()

  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function cardsbackAt (x,y,W,color, canvas) {
  if (!canvas)
    canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+0*H/24)
  ctx.lineTo(x+24*W/24, y+0*H/24)
  ctx.lineTo(x+24*W/24, y+16*H/24)
  ctx.lineTo(x+0*W/24, y+16*H/24)
  ctx.lineTo(x+0*W/24, y+0*H/24)
  ctx.stroke()
  ctx.fillStyle = "#ffeedd"
  ctx.fill()
  ctx.fillStyle = "#202000"
  //2
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+1*H/24)
  ctx.lineTo(x+24*W/24, y+1*H/24)
  ctx.lineTo(x+24*W/24, y+4*H/24)
  ctx.lineTo(x+0*W/24, y+4*H/24)
  ctx.fill()
  //3
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+10*H/24)
  ctx.lineTo(x+2*W/24, y+12*H/24)
  ctx.lineTo(x+10*W/24, y+12*H/24)
  ctx.lineTo(x+10*W/24, y+10*H/24)
  ctx.lineTo(x+2*W/24, y+10*H/24)
  ctx.stroke()
  let nums = [0,1,2,3,4,5,6,7,8,9], cn = []
  let i = 0
  for (;i < 16; i++) {
    if (i > 0 && i % 4 === 0)
      cn.push(" ")
    cn.push(randomPick(nums))
  }
  code = ""
  i = 0
  for (;i < 3; i++)
    code += randomPick(nums)
  
  ctx.font = "800 "+W*0.05+"pt Arial"
  ctx.fillText(cn.join(""), x+2*W/24, y+6*H/24)
  ctx.font = "800 "+W*0.03+"pt Arial"
  ctx.fillText("Valid Thru: 01/29", x+2*W/24, y+7.5*H/24)
  ctx.fillText("Sec Code: "+code, x+12*W/24, y+7.5*H/24)
  ctx.fillText(randomPick(names)+" "+randomPick(names), x+2*W/24, y+9*H/24)
  // phone numbers in bottom rt corner
  ctx.font = "800 "+W*0.012+"pt Arial"
  let w = ctx.measureText("US and Canada: 800-525-1009").width
  ctx.fillText("US and Canada: 800-525-1009", x+23.5*W/24-w, y+13.8*H/24)
  w = ctx.measureText("International: 1+800-525-1001").width
  ctx.fillText("International: 1+800-525-1001", x+23.5*W/24-w, y+14.5*H/24)
  w = ctx.measureText("Para Español: 800-525-1003").width
  ctx.fillText("Para Español: 800-525-1003", x+23.5*W/24-w, y+15.2*H/24)
  scriptAt(x+2*W/24, y+11*H/24, W/20 ,'#000000', 1, canvas)
}

function tearsAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "round"
  ctx.lineJoin = "round"
  let r = 10*W/24, r2 = r * 1.15, rcp = (r+r2)/2
  // rays from  arc below
  let x1,y1,x2,y2
  let cx = x+13*W/24
  let cy = y+3*H/24
  let i = 0, a = Math.PI*0.3, inc = (Math.PI*0.4)/21
  for (; i < 22; i++) {
    ctx.beginPath()
    x1 = cx + r * Math.cos(a)
    y1 = cy + r * Math.sin(a)
    ctx.moveTo(x1, y1) // point on original arc
    cpx = cx + rcp * Math.cos(a-inc/2)
    cpy = cy + rcp * Math.sin(a)
   // ctx.lineTo(cpx,cpy)
    x2 = cx + r2 * Math.cos(a+inc*1.5)
    y2 = cy + r2 * Math.sin(a+inc)
    //ctx.lineTo(x2,y2) // point on arc with larger radius
    ctx.quadraticCurveTo(cpx,cpy,x2,y2)
    ctx.stroke()
    a += inc
  }
  ctx.lineWidth *= 2
  ctx.beginPath()
  ctx.arc(x+13*W/24, y+3*H/24,r,Math.PI*0.3,Math.PI*0.7)
  ctx.stroke()
  ctx.lineWidth /= 2
  //2
  y += 3*H/24
  x -= W/24
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+12*H/24)
  cpx = x+10*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9.3*W/24, y+15*H/24)
  cpx = x+8.5*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+17*H/24)
  cpx = x+10*W/24
  cpy = y+18.3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+17*H/24)
  cpx = x+11.5*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10.7*W/24, y+15*H/24)
  cpx = x+10*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+12*H/24)
  ctx.globalAlpha /= 5
  ctx.fill()
  ctx.globalAlpha *= 5
  ctx.stroke()

  //3
  x += W/24
  y -= 3*H/24
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+6*H/24)
  cpx = x+4*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+2*H/24)
  cpx = x+17*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+4*H/24)
  ctx.lineWidth *= 5
  ctx.stroke()
}

function _9_11At (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "round"

  ctx.beginPath()
  ctx.moveTo(x+24*W/24, y+19*H/24)
  ctx.lineTo(x+24*W/24, y+24*H/24)
  ctx.lineTo(x+0*W/24, y+24*H/24)
  ctx.lineTo(x+0*W/24, y+19*H/24)
  ctx.lineTo(x+1*W/24, y+19*H/24)
  ctx.lineTo(x+1*W/24, y+18*H/24)
  ctx.lineTo(x+2*W/24, y+18*H/24)
  ctx.lineTo(x+2*W/24, y+19*H/24)
  ctx.lineTo(x+3*W/24, y+19*H/24)
  ctx.lineTo(x+3*W/24, y+20*H/24)
  ctx.lineTo(x+5*W/24, y+20*H/24)
  ctx.lineTo(x+5*W/24, y+1*H/24)
  ctx.lineTo(x+11*W/24, y+1*H/24)
  ctx.lineTo(x+11*W/24, y+20*H/24)
  ctx.lineTo(x+13*W/24, y+20*H/24)
  ctx.lineTo(x+13*W/24, y+1*H/24)
  ctx.lineTo(x+19*W/24, y+1*H/24)
  ctx.lineTo(x+19*W/24, y+20*H/24)
  ctx.lineTo(x+20*W/24, y+20*H/24)
  ctx.lineTo(x+20*W/24, y+18*H/24)
  ctx.lineTo(x+21*W/24, y+18*H/24)
  ctx.lineTo(x+22*W/24, y+16*H/24)
  ctx.lineTo(x+23*W/24, y+18*H/24)
  ctx.lineTo(x+23*W/24, y+19*H/24)
  ctx.lineTo(x+24*W/24, y+19*H/24)
  ctx.globalAlpha /= 4
  ctx.fill()
  ctx.globalAlpha *= 4

ctx.globalAlpha /= 2
  //7
  //10
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+19*H/24)
  ctx.lineTo(x+1*W/24, y+19*H/24)
  ctx.lineTo(x+1*W/24, y+18*H/24)
  ctx.lineTo(x+2*W/24, y+18*H/24)
  ctx.lineTo(x+2*W/24, y+19*H/24)
  ctx.lineTo(x+3*W/24, y+19*H/24)
  ctx.lineTo(x+3*W/24, y+20*H/24)
  ctx.lineTo(x+5*W/24, y+20*H/24)
  ctx.lineTo(x+5*W/24, y+17*H/24)
  ctx.lineTo(x+3*W/24, y+17*H/24)
  ctx.lineTo(x+3*W/24, y+14*H/24)
  ctx.lineTo(x+0*W/24, y+14*H/24)
  ctx.lineTo(x+0*W/24, y+19*H/24)
  ctx.fill()

  //8
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+20*H/24)
  ctx.lineTo(x+11*W/24, y+16*H/24)
  ctx.lineTo(x+12*W/24, y+16*H/24)
  ctx.lineTo(x+12*W/24, y+15*H/24)
  ctx.lineTo(x+13*W/24, y+15*H/24)
  ctx.lineTo(x+13*W/24, y+20*H/24)
  ctx.lineTo(x+11*W/24, y+20*H/24)
  ctx.fill()

  //9
  ctx.beginPath()
  ctx.moveTo(x+19*W/24, y+14*H/24)
  ctx.lineTo(x+21*W/24, y+14*H/24)
  ctx.lineTo(x+21*W/24, y+15*H/24)
  ctx.lineTo(x+22*W/24, y+15*H/24)
  ctx.lineTo(x+22*W/24, y+13*H/24)
  ctx.lineTo(x+24*W/24, y+13*H/24)
  ctx.lineTo(x+24*W/24, y+19*H/24)
  ctx.lineTo(x+23*W/24, y+19*H/24)
  ctx.lineTo(x+23*W/24, y+18*H/24)
  ctx.lineTo(x+22*W/24, y+16*H/24)
  ctx.lineTo(x+21*W/24, y+18*H/24)
  ctx.lineTo(x+20*W/24, y+18*H/24)
  ctx.lineTo(x+20*W/24, y+20*H/24)
  ctx.lineTo(x+19*W/24, y+20*H/24)
  ctx.lineTo(x+19*W/24, y+14*H/24)
  ctx.fill()
  ctx.globalAlpha *= 2

  //1
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+20*H/24)
  ctx.lineTo(x+0*W/24, y+19*H/24)
  ctx.lineTo(x+1*W/24, y+19*H/24)
  ctx.lineTo(x+1*W/24, y+18*H/24)
  ctx.lineTo(x+2*W/24, y+18*H/24)
  ctx.lineTo(x+2*W/24, y+19*H/24)
  ctx.lineTo(x+3*W/24, y+19*H/24)
  ctx.lineTo(x+3*W/24, y+20*H/24)
  ctx.lineTo(x+5*W/24, y+20*H/24)
  ctx.lineTo(x+5*W/24, y+1*H/24)
  ctx.lineTo(x+11*W/24, y+1*H/24)
  ctx.lineTo(x+11*W/24, y+20*H/24)
  ctx.lineTo(x+13*W/24, y+20*H/24)
  ctx.lineTo(x+13*W/24, y+1*H/24)
  ctx.lineTo(x+19*W/24, y+1*H/24)
  ctx.lineTo(x+19*W/24, y+20*H/24)
  ctx.lineTo(x+20*W/24, y+20*H/24)
  ctx.lineTo(x+20*W/24, y+18*H/24)
  ctx.lineTo(x+21*W/24, y+18*H/24)
  ctx.lineTo(x+22*W/24, y+16*H/24)
  ctx.lineTo(x+23*W/24, y+18*H/24)
  ctx.lineTo(x+23*W/24, y+19*H/24)
  ctx.lineTo(x+24*W/24, y+19*H/24)
  ctx.stroke()

  ctx.lineWidth *= 2
  //2
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+9*H/24)
  ctx.lineTo(x+3*W/24, y+9*H/24)
  ctx.lineTo(x+2.5*W/24, y+8.5*H/24)
  ctx.lineTo(x+2.5*W/24, y+9*H/24)
  ctx.lineTo(x+3*W/24, y+9*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+9*H/24)
  ctx.lineTo(x+3*W/24, y+11*H/24)
  ctx.lineTo(x+4*W/24, y+9*H/24)
  ctx.lineTo(x+3*W/24, y+7*H/24)
  ctx.lineTo(x+5*W/24, y+9*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+5*H/24)
  ctx.lineTo(x+21*W/24, y+5*H/24)
  ctx.lineTo(x+21*W/24, y+4.5*H/24)
  ctx.lineTo(x+20.5*W/24, y+5*H/24)
ctx.lineTo(x+20*W/24, y+5*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+21*W/24, y+3*H/24)
  ctx.lineTo(x+19*W/24, y+5*H/24)
  ctx.lineTo(x+21*W/24, y+7*H/24)
  ctx.lineTo(x+20*W/24, y+5*H/24)
  ctx.lineTo(x+21*W/24, y+3*H/24)
  ctx.stroke()
}

function disco_ballAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas");
  let ctx = canvas.getContext("2d");
  let cx = W/2, H = W, cy = H/2
  ctx.fillStyle = color // randomize fills
  ctx.strokeStyle = color 
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/40
  let i = 0, r = 0, w = W/24
  //draw rects in rows centered on cx

  ctx.lineWidth *= 2
  ctx.beginPath()
  ctx.arc(x+cx, y+cy, 11*W/24, 0, Math.PI*2)
  ctx.stroke()
//2
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+1*H/24)
  ctx.lineTo(x+12*W/24, y-1*H/24)
  ctx.stroke()
  ctx.lineWidth /= 2
  ctx.save()
  ctx.beginPath()
  ctx.arc(x+cx, y+cy, 11*W/24, 0, Math.PI*2)
  ctx.closePath()
  ctx.clip()
  let a = ctx.globalAlpha
  let x1 = x+cx, y1 = y, off = 0
  for (; r < 23; r++) {
    i = 0;
    x1 = x
    for(; i < 24; i++) {
      ctx.strokeRect(x1+off,y1+1.5*H/24,w,w)
      if (Math.random() > 0.5) {
        ctx.globalAlpha = 0.2 + Math.random() *0.5
        ctx.fillRect(x1+off,y1+1.5*H/24,w,w)
        ctx.globalAlpha = a
      }
      x1 += w
    }
    if (r % 2 === 1)
      off = 0
    else
      off = w/2
    y1 += H/24
  }
  ctx.restore()

}

function mulletAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/40
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+0*H/24)
  cpx = x+1*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+2*H/24)
  cpx = x+12*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+2*H/24)
  cpx = x+21*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+10*H/24)
  cpx = x+21*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+21*H/24)
  cpx = x+21*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+23*H/24)
  cpx = x+17*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+23*H/24)
  cpx = x+15*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+21*H/24)
  cpx = x+15*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+13*H/24)
  cpx = x+16*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+10*H/24)
  cpx = x+16*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+8*H/24)
  cpx = x+12*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+11*H/24)
  cpx = x+11*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+11*H/24)
  cpx = x+11*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+7*H/24)
  cpx = x+11*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+6*H/24)
  cpx = x+6*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+6*H/24)
  cpx = x+1*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+0*H/24)
  ctx.globalAlpha /=3
  ctx.fill()
  ctx.globalAlpha *= 3
  ctx.stroke()

  //2
 ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+6*H/24)
  cpx = x+3*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+11*H/24)
  cpx = x+2*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+14*H/24)
  cpx = x+3*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+15*H/24)
  cpx = x+2*W/24
  cpy = y+15.5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+16*H/24)
  cpx = x+2*W/24
  cpy = y+16.5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+17*H/24)
  cpx = x+3*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+21*H/24)
  cpx = x+3*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+23*H/24)
  ctx.stroke()
}

function pitted_olive_that_yet_has_a_pitAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/30
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
   //4
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+23*H/24)
  cpx = x+22*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+8*H/24)
  cpx = x+23*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+1*H/24)
  cpx = x+2*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+14*H/24)
  cpx = x+1*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+23*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+8*H/24)
  cpx = x+20*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+6*H/24)
  cpx = x+20*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+4*H/24)
  cpx = x+16*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+6*H/24)
  cpx = x+16*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+8*H/24)
  ctx.fillStyle = color
  ctx.globalAlpha /= 3
  ctx.fill()
  ctx.globalAlpha *= 3

  ctx.stroke()
}

function lobotomyAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = 'red'
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  //9
  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+4*H/24)
  cpx = x+15*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+2*H/24)
  cpx = x+15*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+0*H/24)
  cpx = x+8*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+2*H/24)
  cpx = x+8*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+4*H/24)
  cpx = x+8*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+6*H/24)
  cpx = x+17*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+5*H/24)
  cpx = x+17*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+4*H/24)
  cpx = x+15*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+2*H/24)
  ctx.fill()
  //1
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+24*H/24)
  cpx = x+2*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+13*H/24)
  cpx = x+10*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+11*H/24)
  cpx = x+8*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8.3*W/24, y+7*H/24)
  cpx = x+15*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14.7*W/24, y+7*H/24)
  cpx = x+15*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+11*H/24)
  cpx = x+13*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+13*H/24)
  cpx = x+22*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+24*H/24)
  ctx.stroke()
  //2
  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+4*H/24)
  cpx = x+15*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+2*H/24)
  cpx = x+15*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+0*H/24)
  cpx = x+8*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+2*H/24)
  cpx = x+8*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+4*H/24)
  cpx = x+8*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+6*H/24)
  cpx = x+17*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+5*H/24)
  cpx = x+17*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+4*H/24)
  cpx = x+15*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+2*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+4*H/24)
  cpx = x+12*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+4*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+5.5*W/24, y+22*H/24)
  ctx.lineTo(x+5.5*W/24, y+24*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+18.5*W/24, y+22*H/24)
  ctx.lineTo(x+18.5*W/24, y+24*H/24)
  ctx.stroke()
  ctx.font = (W*0.05)+"pt Times New Roman"
  ctx.fillStyle = 'white'
  ctx.fillText("MAGA",x+9.2*W/24, y+3.4*H/24)
}

function toaster_falling_into_bathtubAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  bathtubAt (x,y,W,color)
  let x0 = x+12*W/24, y0 = y+2*H/24
  toasterAt(x+W/2-W/6+pet(W/2), y+H/4+pet(H/3), W/3, color, x0,y0)
}

function bathtubAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  let savedF =  ctx.fillStyle

  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.beginPath()
  ctx.moveTo(x+4.2*W/24, y+10*H/24)
  ctx.lineTo(x+4.2*W/24, y+0*H/24)
  ctx.stroke()
  //1
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+0*H/24)
  ctx.lineTo(x+13*W/24, y+0*H/24)
  ctx.lineTo(x+13*W/24, y+3*H/24)
  ctx.lineTo(x+11*W/24, y+3*H/24)
  ctx.lineTo(x+11*W/24, y+0*H/24)
  ctx.stroke()

  //1
  ctx.beginPath()
  ctx.arc(x+12*W/24, y+1*H/24,W/48,0,Math.PI*2)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+11.85*W/24, y+0.75*H/24)
  ctx.lineTo(x+11.85*W/24, y+1.1*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+12.15*W/24, y+0.75*H/24)
  ctx.lineTo(x+12.15*W/24, y+1.1*H/24)
  ctx.stroke()
  //2
  ctx.beginPath()
  ctx.arc(x+12*W/24, y+2*H/24,W/48,0,Math.PI*2)
  ctx.stroke()
  //1
  ctx.globalAlpha /= 4
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+16*H/24)
  cpx = x+18*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+16*H/24)
  cpx = x+19*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+14*H/24)
  cpx = x+21*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+12*H/24)
  cpx = x+7*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+12*H/24)
  cpx = x+6*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+14*H/24)
  cpx = x+4*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+16*H/24)
  ctx.stroke()
  ctx.fill()
  ctx.globalAlpha *= 4
  //1
  ctx.beginPath()
  ctx.moveTo(x+3.6*W/24, y+11*H/24)
  ctx.lineTo(x+4.2*W/24, y+10*H/24)
  ctx.lineTo(x+24*W/24, y+10*H/24)
  ctx.lineTo(x+24*W/24, y+17*H/24)
  ctx.lineTo(x+20*W/24, y+24*H/24)
  ctx.lineTo(x+0*W/24, y+24*H/24)
  ctx.lineTo(x+0*W/24, y+17*H/24)
  ctx.lineTo(x+3*W/24, y+12*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+24*H/24)
  ctx.lineTo(x+20*W/24, y+17*H/24)
  ctx.lineTo(x+24*W/24, y+10*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+17*H/24)
  ctx.lineTo(x+19*W/24, y+17*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+15*H/24)
  cpx = x+2.2*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+16*H/24)
  cpx = x+18*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+16*H/24)
  cpx = x+19*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+14*H/24)
  cpx = x+21*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+12*H/24)
  cpx = x+21*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+11*H/24)
  cpx = x+6*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+11*H/24)
  cpx = x+5*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4.9*W/24, y+11.3*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+15*H/24)
  ctx.lineTo(x+4*W/24, y+13.1*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+11*H/24)
  ctx.lineTo(x+4*W/24, y+11*H/24)
  ctx.lineTo(x+4*W/24, y+11*H/24)
  cpx = x+5*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+12*H/24)
  cpx = x+5*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+13*H/24)
  cpx = x+4*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+13*H/24)
  cpx = x+4.2*W/24
  cpy = y+11.8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+12*H/24)
  cpx = x+2*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+12*H/24)
  cpx = x+1.4*W/24
  cpy = y+11.5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+11*H/24)
  ctx.stroke()
  ctx.fillStyle = savedF
}

function toasterAt (x,y,W,color, x0,y0) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  let savedF = ctx.fillStyle
  ctx.fillStyle = savedF

  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, d = 0, angle = Math.random() * 365
  x -= W/24

  ////// fixed point and cpx/y w/ rotated end point
  ctx.lineWidth *= 1.2
  ctx.beginPath()
  ctx.moveTo(x0, y0) // outlet must be absolute pos
  cpx = x+12*W/24+pet(8*W/24)
  cpy = y0-2*W/24//+0*H/24+pet(d)
  p = rotatePoint(x+16*W/24+pet(d), y+16*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cpx,cpy,p[0],p[1])
  ctx.stroke()
  ctx.lineWidth /= 1.2
  ///////
x += W/24
  //1
  ctx.beginPath()
  p = rotatePoint(x+2*W/24+pet(d), y+8*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+2*W/24+pet(d), y+11*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+1*W/24+pet(d), y+11*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+1*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+2*W/24+pet(d), y+12.5*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+2*W/24+pet(d), y+17*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+7*W/24+pet(d), y+20*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+22.5*W/24+pet(d), y+20*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+22.5*W/24+pet(d), y+11*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  cpx = x+22.5*W/24+pet(d)
  cpy = y+10*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+16*W/24+pet(d), y+7*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+3*W/24+pet(d)
  cpy = y+7*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+3*W/24+pet(d), y+7*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+2*W/24+pet(d)
  cpy = y+7*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+2*W/24+pet(d), y+8*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()
  x -= W/24
  
  ctx.beginPath()
  p = rotatePoint(x+5.5*W/24, y+10.5*H/24 ,cx,cy,angle)

  ctx.ellipse(p[0],p[1], 0.7*W/24, 1*W/24, angle*Math.PI/180, 0,Math.PI*2)
  ctx.stroke()

  ctx.beginPath()
  p = rotatePoint(x+6*W/24+pet(d), y+13*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+6*W/24+pet(d), y+14*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()
  //1
  ctx.beginPath()
  p = rotatePoint(x+2*W/24+pet(d), y+11*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+4*W/24+pet(d), y+11*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+8*W/24+pet(d), y+13*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+6*W/24+pet(d), y+13*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+2*W/24+pet(d), y+11*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+2*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+6*W/24+pet(d), y+14*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+8*W/24+pet(d), y+14*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+8*W/24+pet(d), y+13*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //2
  ctx.beginPath()
  p = rotatePoint(x+3*W/24+pet(d), y+8*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+3*W/24+pet(d), y+11*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //3
  ctx.beginPath()
  p = rotatePoint(x+3*W/24+pet(d), y+12.5*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+3*W/24+pet(d), y+17*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+8*W/24+pet(d), y+20*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+8*W/24+pet(d), y+11*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //4
  ctx.beginPath()
  p = rotatePoint(x+8*W/24+pet(d), y+20*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+23.5*W/24+pet(d), y+20*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+23.5*W/24+pet(d), y+11*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //5
  ctx.beginPath()
  p = rotatePoint(x+23.5*W/24+pet(d), y+11*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+23.5*W/24+pet(d)
  cpy = y+10*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+22*W/24+pet(d), y+10*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+9*W/24+pet(d)
  cpy = y+10*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+9*W/24+pet(d), y+10*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+8*W/24+pet(d)
  cpy = y+10*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+8*W/24+pet(d), y+11*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()

  //6
  ctx.beginPath()
  p = rotatePoint(x+3*W/24+pet(d), y+8*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+3*W/24+pet(d)
  cpy = y+7*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+4*W/24+pet(d), y+7*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+17*W/24+pet(d)
  cpy = y+7*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+17*W/24+pet(d), y+7*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+23*W/24+pet(d)
  cpy = y+10.1*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+23*W/24+pet(d), y+10.2*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()

  ctx.lineWidth *= 1.3
  //7
  ctx.beginPath()
  p = rotatePoint(x+7*W/24+pet(d), y+8*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+17*W/24+pet(d)
  cpy = y+8*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+17*W/24+pet(d), y+8*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()

  //8
  ctx.beginPath()
  p = rotatePoint(x+9*W/24+pet(d), y+9*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+19*W/24+pet(d)
  cpy = y+9*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+19*W/24+pet(d), y+9*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()
  ctx.lineWidth /= 1.3
  //9
  ctx.beginPath()
  p = rotatePoint(x+5.5*W/24+pet(d), y+17*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])

  p = rotatePoint(x+5.5*W/24+pet(d), y+13.8*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()
}

function spankedAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  spankhandAt(x+3*W/24, y+-1.5*H/24, W/1.5,color)
  //1
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+14*H/24)
  cpx = x+7*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+14*H/24)
  cpx = x+17*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+21*H/24)
  cpx = x+14*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+24*H/24)
  ctx.stroke()
  //2
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+17*H/24)
  cpx = x+14*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+24*H/24)
  ctx.stroke()
  //3
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+23*H/24)
  cpx = x+2*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+23*H/24)
  cpx = x+3*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+24*H/24)
  ctx.stroke()
}

function spankhandAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, d = 0, angle = -45
  //2
  ctx.beginPath()
  p = rotatePoint(x+28*W/24+pet(d), y+22*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+10*W/24+pet(d)
  cpy = y+20*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+10*W/24+pet(d), y+20*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+5*W/24+pet(d)
  cpy = y+20*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+5*W/24+pet(d), y+16*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+5*W/24+pet(d)
  cpy = y+9*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+5*W/24+pet(d), y+9*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+5*W/24+pet(d)
  cpy = y+7*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+6*W/24+pet(d), y+7*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+7*W/24+pet(d)
  cpy = y+7*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+7*W/24+pet(d), y+9*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+7*W/24+pet(d)
  cpy = y+12*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+7*W/24+pet(d), y+12*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+7*W/24+pet(d)
  cpy = y+7*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+7*W/24+pet(d), y+7*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+7*W/24+pet(d)
  cpy = y+5*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+8*W/24+pet(d), y+5*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+9*W/24+pet(d)
  cpy = y+5*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+9*W/24+pet(d), y+7*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+9*W/24+pet(d)
  cpy = y+11*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+9*W/24+pet(d), y+11*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+9*W/24+pet(d)
  cpy = y+6*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+9*W/24+pet(d), y+6*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+9*W/24+pet(d)
  cpy = y+4*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+10*W/24+pet(d), y+4*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+11*W/24+pet(d)
  cpy = y+4*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+11*W/24+pet(d), y+6*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+11*W/24+pet(d)
  cpy = y+11*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+11*W/24+pet(d), y+11*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+11*W/24+pet(d)
  cpy = y+7*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+11*W/24+pet(d), y+7*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+11*W/24+pet(d)
  cpy = y+5*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24+pet(d), y+5*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+13*W/24+pet(d)
  cpy = y+5*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+13*W/24+pet(d), y+7*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+13*W/24+pet(d)
  cpy = y+12*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+13*W/24+pet(d), y+12.5*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+14*W/24+pet(d)
  cpy = y+9*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+15*W/24+pet(d), y+9*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+16*W/24+pet(d)
  cpy = y+9*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+16*W/24+pet(d), y+10*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+14.5*W/24+pet(d)
  cpy = y+12*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+15*W/24+pet(d), y+15*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+14*W/24+pet(d)
  cpy = y+20*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+10*W/24+pet(d), y+20*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()
  //11
  ctx.beginPath()
  p = rotatePoint(x+12*W/24+pet(d), y+13*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+9*W/24+pet(d)
  cpy = y+13*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+9*W/24+pet(d), y+17*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()
  //4
  ctx.beginPath()
  p = rotatePoint(x+15*W/24+pet(d), y+15*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+21*W/24+pet(d)
  cpy = y+15*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+28*W/24+pet(d), y+14*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()
}

function rpencilAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, d = 0, angle = 45

  //7
  ctx.beginPath()
  p = rotatePoint(x+9*W/24+pet(d), y+4*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+15*W/24+pet(d), y+4*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()
  //1
  ctx.beginPath()
  p = rotatePoint(x+9*W/24+pet(d), y+18*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+9*W/24+pet(d), y+4*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+12*W/24+pet(d), y+0*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+15*W/24+pet(d), y+4*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+15*W/24+pet(d), y+18*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  cpx = x+15*W/24+pet(d)
  cpy = y+19*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+14*W/24+pet(d), y+19*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+10*W/24+pet(d)
  cpy = y+19*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+10*W/24+pet(d), y+19*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+9*W/24+pet(d)
  cpy = y+19*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+9*W/24+pet(d), y+18*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()

  //2
  ctx.beginPath()
  p = rotatePoint(x+9*W/24+pet(d), y+15*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+15*W/24+pet(d), y+15*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //3
  ctx.beginPath()
  p = rotatePoint(x+9*W/24+pet(d), y+14*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+15*W/24+pet(d), y+14*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //4
  ctx.beginPath()
  p = rotatePoint(x+9*W/24+pet(d), y+13*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+15*W/24+pet(d), y+13*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //5
  ctx.beginPath()
  p = rotatePoint(x+11*W/24+pet(d), y+4*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+11*W/24+pet(d), y+13*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //6
  ctx.beginPath()
  p = rotatePoint(x+13*W/24+pet(d), y+4*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+13*W/24+pet(d), y+13*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //7
  ctx.beginPath()
  p = rotatePoint(x+9*W/24+pet(d), y+4*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+15*W/24+pet(d), y+4*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  ctx.beginPath()
  p = rotatePoint(x+9*W/24+pet(d), y+16*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+15*W/24+pet(d), y+16*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()
  //5
  ctx.beginPath()
  p = rotatePoint(x+11.2*W/24+pet(d), y+1*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+12*W/24+pet(d), y+0*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+12.8*W/24+pet(d), y+1*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.fill()

  //6
  ctx.globalAlpha /= 3
  ctx.beginPath()
  p = rotatePoint(x+9*W/24+pet(d), y+18*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+9*W/24+pet(d), y+16*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+15*W/24+pet(d), y+16*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+15*W/24+pet(d), y+18*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  cpx = x+15*W/24+pet(d)
  cpy = y+19*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+14*W/24+pet(d), y+19*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+10*W/24+pet(d)
  cpy = y+19*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+10*W/24+pet(d), y+19*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+9*W/24+pet(d)
  cpy = y+19*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+9*W/24+pet(d), y+18*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+9*W/24+pet(d)
  cpy = y+16*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+9*W/24+pet(d), y+16*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()
  ctx.globalAlpha *= 3
}

function sizesAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  //2
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+9*H/24)
  ctx.lineTo(x+6*W/24, y+9*H/24)
  ctx.lineTo(x+6*W/24, y+15*H/24)
  ctx.lineTo(x+0*W/24, y+15*H/24)
  ctx.lineTo(x+0*W/24, y+9*H/24)
  ctx.lineTo(x+1*W/24, y+9*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+9*H/24)
  ctx.lineTo(x+2*W/24, y+15*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+9*H/24)
  ctx.lineTo(x+4*W/24, y+15*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+11*H/24)
  ctx.lineTo(x+6*W/24, y+11*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+13*H/24)
  ctx.lineTo(x+6*W/24, y+13*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+24*W/24, y+10*H/24)
  ctx.lineTo(x+20*W/24, y+10*H/24)
  ctx.lineTo(x+20*W/24, y+14*H/24)
  ctx.lineTo(x+24*W/24, y+14*H/24)
  ctx.lineTo(x+24*W/24, y+6*H/24)
  ctx.lineTo(x+20*W/24, y+6*H/24)
  ctx.lineTo(x+12*W/24, y+6*H/24)
  ctx.lineTo(x+12*W/24, y+10*H/24)
  ctx.lineTo(x+16*W/24, y+10*H/24)
  ctx.lineTo(x+16*W/24, y+6*H/24)
  ctx.lineTo(x+20*W/24, y+6*H/24)
  ctx.lineTo(x+20*W/24, y+10*H/24)
  ctx.lineTo(x+16*W/24, y+10*H/24)
  ctx.lineTo(x+16*W/24, y+14*H/24)
  ctx.lineTo(x+20*W/24, y+14*H/24)
  ctx.lineTo(x+20*W/24, y+18*H/24)
  ctx.lineTo(x+12*W/24, y+18*H/24)
  ctx.lineTo(x+12*W/24, y+14*H/24)
  ctx.lineTo(x+16*W/24, y+14*H/24)
  ctx.lineTo(x+16*W/24, y+18*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+18*H/24)
  ctx.lineTo(x+20*W/24, y+18*H/24)
  ctx.lineTo(x+24*W/24, y+18*H/24)
  ctx.lineTo(x+24*W/24, y+13*H/24)
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+9*H/24)
  ctx.lineTo(x+12*W/24, y+6*H/24)
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+15*H/24)
  ctx.lineTo(x+12*W/24, y+18*H/24)
  ctx.stroke()

  //11
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+11*H/24)
  ctx.lineTo(x+12*W/24, y+10*H/24)
  ctx.stroke()

  //12
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+13*H/24)
  ctx.lineTo(x+12*W/24, y+14*H/24)
  ctx.stroke()

  //13
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+8*H/24)
  ctx.lineTo(x+8*W/24, y+16*H/24)
  ctx.stroke()

  //14
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+7*H/24)
  ctx.lineTo(x+10*W/24, y+17*H/24)
  ctx.stroke()

  ///17
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+10*H/24)
  ctx.lineTo(x+12*W/24, y+14*H/24)
  ctx.stroke()
  document.getElementById("featuresize").value *= 3
  catAt(x+0*W/24, y+9*H/24,6*W/24,color)

  catAt(x+15*W/24, y+12*H/24,6*W/24,color)
  document.getElementById("featuresize").value /= 3
}

function erasedAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  let savedF = ctx.fillStyle
  ctx.strokeStyle = color
  ctx.fillStyle = color
 
  //1
  rpencilAt(x+1*W/24, y-2*W/24, W/1, color)
  ctx.lineCap = "round"
  ctx.lineJoin = "round"
  //15
  let words = ["Mother","America","Science","Fairness","Truth","Kindness","Honesty","Peace","Love"]
  let wrd = randomPick(words)
  ctx.font = (W*0.15)+"pt Garamond"
  let w = ctx.measureText(wrd).width
  ctx.fillText(wrd,x+(W/2-w/2), y+21*H/24)
  ctx.fillStyle = color
  ctx.globalAlpha *= 0.77
  ctx.lineWidth = 1.5*W/24
  ctx.strokeStyle = savedF
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+19.5*H/24)
  ctx.lineTo(x+12*W/24, y+18.8*H/24)
  ctx.lineTo(x+11*W/24, y+20.4*H/24)
  ctx.lineTo(x+22*W/24, y+19.4*H/24)
  ctx.stroke()

  ctx.globalAlpha /= 0.77
  ctx.globalAlpha *= 0.6

  ctx.shadowBlur = 3
  ctx.shadowColor = color
  ctx.shadowOffsetX = 2
  ctx.shadowOffsetY  = 2
  let i = 0, cx, cy
  for (; i < 48; i++) {
    cx = Math.random()*W
    cy = y+18.7*H/24 + pet(1.3*H/24)
    cx = Math.random()*W
    cy = y+18.7*H/24 + pet(8*H/24)
    chip2At (x+cx,+cy,W/250+Math.random()*W/400,color)
  }
  i = 0
  for (; i < 44; i++) {
    cx = Math.random()*W*0.8
    cy = y+16.7*H/24 + pet(8*H/24)
    chip2At (x+cx,+cy,W/220+Math.random()*W/400,color)
  }
  ctx.shadowBlur = 0
  ctx.shadowOffsetX = 0
  ctx.shadowOffsetY  = 0
  ctx.strokeStyle = color
  ctx.globalAlpha /= 0.6

}

function water_cycleAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  //17
  ctx.globalAlpha /= 4
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+16*H/24)
  ctx.lineTo(x+12*W/24, y+16*H/24)
  cpx = x+12*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+0*W/24, y+24*H/24)
  ctx.fill()
  ctx.globalAlpha *= 4
  //13 return to sea
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+11*H/24)
  cpx = x+13*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+8.5*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+10*H/24)
  ctx.lineTo(x+12*W/24, y+11*H/24)
  ctx.lineTo(x+13*W/24, y+11*H/24)
  ctx.stroke()

  //11 wind
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+11*H/24)
  ctx.lineTo(x+8*W/24, y+11*H/24)
  cpx = x+10*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+9*H/24)
  cpx = x+10*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+5*H/24)
  cpx = x+10*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+3*H/24)
  ctx.stroke()

  //12
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+2*H/24)
  ctx.lineTo(x+12*W/24, y+3*H/24)
  ctx.lineTo(x+11*W/24, y+4*H/24)
  ctx.stroke()

  //5 rays
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+0.25*H/24)
  ctx.lineTo(x+3*W/24, y+0*H/24)
  ctx.stroke()

  //16
  ctx.beginPath()
  ctx.moveTo(x+0.25*W/24, y+3*H/24)
  ctx.lineTo(x+0*W/24, y+3*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+1*H/24)
  ctx.lineTo(x+0*W/24, y+0*H/24)
  ctx.stroke()
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+1*H/24)
  ctx.lineTo(x+6*W/24, y+0*H/24)
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+5*H/24)
  ctx.lineTo(x+0*W/24, y+6*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+6*H/24)
  ctx.lineTo(x+3*W/24, y+8*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+5*H/24)
  ctx.lineTo(x+7*W/24, y+7*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+3*H/24)
  ctx.lineTo(x+8*W/24, y+3*H/24)
  ctx.stroke()
  //1
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+16*H/24)
  ctx.lineTo(x+12*W/24, y+16*H/24)
  cpx = x+12*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+0*W/24, y+24*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+16*H/24)
  cpx = x+12*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+24*W/24, y+8*H/24)
  ctx.stroke()
  //3
  ctx.beginPath()
  ctx.arc(x+3*W/24, y+3*H/24,2*W/24,0,Math.PI*2)
  ctx.stroke()
  //4
  ctx.beginPath()
  ctx.moveTo(x+22*W/24, y+4*H/24)
  cpx = x+23*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+3*H/24)
  cpx = x+23*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+2*H/24)
  cpx = x+21*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+1*H/24)
  cpx = x+17*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+2*H/24)
  cpx = x+15*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+3*H/24)
  cpx = x+15*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+4*H/24)
  cpx = x+22*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+4*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+18*H/24)
  ctx.lineTo(x+6*W/24, y+13*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+14*H/24)
  ctx.lineTo(x+6*W/24, y+13*H/24)
  ctx.lineTo(x+7*W/24, y+14*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+18*H/24)
  ctx.lineTo(x+2*W/24, y+13*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+14*H/24)
  ctx.lineTo(x+2*W/24, y+13*H/24)
  ctx.lineTo(x+3*W/24, y+14*H/24)
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+18*H/24)
  ctx.lineTo(x+10*W/24, y+14*H/24)
  ctx.lineTo(x+10*W/24, y+13*H/24)
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+14*H/24)
  ctx.lineTo(x+10*W/24, y+13*H/24)
  ctx.lineTo(x+11*W/24, y+14*H/24)
  ctx.stroke()

 ctx.setLineDash([1*W/50])
  //11
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+4*H/24)
  ctx.lineTo(x+17*W/24, y+9.2*H/24)
  ctx.stroke()

  //12
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+4*H/24)
  ctx.lineTo(x+16*W/24, y+9.9*H/24)
  ctx.stroke()

  //13
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+4*H/24)
  ctx.lineTo(x+18*W/24, y+9*H/24)
  ctx.stroke()

  //14
  ctx.beginPath()
  ctx.moveTo(x+19*W/24, y+4*H/24)
  ctx.lineTo(x+19*W/24, y+8.8*H/24)
  ctx.stroke()

  //15
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+4*H/24)
  ctx.lineTo(x+20*W/24, y+8.7*H/24)
  ctx.stroke()

  //16
  ctx.beginPath()
  ctx.moveTo(x+21*W/24, y+4*H/24)
  ctx.lineTo(x+21*W/24, y+8.3*H/24)
  ctx.stroke()

  //17
  ctx.beginPath()
  ctx.moveTo(x+22*W/24, y+4*H/24)
  ctx.lineTo(x+22*W/24, y+8.2*H/24)
  ctx.stroke()
  ctx.setLineDash([])
}

function rentre_chez_toi_com_ta_mère_a_fait_des_gaufresAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.globalAlpha /=3
  //1
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+4*H/24)
  ctx.lineTo(x+8*W/24, y+4*H/24)
  ctx.lineTo(x+8*W/24, y+5*H/24)
  ctx.lineTo(x+5*W/24, y+5*H/24)
  ctx.lineTo(x+5*W/24, y+8*H/24)
  ctx.lineTo(x+4*W/24, y+8*H/24)
  ctx.fill()

  //2
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+4*H/24)
  ctx.lineTo(x+14*W/24, y+4*H/24)
  ctx.lineTo(x+14*W/24, y+5*H/24)
  ctx.lineTo(x+11*W/24, y+5*H/24)
  ctx.lineTo(x+11*W/24, y+8*H/24)
  ctx.lineTo(x+10*W/24, y+8*H/24)
  ctx.lineTo(x+10*W/24, y+4*H/24)
  ctx.fill()

  //3
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+4*H/24)
  ctx.lineTo(x+20*W/24, y+4*H/24)
  ctx.lineTo(x+20*W/24, y+5*H/24)
  ctx.lineTo(x+17*W/24, y+5*H/24)
  ctx.lineTo(x+17*W/24, y+8*H/24)
  ctx.lineTo(x+16*W/24, y+8*H/24)
  ctx.lineTo(x+16*W/24, y+4*H/24)
  ctx.fill()

  //4
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+10*H/24)
  ctx.lineTo(x+8*W/24, y+10*H/24)
  ctx.lineTo(x+8*W/24, y+11*H/24)
  ctx.lineTo(x+5*W/24, y+11*H/24)
  ctx.lineTo(x+5*W/24, y+14*H/24)
  ctx.lineTo(x+4*W/24, y+14*H/24)
  ctx.fill()

  //5
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+16*H/24)
  ctx.lineTo(x+8*W/24, y+16*H/24)
  ctx.lineTo(x+8*W/24, y+17*H/24)
  ctx.lineTo(x+5*W/24, y+17*H/24)
  ctx.lineTo(x+5*W/24, y+20*H/24)
  ctx.lineTo(x+4*W/24, y+20*H/24)
  ctx.fill()

  //6
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+10*H/24)
  ctx.lineTo(x+14*W/24, y+10*H/24)
  ctx.lineTo(x+14*W/24, y+11*H/24)
  ctx.lineTo(x+11*W/24, y+11*H/24)
  ctx.lineTo(x+11*W/24, y+14*H/24)
  ctx.lineTo(x+10*W/24, y+14*H/24)
  ctx.fill()

  //7
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+16*H/24)
  ctx.lineTo(x+14*W/24, y+16*H/24)
  ctx.lineTo(x+14*W/24, y+17*H/24)
  ctx.lineTo(x+11*W/24, y+17*H/24)
  ctx.lineTo(x+11*W/24, y+20*H/24)
  ctx.lineTo(x+10*W/24, y+20*H/24)
  ctx.fill()

  //8
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+10*H/24)
  ctx.lineTo(x+20*W/24, y+10*H/24)
  ctx.lineTo(x+20*W/24, y+11*H/24)
  ctx.lineTo(x+17*W/24, y+11*H/24)
  ctx.lineTo(x+17*W/24, y+14*H/24)
  ctx.lineTo(x+16*W/24, y+14*H/24)
  ctx.fill()

  //9
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+16*H/24)
  ctx.lineTo(x+20*W/24, y+16*H/24)
  ctx.lineTo(x+20*W/24, y+17*H/24)
  ctx.lineTo(x+17*W/24, y+17*H/24)
  ctx.lineTo(x+17*W/24, y+20*H/24)
  ctx.lineTo(x+16*W/24, y+20*H/24)
  ctx.fill()

  //10
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+20*H/24)
  cpx = x+2*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+21*H/24)
  cpx = x+20*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+21*H/24)
  cpx = x+21*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+20*H/24)
  cpx = x+21*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+2*H/24)
  cpx = x+22*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+3*H/24)
  cpx = x+22*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+21*H/24)
  cpx = x+22*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+22*H/24)
  cpx = x+3*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+22*H/24)
  cpx = x+2*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+21*H/24)
  cpx = x+2*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+20*H/24)
  ctx.fill()

  ctx.globalAlpha *= 3
  //1
  ctx.lineWidth *= 2
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+3*H/24)
  cpx = x+2*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+2*H/24)
  cpx = x+21*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+2*H/24)
  cpx = x+22*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+3*H/24)
  cpx = x+22*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+21*H/24)
  cpx = x+22*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+22*H/24)
  cpx = x+3*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+22*H/24)
  cpx = x+2*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+21*H/24)
  cpx = x+2*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+3*H/24)
  ctx.stroke()
ctx.lineWidth /= 2
  //2
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+4*H/24)
  ctx.lineTo(x+4*W/24, y+8*H/24)
  ctx.lineTo(x+8*W/24, y+8*H/24)
  ctx.lineTo(x+8*W/24, y+4*H/24)
  ctx.lineTo(x+4*W/24, y+4*H/24)
  ctx.stroke()
  //3
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+4*H/24)
  ctx.lineTo(x+10*W/24, y+8*H/24)
  ctx.lineTo(x+14*W/24, y+8*H/24)
  ctx.lineTo(x+14*W/24, y+4*H/24)
  ctx.lineTo(x+10*W/24, y+4*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+4*H/24)
  ctx.lineTo(x+16*W/24, y+8*H/24)
  ctx.lineTo(x+20*W/24, y+8*H/24)
  ctx.lineTo(x+20*W/24, y+4*H/24)
  ctx.lineTo(x+16*W/24, y+4*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+10*H/24)
  ctx.lineTo(x+8*W/24, y+10*H/24)
  ctx.lineTo(x+8*W/24, y+14*H/24)
  ctx.lineTo(x+4*W/24, y+14*H/24)
  ctx.lineTo(x+4*W/24, y+10*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+16*H/24)
  ctx.lineTo(x+8*W/24, y+16*H/24)
  ctx.lineTo(x+8*W/24, y+20*H/24)
  ctx.lineTo(x+4*W/24, y+20*H/24)
  ctx.lineTo(x+4*W/24, y+16*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+10*H/24)
  ctx.lineTo(x+14*W/24, y+10*H/24)
  ctx.lineTo(x+14*W/24, y+14*H/24)
  ctx.lineTo(x+10*W/24, y+14*H/24)
  ctx.lineTo(x+10*W/24, y+10*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+16*H/24)
  ctx.lineTo(x+14*W/24, y+16*H/24)
  ctx.lineTo(x+14*W/24, y+20*H/24)
  ctx.lineTo(x+10*W/24, y+20*H/24)
  ctx.lineTo(x+10*W/24, y+16*H/24)
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+10*H/24)
  ctx.lineTo(x+20*W/24, y+10*H/24)
  ctx.lineTo(x+20*W/24, y+14*H/24)
  ctx.lineTo(x+16*W/24, y+14*H/24)
  ctx.lineTo(x+16*W/24, y+10*H/24)
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+16*H/24)
  ctx.lineTo(x+20*W/24, y+16*H/24)
  ctx.lineTo(x+20*W/24, y+20*H/24)
  ctx.lineTo(x+16*W/24, y+20*H/24)
  ctx.lineTo(x+16*W/24, y+16*H/24)
  ctx.stroke()
}

function didn_apos_t_finish_her_drinkAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  let sf = ctx.fillStyle
  ctx.fillStyle = color
  ctx.lineCap = "round"
  ctx.lineJoin = "round"
  let r = W/90, p = W/80

  ctx.globalAlpha /= 4
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+6*H/24)
  cpx = x+7*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+7*H/24)
  cpx = x+7*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+16*H/24)
  cpx = x+8*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+21*H/24)
  cpx = x+8*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+22*H/24)
  cpx = x+15*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+22*H/24)
  cpx = x+16*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+20*H/24)
  cpx = x+16*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+16*H/24)
  cpx = x+17*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+7*H/24)
  cpx = x+17*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+6*H/24)
  cpx = x+8*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+6*H/24)
  ctx.fill()
  ctx.globalAlpha *= 4

  ctx.fillStyle = sf
  ctx.lineWidth /= 4

  ctx.beginPath()
  ctx.arc(x+16*W/24+pet(p), y+3*H/24,r,0,Math.PI*2)
  ctx.fill()
  ctx.stroke()
  //4
  ctx.beginPath()
  ctx.arc(x+15*W/24+pet(p), y+2*H/24,r,0,Math.PI*2)
  ctx.fill()
  ctx.stroke()

  ctx.beginPath()
  ctx.arc(x+14*W/24+pet(p), y+21*H/24+pet(p),r, 0,Math.PI*2)
  ctx.fill()
  ctx.stroke()
  //3
  ctx.beginPath()
  ctx.arc(x+14*W/24+pet(p), y+19*H/24+pet(p),r, 0,Math.PI*2)
  ctx.fill()
  ctx.stroke()
  //4
  ctx.beginPath()
  ctx.arc(x+14*W/24+pet(p), y+15*H/24+pet(p),r, 0,Math.PI*2)
  ctx.fill()
  ctx.stroke()
  //5
  ctx.beginPath()
  ctx.arc(x+14*W/24+pet(p), y+12*H/24+pet(p),r, 0,Math.PI*2)
  ctx.fill()
  ctx.stroke()
  //6
  ctx.beginPath()
  ctx.arc(x+14*W/24+pet(p), y+8*H/24+pet(p),r, 0,Math.PI*2)
  ctx.fill()
  ctx.stroke()

  let i = 0, x0 = x, y0 = y
  for (; i < 90; i++) {
    x0 =  7 + Math.random() * 10
    y0 = 5 + Math.random() * 2.5
    ctx.beginPath()
    ctx.arc(x+x0*W/24+pet(p), y+y0*H/24+pet(p),r, 0,Math.PI*2)
    ctx.fill()
    ctx.stroke()
  }

  ctx.lineWidth *= 4
  //1
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+1*H/24)
  cpx = x+6*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+2*H/24)
  cpx = x+6*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+16*H/24)
  cpx = x+7*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+21*H/24)
  cpx = x+6*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+23*H/24)
  cpx = x+17*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+23*H/24)
  cpx = x+18*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+21*H/24)
  cpx = x+17*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+16*H/24)
  cpx = x+18*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+2*H/24)
  cpx = x+18*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+1*H/24)
  cpx = x+7*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+1*H/24)
  ctx.stroke()
}

function bab2At (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+5*H/24)
  cpx = x+18*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+7*H/24)
  cpx = x+18*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+11*H/24)
  cpx = x+6*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+9*H/24)
  cpx = x+6*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+7*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+7*H/24)
  cpx = x+15*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+9*H/24)
  cpx = x+9*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+8*H/24)
  cpx = x+9*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+3*H/24)
  cpx = x+9*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+5*H/24)
  cpx = x+15*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+3*H/24)
  cpx = x+15*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+1*H/24)
  cpx = x+9*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+3*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+3*H/24)
  cpx = x+15*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+7*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+7*H/24)
  cpx = x+18*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+12*H/24)
  cpx = x+18*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+15*H/24)
  cpx = x+6*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+14*H/24)
  cpx = x+6*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+9*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+15*H/24)
  cpx = x+4*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+21*H/24)
  cpx = x+4*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+23*H/24)
  cpx = x+21*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+21*H/24)
  cpx = x+21*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+14*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+21*W/24, y+14*H/24)
  cpx = x+21*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+18*H/24)
  cpx = x+4*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+15*H/24)
  cpx = x+4*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+13*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+9*H/24)
  cpx = x+21*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+13*H/24)
  cpx = x+21*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+18*H/24)
  ctx.stroke()
}

function spinelessAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  x += 1*W/24
  //1
let fs = Math.round(W*0.04)
 ctx.font = "bold "+fs+"pt monospace"  
 ctx.fillText("Missing",x+15.5*W/24, y+4*H/24)
  //12
  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+3*H/24)
  cpx = x+15*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+2*H/24)
  cpx = x+20.5*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20.5*W/24, y+2*H/24)
  cpx = x+21.5*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21.5*W/24, y+3*H/24)
  cpx = x+21.5*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21.5*W/24, y+4*H/24)
  cpx = x+21.5*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+5*H/24)
  cpx = x+16*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+5*H/24)
  cpx = x+15*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+4*H/24)
  cpx = x+15*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+3*H/24)
  ctx.stroke()

  //13
  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+4*H/24)
  cpx = x+13*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13.3*W/24, y+5.7*H/24)
  ctx.stroke()
  //14
  ctx.beginPath()
  ctx.moveTo(x+13.5*W/24, y+4.7*H/24)
  ctx.lineTo(x+13.3*W/24, y+5.7*H/24)
  ctx.lineTo(x+14.3*W/24, y+5.5*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+6*H/24)
  cpx = x+6*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+9*H/24)
  cpx = x+6*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+16*H/24)
  cpx = x+6*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+18*H/24)
  cpx = x+8*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+16*H/24)
  cpx = x+8*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+10*H/24)
  cpx = x+11*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+14*H/24)
  cpx = x+11*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+21*H/24)
  cpx = x+11*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12.5*W/24, y+23*H/24)
  cpx = x+14*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+21*H/24)
  cpx = x+14*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+14*H/24)
  cpx = x+15*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+16*H/24)
  cpx = x+15*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+21*H/24)
  cpx = x+15*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16.5*W/24, y+23*H/24)
  cpx = x+18*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+21*H/24)
  cpx = x+18*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+16*H/24)
  cpx = x+18*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+3*H/24)
  cpx = x+8*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+2*H/24)
  cpx = x+1*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+4*H/24)
  cpx = x+1*W/24
  cpy = y+6.5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+7*H/24)
  cpx = x+6*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+6*H/24)
  ctx.stroke()

  //2
  ctx.lineWidth *= 3
  ctx.setLineDash([W/20,W/18])
  ctx.beginPath()
  ctx.moveTo(x+7.5*W/24, y+3.8*H/24)
  cpx = x+14.5*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14.5*W/24, y+13*H/24)
  ctx.stroke()
  ctx.lineWidth /= 3
  ctx.setLineDash([])
  x -= 0.5 *W/24
  //5
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+11*H/24)
  cpx = x+9*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+14*H/24)
  cpx = x+9*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+16*H/24)
  cpx = x+11*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+14*H/24)
  cpx = x+11*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+11*H/24)
  ctx.stroke()
}

function babylonAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.globalAlpha /= 4
  ctx.beginPath()
  ctx.moveTo(x+21*W/24, y+14*H/24)
  cpx = x+21*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+20*H/24)
  cpx = x+21*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+23*H/24)
  cpx = x+12*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+18*H/24)
  cpx = x+16*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+15*H/24)
  cpx = x+12*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+11*H/24)
  cpx = x+15*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+9*H/24)
  cpx = x+12*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+5*H/24)
  cpx = x+15*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+3*H/24)
  cpx = x+15*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+5*H/24)
  cpx = x+18*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+8*H/24)
  cpx = x+18*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+10*H/24)
  cpx = x+21*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+14*H/24)
  ctx.fill()

  //10
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+23*H/24)
  cpx = x+23*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+24*W/24, y+20*H/24)
  cpx = x+24*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+17*H/24)
  cpx = x+21*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+20*H/24)
  cpx = x+21*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+23*H/24)
  ctx.fill()
  ctx.globalAlpha *= 4

  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+5*H/24)
  cpx = x+18*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+8*H/24)
  cpx = x+18*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+11*H/24)
  cpx = x+6*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+9*H/24)
  cpx = x+6*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+7*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+10*H/24)
  cpx = x+21*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+14*H/24)
  cpx = x+21*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+18*H/24)
  cpx = x+4*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+15*H/24)
  cpx = x+4*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+13*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+5*H/24)
  cpx = x+15*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+7*H/24)
  cpx = x+15*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+9*H/24)
  cpx = x+9*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+8*H/24)
  cpx = x+9*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+3*H/24)
  cpx = x+9*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+5*H/24)
  cpx = x+15*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+3*H/24)
  cpx = x+15*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+1*H/24)
  cpx = x+9*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+3*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+3*H/24)
  ctx.lineTo(x+15*W/24, y+5*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+8*H/24)
  ctx.lineTo(x+18*W/24, y+12*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+12*H/24)
  cpx = x+18*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+15*H/24)
  cpx = x+6*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+13*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+15*H/24)
  cpx = x+4*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+21*H/24)
  cpx = x+4*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+23*H/24)
  cpx = x+21*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+20*H/24)
  cpx = x+21*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+14*H/24)
  ctx.stroke()
  //8
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+9*H/24)
  ctx.lineTo(x+6*W/24, y+13*H/24)
  ctx.stroke()
}

function under_thumbAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/18
  ctx.strokeStyle = color
  ctx.lineCap = "round"
  ctx.lineJoin = "round"
  //1
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+14*H/24)
  cpx = x+17*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+16*H/24)
  cpx = x+24*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+24*W/24, y+14*H/24)
  cpx = x+24*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+13*H/24)
  cpx = x+20*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+8*H/24)
  cpx = x+18*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+1*H/24)
  ctx.stroke()
  //2
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+14*H/24)
  cpx = x+16*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+18*H/24)
  cpx = x+16*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+20*H/24)
  cpx = x+12*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+18*H/24)
  ctx.stroke()
  //1
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+12*H/24)
  cpx = x+16*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+18*H/24)
  cpx = x+16*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+20*H/24)
  cpx = x+12*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+18*H/24)
  cpx = x+12*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+19*H/24)
  cpx = x+12*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+21*H/24)
  cpx = x+8*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+19*H/24)
  cpx = x+8*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+18*H/24)
  cpx = x+8*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+20*H/24)
  cpx = x+4*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+18*H/24)
  cpx = x+4*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+16*H/24)
  cpx = x+4*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+18*H/24)
  cpx = x+0*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+0*W/24, y+16*H/24)
  cpx = x+0*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+0*W/24, y+3*H/24)
  cpx = x+0*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+1*H/24)
  ctx.stroke()
//5
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+12*H/24)
  ctx.lineTo(x+16*W/24, y+14*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+16*H/24)
  cpx = x+4*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+18*H/24)
  cpx = x+0*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+0*W/24, y+16*H/24)
  ctx.stroke()

  figureRAt(x+17*W/24, y+16.25*H/24, 5*W/24,color)
}

function inner_earAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/18
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "round"
  ctx.lineJoin = "round"

  ctx.beginPath()
  ctx.arc(x+3.5*W/24, y+13*H/24,W/48, 0.75*Math.PI, 2*Math.PI)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+1*H/24)
  cpx = x+22*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+12*H/24)
  cpx = x+21*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+23*H/24)
  cpx = x+3*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+13*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+11*H/24)
  cpx = x+2*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+1*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+11*H/24)
  cpx = x+2*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+9*H/24)
  cpx = x+6*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+11*H/24)
  cpx = x+6*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+15*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+14*H/24)
  cpx = x+3*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+13*H/24)
  cpx = x+5*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+11*H/24)
  cpx = x+5*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+10*H/24)
  cpx = x+3*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+11*H/24)
  cpx = x+3*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+12*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+15*H/24)
  cpx = x+2*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+13*H/24)
  ctx.stroke()
x += W/24
  //7
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+10*H/24)
  cpx = x+8*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+10*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+10*H/24)
  cpx = x+16*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+10*H/24)
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+10*H/24)
  cpx = x+12*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+14*H/24)
  cpx = x+11*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+14*H/24)
  cpx = x+10*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+15*H/24)
  cpx = x+10*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+16*H/24)
  cpx = x+13*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+16*H/24)
  cpx = x+14*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+17*H/24)
  cpx = x+14*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+18*H/24)
  cpx = x+14*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+19*H/24)
  cpx = x+14*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+20*H/24)
  cpx = x+12*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+21*H/24)
  ctx.stroke()
}

function bending_the_knee_kissing_the_ringAt (x,y,W,color,INVERT) {
  if (INVERT)
    kissing_the_ringAt (x,y,W,color)
  else
    bending_the_kneeAt (x,y,W,color)
}

function kissing_the_ringAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/20
  ctx.strokeStyle = color
  ctx.lineCap = "round"
  ctx.lineJoin = "round"
  //1
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+23*H/24)
  cpx = x+8*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+23*H/24)
  cpx = x+12*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+20*H/24)
  cpx = x+11*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+18*H/24)
  cpx = x+14*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+16*H/24)
  cpx = x+14*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+14*H/24)
  cpx = x+14*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+13*H/24)
  cpx = x+14*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+11*H/24)
  cpx = x+12*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+9*H/24)
  cpx = x+15*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+9*H/24)
  cpx = x+17*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+7*H/24)
  cpx = x+14*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+1*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+7.7*H/24)
  ctx.lineTo(x+12*W/24, y+7.7*H/24)
  ctx.stroke()
  //2
  x -= W/48
  y += W/48
  ctx.lineWidth *= 1.25

  ctx.beginPath()
  ctx.arc(x+18.4*W/24, y+14*H/24, 3*W/24, 0, Math.PI*2)
  ctx.stroke()
  
  ctx.lineWidth /= 1.25
}

function bending_the_kneeAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/10
  ctx.strokeStyle = color
  ctx.lineCap = "round"
  ctx.lineJoin = "round"
  //5
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+5*H/24)
  cpx = x+8*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+3*H/24)
  cpx = x+2*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+5*H/24)
  cpx = x+2*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+7*H/24)
  cpx = x+8*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+5*H/24)
  ctx.stroke()

  //1
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+7*H/24)
  ctx.lineTo(x+17*W/24, y+13*H/24)
  ctx.lineTo(x+12*W/24, y+23*H/24)
  ctx.lineTo(x+21*W/24, y+20*H/24)
  ctx.lineTo(x+22*W/24, y+23*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+5*H/24)
  ctx.lineTo(x+10*W/24, y+6*H/24)
  ctx.lineTo(x+17*W/24, y+13*H/24)
  ctx.lineTo(x+12*W/24, y+23*H/24)
  ctx.lineTo(x+21*W/24, y+20*H/24)
  ctx.lineTo(x+22*W/24, y+23*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+13*H/24)
  ctx.lineTo(x+6*W/24, y+14*H/24)
  ctx.lineTo(x+10*W/24, y+22*H/24)
  ctx.lineTo(x+7*W/24, y+23*H/24)
  ctx.lineTo(x+6*W/24, y+23*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+6*H/24)
  ctx.lineTo(x+7*W/24, y+13*H/24)
  ctx.lineTo(x+3*W/24, y+9*H/24)
  ctx.lineTo(x+1*W/24, y+8*H/24)
  ctx.stroke()
}

function asciiAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas");
  let ctx = canvas.getContext("2d");
  let H = W
  ctx.globalAlpha = document.getElementById("opacity").value/100
  let colors = getCurrentPalette()
  let savedF = ctx.strokeStyle
  ctx.fillStyle = color

 let catog = ["01 { ",
 "02    |l___/|",
 "03    | o o |",
 "04    l  v  /",
 "05     l___/",
 "06 }\u{25FC}"]

 let cat = [
    "01 const cat = {",
    "02    |                  |",
    "03    |l                /|",
    "04    | l              / |",
    "05    | ll------------// |",
    "06    l /  __      __  l /",
    "07    /   ___l    /___   l",
    "08    |  /(())l  /(())l  |",
    "09    |  l----|__|----/  |",
    "10    |  (    (oo)    )  |",
    "11    l /l / ______ l /l /",
    "12     /  /l lv__v/ /l  l ",
    "14    / l/  /l____/l  l/ l",
    "15   /  /l_/________l_/l  l",
    "16     /  /          l  l  ",
    "17 }"
]

let floppy = [
    "01 let floppy = {",
    "02   ______________________",
    "03  | o__|[]       ||| |__ol",
    "04  | |  |         ||| |HD| l",
    "05  | |  |         ||| |  | |",
    "06  | |  |_____________|  | |",
    "07  | |        128K       | |",
    "08  | |        ___        | |",
    "09  | |       /   l       | |",
    "10  | |      |  O  |      | |",  
    "11  | |       l[_]/       | |",
    "12  | | ................. | |",
    "13  | | ................. | |",
    "14  | o _________________ o |",
    "15  |_[]____________________|",
    "16 }"
]

let fs = Math.round(W*0.045)
const regex = /l/g
 ctx.font = "bold "+fs+"pt monospace"
 let i = 0
 for (; i < floppy.length; i++) {
    if (i > 0)
    floppy[i] = floppy[i].replace(regex,"\\");
    //console.log(cat[i])
    ctx.fillText(floppy[i], x, y+(i*fs*1.5))
  }
}

function starAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas");
  let ctx = canvas.getContext("2d");
  let H = W
  ctx.globalAlpha = document.getElementById("opacity").value/100
  let colors = getCurrentPalette()
  let mode = document.getElementById("mode").value
  let alpha = document.getElementById("opacity").value
  let pad = W/20 - pet(30)
  let points = randomPick([4,5,6,7,8,9,3])
  let savedF = ctx.strokeStyle
  ctx.fillStyle = colors[colors.length-1]

  let incs = (Math.PI* 1)/(points*2)
  let r1 = W/2.5, r2 = r1/randomPick([1.3,2,1.6,1.8,2.7,5])
  let a = 0, cx = x+W/2, cy = y+H/2
  let i = 1, maxp = points*4 +1
  ctx.beginPath()
  let x0 = cx + r1 * Math.cos(a),
      y0 = cy + r1 * Math.sin(a)
  ctx.beginPath()
  x0 = cx + r2 * Math.cos(a),
  y0 = cy + r2 * Math.sin(a)
  ctx.moveTo(x0,y0)
  for (; i < maxp; i++) {
    a += incs/2
    x0 = cx + r2 * Math.cos(a)
    y0 = cy + r2 * Math.sin(a)
    ctx.lineTo(x0,y0)
    a += incs/2
    x0 = cx + r1 * Math.cos(a)
    y0 = cy + r1 * Math.sin(a)
    ctx.lineTo(x0,y0)
  }
  ctx.closePath()
  ctx.fill()
  ctx.fillStyle = colors[0]
  a = 0
  ctx.beginPath()
  x0 = cx + r1 * Math.cos(a),
  y0 = cy + r1 * Math.sin(a)
  ctx.moveTo(x0,y0)
  i = 1
  for (; i < maxp; i++) {
    x0 = cx + r1 * Math.cos(a)
    y0 = cy + r1 * Math.sin(a)
    ctx.lineTo(x0,y0)
    a += incs/2
    x0 = cx + r2 * Math.cos(a)
    y0 = cy + r2 * Math.sin(a)
    ctx.lineTo(x0,y0)
    a += incs/2
    x0 = cx + r2 * Math.cos(a)
    y0 = cy + r2 * Math.sin(a)
    ctx.lineTo(x0,y0)
  }
  ctx.closePath()
  ctx.fill()
  ctx.fillStyle = savedF
  let name = randomPick(placenames_stars)
  ctx.font = "italic "+1.5*W/24+"pt Times New Roman"
  let w = ctx.measureText(name).width
  ctx.fillText(name, x+W/2-w/2, y+H - 1*W/24)
}

function blue_screen_of_deathAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50

  savedS = ctx.strokeStyle
  savedF = ctx.fillStyle
  ctx.strokeStyle = "#ffffff"
  ctx.fillStyle = "#0040ff"
  ctx.fillRect(x,y,W,H)
  ctx.fillStyle = "#ffffff"
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.font = W/6+"pt Times New Roman"
  ctx.fillText(":(",x+1*W/24, y+5*H/24)
  ctx.font = W/24+"pt Arial"
  ctx.fillText("Your PC ran into a problem and",x+1*W/24, y+9*H/24)
  ctx.fillText("needs to restart. We're just",x+1*W/24, y+11*H/24)
  ctx.fillText("gathering some error info, ",x+1*W/24, y+13*H/24)
  ctx.fillText("and then we'll restart for you.",x+1*W/24, y+15*H/24)
  ctx.fillText("20% complete.",x+1*W/24, y+17.8*H/24)
  ctx.font = W/46+"pt Arial"
  ctx.fillText("Scan QR code for more information.",x+6*W/24, y+20*H/24)
  ctx.fillText("Error code: CRITICAL_PROCESS_DIED",x+6*W/24, y+22*H/24)
  windowsAt(x+18*W/24, y+9.25*H/24, W/4.5, color)
  qr_codeAt(x+1*W/24, y+19*H/24, W/6, color)

  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function windowsAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = "#ffffff"
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+5*H/24)
  ctx.lineTo(x+10*W/24, y+3.2*H/24)
  ctx.lineTo(x+10*W/24, y+12*H/24)
  ctx.lineTo(x+1*W/24, y+12*H/24)
  ctx.lineTo(x+1*W/24, y+5*H/24)
  ctx.fill()

  //2
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+13*H/24)
  ctx.lineTo(x+1*W/24, y+20*H/24)
  ctx.lineTo(x+10*W/24, y+21.8*H/24)
  ctx.lineTo(x+10*W/24, y+13*H/24)
  ctx.lineTo(x+1*W/24, y+13*H/24)
  ctx.fill()

  //3
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+13*H/24)
  ctx.lineTo(x+11*W/24, y+22*H/24)
  ctx.lineTo(x+23*W/24, y+23.9*H/24)
  ctx.lineTo(x+23*W/24, y+13*H/24)
  ctx.lineTo(x+11*W/24, y+13*H/24)
  ctx.fill()

  //4
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+12*H/24)
  ctx.lineTo(x+11*W/24, y+3*H/24)
  ctx.lineTo(x+23*W/24, y+1*H/24)
  ctx.lineTo(x+23*W/24, y+12*H/24)
  ctx.lineTo(x+11*W/24, y+12*H/24)
  ctx.fill()
}

function fig_leafAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/25
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.beginPath()
  ctx.moveTo(x+1.5*W/24, y+0*H/24)
  cpx = x+1*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+8*H/24)
  cpx = x+1*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1.5*W/24, y+24*H/24)
  ctx.stroke()
  //2
  ctx.beginPath()
  ctx.moveTo(x+22.5*W/24, y+0*H/24)
  cpx = x+23*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+8*H/24)
  cpx = x+23*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22.5*W/24, y+24*H/24)
  ctx.stroke()
  //3
  ctx.beginPath()
  ctx.beginPath()
  ctx.moveTo(x+11.5*W/24, y+24*H/24)
  ctx.lineTo(x+11.6*W/24, y+21*H/24)
  ctx.moveTo(x+12.4*W/24, y+21*H/24)
  ctx.lineTo(x+12.5*W/24, y+24*H/24)
  ctx.stroke()
  ctx.stroke()
  //4
  ctx.beginPath()
  ctx.arc(x+12*W/24, y+2.5*H/24,W/48,0,Math.PI*2)
  ctx.stroke()

  figleafAt(x+1.0*W/24,y+2.5*H/24,21.5*W/24,color,0)
}

function streetlight_effectAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  let v = document.getElementById("featuresize").value
  let savedF = ctx.fillStyle
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  x -= 0.5*W/24
  document.getElementById("featuresize").value *= 0.5
  rotkeyAt(x+20.5*W/24,y+21*H/24,2.8*W/24,color)
  document.getElementById("featuresize").value = v
  //1
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+19*H/24)
  cpx = x+2*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+19*H/24)
  cpx = x+2*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+13*H/24)
  cpx = x+8*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+15*H/24)
  cpx = x+8*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+16*H/24)
  cpx = x+6*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+19*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+16*H/24)
  cpx = x+8*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+15*H/24)
  cpx = x+8*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+13*H/24)
  cpx = x+10*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+14*H/24)
  cpx = x+10*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+16*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+19*H/24)
  ctx.lineTo(x+3*W/24, y+22*H/24)
  ctx.lineTo(x+4*W/24, y+22*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+19*H/24)
  ctx.lineTo(x+5*W/24, y+22*H/24)
  ctx.lineTo(x+6*W/24, y+22*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+2*H/24)
  ctx.lineTo(x+20*W/24, y+2*H/24)
  cpx = x+21*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+3*H/24)
  cpx = x+21*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+21*H/24)
  cpx = x+22*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+21*H/24)
  cpx = x+22*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+2*H/24)
  cpx = x+22*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+1*H/24)
  cpx = x+13*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+1*H/24)
  cpx = x+12*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+2*H/24)
  ctx.stroke()

  ctx.fillStyle = "#ffedcc"
  ctx.globalAlpha /= 3
  //6
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+21*H/24)
  cpx = x+6*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+23*H/24)
  cpx = x+20*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+21*H/24)
  cpx = x+20*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+19*H/24)
  cpx = x+6*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+21*H/24)
  ctx.fill()
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+21*H/24)
  cpx = x+6*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+23*H/24)
  cpx = x+20*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+21*H/24)
  cpx = x+14*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+2*H/24)
  cpx = x+12*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+2*H/24)
  cpx = x+6*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+21*H/24)
  ctx.fill()
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+2*H/24)
  cpx = x+12*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+3*H/24)
  cpx = x+14*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+2*H/24)
  ctx.fill()
  ctx.stroke()
  ctx.fillColor = savedF
  ctx.globalAlpha *= 3
}

function rotkeyAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, d = 0, angle = pet(45)

  //1
  ctx.beginPath()
  p = rotatePoint(x+16*W/24+pet(d), y+9*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+16*W/24+pet(d), y+11*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+2*W/24+pet(d), y+11*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+2*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+4*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+4*W/24+pet(d), y+14*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+2*W/24+pet(d), y+14*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+2*W/24+pet(d), y+15*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+7*W/24+pet(d), y+15*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+7*W/24+pet(d), y+14*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+5*W/24+pet(d), y+14*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+5*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+16*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+16*W/24+pet(d), y+14*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  cpx = x+16*W/24+pet(d)
  cpy = y+16*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+18*W/24+pet(d), y+16*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+20*W/24+pet(d)
  cpy = y+16*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+20*W/24+pet(d), y+14*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+22*W/24+pet(d)
  cpy = y+14*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+22*W/24+pet(d), y+12*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+22*W/24+pet(d)
  cpy = y+11*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+22*W/24+pet(d), y+11*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+22*W/24+pet(d)
  cpy = y+9*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+20*W/24+pet(d), y+9*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+20*W/24+pet(d)
  cpy = y+7*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+18*W/24+pet(d), y+7*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+16*W/24+pet(d)
  cpy = y+7*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+16*W/24+pet(d), y+9*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()

  //2
  ctx.beginPath()
  p = rotatePoint(x+17*W/24+pet(d), y+14*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+17*W/24+pet(d)
  cpy = y+15*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+18*W/24+pet(d), y+15*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+19*W/24+pet(d)
  cpy = y+15*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+19*W/24+pet(d), y+14*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+19*W/24+pet(d)
  cpy = y+13*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+19*W/24+pet(d), y+13*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+20*W/24+pet(d)
  cpy = y+13*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+20*W/24+pet(d), y+13*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+21*W/24+pet(d)
  cpy = y+13*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+21*W/24+pet(d), y+12*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+21*W/24+pet(d)
  cpy = y+11*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+21*W/24+pet(d), y+11*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+21*W/24+pet(d)
  cpy = y+10*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+20*W/24+pet(d), y+10*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+19*W/24+pet(d)
  cpy = y+10*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+19*W/24+pet(d), y+10*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+19*W/24+pet(d)
  cpy = y+9*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+19*W/24+pet(d), y+9*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+19*W/24+pet(d)
  cpy = y+8*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+18*W/24+pet(d), y+8*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+17*W/24+pet(d)
  cpy = y+8*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+17*W/24+pet(d), y+9*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+17*W/24+pet(d)
  cpy = y+14*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+17*W/24+pet(d), y+14*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()
}

function qr_codeAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = W/24
  let savedfill = "#0040ff"
  ctx.strokeStyle = color
  ctx.fillStyle = color
  color = "#ffffff"
  ctx.lineCap = "square"
  ctx.lineJoin = "miter"
  let nums = [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]
  let i = 0
  ctx.fillStyle = "#ffffff"
  ctx.fillRect(x, y, W, H)
  ctx.fillStyle = "#0040ff"
  for (; i < 190; i++) {
    // draw sguares w/i the grid
    let x0 = randomPick(nums)
    let y0 = randomPick(nums)
    ctx.fillRect(x+x0*W/24, y+y0*H/24, W/24, H/24)
  }
  //1
  ctx.fillStyle = savedfill
  ctx.strokeStyle = savedfill
  ctx.fillRect(x+1*W/24, y+1*H/24, 7*W/24, 7*H/24)
  ctx.fillStyle = color
  ctx.strokeStyle = color
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+2*H/24)
  ctx.lineTo(x+7*W/24, y+2*H/24)
  ctx.lineTo(x+7*W/24, y+7*H/24)
  ctx.lineTo(x+2*W/24, y+7*H/24)
  ctx.lineTo(x+2*W/24, y+2*H/24)
  ctx.stroke()

  //2
  ctx.fillStyle = savedfill
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+3*H/24)
  ctx.lineTo(x+3*W/24, y+6*H/24)
  ctx.lineTo(x+6*W/24, y+6*H/24)
  ctx.lineTo(x+6*W/24, y+3*H/24)
  ctx.lineTo(x+3*W/24, y+3*H/24)
  ctx.fill()
  //3
  ctx.strokeStyle = savedfill
  ctx.fillRect(x+16*W/24, y+1*H/24, 7*W/24, 7*H/24)
  ctx.fillStyle = color
  ctx.strokeStyle = color
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+2*H/24)
  ctx.lineTo(x+22*W/24, y+2*H/24)
  ctx.lineTo(x+22*W/24, y+7*H/24)
  ctx.lineTo(x+17*W/24, y+7*H/24)
  ctx.lineTo(x+17*W/24, y+2*H/24)
  ctx.stroke()
  //4
  ctx.fillStyle = savedfill
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+3*H/24)
  ctx.lineTo(x+18*W/24, y+6*H/24)
  ctx.lineTo(x+21*W/24, y+6*H/24)
  ctx.lineTo(x+21*W/24, y+3*H/24)
  ctx.lineTo(x+18*W/24, y+3*H/24)
  ctx.fill()
  //5
  ctx.fillStyle = savedfill
  ctx.strokeStyle = savedfill  
  ctx.fillRect(x+1*W/24, y+16*H/24, 7*W/24, 7*H/24)

  ctx.fillStyle = color
  ctx.strokeStyle = color
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+22*H/24)
  ctx.lineTo(x+2*W/24, y+17*H/24)
  ctx.lineTo(x+7*W/24, y+17*H/24)
  ctx.lineTo(x+7*W/24, y+22*H/24)
  ctx.lineTo(x+2*W/24, y+22*H/24)
  ctx.stroke()
  //6
  ctx.fillStyle = savedfill
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+18*H/24)
  ctx.lineTo(x+3*W/24, y+21*H/24)
  ctx.lineTo(x+6*W/24, y+21*H/24)
  ctx.lineTo(x+6*W/24, y+18*H/24)
  ctx.lineTo(x+3*W/24, y+18*H/24)
  ctx.fill()
  //7
  ctx.fillStyle = savedfill
  ctx.fillRect(x+15*W/24, y+15*H/24, 3*W/24, 3*H/24)
  ctx.fillStyle = color
  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+15*H/24)
  ctx.lineTo(x+15*W/24, y+18*H/24)
  ctx.lineTo(x+18*W/24, y+18*H/24)
  ctx.lineTo(x+18*W/24, y+15*H/24)
  ctx.lineTo(x+15*W/24, y+15*H/24)
  ctx.stroke()

  //8
  ctx.fillStyle = savedfill
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+16*H/24)
  ctx.lineTo(x+16*W/24, y+17*H/24)
  ctx.lineTo(x+17*W/24, y+17*H/24)
  ctx.lineTo(x+17*W/24, y+16*H/24)
  ctx.lineTo(x+16*W/24, y+16*H/24)
  ctx.fill()
}

function googlebkgAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let colors = ["#e94134", "#fab908", "#34a753", "#4387f5"]
  //1
  ctx.beginPath()
  ctx.moveTo(x+16*W/32+pet(d), y+16*H/32+pet(d))
  ctx.lineTo(x+0*W/32+pet(d), y+0*H/32+pet(d))
  ctx.lineTo(x+0*W/32+pet(d), y+32*H/32+pet(d))
  ctx.lineTo(x+16*W/32+pet(d), y+16*H/32+pet(d))
  ctx.fillStyle = colors[1]
  ctx.fill()

  //2
  ctx.beginPath()
  ctx.moveTo(x+0*W/24+pet(d), y+24*H/24+pet(d))
  ctx.lineTo(x+12*W/24+pet(d), y+12*H/24+pet(d))
  ctx.lineTo(x+12*W/24+pet(d), y+14*H/24+pet(d))
  ctx.lineTo(x+14*W/24+pet(d), y+14*H/24+pet(d))
  ctx.lineTo(x+24*W/24+pet(d), y+24*H/24+pet(d))
  ctx.fillStyle = colors[2]
  ctx.fill()

  //3
  ctx.beginPath()
  ctx.moveTo(x+24*W/24+pet(d), y+24*H/24+pet(d))
  ctx.lineTo(x+14*W/24+pet(d), y+14*H/24+pet(d))
  ctx.lineTo(x+12*W/24+pet(d), y+14*H/24+pet(d))
  ctx.lineTo(x+12*W/24+pet(d), y+12*H/24+pet(d))
  ctx.lineTo(x+12*W/24+pet(d), y+10*H/24+pet(d))
  ctx.lineTo(x+14*W/24+pet(d), y+10*H/24+pet(d))
  ctx.lineTo(x+24*W/24+pet(d), y+0*H/24+pet(d))
  ctx.fillStyle = colors[3]
  ctx.fill()

  //4
  ctx.beginPath()
  ctx.beginPath()
  ctx.moveTo(x+0*W/24+pet(d), y+0*H/24+pet(d))
  ctx.lineTo(x+12*W/24+pet(d), y+12*H/24+pet(d))
  ctx.lineTo(x+12*W/24+pet(d), y+10*H/24+pet(d))
  ctx.lineTo(x+14*W/24+pet(d), y+10*H/24+pet(d))
  ctx.lineTo(x+24*W/24+pet(d), y+0*H/24+pet(d))
  ctx.fillStyle = colors[0]
  ctx.fill()

  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function surveillance_capitalismAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.save()
  ctx.beginPath()
  ctx.moveTo(x+21*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+24*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+24*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+20*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+6*H/24+pet(d))
  cpx = x+4*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+0*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+4*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+18*H/24+pet(d))
  cpx = x+20*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+24*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+21*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+21.5*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+19*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+16*H/24+pet(d))
  cpx = x+5*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+2.5*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+5*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+8*H/24+pet(d))
  cpx = x+19*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+21.5*W/24+pet(d), y+12*H/24+pet(d))

  ctx.closePath()
  ctx.clip()
  googlebkgAt(x,y,W,"#ffffff")
  ctx.restore()
  googleAt(x+7*W/24, y+7*H/24, 10*W/24, color)

  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function googleAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.save()
  ctx.beginPath()
  //6
  ctx.beginPath()
  ctx.moveTo(x+12*W/24+pet(d), y+12*H/24+pet(d))
  ctx.lineTo(x+12*W/24+pet(d), y+10*H/24+pet(d))
  ctx.lineTo(x+22*W/24+pet(d), y+10*H/24+pet(d))
  ctx.lineTo(x+22*W/24+pet(d), y+12*H/24+pet(d))
  ctx.arc(x+12*W/24+pet(d), y+12*H/24+pet(d), 10*W/24, 0, Math.PI*1.74)
  ctx.lineTo(x+16.25*W/24+pet(d), y+7.75*H/24+pet(d))
  ctx.arc(x+12*W/24+pet(d), y+12*H/24+pet(d), 6*W/24, Math.PI*1.74, 0.09*Math.PI, -1)
  ctx.lineTo(x+12*W/24+pet(d), y+13.66*H/24+pet(d))
  ctx.closePath()
  ctx.clip()
  googlebkgAt(x,y,W,"#ffffff")
  ctx.restore()

  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}


function art_promptAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  let savedfill = ctx.fillStyle
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let text = artPrompt()
  let nums = [11,12,13,17,29,31,43,47,51,53,61,67,71,73]
  let n = randomPick(nums)
  ctx.font = W/32+"pt Arial"
  let i = 0, off = 2*H/24
  let x0 = x, y0 = y
  //1
  ctx.lineWidth /= 2
  ctx.setLineDash([W/48])
  ctx.beginPath()
  ctx.moveTo(x+W-3*W/24, y+1*H/24)
  ctx.lineTo(x+W-3*W/24, y+23*H/24)
  ctx.stroke()
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+1*H/24)
  ctx.lineTo(x+3*W/24, y+23*H/24)
  ctx.stroke()
  ctx.lineWidth *= 2
  ctx.setLineDash([])
  for (; i < 11; i++) {
  ctx.fillStyle = color
    ctx.font = W/40+"pt Arial"
    ctx.fillText(n+i, x+1.4*W/24, y+2.2*H/24)
    ctx.font = W/20+"pt Courier New"
    if (i === 0)
      ctx.fillText(text[0].toUpperCase(), x+5.1*W/24, y+2.4*H/24)
    if (i === 1)
      ctx.fillText(text[1].toUpperCase(), x+5*W/24, y+2.4*H/24)
    if (i === 2)
      ctx.fillText(text[2].toUpperCase(), x+5.3*W/24, y+2.4*H/24)

    if (i === 4) {
      text = artPrompt()
      ctx.fillText(text[0].toUpperCase(), x+4.9*W/24, y+2.5*H/24)
    }
    if (i === 5)
      ctx.fillText(text[1].toUpperCase(), x+4.8*W/24, y+2.5*H/24)
    if (i === 6)
      ctx.fillText(text[2].toUpperCase(), x+5.5*W/24, y+2.5*H/24)

    if (i === 8) {
      text = artPrompt()
      ctx.fillText(text[0].toUpperCase(), x+5.2*W/24, y+2.6*H/24)
    }
    if (i === 9)
      ctx.fillText(text[1].toUpperCase(), x+4.7*W/24, y+2.6*H/24)
    if (i === 10)
      ctx.fillText(text[2].toUpperCase(), x+6*W/24, y+2.6*H/24)

    ctx.beginPath()
    ctx.moveTo(x+1*W/24, y+1*H/24)
    ctx.lineTo(x+1*W/24, y+3*H/24)
    ctx.lineTo(x+23*W/24, y+3*H/24)
    ctx.lineTo(x+23*W/24, y+1*H/24)
    ctx.lineTo(x+1*W/24, y+1*H/24)
    ctx.stroke()
    if (i % 2 === 0) {
      ctx.globalAlpha /= 5
      ctx.fill()
      ctx.globalAlpha *= 5
    }
    if (i%3 === 0) {
      ctx.beginPath()
      ctx.arc(x+3.6*W/24, y+2*H/24, W/32,0, Math.PI*2)
      ctx.fillStyle = savedfill
      ctx.fill()
      ctx.fillStyle = color
      ctx.lineWidth /= 3
      ctx.stroke()
      ctx.lineWidth *= 3

      ctx.beginPath()
      ctx.arc(x+W-3.6*W/24, y+2*H/24, W/32,0, Math.PI*2)
      ctx.fillStyle = savedfill
      ctx.fill()
      ctx.fillStyle = color
      ctx.lineWidth /= 3
      ctx.stroke()
      ctx.lineWidth *= 3
    }
  y += off
  }
}

function finger_trickAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  //14
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+10*H/24)
  ctx.lineTo(x+13*W/24, y+16*H/24)
  ctx.stroke()
   //15
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+6*H/24)
  ctx.lineTo(x+19*W/24, y+6*H/24)
  ctx.stroke()

  //1
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+3*H/24)
  cpx = x+13*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+1*H/24)
  cpx = x+9*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+3*H/24)
  cpx = x+9*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+15*H/24)
  cpx = x+9*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+4*H/24)
  cpx = x+9*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+2*H/24)
  cpx = x+5*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+4*H/24)
  cpx = x+5*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+16*H/24)
  cpx = x+5*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+8*H/24)
  cpx = x+5*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+6*H/24)
  cpx = x+1*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+8*H/24)
  cpx = x+1*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+23*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+6*H/24)
  cpx = x+13*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+4*H/24)
  cpx = x+13*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+2*H/24)
  cpx = x+17*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+4*H/24)
  cpx = x+17*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+6*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+6*H/24)
  cpx = x+14*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+6*H/24)
  cpx = x+12*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+8*H/24)
  cpx = x+12*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+10*H/24)
  cpx = x+23*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+10*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+15*H/24)
  cpx = x+13*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+12*H/24)
  cpx = x+13*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+11*H/24)
  cpx = x+16*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+11*H/24)
  cpx = x+17*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+12*H/24)
  cpx = x+17*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+19*H/24)
  ctx.stroke()

//1
  ctx.beginPath()
  ctx.moveTo(x+23*W/24, y+6*H/24)
  cpx = x+18*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+6*H/24)
  cpx = x+17*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+5*H/24)
  cpx = x+17*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+3*H/24)
  cpx = x+17*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+2*H/24)
  cpx = x+23*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+2*H/24)
  ctx.stroke()
  //7 thumb
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+22*H/24)
  cpx = x+17*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+18*H/24)
  cpx = x+18*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+13*H/24)
  cpx = x+23*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+15*H/24)
  cpx = x+21*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+23*H/24)
  ctx.stroke()
  //1 nails

  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+7*H/24)
  ctx.lineTo(x+2*W/24, y+9*H/24)
  ctx.lineTo(x+4*W/24, y+9*H/24)
  ctx.lineTo(x+4*W/24, y+7*H/24)
  cpx = x+3*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+7*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+3*H/24)
  ctx.lineTo(x+6*W/24, y+5*H/24)
  ctx.lineTo(x+8*W/24, y+5*H/24)
  ctx.lineTo(x+8*W/24, y+3*H/24)
  cpx = x+7*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+3*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+2*H/24)
  ctx.lineTo(x+10*W/24, y+4*H/24)
  ctx.lineTo(x+12*W/24, y+4*H/24)
  ctx.lineTo(x+12*W/24, y+2*H/24)
  cpx = x+11*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+2*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+3*H/24)
  ctx.lineTo(x+14*W/24, y+5*H/24)
  ctx.lineTo(x+16*W/24, y+5*H/24)
  ctx.lineTo(x+16*W/24, y+3*H/24)
  cpx = x+15*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+3*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+9*H/24)
  ctx.lineTo(x+15*W/24, y+9*H/24)
  ctx.lineTo(x+15*W/24, y+7*H/24)
  ctx.lineTo(x+13*W/24, y+7*H/24)
  cpx = x+12*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+9*H/24)
  ctx.stroke()
//1
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+3*H/24)
  ctx.lineTo(x+13*W/24, y+4*H/24)
  ctx.stroke()

  //3 thumb nail
  ctx.beginPath()
  ctx.moveTo(x+22.2*W/24, y+14.5*H/24)
  cpx = x+22*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+14*H/24)
  cpx = x+20*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+16*H/24)
  cpx = x+21.5*W/24
  cpy = y+16.5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21.5*W/24, y+16.5*H/24)
  ctx.stroke()
}

function artPomptAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  ctx.font = "100 "+1.7*W/24 +"pt Times"
  let text = artPrompt()

  ctx.fillText(text[0], x+2.7*W/24, y+6.5*W/24)
  ctx.fillText(text[1], x+3*W/24, y+9.7*W/24)
  ctx.fillText(text[2], x+3.3*W/24, y+12.9*W/24)
 //1
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+17*H/24)
  ctx.lineTo(x+1*W/24, y+16*H/24)
  ctx.lineTo(x+23*W/24, y+16*H/24)
  ctx.lineTo(x+23*W/24, y+17*H/24)
  ctx.lineTo(x+1*W/24, y+17*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+17*H/24)
  ctx.lineTo(x+1*W/24, y+21*H/24)
  ctx.lineTo(x+2*W/24, y+21*H/24)
  ctx.lineTo(x+2*W/24, y+17*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+17*H/24)
  ctx.lineTo(x+3*W/24, y+23*H/24)
  ctx.lineTo(x+4*W/24, y+23*H/24)
  ctx.lineTo(x+4*W/24, y+17*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+22*W/24, y+17*H/24)
  ctx.lineTo(x+22*W/24, y+23*H/24)
  ctx.lineTo(x+21*W/24, y+23*H/24)
  ctx.lineTo(x+21*W/24, y+17*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+17*H/24)
  ctx.lineTo(x+20*W/24, y+21*H/24)
  ctx.lineTo(x+19*W/24, y+21*H/24)
  ctx.lineTo(x+19*W/24, y+17*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+16*H/24)
  ctx.lineTo(x+1*W/24, y+3*H/24)
  ctx.lineTo(x+21*W/24, y+3*H/24)
  ctx.lineTo(x+22*W/24, y+16*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+3*H/24)
  ctx.lineTo(x+2*W/24, y+16*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+3*H/24)
  ctx.lineTo(x+9*W/24, y+2*H/24)
  ctx.lineTo(x+14*W/24, y+2*H/24)
  ctx.lineTo(x+14*W/24, y+3*H/24)
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+2*H/24)
  ctx.lineTo(x+11*W/24, y+0*H/24)
  ctx.lineTo(x+12*W/24, y+0*H/24)
  ctx.lineTo(x+12*W/24, y+2*H/24)
  ctx.stroke()
}

function toilet_paperAt (x,y,W,color,INVERT) {
  if (INVERT)
    tpIAt(x,y,W,color)
  else
    tpAt(x,y,W,color)
}

function tpAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+12*H/24)
  cpx = x+12*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+7*H/24)
  cpx = x+12*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+2*H/24)
  cpx = x+22*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+7*H/24)
  cpx = x+22*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+12*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+9*H/24)
  cpx = x+19*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+7*H/24)
  cpx = x+19*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+5*H/24)
  cpx = x+15*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+7*H/24)
  cpx = x+15*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+9*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+7*H/24)
  ctx.lineTo(x+12*W/24, y+23*H/24)
  ctx.lineTo(x+3*W/24, y+23*H/24)
  ctx.lineTo(x+3*W/24, y+7*H/24)
  cpx = x+3*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+2*H/24)
  cpx = x+17*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+2*H/24)
  ctx.stroke()
ctx.setLineDash([W/24])
  //4
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+14*H/24)
  ctx.lineTo(x+12*W/24, y+14*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+11.6*W/24, y+5*H/24)
  ctx.lineTo(x+3.4*W/24, y+5*H/24)
  ctx.stroke()
ctx.setLineDash([])
  //6
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+12*H/24)
  ctx.lineTo(x+17*W/24, y+12*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+23*W/24, y+5*H/24)
  ctx.lineTo(x+17*W/24, y+6*H/24)
  cpx = x+16*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+7*H/24)
  cpx = x+16*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+8*H/24)
  cpx = x+23*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+7*H/24)
  cpx = x+23*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+5*H/24)
  ctx.fill()
}

function tpIAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+12*H/24)
  cpx = x+22*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+7*H/24)
  cpx = x+22*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+2*H/24)
  cpx = x+12*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+7*H/24)
  cpx = x+12*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+12*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+9*H/24)
  cpx = x+19*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+7*H/24)
  cpx = x+19*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+5*H/24)
  cpx = x+15*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+7*H/24)
  cpx = x+15*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+9*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+22*W/24, y+7*H/24)
  ctx.lineTo(x+22*W/24, y+23*H/24)
  ctx.lineTo(x+13*W/24, y+23*H/24)
  ctx.lineTo(x+13*W/24, y+12*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+2*H/24)
  cpx = x+8*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+2*H/24)
  cpx = x+3*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+7*H/24)
  cpx = x+3*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+12*H/24)
  cpx = x+17*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+12*H/24)
  ctx.stroke()
ctx.setLineDash([W/24])
  //5
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+14*H/24)
  ctx.lineTo(x+22*W/24, y+14*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+3.4*W/24, y+5*H/24)
  ctx.lineTo(x+12.2*W/24, y+5*H/24)
  ctx.stroke()
ctx.setLineDash([])

//7
  ctx.beginPath()
  ctx.moveTo(x+23*W/24, y+5*H/24)
  ctx.lineTo(x+17*W/24, y+6*H/24)
  cpx = x+16*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+7*H/24)
  cpx = x+16*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+8*H/24)
  cpx = x+23*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+7*H/24)
  cpx = x+23*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+5*H/24)
  ctx.fill()
}

function paper_towelAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+24*W/24, y+0*H/24)
  cpx = x+20*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+5*H/24)
  cpx = x+20*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+24*W/24, y+10*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+24*W/24, y+2*H/24)
  cpx = x+22*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+5*H/24)
  cpx = x+22*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+24*W/24, y+8*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+0*H/24)
  cpx = x+4*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+5*H/24)
  cpx = x+4*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+14*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+22*H/24)
  cpx = x+4*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+24*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+5*H/24)
  cpx = x+20*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+14*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+5*H/24)
  cpx = x+4*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+14*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+22*H/24)
  cpx = x+23*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+21*H/24)
  cpx = x+23*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+19*H/24)
  cpx = x+23*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+10*H/24)
  cpx = x+20*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+14*H/24)
  cpx = x+19*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+15*H/24)
  cpx = x+15*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+14*H/24)
  cpx = x+13*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+15*H/24)
  cpx = x+13*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+18*H/24)
  cpx = x+20*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+22*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+23*W/24, y+21*H/24)
  cpx = x+23*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+24*W/24, y+23*H/24)
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+22*H/24)
  cpx = x+4*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+18*H/24)
  cpx = x+11*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+15*H/24)
  cpx = x+11*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+14*H/24)
  cpx = x+9*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+15*H/24)
  cpx = x+5*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+14*H/24)
  cpx = x+4*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+10*H/24)
  cpx = x+1*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+18*H/24)
  cpx = x+1*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+20*H/24)
  cpx = x+1*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+0*W/24, y+23*H/24)
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+22*H/24)
  cpx = x+1*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+21*H/24)
  ctx.stroke()

  //11
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+22*H/24)
  cpx = x+20*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+24*H/24)
  ctx.stroke()

  //12
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+10*H/24)
  ctx.lineTo(x+24*W/24, y+10*H/24)
  ctx.stroke()

ctx.setLineDash([W/24])    //15
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+13*H/24)
  ctx.lineTo(x+20*W/24, y+13*H/24)
  ctx.stroke()

  //16
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+20*H/24)
  ctx.lineTo(x+19*W/24, y+20*H/24)
  ctx.stroke()

    //17
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+6*H/24)
  ctx.lineTo(x+20*W/24, y+6*H/24)
  ctx.stroke()

ctx.setLineDash([])

  //19
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+0*H/24)
  ctx.lineTo(x+24*W/24, y+0*H/24)
  ctx.stroke()

  //18
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+24*H/24)
  ctx.lineTo(x+20*W/24, y+24*H/24)
  ctx.stroke()
}

function puzAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, d = 0, angle = pet(0)

  //1
  ctx.beginPath()
  p = rotatePoint(x+4*W/24+pet(d), y+4*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+20*W/24+pet(d), y+4*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+20*W/24+pet(d), y+20*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+4*W/24+pet(d), y+20*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+4*W/24+pet(d), y+4*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.fill()

  let t = 0
  //2
  ctx.beginPath()
  p = rotatePoint(x+10*W/24+pet(d), y+2*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+10*W/24+pet(d), y+6*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+14*W/24+pet(d), y+6*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+14*W/24+pet(d), y+2*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+10*W/24+pet(d), y+2*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  t = randomPick(([1,2,3]))
  if (t === 0)
    ctx.globalCompositeOperation = "source-over"
  if (t === 2)
    ctx.globalCompositeOperation = "destination-out"
  if (t !== 3)
  ctx.fill()


  //3
  ctx.beginPath()
  p = rotatePoint(x+2*W/24+pet(d), y+10*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+6*W/24+pet(d), y+10*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+6*W/24+pet(d), y+14*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+2*W/24+pet(d), y+14*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+2*W/24+pet(d), y+10*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  t = randomPick(([1,2,3]))
  if (t === 0)
    ctx.globalCompositeOperation = "source-over"
  if (t === 2)
    ctx.globalCompositeOperation = "destination-out"
  if (t !== 3)
  ctx.fill()
  ctx.fill()

  //4
  ctx.beginPath()
  p = rotatePoint(x+10*W/24+pet(d), y+18*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+10*W/24+pet(d), y+22*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+14*W/24+pet(d), y+22*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+14*W/24+pet(d), y+18*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+10*W/24+pet(d), y+18*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  t = randomPick(([1,2,3]))
  if (t === 0)
    ctx.globalCompositeOperation = "source-over"
  if (t === 2)
    ctx.globalCompositeOperation = "destination-out"
  if (t !== 3)
  ctx.fill()
  ctx.fill()

  //5
  ctx.beginPath()
  p = rotatePoint(x+18*W/24+pet(d), y+10*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+18*W/24+pet(d), y+14*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+22*W/24+pet(d), y+14*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+22*W/24+pet(d), y+10*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+18*W/24+pet(d), y+10*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  t = randomPick(([1,2,3]))
  if (t === 0)
    ctx.globalCompositeOperation = "source-over"
  if (t === 2)
    ctx.globalCompositeOperation = "destination-out"
  if (t !== 3)
  ctx.fill()
  ctx.globalCompositeOperation = "source-over"
}

function dnaAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.lineWidth *= 1.7
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+1*H/24)
  cpx = x+7*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+12*H/24)
  cpx = x+17*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+23*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+1*H/24)
  cpx = x+17*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+12*H/24)
  cpx = x+7*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+23*H/24)
  ctx.stroke()
  ctx.lineWidth /= 1.7
  //3
  ctx.beginPath()
  ctx.moveTo(x+6.3*W/24, y+3*H/24)
  ctx.lineTo(x+17.7*W/24, y+3*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+6*H/24)
  ctx.lineTo(x+17*W/24, y+6*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+8.1*W/24, y+9*H/24)
  ctx.lineTo(x+15.9*W/24, y+9*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+8.1*W/24, y+15*H/24)
  ctx.lineTo(x+15.9*W/24, y+15*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+18*H/24)
  ctx.lineTo(x+17*W/24, y+18*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+6.3*W/24, y+21*H/24)
  ctx.lineTo(x+17.7*W/24, y+21*H/24)
  ctx.stroke()
}

function check_engine_lightAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/25
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+7*H/24)
  ctx.lineTo(x+1*W/24, y+16*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+12*H/24)
  ctx.lineTo(x+3*W/24, y+12*H/24)
  ctx.lineTo(x+3*W/24, y+7*H/24)
  ctx.lineTo(x+5*W/24, y+7*H/24)
  ctx.lineTo(x+6*W/24, y+6*H/24)
  ctx.lineTo(x+17*W/24, y+6*H/24)
  ctx.lineTo(x+17*W/24, y+7*H/24)
  ctx.lineTo(x+18*W/24, y+7*H/24)
  ctx.lineTo(x+18*W/24, y+9*H/24)
  ctx.lineTo(x+19*W/24, y+9*H/24)
  ctx.lineTo(x+19*W/24, y+7*H/24)
  ctx.lineTo(x+21*W/24, y+7*H/24)
  ctx.lineTo(x+23*W/24, y+10*H/24)
  ctx.lineTo(x+23*W/24, y+15*H/24)
  ctx.lineTo(x+21*W/24, y+18*H/24)
  ctx.lineTo(x+19*W/24, y+18*H/24)
  ctx.lineTo(x+19*W/24, y+16*H/24)
  ctx.lineTo(x+18*W/24, y+16*H/24)
  ctx.lineTo(x+18*W/24, y+18*H/24)
  ctx.lineTo(x+17*W/24, y+18*H/24)
  ctx.lineTo(x+17*W/24, y+19*H/24)
  ctx.lineTo(x+10*W/24, y+19*H/24)
  ctx.lineTo(x+7*W/24, y+16*H/24)
  ctx.lineTo(x+3*W/24, y+16*H/24)
  ctx.lineTo(x+3*W/24, y+12*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+4*H/24)
  ctx.lineTo(x+15*W/24, y+4*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+6*H/24)
  ctx.lineTo(x+11*W/24, y+4*H/24)
  ctx.stroke()

  ctx.lineWidth *= 5
  ctx.globalAlpha /=4
  ctx.lineJoin = "round"
  ctx.lineCap = "round"

  //1
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+7*H/24)
  ctx.lineTo(x+1*W/24, y+16*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  //ctx.moveTo(x+1*W/24, y+12*H/24)
  ctx.moveTo(x+3*W/24, y+12*H/24)
  ctx.lineTo(x+3*W/24, y+7*H/24)
  ctx.lineTo(x+5*W/24, y+7*H/24)
  ctx.lineTo(x+6*W/24, y+6*H/24)
  ctx.lineTo(x+17*W/24, y+6*H/24)
  ctx.lineTo(x+17*W/24, y+7*H/24)
  ctx.lineTo(x+18*W/24, y+7*H/24)
  ctx.lineTo(x+18*W/24, y+9*H/24)
  ctx.lineTo(x+19*W/24, y+9*H/24)
  ctx.lineTo(x+19*W/24, y+7*H/24)
  ctx.lineTo(x+21*W/24, y+7*H/24)
  ctx.lineTo(x+23*W/24, y+10*H/24)
  ctx.lineTo(x+23*W/24, y+15*H/24)
  ctx.lineTo(x+21*W/24, y+18*H/24)
  ctx.lineTo(x+19*W/24, y+18*H/24)
  ctx.lineTo(x+19*W/24, y+16*H/24)
  ctx.lineTo(x+18*W/24, y+16*H/24)
  ctx.lineTo(x+18*W/24, y+18*H/24)
  ctx.lineTo(x+17*W/24, y+18*H/24)
  ctx.lineTo(x+17*W/24, y+19*H/24)
  ctx.lineTo(x+10*W/24, y+19*H/24)
  ctx.lineTo(x+7*W/24, y+16*H/24)
  ctx.lineTo(x+3*W/24, y+16*H/24)
  ctx.lineTo(x+3*W/24, y+12*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+4*H/24)
  ctx.lineTo(x+15*W/24, y+4*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+6*H/24)
  ctx.lineTo(x+11*W/24, y+4*H/24)
 // ctx.stroke()
  ctx.lineWidth /= 5
  ctx.globalAlpha *=4
}

function tail_wagging_the_dogAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+4*H/24)
  cpx = x+12*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+4*H/24)
  cpx = x+14*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+6*H/24)
  cpx = x+20*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+11*H/24)
  cpx = x+20*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+17*H/24)
  cpx = x+17*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+13*H/24)
  cpx = x+17*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+8*H/24)
  cpx = x+14*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+17*H/24)
  cpx = x+14*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+23*H/24)
  cpx = x+9*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+23*H/24)
  cpx = x+9*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+21*H/24)
  cpx = x+11*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+16*H/24)
  cpx = x+7*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+11*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+12*H/24)
  cpx = x+7*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+12*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+16*H/24)
  cpx = x+6*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+23*H/24)
  cpx = x+2*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+23*H/24)
  cpx = x+2*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+21*H/24)
  cpx = x+5*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+16*H/24)
  cpx = x+3*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+12*H/24)
  ctx.stroke()
}

function enlightenmentAt (x,y,W,color,INVERT) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  if (INVERT) {
    //1
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+2*H/24)
  cpx = x+9*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+2*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+2*H/24)
  cpx = x+15*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+2*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+5*H/24)
  ctx.lineTo(x+10*W/24, y+6*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+5*H/24)
  ctx.lineTo(x+14*W/24, y+6*H/24)
  ctx.stroke()
  }

if (!INVERT) {
  ctx.globalAlpha /= 3
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+3*H/24)
  ctx.lineTo(x+10*W/24, y+2*H/24)
  cpx = x+7*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+4*H/24)
  cpx = x+7*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+6*H/24)
  cpx = x+17*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+4*H/24)
  cpx = x+17*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+2*H/24)
  ctx.lineTo(x+14*W/24, y+3*H/24)
  cpx = x+16*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+4*H/24)
  cpx = x+16*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+5*H/24)
  cpx = x+8*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+4*H/24)
  cpx = x+8*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+3*H/24)
  ctx.fill()
  ctx.globalAlpha *= 3
}
  //1
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+4.8*H/24)
  cpx = x+10*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+3*H/24)
  cpx = x+10*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+1*H/24)
  cpx = x+14*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+3*H/24)
  cpx = x+14*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+4.8*H/24)
  ctx.stroke()
  //2
  if (!INVERT) {
    ctx.beginPath()
    ctx.moveTo(x+10*W/24, y+3*H/24)
    cpx = x+8*W/24
    cpy = y+3*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+4*H/24)
    cpx = x+8*W/24
    cpy = y+5*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+5*H/24)
    cpx = x+16*W/24
    cpy = y+5*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+4*H/24)
    cpx = x+16*W/24
    cpy = y+3*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+3*H/24)
    ctx.stroke()
    //3
    ctx.beginPath()
    ctx.moveTo(x+10*W/24, y+2*H/24)
    cpx = x+7*W/24
    cpy = y+2*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+4*H/24)
    cpx = x+7*W/24
    cpy = y+6*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+6*H/24)
    cpx = x+17*W/24
    cpy = y+6*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+4*H/24)
    cpx = x+17*W/24
    cpy = y+2*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+2*H/24)
    ctx.stroke()
  }

  //4
  ctx.beginPath()
  ctx.moveTo(x+10.2*W/24, y+3.5*H/24)
  ctx.lineTo(x+11.2*W/24, y+4.5*H/24)
  ctx.stroke()
  ctx.beginPath()
  ctx.moveTo(x+11.2*W/24, y+3.5*H/24)
  ctx.lineTo(x+10.2*W/24, y+4.5*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+12.8*W/24, y+3.5*H/24)
  ctx.lineTo(x+13.8*W/24, y+4.5*H/24)
  ctx.stroke()
  ctx.beginPath()
  ctx.moveTo(x+13.8*W/24, y+3.5*H/24)
  ctx.lineTo(x+12.8*W/24, y+4.5*H/24)
  ctx.stroke()
  //6
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+6*H/24)
  cpx = x+10*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+7*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+6*H/24)
  cpx = x+14*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+7*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+23*H/24)
  cpx = x+0*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+7*H/24)
  cpx = x+24*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+23*H/24)
  ctx.stroke()

  //11
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+2*H/24)
  cpx = x+1*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+2*H/24)
  cpx = x+3*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+2*H/24)
  cpx = x+5*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+2*H/24)
  cpx = x+7*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+2*H/24)
  ctx.stroke()

  //12
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+2*H/24)
  cpx = x+17*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+2*H/24)
  cpx = x+19*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+2*H/24)
  cpx = x+21*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+2*H/24)
  cpx = x+23*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+24*W/24, y+2*H/24)
  ctx.stroke()

  //13 left foot
  ctx.beginPath()
  ctx.moveTo(x+6.2*W/24, y+8.2*H/24)
  cpx = x+5*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+5*H/24)
  cpx = x+3*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+6*H/24)
  cpx = x+0*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3.5*W/24, y+11*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+23*H/24)
  cpx = x+12*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+23*H/24)
  ctx.stroke()

  //15
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+20*H/24)
  ctx.lineTo(x+5.8*W/24, y+20*H/24)
  ctx.stroke()

  //16
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+15*H/24)
  ctx.lineTo(x+6*W/24, y+16*H/24)
  ctx.stroke()

  //17
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+13*H/24)
  ctx.lineTo(x+4*W/24, y+10.25*H/24)
  ctx.stroke()

  //18
  ctx.beginPath()
  ctx.moveTo(x+8.8*W/24, y+10.8*H/24)
  ctx.lineTo(x+7*W/24, y+8*H/24)
  ctx.stroke()

  //19
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+10*H/24)
  ctx.lineTo(x+12*W/24, y+7*H/24)
  ctx.stroke()

  //20
  ctx.beginPath()
  ctx.moveTo(x+15.2*W/24, y+10.8*H/24)
  ctx.lineTo(x+17*W/24, y+8*H/24)
  ctx.stroke()

  //21
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+13*H/24)
  ctx.lineTo(x+20*W/24, y+10.25*H/24)
  ctx.stroke()

  //22
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+16*H/24)
  ctx.lineTo(x+22*W/24, y+15*H/24)
  ctx.stroke()

  //23
  ctx.beginPath()
  ctx.moveTo(x+18.2*W/24, y+20*H/24)
  ctx.lineTo(x+22*W/24, y+20*H/24)
  ctx.stroke()

  // right foot
  ctx.beginPath()
  ctx.moveTo(x+17.8*W/24, y+8.2*H/24)
  cpx = x+19*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+5*H/24)
  cpx = x+21*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+6*H/24)
  cpx = x+24*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20.5*W/24, y+11*H/24)
  ctx.stroke()

  //25
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+16*H/24)
  cpx = x+12*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+16*H/24)
  ctx.stroke()

  //26
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+23*H/24)
  cpx = x+5*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+10*H/24)
  cpx = x+19*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+23*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+2*H/24)
  ctx.lineTo(x+8.2*W/24, y+2.2*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+2*H/24)
  ctx.lineTo(x+15.8*W/24, y+2.2*H/24)
  ctx.stroke()
  //claws
  ctx.beginPath()
  ctx.moveTo(x+21*W/24, y+5*H/24)
  cpx = x+21*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+4*H/24)
  ctx.stroke()
  //4
  ctx.beginPath()
  ctx.moveTo(x+22*W/24, y+6*H/24)
  cpx = x+22*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+5*H/24)
  ctx.stroke()
  //5
  ctx.beginPath()
  ctx.moveTo(x+23*W/24, y+7*H/24)
  cpx = x+23*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+24*W/24, y+6*H/24)
  ctx.stroke()
  //6
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+5*H/24)
  cpx = x+3*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+4*H/24)
  ctx.stroke()
  //7
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+6*H/24)
  cpx = x+2*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+5*H/24)
  ctx.stroke()
  //8
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+7*H/24)
  cpx = x+1*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+0*W/24, y+6*H/24)
  ctx.stroke()
}

function yolkAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+20*H/24)
  cpx = x+23*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+12*H/24)
  cpx = x+23*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+6*H/24)
  cpx = x+1*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+12*H/24)
  cpx = x+1*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+20*H/24)
  cpx = x+5*W/24
  cpy = y+12*H/24
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+12*H/24)
  cpx = x+5*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+15*H/24)
  cpx = x+19*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+12*H/24)
  cpx = x+19*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+9*H/24)
  cpx = x+5*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+12*H/24)
  ctx.stroke()
}

function blind_turtleAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+4*H/24)
  cpx = x+18*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+11*H/24)
  cpx = x+19*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+20*H/24)
  cpx = x+5*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+11*H/24)
  cpx = x+6*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+4*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+4*H/24)
  cpx = x+11*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+2*H/24)
  cpx = x+11*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+1*H/24)
  cpx = x+13*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+2*H/24)
  cpx = x+13*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+4*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+5*H/24)
  cpx = x+7*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+4*H/24)
  cpx = x+7*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+3*H/24)
  cpx = x+5*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+4*H/24)
  cpx = x+5*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+5*H/24)
  cpx = x+7*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+6*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+5*H/24)
  cpx = x+17*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+4*H/24)
  cpx = x+17*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+3*H/24)
  cpx = x+19*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+4*H/24)
  cpx = x+19*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+5*H/24)
  cpx = x+17*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+6*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+20*H/24)
  cpx = x+12*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+24*H/24)
  cpx = x+13*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+20*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+16*H/24)
  cpx = x+5*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+17*H/24)
  cpx = x+4*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+18*H/24)
  cpx = x+4*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+19*H/24)
  cpx = x+6*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+18*H/24)
  cpx = x+7*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6.8*W/24, y+17.2*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+16*H/24)
  cpx = x+19*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+17*H/24)
  cpx = x+20*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+18*H/24)
  cpx = x+20*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+19*H/24)
  cpx = x+18*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+18*H/24)
  cpx = x+17*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17.2*W/24, y+17.2*H/24)
  ctx.stroke()
}

function buffleheadsAt (x,y,W,color,INVERT) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let lw = ctx.lineWidth
  let i = 0, r1 = W/24, r2 = W/48
  let xoff = W/5 + pet(W/4), yoff = W/5 + pet(W/4)
  ctx.globalAlpha /= 1.5
  let alpha = ctx.globalAlpha
  let n = 0
  ctx.save()
  ctx.beginPath()
  ctx.moveTo(x,y)
  ctx.lineTo(x+W,y)
  ctx.lineTo(x+W,y+H)
  ctx.lineTo(x,y+H)
  ctx.lineTo(x,y)
  ctx.closePath()
  ctx.clip()
  let max = 7
  for (; n < 2; n++) {
    ctx.lineWidth = lw
    r1 = W/24, r2 = W/48
    ctx.globalAlpha = alpha
    i = 0
    for (; i < max; i++) {
      ctx.beginPath()
      ctx.ellipse(x+xoff,y+yoff,r1,r2,0,0,Math.PI*2)
      ctx.closePath()
      ctx.stroke()
      r1*=1.8
      r2*=1.8
      ctx.lineWidth *= 1.5
      ctx.globalAlpha *= 0.7
    }
    xoff = W - xoff
    yoff = H - yoff
  }
  ctx.restore()
  ctx.lineWidth = lw
  ctx.globalAlpha *= 1.5
}

function trees_on_the_hillsideAt (x,y,W,color,INVERT) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/10
  ctx.lineWidth = W/48
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, d = 2*W/24//, angle = 0+pet(6)
  let i = 0, max = 17, x0 = x, y0 = y
  ctx.save()
  ctx.beginPath()
  ctx.moveTo(x,y)
  ctx.lineTo(x+W,y)
  ctx.lineTo(x+W,y+H)
  ctx.lineTo(x,y+H)
  ctx.lineTo(x,y)
  ctx.closePath()
  ctx.clip()
  ctx.globalAlpha /= 4
  for (; i < max; i++) {
    y = y0+Math.random()*H
    let p = randomPick([1,2,3,4,1,2])
    ctx.lineWidth *= p
    ctx.beginPath()
    ctx.moveTo(x+27*W/24-(8*W/24*Math.random())+pet(d), y+2*H/24+pet(d))
    cpx = x+12*W/24
    cpy = y+3*H/24
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x-2*W/24+pet(d), y+4*H/24+pet(d))
    ctx.closePath()
    ctx.stroke()
    ctx.lineWidth /= p
    
  }
  ctx.globalAlpha *= 4
  
  max -= 4
  y = y0, x = x0
  i = 0
  for (; i < max; i++) {
    x = x0+Math.random()*W
    y = y0+Math.random()*H //- 2*H/24
    let p = randomPick([1,2,1,2,3,3,1,2])
    ctx.lineWidth *= p
    ctx.beginPath()
    ctx.moveTo(x+pet(d), y+pet(d))
    cpx = x+2*W/24
    cpy = y-9*H/24
    ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+2*W/24+pet(d), y-23*H/24+pet(d))
    ctx.stroke()
    ctx.lineWidth /= p
  }
  ctx.restore()
}


function trees_on_the_hillsideAt_OG (x,y,W,color,INVERT) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, d = 20, angle = 0+pet(6)
  let i = 0, max = 13, x0 = x, y0 = y
  ctx.save()
  ctx.beginPath()
  ctx.moveTo(x,y)
  ctx.lineTo(x+W,y)
  ctx.lineTo(x+W,y+H)
  ctx.lineTo(x,y+H)
  ctx.lineTo(x,y)
  ctx.closePath()
  ctx.clip()
  angle = 0 + pet(28)
  ctx.globalAlpha /= 3
  for (; i < max; i++) {
    angle += pet(8)
    y = y0+Math.random()*W + 5*H/24
    ctx.beginPath()
    p = rotatePoint(x+0*W/24+pet(d), y+0*H/24+pet(d) ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    p = rotatePoint(x+4*W/24+pet(d), y+0*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+20*W/24+pet(d), y+0*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+24*W/24+pet(d), y+0*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+24*W/24+pet(d), y+1*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+14*W/24+pet(d), y+1*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+7*W/24+pet(d), y+1*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+0*W/24+pet(d), y+1*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    ctx.fill()
  }
  ctx.globalAlpha *= 3
  y = y0, x = x0
  angle = 0 //+ pet(20)
  i = 0
  for (; i < max; i++) {
    x = x0+Math.random()*W
    angle += pet(18)
    let bottom = randomPick([26,27,24,23,21,22,20,19,17,15,12])
    ctx.beginPath()
    p = rotatePoint(x+0*W/24+pet(d), y+bottom*H/24+pet(d) ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    p = rotatePoint(x+1*W/24+pet(d), y+bottom*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+1*W/24+pet(d), y+bottom*0.8*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+1*W/24+pet(d), y+7*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+1*W/24+pet(d), y+-6*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+0*W/24+pet(d), y+-6*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+0*W/24+pet(d), y+3*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+0*W/24+pet(d), y+13*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+0*W/24+pet(d), y+bottom*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    ctx.fill()
  }
  ctx.restore()
}


function trash_dayAt (x,y,W,color,INVERT) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  x -= W/24
  if (!INVERT)
    x += W/4+W/48
  binAt (x,y,W,color)
  if (INVERT) {
    x += W/2
    binAt (x,y-W/10,W*1.1,color)
  }
}

function mittensAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let rule = randomPick([110,18,26,73,105,45, 54,73,122,150,193,22,176,107,240,120,9,154,135,142])
ctx.save()
x-= 0.25*W/24
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+22*H/24)
  cpx = x+1*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+7*H/24)
  cpx = x+1*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+2*H/24)
  cpx = x+8*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+6*H/24)
  cpx = x+8*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+11*H/24)
  cpx = x+10*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+9*H/24)
  cpx = x+12*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+10*H/24)
  cpx = x+12*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+12*H/24)
  cpx = x+9*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+16*H/24)
  cpx = x+8*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+22*H/24)
  cpx = x+1*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+22*H/24)
  ctx.stroke()
  ctx.clip()
  cellular_automataAt(x,y,W,color,rule)
  ctx.restore()
  ctx.save()
x+= 0.5*W/24
  ctx.beginPath()
  ctx.moveTo(x+23*W/24, y+6*H/24)
  ctx.lineTo(x+23*W/24, y+22*H/24)
  ctx.lineTo(x+16*W/24, y+22*H/24)
  ctx.lineTo(x+16*W/24, y+16*H/24)
  cpx = x+13*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+12*H/24)
  cpx = x+12*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+10*H/24)
  cpx = x+12*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+9*H/24)
  cpx = x+14*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+11*H/24)
  cpx = x+16*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+6*H/24)
  cpx = x+16*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+2*H/24)
  cpx = x+23*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+6*H/24)
  ctx.stroke()
  ctx.clip()
  cellular_automataAt(x,y,W,color,rule)
  ctx.restore()
}

function casseroleAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  let i = 0, j = 0, p = W/32
  for (; i < 10; i++) {
    j = 0
    for (; j < 5; j++) {
      elbowAt(x+i*W/12+W/11+pet(p), y+j*W/12+H/3.4+pet(p), W/14, color)
    }
  }
  
  //1
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+17*H/24)
  cpx = x+2*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+16*H/24)
  cpx = x+2*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+6*H/24)
  cpx = x+2*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+5*H/24)
  cpx = x+20*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+5*H/24)
  cpx = x+22*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+6*H/24)
  cpx = x+22*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+16*H/24)
  cpx = x+22*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+17*H/24)
  cpx = x+4*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+17*H/24)
  ctx.stroke()

 //6
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+8*H/24)
  cpx = x+2*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+7*H/24)
  cpx = x+20*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+7*H/24)
  cpx = x+22*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+8*H/24)
  ctx.stroke()
//4
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+16*H/24)
  cpx = x+2*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+17*H/24)
  cpx = x+20*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+17*H/24)
  cpx = x+22*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+16*H/24)
  cpx = x+22*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+20*H/24)
  cpx = x+22*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+21*H/24)
  cpx = x+4*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+21*H/24)
  cpx = x+2*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+20*H/24)
  cpx = x+2*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+16*H/24)
  ctx.stroke()
  ctx.globalAlpha /=3
  ctx.fill()
  ctx.globalAlpha *=3
  //2
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+8*H/24)
  cpx = x+2*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+9*H/24)
  cpx = x+0*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+0*W/24, y+10*H/24)
  cpx = x+0*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+0*W/24, y+14*H/24)
  cpx = x+0*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+15*H/24)
  cpx = x+2*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+16*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+22*W/24, y+8*H/24)
  cpx = x+22*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+9*H/24)
  cpx = x+24*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+24*W/24, y+10*H/24)
  cpx = x+24*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+24*W/24, y+14*H/24)
  cpx = x+24*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+15*H/24)
  cpx = x+22*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+16*H/24)
  ctx.stroke()
}

function elbowAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, d = 0, angle = pet(360)

  //1
  ctx.beginPath()
  p = rotatePoint(x+16*W/24+pet(d), y+23*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+4*W/24+pet(d)
  cpy = y+23*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+4*W/24+pet(d), y+12*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+4*W/24+pet(d)
  cpy = y+1*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+17*W/24+pet(d), y+1*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+19*W/24+pet(d)
  cpy = y+1*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+19*W/24+pet(d), y+4*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+19*W/24+pet(d)
  cpy = y+7*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+17*W/24+pet(d), y+7*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+15*W/24+pet(d)
  cpy = y+7*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+15*W/24+pet(d), y+4*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+15*W/24+pet(d)
  cpy = y+1*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+17*W/24+pet(d), y+1*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.globalAlpha /=3
 // ctx.fill()
  ctx.globalAlpha *=3
  ctx.stroke()

  //2
  ctx.beginPath()
  p = rotatePoint(x+17*W/24+pet(d), y+7*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+10*W/24+pet(d)
  cpy = y+7*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+10*W/24+pet(d), y+12*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+10*W/24+pet(d)
  cpy = y+17*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+17*W/24+pet(d), y+17*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+19*W/24+pet(d)
  cpy = y+17*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+19*W/24+pet(d), y+20*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+19*W/24+pet(d)
  cpy = y+23*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+17*W/24+pet(d), y+23*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+15*W/24+pet(d)
  cpy = y+23*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+15*W/24+pet(d), y+20*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+15*W/24+pet(d)
  cpy = y+17*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+17*W/24+pet(d), y+17*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.globalAlpha /=3
 // ctx.fill()
  ctx.globalAlpha *=3
  ctx.stroke()
}

function binAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  
  //1
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+21*H/24)
  ctx.lineTo(x+11.5*W/24, y+21*H/24)
  ctx.lineTo(x+11.5*W/24, y+19*H/24)
  ctx.lineTo(x+11.2*W/24, y+19*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+21*H/24)
  ctx.lineTo(x+1.5*W/24, y+21*H/24)
  ctx.lineTo(x+1.5*W/24, y+19*H/24)
  ctx.lineTo(x+1.8*W/24, y+19*H/24)
  ctx.stroke()


 //18
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+5*H/24)
  cpx = x+1*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+4*H/24)
  cpx = x+11*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+4*H/24)
  cpx = x+12*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+5*H/24)
  ctx.stroke()

  //14
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+6*H/24)
  ctx.lineTo(x+2*W/24, y+21*H/24)
  ctx.lineTo(x+11*W/24, y+21*H/24)
  ctx.lineTo(x+12*W/24, y+6*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+6*H/24)
  ctx.lineTo(x+3*W/24, y+6*H/24)
  ctx.lineTo(x+4*W/24, y+7*H/24)
  ctx.lineTo(x+9*W/24, y+7*H/24)
  ctx.lineTo(x+10*W/24, y+6*H/24)
  ctx.lineTo(x+12*W/24, y+6*H/24)
  ctx.lineTo(x+12*W/24, y+5*H/24)
  ctx.lineTo(x+1*W/24, y+5*H/24)
  ctx.lineTo(x+1*W/24, y+6*H/24)
  ctx.stroke()
}

function trail_mapAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/100
  ctx.strokeStyle = color
  ctx.fillStyle = color

  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  //2
  ctx.globalAlpha /= 3
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+4*H/24)
  ctx.lineTo(x+3*W/24, y+14*H/24)
  ctx.lineTo(x+5*W/24, y+14*H/24)
  cpx = x+5*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+12*H/24)
  cpx = x+9*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+14*H/24)
  cpx = x+8*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+16*H/24)
  cpx = x+5*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+14*H/24)
  ctx.lineTo(x+3*W/24, y+14*H/24)
  ctx.lineTo(x+4*W/24, y+21*H/24)
  ctx.lineTo(x+12*W/24, y+21*H/24)
  ctx.lineTo(x+13*W/24, y+20*H/24)
  ctx.lineTo(x+20*W/24, y+20*H/24)
  ctx.lineTo(x+18*W/24, y+8*H/24)
  ctx.lineTo(x+14*W/24, y+7*H/24)
  ctx.lineTo(x+10*W/24, y+7*H/24)
  ctx.lineTo(x+10*W/24, y+3*H/24)
  ctx.lineTo(x+2*W/24, y+4*H/24)
  ctx.fill()
  ctx.globalAlpha *= 3
  ctx.lineWidth *= 2
  //3
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+2*H/24)
  cpx = x+22*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+24*W/24, y+9*H/24)
  ctx.stroke()
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+16*H/24)
  cpx = x+2*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+22*H/24)
  ctx.stroke()
  ctx.lineWidth /= 2
  //4
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+3*H/24)
  ctx.lineTo(x+14*W/24, y+4*H/24)
  ctx.lineTo(x+11*W/24, y+4*H/24)
  ctx.lineTo(x+11*W/24, y+7*H/24)
  ctx.lineTo(x+14*W/24, y+7*H/24)
  ctx.lineTo(x+14*W/24, y+4*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+7*H/24)
  cpx = x+12*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+11*H/24)
  cpx = x+17*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+16*H/24)
  cpx = x+16*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+18*H/24)
  cpx = x+8*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+18*H/24)
  cpx = x+4*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+10*H/24)
  cpx = x+4*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+9*H/24)
  cpx = x+12*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+8*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+9*H/24)
  cpx = x+8*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+6*H/24)
  cpx = x+4*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+4*H/24)
  ctx.stroke()
}

function kioskAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  let v = document.getElementById("featuresize").value
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.font = "800 "+W/40+"pt Arial"  
  ctx.fillText("L O S T  G L O V E  W I L D L I F E  A R E A", x+5*W/24, y+7.2*H/24)
  ctx.font = "100 "+W/70+"pt Arial" 
  ctx.fillText("You", x+8.2*W/24, y+9.8*H/24)
  ctx.fillText("are", x+8.2*W/24, y+10.2*H/24)
  ctx.fillText("here", x+8.2*W/24, y+10.6*H/24)
  ctx.font = "800 "+W/40+"pt Arial" 
  ctx.fillText("*", x+7.4*W/24, y+10.5*H/24)
  trail_mapAt(x+4*W/24, y+8.5*H/24, 7*W/24,color)
  document.getElementById("featuresize").value /= 4
  tickAt(x+11.5*W/24, y+10.5*H/24, 5*W/24,color)
  document.getElementById("featuresize").value *= 4
  ctx.font = "800 "+W/69+"pt Garamond" 
  ctx.fillText("WARNING", x+12.8*W/24, y+11.8*H/24)
  //1
  ctx.beginPath()
  ctx.moveTo(x+12.5*W/24, y+11*H/24)
  ctx.lineTo(x+15.5*W/24, y+11*H/24)
  ctx.lineTo(x+15.5*W/24, y+15.2*H/24)
  ctx.lineTo(x+12.5*W/24, y+15.2*H/24)
  ctx.lineTo(x+12.5*W/24, y+11*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+12.8*W/24, y+14.5*H/24)
  ctx.lineTo(x+15.2*W/24, y+14.5*H/24)
  ctx.lineTo(x+15.2*W/24, y+15*H/24)
  ctx.lineTo(x+12.8*W/24, y+15*H/24)
  ctx.lineTo(x+12.8*W/24, y+14.5*H/24)
  ctx.globalAlpha /= 4
  ctx.fill()
  ctx.globalAlpha *= 4
  ctx.stroke()

//2
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+1*H/24)
  ctx.lineTo(x+4*W/24, y+6*H/24)
  ctx.lineTo(x+4*W/24, y+8*H/24)
  ctx.lineTo(x+21*W/24, y+8*H/24)
  ctx.lineTo(x+21*W/24, y+8.6*H/24)
  ctx.lineTo(x+3*W/24, y+8.5*H/24)
  ctx.lineTo(x+3*W/24, y+7*H/24)
  ctx.lineTo(x+2*W/24, y+6*H/24)

  ctx.lineTo(x+3*W/24, y+7*H/24)
  ctx.lineTo(x+3*W/24, y+6*H/24)
  ctx.lineTo(x+2*W/24, y+5*H/24)

  ctx.globalAlpha /= 4
  ctx.fill()
  ctx.globalAlpha *= 4

  //1
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+23*H/24)
  ctx.lineTo(x+2*W/24, y+1*H/24)
  ctx.lineTo(x+4*W/24, y+6*H/24)
  ctx.lineTo(x+22*W/24, y+6*H/24)
  ctx.lineTo(x+20*W/24, y+1*H/24)
  ctx.lineTo(x+2*W/24, y+1*H/24)
  ctx.stroke()
  //2
  ctx.beginPath()
  ctx.moveTo(x+3.2*W/24, y+16.5*H/24)
  ctx.lineTo(x+5.8*W/24, y+16.5*H/24)
  ctx.stroke()
  //2
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+6*H/24)
  ctx.lineTo(x+4*W/24, y+8*H/24)
  ctx.lineTo(x+22*W/24, y+8*H/24)
  ctx.lineTo(x+22*W/24, y+6*H/24)
  ctx.stroke()
  //3
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+23*H/24)
  ctx.lineTo(x+3*W/24, y+23*H/24)
  ctx.lineTo(x+3*W/24, y+3.5*H/24)
  ctx.stroke()
  //4
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+8*H/24)
  ctx.lineTo(x+20*W/24, y+23*H/24)
  ctx.lineTo(x+21*W/24, y+23*H/24)
  ctx.lineTo(x+21*W/24, y+8*H/24)
  ctx.stroke()
  //5
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+16*H/24)
  ctx.lineTo(x+3*W/24, y+16*H/24)
  ctx.stroke()
  //6
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+8*H/24)
  ctx.lineTo(x+12*W/24, y+16*H/24)
  ctx.stroke()
  //7
  
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+9*H/24)
  cpx = x+18*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+9*H/24)
  cpx = x+18*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+11*H/24)
  cpx = x+19*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+11*H/24)
  cpx = x+18*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+12*H/24)
  cpx = x+18*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+13*H/24)
  cpx = x+16*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+12*H/24)
  cpx = x+16*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+9*H/24)
  ctx.globalAlpha /= 2
  ctx.fill()
  ctx.globalAlpha *= 2
  ctx.stroke()
  //8
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+9*H/24)
  ctx.lineTo(x+11*W/24, y+9*H/24)
  ctx.lineTo(x+11*W/24, y+15*H/24)
  ctx.lineTo(x+4*W/24, y+15*H/24)
  ctx.lineTo(x+4*W/24, y+9*H/24)
  ctx.stroke()
  //9
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+16*H/24)
  ctx.lineTo(x+3*W/24, y+18*H/24)
  ctx.lineTo(x+6*W/24, y+18*H/24)
  ctx.lineTo(x+6*W/24, y+16*H/24)
  ctx.lineTo(x+3*W/24, y+16*H/24)
  ctx.stroke()
  document.getElementById("featuresize").value = v
}

function snitches_get_stitchesAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "round"
  ctx.lineJoin = "bevel"
  //1
  ctx.lineWidth *= 3
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+22*H/24)
  ctx.lineTo(x+22*W/24, y+2*H/24)
  ctx.stroke()
  //ctx.lineWidth *= 2
  let offset = ctx.lineWidth/4
  ctx.globalAlpha /=4
  ctx.beginPath()
  ctx.moveTo(x+2*W/24+offset, y+22*H/24+offset)
  ctx.lineTo(x+22*W/24+offset, y+2*H/24+offset)
  ctx.stroke()
  ctx.globalAlpha *=4
  ctx.lineWidth /= 3
  let r = ctx.lineWidth * 2
  let i = 0, inc = 0
  let x0 = 2, y0 = 18
  for (; i < 9; i++) {
    ctx.beginPath()
    ctx.moveTo(x+x0*W/24, y+y0*H/24)
    ctx.lineTo(x+(x0+4)*W/24, y+(y0+4)*H/24)
    ctx.stroke()
    ctx.globalAlpha /= 4
    ctx.beginPath()
    ctx.arc(x+x0*W/24, y+y0*H/24,r,0,Math.PI*2)
    ctx.fill()
    ctx.beginPath()
    ctx.arc(x+(x0+4)*W/24, y+(y0+4)*H/24,r,0,Math.PI*2)
    ctx.fill()
    ctx.globalAlpha *= 4

    x0+=2
    y0-=2
  }
  return 
}

function gone_silentAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "butt"
  ctx.lineJoin = "bevel"
  
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+23*H/24)
  ctx.lineTo(x+2*W/24, y+15*H/24)
  cpx = x+2*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+13*H/24)
  cpx = x+6*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+15*H/24)
  cpx = x+6*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+13*H/24)
  cpx = x+6*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+11*H/24)
  cpx = x+10*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+13*H/24)
  cpx = x+10*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+12*H/24)
  cpx = x+10*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+10*H/24)
  cpx = x+14*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+12*H/24)
  cpx = x+14*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+5*H/24)
  cpx = x+14*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+3*H/24)
  cpx = x+18*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+5*H/24)
  cpx = x+18*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+18*H/24)
  cpx = x+18*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+14*H/24)
  cpx = x+18*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+10*H/24)
  cpx = x+22*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+11*H/24)
  cpx = x+22*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+19*H/24)
  cpx = x+22*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+23*H/24)
  ctx.stroke()
 ctx.lineWidth *= 2
  //2
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+4.5*H/24)
  ctx.lineTo(x+14*W/24, y+4.5*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+4.5*H/24)
  ctx.lineTo(x+21*W/24, y+4.5*H/24)
  ctx.stroke()
ctx.lineCap = "round"
   //2
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+4.5*H/24)
  ctx.lineTo(x+21*W/24, y+4.5*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+4.5*H/24)
  ctx.lineTo(x+11*W/24, y+4.5*H/24)
  ctx.stroke()
}

function aaAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/200
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+22*H/24)
  cpx = x+20*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+15*H/24)
  cpx = x+4*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+15*H/24)
  cpx = x+4*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+22*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+8*H/24)
  cpx = x+20*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+8*H/24)
  cpx = x+20*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+2*H/24)
  cpx = x+18*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+2*H/24)
  cpx = x+14*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+2*H/24)
  cpx = x+10*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+2*H/24)
  cpx = x+6*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+2*H/24)
  cpx = x+4*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+8*H/24)
  cpx = x+5*W/24
  cpy = y+10*H/24
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+14*H/24)
  cpx = x+9*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+9*H/24)
  ctx.lineTo(x+7*W/24, y+14*H/24)
  ctx.lineTo(x+8*W/24, y+12*H/24)
  ctx.lineTo(x+10*W/24, y+12*H/24)
  ctx.lineTo(x+11*W/24, y+14*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+14*H/24)
  ctx.lineTo(x+15*W/24, y+9*H/24)
  ctx.lineTo(x+17*W/24, y+14*H/24)
  ctx.lineTo(x+16*W/24, y+12*H/24)
  ctx.lineTo(x+14*W/24, y+12*H/24)
  ctx.lineTo(x+13*W/24, y+14*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+2*H/24)
  ctx.lineTo(x+8*W/24, y+8*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+3*H/24)
  ctx.lineTo(x+6*W/24, y+8*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+3*H/24)
  ctx.lineTo(x+10*W/24, y+8*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+2*H/24)
  ctx.lineTo(x+12*W/24, y+8*H/24)
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+3*H/24)
  ctx.lineTo(x+14*W/24, y+8*H/24)
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+2*H/24)
  ctx.lineTo(x+16*W/24, y+8*H/24)
  ctx.stroke()

  //11
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+3*H/24)
  ctx.lineTo(x+18*W/24, y+8*H/24)
  ctx.stroke()

  //12
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+15*H/24)
  ctx.lineTo(x+6*W/24, y+19*H/24)
  ctx.stroke()

  //13
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+15*H/24)
  ctx.lineTo(x+8*W/24, y+20*H/24)
  ctx.stroke()

  //14
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+15*H/24)
  ctx.lineTo(x+10*W/24, y+21*H/24)
  ctx.stroke()

  //15
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+15*H/24)
  ctx.lineTo(x+12*W/24, y+22*H/24)
  ctx.stroke()

  //16
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+15*H/24)
  ctx.lineTo(x+14*W/24, y+21*H/24)
  ctx.stroke()

  //17
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+15*H/24)
  ctx.lineTo(x+16*W/24, y+20*H/24)
  ctx.stroke()

  //18
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+15*H/24)
  ctx.lineTo(x+18*W/24, y+19*H/24)
  ctx.stroke()
  //19
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+9*H/24)
  ctx.lineTo(x+4*W/24, y+14*H/24)
  ctx.stroke()

  //20
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+9*H/24)
  ctx.lineTo(x+20*W/24, y+14*H/24)
  ctx.stroke()
}

function comedianAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.beginPath()
  ctx.moveTo(x+6.5*W/24, y+8*H/24)
  cpx = x+6*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+21*H/24)
  cpx = x+19*W/24
  cpy = y+21.5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+21*H/24)
  cpx = x+20.5*W/24
  cpy = y+21.5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+20*H/24)
  cpx = x+20*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16.5*W/24, y+16*H/24)
  cpx = x+12.5*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+10*H/24)
  cpx = x+12*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+6*H/24)
  cpx = x+14*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+4*H/24)
  cpx = x+14*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14.5*W/24, y+3*H/24)
  cpx = x+14.5*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14.5*W/24, y+1.5*H/24)
  cpx = x+13*W/24
  cpy = y+1.5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+2.5*H/24)
  cpx = x+12*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+2*H/24)
  cpx = x+7*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6.5*W/24, y+8*H/24)
  ctx.stroke()

   //1
  ctx.beginPath()
  ctx.moveTo(x+13.8*W/24, y+14*H/24)
  cpx = x+22*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+11*H/24)
  ctx.lineTo(x+19.5*W/24, y+5.5*H/24)
  cpx = x+12*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+9*H/24)
  cpx = x+8.5*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6.5*W/24, y+10*H/24)
  cpx = x+1*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+13*H/24)
  cpx = x+3*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+19*H/24)
  cpx = x+8*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+16*H/24)
  cpx = x+10*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13.8*W/24, y+14*H/24)
  ctx.stroke()
}

function butterAt (x,y,W,color, INVERT) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.lineWidth /= 2
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+11*H/24)
  ctx.lineTo(x+6*W/24, y+11*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+10*H/24)
  ctx.lineTo(x+9*W/24, y+10*H/24)
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+9.9*W/24, y+9*H/24)
  ctx.lineTo(x+11.8*W/24, y+9*H/24)
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+12.7*W/24, y+8*H/24)
  ctx.lineTo(x+14.7*W/24, y+8*H/24)
  ctx.stroke()

  //11
  ctx.beginPath()
  ctx.moveTo(x+15.6*W/24, y+7*H/24)
  ctx.lineTo(x+17.3*W/24, y+7*H/24)
  ctx.stroke()
ctx.lineWidth *= 2
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+12*H/24)
  ctx.lineTo(x+18*W/24, y+6*H/24)
  ctx.lineTo(x+23*W/24, y+6*H/24)
  ctx.lineTo(x+7*W/24, y+12*H/24)
  ctx.lineTo(x+7*W/24, y+18*H/24)
  ctx.lineTo(x+1*W/24, y+18*H/24)
  ctx.lineTo(x+1*W/24, y+12*H/24)
  ctx.lineTo(x+7*W/24, y+12*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+18*H/24)
  ctx.lineTo(x+23*W/24, y+12*H/24)
  ctx.lineTo(x+23*W/24, y+6*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+12*H/24)
  ctx.lineTo(x+4*W/24, y+16*H/24)
  ctx.lineTo(x+7*W/24, y+12*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+15*H/24)
  ctx.lineTo(x+1*W/24, y+18*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+15*H/24)
  ctx.lineTo(x+7*W/24, y+18*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+13*H/24)
  ctx.stroke()
  ctx.transform(1,-0.38,0,1,x+11.5*W/24, y+14.5*H/24)
  ctx.font= Math.floor(2*W/24)+'px Arial'
  ctx.fillText('BUTTER', 0,0)
  ctx.font= Math.floor(2*W/54)+'px Arial';
  ctx.setTransform(1,0,0,1,0,0);
  ctx.transform(1,-0.38,0,1,x+13*W/24, y+11.6*H/24)
  if (INVERT)
    ctx.fillText('UNSALTED', 0,0)
  else
    ctx.fillText('SALTED', 0,0)
  ctx.setTransform(1,0,0,1,0,0);
  ctx.transform(1,-0.38,0,1,x+7.7*W/24, y+13.5*H/24)
  ctx.fillText('NET WT', 0, 0.2*H/24);
  ctx.fillText('4 OZ', 0, 1.4*H/24);
  ctx.fillText('(113g)', 0, 2.6*H/24);
  aaAt(12*W/24, 0, 3*W/24, color)
  ctx.setTransform(1,0,0,1,0,0);
}


function participationAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+2*H/24)
  cpx = x+18*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+15*H/24)
  cpx = x+13*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+19*H/24)
  cpx = x+18*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+22*H/24)
  cpx = x+6*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+22*H/24)
  cpx = x+6*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+19*H/24)
  cpx = x+11*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+15*H/24)
  cpx = x+6*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+2*H/24)
  cpx = x+18*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+2*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+4*H/24)
  cpx = x+21*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+8*H/24)
  cpx = x+21*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+11*H/24)
  ctx.stroke()

  
  //6
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+4*H/24)
  cpx = x+3*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+8*H/24)
  cpx = x+3*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+11*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+17.3*W/24, y+10*H/24)
  cpx = x+20*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+8*H/24)
  cpx = x+20*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+5*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+5*H/24)
  cpx = x+4*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+8*H/24)
  cpx = x+4*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6.7*W/24, y+10*H/24)
  ctx.stroke()
  //4
  ctx.font = "100 "+W/18+"pt Arial"
  let text = "AT LEAST"
  let w = ctx.measureText(text).width
  ctx.beginPath()
  ctx.fillText(text,x+ W/2 - w/2, y+6*H/24)
  ctx.stroke()
  text = "YOU"
  w = ctx.measureText(text).width
  ctx.beginPath()
  ctx.fillText(text,x+ W/2 - w/2, y+9*H/24)
  ctx.stroke()
  text = "TRIED"
  w = ctx.measureText(text).width
  ctx.beginPath()
  ctx.fillText(text,x+ W/2 - w/2, y+12*H/24)
  ctx.stroke()
}

function fistAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+14*H/24)
  cpx = x+4*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+20*H/24)
  cpx = x+20*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+14*H/24)
  cpx = x+20*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+7*H/24)
  cpx = x+14*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+7*H/24)
  cpx = x+12*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+9*H/24)
  cpx = x+12*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+11*H/24)
  cpx = x+16*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+12*H/24)
  cpx = x+12*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+18*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+11*H/24)
  cpx = x+9*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+15*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+14*H/24)
  cpx = x+20*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+7*H/24)
  cpx = x+20*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+5*H/24)
  cpx = x+16*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+7*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+7*H/24)
  cpx = x+16*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+6*H/24)
  cpx = x+16*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+4*H/24)
  cpx = x+12*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+6*H/24)
  cpx = x+12*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+9*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+7*H/24)
  cpx = x+12*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+5*H/24)
  cpx = x+8*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+7*H/24)
  cpx = x+8*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+9*H/24)
  cpx = x+8*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+11*H/24)
  cpx = x+12*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+9*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+11*H/24)
  cpx = x+8*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+9*H/24)
  cpx = x+8*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+8*H/24)
  cpx = x+8*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+6*H/24)
  cpx = x+4*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+8*H/24)
  cpx = x+4*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+9*H/24)
  cpx = x+4*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+11*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+8*H/24)
  ctx.lineTo(x+4*W/24, y+14*H/24)
  ctx.stroke()
}

function misprintAt (x,y,W,color,INVERT) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/25
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "miter"
  rotatecard(x,y,W,W*1.5,[INVERT])
}

function resistanceAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/25
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "miter"

  fistAt (x+3.5*W/24,y-1*H/24,W*0.7,color)
  y += 5*H/24
  x -= W/48
  //1
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+12*H/24)
  ctx.lineTo(x+5.4*W/24, y+12*H/24)
  ctx.lineTo(x+6*W/24, y+10*H/24)
  ctx.lineTo(x+7*W/24, y+14*H/24)
  ctx.lineTo(x+8*W/24, y+10*H/24)
  ctx.lineTo(x+9*W/24, y+14*H/24)
  ctx.lineTo(x+10*W/24, y+10*H/24)
  ctx.lineTo(x+11*W/24, y+14*H/24)
  ctx.lineTo(x+12*W/24, y+10*H/24)
  ctx.lineTo(x+13*W/24, y+14*H/24)
  ctx.lineTo(x+14*W/24, y+10*H/24)
  ctx.lineTo(x+15*W/24, y+14*H/24)
  ctx.lineTo(x+16*W/24, y+10*H/24)
  ctx.lineTo(x+17*W/24, y+14*H/24)
  ctx.lineTo(x+18*W/24, y+10*H/24)
  ctx.lineTo(x+19*W/24, y+14*H/24)
  ctx.lineTo(x+19.6*W/24, y+12*H/24)
  ctx.lineTo(x+22*W/24, y+12*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.arc(x+2.5*W/24, y+12*H/24, W/48,0,Math.PI*2)
  ctx.stroke()

  ctx.beginPath()
  ctx.arc(x+22.5*W/24, y+12*H/24, W/48,0,Math.PI*2)
  ctx.stroke()
}

function wind_chimesAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let i = 4, j = 6.5, n = 0, r
  for (; n < 16; n++) {
    ctx.beginPath()
    r = Math.random()
    if (n < 15) // ellipse
      ctx.ellipse(x+i*W/24, y+j*H/24, (1+r)*W/24, 2*W/24, 0, 0, Math.PI*2)
    else
      ctx.ellipse(x+(i+0.4)*W/24, y+(j+1.9)*H/24, 1.5*W/24, 2*W/24, 0.6, 0, Math.PI*2)
    ctx.stroke()
    ctx.globalAlpha = (1-r)/4
    ctx.fill()
    ctx.globalAlpha = 1
    ctx.beginPath()
    ctx.moveTo(x+i*W/24, y+(j-2)*H/24)
    ctx.lineTo(x+i*W/24, y+(j-2.5)*H/24)
    ctx.stroke()
    i += 5
    if (i > 19) {
      i = 4
      j += 4.5
    }
  }
  //17
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+3*H/24)
  ctx.lineTo(x+1*W/24, y+4*H/24)
  ctx.lineTo(x+23*W/24, y+4*H/24)
  ctx.lineTo(x+23*W/24, y+3*H/24)
  ctx.lineTo(x+1*W/24, y+3*H/24)
  ctx.stroke()
  //18
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+3*H/24)
  ctx.lineTo(x+12*W/24, y+1*H/24)
  ctx.lineTo(x+19*W/24, y+3*H/24)
  ctx.stroke()
  //19
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+3*H/24)
  ctx.lineTo(x+12*W/24, y+1*H/24)
  ctx.lineTo(x+14*W/24, y+3*H/24)
  ctx.stroke()
}

function instaAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 2.2*W/24
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+22*H/24)
  cpx = x+22*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+16*H/24)
  cpx = x+22*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+8*H/24)
  cpx = x+22*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+2*H/24)
  cpx = x+8*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+2*H/24)
  cpx = x+2*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+8*H/24)
  cpx = x+2*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+16*H/24)
  cpx = x+2*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+22*H/24)
  cpx = x+16*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+22*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.arc(x+12*W/24, y+12.5*H/24, 4*W/24, 0, Math.PI*2)
  ctx.closePath()
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.arc(x+17.6*W/24, y+7.1*H/24, 1.7*W/24, 0, Math.PI*2)
  ctx.fill()
}
function creditAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+23*H/24)
  ctx.lineTo(x+18*W/24, y+23*H/24)
  cpx = x+19*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+22*H/24)
  cpx = x+19*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+2*H/24)
  cpx = x+19*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+1*H/24)
  cpx = x+6*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+1*H/24)
  cpx = x+5*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+2*H/24)
  cpx = x+5*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+22*H/24)
  cpx = x+5*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+23*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+1*H/24)
  ctx.lineTo(x+17*W/24, y+23*H/24)
  ctx.lineTo(x+14.5*W/24, y+23*H/24)
  ctx.lineTo(x+14.5*W/24, y+1*H/24)
  ctx.lineTo(x+17*W/24, y+1*H/24)
  ctx.fill()
  //3
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+2*H/24)
  ctx.lineTo(x+13*W/24, y+2*H/24)
  ctx.lineTo(x+13*W/24, y+16*H/24)
  ctx.lineTo(x+11*W/24, y+16*H/24)
  ctx.lineTo(x+11*W/24, y+2*H/24)
  ctx.stroke()
  //4
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+18*H/24)
  ctx.lineTo(x+13*W/24, y+18*H/24)
  ctx.lineTo(x+13*W/24, y+22*H/24)
  ctx.lineTo(x+11*W/24, y+22*H/24)
  ctx.lineTo(x+11*W/24, y+18*H/24)
  ctx.stroke()
}

function render_harmlessAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //17
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+22*H/24)
  cpx = x+4*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+19*H/24)
  cpx = x+4*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+16*H/24)
  cpx = x+20*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+19*H/24)
  cpx = x+20*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+22*H/24)
  cpx = x+12*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+20*H/24)
  cpx = x+13*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+19*H/24)
  cpx = x+13*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+18*H/24)
  cpx = x+11*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+19*H/24)
  cpx = x+11*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+20*H/24)
  
  //1
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+19*H/24)
  cpx = x+5*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+3*H/24)
  cpx = x+5*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+1*H/24)
  cpx = x+19*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+3*H/24)
  cpx = x+20*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+19*H/24)
  ctx.stroke()

//15
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+19*H/24)
  cpx = x+4*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+16*H/24)
  cpx = x+20*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+19*H/24)
  cpx = x+20*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+22*H/24)
  cpx = x+4*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+19*H/24)
  ctx.stroke()
  //2
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+3*H/24)
  cpx = x+5*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+4*H/24)
  cpx = x+19*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+3*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+20*H/24)
  cpx = x+13*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+19*H/24)
  cpx = x+13*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+18*H/24)
  cpx = x+11*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+19*H/24)
  cpx = x+11*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+20*H/24)
  ctx.globalAlpha /= 4
  ctx.fill()
  ctx.globalAlpha *= 4
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+12.7*W/24, y+18.2*H/24)
  ctx.lineTo(x+15*W/24, y+17*H/24)
  ctx.lineTo(x+16*W/24, y+18*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+11.3*W/24, y+18.2*H/24)
  ctx.lineTo(x+9*W/24, y+17*H/24)
  ctx.lineTo(x+8*W/24, y+18*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+18.5*H/24)
  ctx.lineTo(x+9*W/24, y+18*H/24)
  ctx.lineTo(x+8*W/24, y+19*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+18.5*H/24)
  ctx.lineTo(x+15*W/24, y+18*H/24)
  ctx.lineTo(x+16*W/24, y+19*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+19*H/24)
  ctx.lineTo(x+9*W/24, y+19*H/24)
  ctx.lineTo(x+8*W/24, y+20*H/24)
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+19*H/24)
  ctx.lineTo(x+15*W/24, y+19*H/24)
  ctx.lineTo(x+16*W/24, y+20*H/24)
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+19.5*H/24)
  ctx.lineTo(x+9*W/24, y+20*H/24)
  ctx.lineTo(x+10*W/24, y+21*H/24)
  ctx.stroke()

  //11
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+19.5*H/24)
  ctx.lineTo(x+15*W/24, y+20*H/24)
  ctx.lineTo(x+14*W/24, y+21*H/24)
  ctx.stroke()

  //16
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+15*H/24)
  ctx.lineTo(x+22*W/24, y+15*H/24)
  ctx.lineTo(x+19*W/24, y+23*H/24)
  ctx.lineTo(x+1*W/24, y+23*H/24)
  ctx.lineTo(x+6*W/24, y+15*H/24)
  ctx.stroke()
}

function uphill_both_waysAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+1.5*W/24, y+6*H/24)
  cpx = x+5*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+6*H/24)
  cpx = x+10*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+14*H/24)
  cpx = x+10*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+22*H/24)
  ctx.stroke()
  //2
  ctx.beginPath()
  ctx.moveTo(x+22.5*W/24, y+6*H/24)
  cpx = x+19*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+6*H/24)
  cpx = x+14*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+14*H/24)
  cpx = x+14*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+22*H/24)
  ctx.stroke()
  //4
  ctx.beginPath()
  ctx.moveTo(x+1.5*W/24, y+6*H/24)
  ctx.lineTo(x+1.5*W/24, y+3*H/24)
  ctx.lineTo(x+3.5*W/24, y+1*H/24)
  ctx.lineTo(x+5.5*W/24, y+3*H/24)
  ctx.lineTo(x+5.5*W/24, y+6*H/24)
  ctx.lineTo(x+1.5*W/24, y+6*H/24)
  ctx.stroke()
  //5
  ctx.beginPath()
  ctx.moveTo(x+22.5*W/24, y+6*H/24)
  ctx.lineTo(x+22.5*W/24, y+3*H/24)
  ctx.lineTo(x+20.5*W/24, y+1*H/24)
  ctx.lineTo(x+18.5*W/24, y+3*H/24)
  ctx.lineTo(x+18.5*W/24, y+6*H/24)
  ctx.lineTo(x+22.5*W/24, y+6*H/24)
  ctx.stroke()

//10
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+5*H/24)
  ctx.lineTo(x+4*W/24, y+5*H/24)
  ctx.lineTo(x+4*W/24, y+6*H/24)
  ctx.lineTo(x+3*W/24, y+6*H/24)
  ctx.lineTo(x+3*W/24, y+5*H/24)
  ctx.stroke()

  //11
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+6*H/24)
  ctx.lineTo(x+20*W/24, y+5*H/24)
  ctx.lineTo(x+21*W/24, y+5*H/24)
  ctx.lineTo(x+21*W/24, y+6*H/24)
  ctx.lineTo(x+20*W/24, y+6*H/24)
  ctx.stroke()
  //7
//12
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+3*H/24)
  ctx.lineTo(x+3*W/24, y+3*H/24)
  ctx.lineTo(x+3*W/24, y+4*H/24)
  ctx.lineTo(x+2*W/24, y+4*H/24)
  ctx.lineTo(x+2*W/24, y+3*H/24)
  ctx.stroke()

  //13
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+3*H/24)
  ctx.lineTo(x+5*W/24, y+3*H/24)
  ctx.lineTo(x+5*W/24, y+4*H/24)
  ctx.lineTo(x+4*W/24, y+4*H/24)
  ctx.lineTo(x+4*W/24, y+3*H/24)
  ctx.stroke()

  //14
  ctx.beginPath()
  ctx.moveTo(x+19*W/24, y+3*H/24)
  ctx.lineTo(x+19*W/24, y+4*H/24)
  ctx.lineTo(x+20*W/24, y+4*H/24)
  ctx.lineTo(x+20*W/24, y+3*H/24)
  ctx.lineTo(x+19*W/24, y+3*H/24)
  ctx.stroke()

  //15
  ctx.beginPath()
  ctx.moveTo(x+21*W/24, y+3*H/24)
  ctx.lineTo(x+22*W/24, y+3*H/24)
  ctx.lineTo(x+22*W/24, y+4*H/24)
  ctx.lineTo(x+21*W/24, y+4*H/24)
  ctx.lineTo(x+21*W/24, y+3*H/24)
  ctx.stroke()

  //17
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+1.5*H/24)
  ctx.lineTo(x+4*W/24, y+0.5*H/24)
  ctx.lineTo(x+5*W/24, y+0.5*H/24)
  ctx.lineTo(x+5*W/24, y+2.5*H/24)
  ctx.stroke()

  //18
  ctx.beginPath()
  ctx.moveTo(x+21*W/24, y+1.5*H/24)
  ctx.lineTo(x+21*W/24, y+0.5*H/24)
  ctx.lineTo(x+22*W/24, y+0.5*H/24)
  ctx.lineTo(x+22*W/24, y+2.5*H/24)
  ctx.stroke()

  figureRotatedAt(x+11.7*W/24, y+7*H/24, 3*W/24, color,-61)
}

function propagandaAt (x,y,W,color,INVERT) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  if (INVERT)
    twitterAt(x+3*W/24, y+13*H/24, 5.5*W/24,color)
  else
    instaAt(x+3*W/24, y+13*H/24, 5.5*W/24,color)
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  //1
  ctx.beginPath()
  ctx.moveTo(x+22*W/24, y+15*H/24)
  ctx.lineTo(x+23*W/24, y+6*H/24)
  ctx.lineTo(x+24*W/24, y+2.5*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+18*H/24)
  cpx = x+22*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+15*H/24)
  cpx = x+22*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+10*H/24)
  cpx = x+12*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+4*H/24)
  cpx = x+9*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5.5*W/24, y+1*H/24)
  cpx = x+2*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+6*H/24)
  cpx = x+4*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+12*H/24)
  cpx = x+11*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+15*H/24)
  cpx = x+14*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+18*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+5.5*W/24, y+1*H/24)
  cpx = x+10*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+2*H/24)
  cpx = x+13*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+5*H/24)
  cpx = x+17*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+0*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+18.2*W/24, y+2*H/24)
  cpx = x+21*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23.6*W/24, y+4*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+14*H/24)
  cpx = x+15*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+10*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+22.3*W/24, y+12*H/24)
  cpx = x+22*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+9*H/24)
  cpx = x+13*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+4*H/24)
  cpx = x+10*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5.5*W/24, y+1*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+11*H/24)
  cpx = x+16*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+12*H/24)
  cpx = x+17*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+12*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+3*H/24)
  ctx.lineTo(x+3*W/24, y+4*H/24)
  ctx.lineTo(x+4*W/24, y+4*H/24)
  ctx.stroke()
  //8
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+2*H/24)
  ctx.lineTo(x+6*W/24, y+3*H/24)
  ctx.lineTo(x+7*W/24, y+3*H/24)
  ctx.lineTo(x+7*W/24, y+4*H/24)
  ctx.lineTo(x+8*W/24, y+4*H/24)
  ctx.lineTo(x+8*W/24, y+5*H/24)
  ctx.lineTo(x+9*W/24, y+5*H/24)
  ctx.lineTo(x+9*W/24, y+6*H/24)
  ctx.lineTo(x+10*W/24, y+6*H/24)
  ctx.lineTo(x+10*W/24, y+7*H/24)
  ctx.lineTo(x+11*W/24, y+7*H/24)
  ctx.lineTo(x+11*W/24, y+8*H/24)
  ctx.lineTo(x+12*W/24, y+8*H/24)
  ctx.lineTo(x+12*W/24, y+9*H/24)
  ctx.lineTo(x+13*W/24, y+9*H/24)
  ctx.lineTo(x+13*W/24, y+10*H/24)
  ctx.lineTo(x+14*W/24, y+10*H/24)
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+2*H/24)
  ctx.lineTo(x+4*W/24, y+3*H/24)
  ctx.lineTo(x+5*W/24, y+3*H/24)
  ctx.lineTo(x+5*W/24, y+4*H/24)
  ctx.lineTo(x+6*W/24, y+4*H/24)
  ctx.lineTo(x+6*W/24, y+5*H/24)
  ctx.lineTo(x+7*W/24, y+5*H/24)
  ctx.lineTo(x+7*W/24, y+6*H/24)
  ctx.lineTo(x+8*W/24, y+6*H/24)
  ctx.lineTo(x+8*W/24, y+7*H/24)
  ctx.lineTo(x+9*W/24, y+7*H/24)
  ctx.lineTo(x+9*W/24, y+8*H/24)
  ctx.lineTo(x+10*W/24, y+8*H/24)
  ctx.lineTo(x+10*W/24, y+9*H/24)
  ctx.lineTo(x+11*W/24, y+9*H/24)
  ctx.lineTo(x+11*W/24, y+10*H/24)
  ctx.lineTo(x+12*W/24, y+10*H/24)
  ctx.lineTo(x+12*W/24, y+11*H/24)
  ctx.lineTo(x+13*W/24, y+11*H/24)
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+4*H/24)
  ctx.lineTo(x+4*W/24, y+5*H/24)
  ctx.lineTo(x+5*W/24, y+5*H/24)
  ctx.lineTo(x+5*W/24, y+6*H/24)
  ctx.lineTo(x+6*W/24, y+6*H/24)
  ctx.lineTo(x+6*W/24, y+7*H/24)
  ctx.lineTo(x+7*W/24, y+7*H/24)
  ctx.lineTo(x+7*W/24, y+8*H/24)
  ctx.lineTo(x+8*W/24, y+8*H/24)
  ctx.lineTo(x+8*W/24, y+9*H/24)
  ctx.lineTo(x+9*W/24, y+9*H/24)
  ctx.lineTo(x+9*W/24, y+10*H/24)
  ctx.lineTo(x+10*W/24, y+10*H/24)
  ctx.lineTo(x+10*W/24, y+11*H/24)
  ctx.lineTo(x+11*W/24, y+11*H/24)
  ctx.lineTo(x+11*W/24, y+12*H/24)
  ctx.lineTo(x+12*W/24, y+12*H/24)
  ctx.stroke()

  //11
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+5*H/24)
  ctx.lineTo(x+3*W/24, y+6*H/24)
  ctx.lineTo(x+4*W/24, y+6*H/24)
  ctx.lineTo(x+4*W/24, y+7*H/24)
  ctx.lineTo(x+5*W/24, y+7*H/24)
  ctx.lineTo(x+5*W/24, y+8*H/24)
  ctx.lineTo(x+6*W/24, y+8*H/24)
  ctx.lineTo(x+6*W/24, y+9*H/24)
  ctx.lineTo(x+7*W/24, y+9*H/24)
  ctx.lineTo(x+7*W/24, y+10*H/24)
  ctx.lineTo(x+8*W/24, y+10*H/24)
  ctx.lineTo(x+8*W/24, y+11*H/24)
  ctx.lineTo(x+9*W/24, y+11*H/24)
  ctx.lineTo(x+9*W/24, y+12*H/24)
  ctx.lineTo(x+10*W/24, y+12*H/24)
  ctx.stroke()

  //12
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+7*H/24)
  ctx.lineTo(x+3*W/24, y+8*H/24)
  ctx.lineTo(x+4*W/24, y+8*H/24)
  ctx.lineTo(x+4*W/24, y+9*H/24)
  ctx.lineTo(x+5*W/24, y+9*H/24)
  ctx.lineTo(x+5*W/24, y+10*H/24)
  ctx.lineTo(x+6*W/24, y+10*H/24)
  ctx.lineTo(x+6*W/24, y+11*H/24)
  ctx.lineTo(x+7*W/24, y+11*H/24)
  ctx.stroke()

  //13
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+14*H/24)
  ctx.lineTo(x+13*W/24, y+15*H/24)
  ctx.lineTo(x+14*W/24, y+15*H/24)
  ctx.lineTo(x+14*W/24, y+16*H/24)
  ctx.lineTo(x+15*W/24, y+16*H/24)
  ctx.lineTo(x+15*W/24, y+17*H/24)
  ctx.lineTo(x+16*W/24, y+17*H/24)
  ctx.stroke()

  //14
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+13*H/24)
  ctx.lineTo(x+14*W/24, y+14*H/24)
  ctx.lineTo(x+15*W/24, y+14*H/24)
  ctx.lineTo(x+15*W/24, y+15*H/24)
  ctx.lineTo(x+16*W/24, y+15*H/24)
  ctx.lineTo(x+16*W/24, y+16*H/24)
  ctx.lineTo(x+17*W/24, y+16*H/24)
  ctx.lineTo(x+17*W/24, y+17*H/24)
  ctx.lineTo(x+18*W/24, y+17*H/24)
  ctx.stroke()

  //15
  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+12*H/24)
  ctx.lineTo(x+15*W/24, y+13*H/24)
  ctx.lineTo(x+16*W/24, y+13*H/24)
  ctx.lineTo(x+16*W/24, y+14*H/24)
  ctx.lineTo(x+17*W/24, y+14*H/24)
  ctx.lineTo(x+17*W/24, y+15*H/24)
  ctx.lineTo(x+18*W/24, y+15*H/24)
  ctx.lineTo(x+18*W/24, y+16*H/24)
  ctx.lineTo(x+19*W/24, y+16*H/24)
  ctx.lineTo(x+19*W/24, y+17*H/24)
  ctx.lineTo(x+20*W/24, y+17*H/24)
  ctx.stroke()

  //16
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+11*H/24)
  ctx.lineTo(x+16*W/24, y+12*H/24)
  ctx.lineTo(x+17*W/24, y+12*H/24)
  ctx.lineTo(x+17*W/24, y+13*H/24)
  ctx.lineTo(x+18*W/24, y+13*H/24)
  ctx.lineTo(x+18*W/24, y+14*H/24)
  ctx.lineTo(x+19*W/24, y+14*H/24)
  ctx.lineTo(x+19*W/24, y+15*H/24)
  ctx.lineTo(x+20*W/24, y+15*H/24)
  ctx.lineTo(x+20*W/24, y+16*H/24)
  ctx.lineTo(x+21*W/24, y+16*H/24)
  ctx.stroke()

  //17
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+11*H/24)
  ctx.lineTo(x+18*W/24, y+12*H/24)
  ctx.lineTo(x+19*W/24, y+12*H/24)
  ctx.lineTo(x+19*W/24, y+13*H/24)
  ctx.lineTo(x+20*W/24, y+13*H/24)
  ctx.lineTo(x+20*W/24, y+14*H/24)
  ctx.lineTo(x+21*W/24, y+14*H/24)
  ctx.stroke()

  ctx.lineWidth /= 2
  //3
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+3*H/24)
  ctx.lineTo(x+3*W/24, y+0*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+22*W/24, y+17*H/24)
  ctx.lineTo(x+24*W/24, y+12*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+4*H/24)
  ctx.lineTo(x+17*W/24, y+0*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+3*H/24)
  ctx.lineTo(x+14*W/24, y+0*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+23*W/24, y+9*H/24)
  ctx.lineTo(x+24*W/24, y+6*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+2*H/24)
  ctx.lineTo(x+12*W/24, y+0*H/24)
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+1*H/24)
  ctx.lineTo(x+4.5*W/24, y+0*H/24)
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+23*W/24, y+12*H/24)
  ctx.lineTo(x+24*W/24, y+9*H/24)
  ctx.stroke()

  //11
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+18*H/24)
  cpx = x+20*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+19*H/24)
  cpx = x+22*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+21*H/24)
  cpx = x+23*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+24*H/24)
  cpx = x+3*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+0*W/24, y+21*H/24)
  cpx = x+0*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+0*W/24, y+15*H/24)
  cpx = x+9*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+15*H/24)
  cpx = x+14*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+18*H/24)
  ctx.globalAlpha /= 3
  ctx.fill()
  ctx.globalAlpha *= 3
}

function palindromeAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  let savedcolor = ctx.fillStyle
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+3*W/32, y+18*H/32)
  ctx.lineTo(x+3*W/32, y+17*H/32)
  ctx.lineTo(x+4*W/32, y+17*H/32)
  ctx.lineTo(x+5*W/32, y+17*H/32)
  ctx.lineTo(x+6*W/32, y+16*H/32)
  ctx.lineTo(x+6*W/32, y+17*H/32)
  ctx.lineTo(x+8*W/32, y+17*H/32)
  ctx.lineTo(x+8*W/32, y+17*H/32)
  ctx.lineTo(x+9*W/32, y+19*H/32)
  ctx.lineTo(x+11*W/32, y+20*H/32)
  ctx.lineTo(x+11*W/32, y+19*H/32)
  ctx.lineTo(x+12*W/32, y+20*H/32)
  ctx.lineTo(x+12*W/32, y+21*H/32)
  ctx.lineTo(x+12*W/32, y+22*H/32)
  ctx.lineTo(x+14*W/32, y+22*H/32)
  ctx.lineTo(x+15*W/32, y+21*H/32)
  ctx.lineTo(x+16*W/32, y+21*H/32)
  ctx.lineTo(x+17*W/32, y+21*H/32)
  ctx.lineTo(x+16*W/32, y+20*H/32)
  ctx.lineTo(x+15*W/32, y+18*H/32)
  ctx.lineTo(x+14*W/32, y+18*H/32)
  ctx.lineTo(x+14*W/32, y+17*H/32)
  ctx.lineTo(x+15*W/32, y+17*H/32)
  ctx.lineTo(x+16*W/32, y+16*H/32)
  ctx.lineTo(x+17*W/32, y+16*H/32)
  ctx.lineTo(x+18*W/32, y+16*H/32)
  ctx.lineTo(x+18*W/32, y+14*H/32)
  ctx.lineTo(x+18*W/32, y+14*H/32)
  ctx.lineTo(x+19*W/32, y+14*H/32)
  ctx.lineTo(x+19*W/32, y+13*H/32)
  ctx.lineTo(x+20*W/32, y+13*H/32)
  ctx.lineTo(x+22*W/32, y+14*H/32)
  ctx.lineTo(x+24*W/32, y+15*H/32)
  ctx.lineTo(x+24*W/32, y+16*H/32)
  ctx.lineTo(x+25*W/32, y+16*H/32)
  ctx.lineTo(x+26*W/32, y+16*H/32)
  ctx.lineTo(x+25*W/32, y+17*H/32)
  ctx.lineTo(x+25*W/32, y+18*H/32)
  ctx.lineTo(x+24*W/32, y+18*H/32)
  ctx.lineTo(x+25*W/32, y+20*H/32)
  ctx.lineTo(x+26*W/32, y+21*H/32)
  ctx.lineTo(x+27*W/32, y+22*H/32)
  ctx.lineTo(x+27*W/32, y+21*H/32)
  ctx.lineTo(x+28*W/32, y+21*H/32)
  ctx.lineTo(x+28*W/32, y+20*H/32)
  ctx.lineTo(x+29*W/32, y+20*H/32)
  ctx.lineTo(x+30*W/32, y+19*H/32)
  ctx.lineTo(x+30*W/32, y+18*H/32)
  ctx.lineTo(x+30*W/32, y+17*H/32)
  ctx.lineTo(x+29*W/32, y+16*H/32)
  ctx.lineTo(x+29*W/32, y+15*H/32)
  ctx.lineTo(x+28*W/32, y+14*H/32)
  ctx.lineTo(x+27*W/32, y+13*H/32)
  ctx.lineTo(x+26*W/32, y+12*H/32)
  ctx.lineTo(x+24*W/32, y+11*H/32)
  ctx.lineTo(x+22*W/32, y+11*H/32)
  ctx.lineTo(x+21*W/32, y+11*H/32)
  ctx.lineTo(x+20*W/32, y+10.8*H/32)
  ctx.lineTo(x+18.2*W/32, y+10.5*H/32)
  ctx.lineTo(x+18*W/32, y+11*H/32)
  ctx.lineTo(x+17*W/32, y+12*H/32)
  ctx.lineTo(x+14*W/32, y+13*H/32)
  ctx.lineTo(x+13*W/32, y+14*H/32)
  ctx.lineTo(x+11*W/32, y+14*H/32)
  ctx.lineTo(x+9*W/32, y+14*H/32)
  ctx.lineTo(x+8*W/32, y+13*H/32)
  ctx.lineTo(x+8*W/32, y+14*H/32)
  ctx.lineTo(x+6*W/32, y+14*H/32)
  ctx.lineTo(x+6*W/32, y+13*H/32)
  ctx.lineTo(x+5*W/32, y+12*H/32)
  ctx.lineTo(x+5*W/32, y+12*H/32)
  ctx.lineTo(x+4*W/32, y+10*H/32)
  ctx.lineTo(x+3*W/32, y+10*H/32)
  ctx.lineTo(x+3*W/32, y+11*H/32)
  ctx.lineTo(x+2*W/32, y+11*H/32)
  ctx.lineTo(x+2*W/32, y+13*H/32)
  ctx.lineTo(x+4*W/32, y+14*H/32)
  ctx.lineTo(x+3*W/32, y+14*H/32)
  ctx.lineTo(x+2*W/32, y+15*H/32)
  ctx.lineTo(x+3*W/32, y+18*H/32)

  ctx.globalAlpha /= 3
  ctx.fill()
  ctx.globalAlpha *= 3
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+3*W/32, y+10*H/32)
  ctx.lineTo(x+0*W/32, y+6*H/32)
  ctx.stroke()
  //7
  ctx.beginPath()
  ctx.moveTo(x+3*W/32, y+18*H/32)
  ctx.lineTo(x+2*W/32, y+17*H/32)
  ctx.lineTo(x+0*W/32, y+16*H/32)
  ctx.stroke()
  //3
  ctx.beginPath()
  ctx.moveTo(x+2*W/32, y+17*H/32)
  ctx.lineTo(x+1*W/32, y+16*H/32)
  ctx.lineTo(x+0*W/32, y+15*H/32)
  //ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+29*W/32, y+15*H/32)
  ctx.lineTo(x+30*W/32, y+16*H/32)
  ctx.lineTo(x+31*W/32, y+17*H/32)
  ctx.lineTo(x+31*W/32, y+18*H/32)
  ctx.lineTo(x+32*W/32, y+19*H/32)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+31*W/32, y+32*H/32)
  ctx.lineTo(x+30*W/32, y+29*H/32)
  ctx.lineTo(x+29*W/32, y+27*H/32)
  ctx.lineTo(x+30*W/32, y+26*H/32)
  ctx.lineTo(x+30*W/32, y+25*H/32)
  ctx.lineTo(x+29*W/32, y+25*H/32)
  ctx.lineTo(x+28*W/32, y+24*H/32)
  ctx.lineTo(x+28*W/32, y+23*H/32)
  ctx.lineTo(x+27*W/32, y+22*H/32)
  ctx.stroke()

  //6
  ctx.lineCap = "butt"
  ctx.lineWidth *= 3
  ctx.beginPath()
  ctx.moveTo(x+18*W/32, y+11*H/32)
  ctx.lineTo(x+19*W/32, y+13*H/32)
  ctx.stroke()
  ctx.strokeStyle = savedcolor
  ctx.lineWidth /= 3
  ctx.lineCap = "square"
  ctx.beginPath()
  ctx.moveTo(x+18*W/32, y+11*H/32)
  ctx.lineTo(x+19*W/32, y+13*H/32)
  ctx.stroke()
  ctx.strokeStyle = color
}

function infinityAt (x,y,W,color,INVERT) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/25
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let nums = [], i = 0, j = 0
  for (; i < 10; i++)
    nums.push(Math.random()/10)
  nums.sort()
  //console.log(nums)
  let nl = 2.4*W/24, xs = 2.5*W/24
  ctx.font = 1.2*W/24+"pt Courier"
  if (INVERT) {
    //ctx.fillText("\u{2135}"+"0", x+W/2, y)
    i = 0
    for (; i < 10; i++) {
      ni = (nums[i].toString()).split('')
      j = 0
      for (; j < 12; j++) {
        if (j === i+2) {
          ctx.font = "800 "+1.3*W/20+"pt Courier"
         // ctx.globalAlpha /=4
         // ctx.fillRect(x+(j)*xs*0.75, y+nl-2.0*W/24, 2.2*W/24, 2.7*W/24)
        //  ctx.globalAlpha *=4
        } else
          ctx.font = 1.2*W/24+"pt Courier"
        ctx.fillText(ni[j], x+(j+0)*xs*0.8, y+nl)
      }
      nl += 2.7*W/24
    }
  }
  if (!INVERT) {
    nums = " 123456789".split("")
    xs*=1, nl *=1.2
    i = 0
    for (; i < nums.length; i++) {
      ctx.fillText(nums[i], x+(i+0)*xs, y + nl)
    }
    i = 0
    for (; i < nums.length; i++) {
      ctx.fillText(nums[i], x+(0), y + (i+1)*nl)
    }
    ctx.font = 0.8*W/24+"pt Courier"
    let count = 2
    j = 1, i = 0
    for (; j < 10; j++) {
      i = 1, count = 1
      for (; i < 10; i++) {
      let x0 = x+(count++)*xs
        ctx.fillText(j+"/"+i, x0, y + 2*nl)
        points.push(x0, y + 2*nl)
      }
      nl += 1.4*W/24
    }
  }
  nl = 2.7*W/24, nlx = nl*0.9
  ctx.globalAlpha /= 4

  ctx.beginPath()
  px = points[0]+nl/3, py = points[1]-nl/8
  ctx.moveTo(px, py) //  1/1
  i = 1
  for (; i < 9; i++) {
    if (i % 2 === 1) {
      py += nl
      ctx.lineTo(px, py)
      py -= i*nl
      px += i*nlx
      ctx.lineTo(px, py)
    } else {
      px += nlx
      ctx.lineTo(px, py)
      py += i*nl
      px -= i*nlx
      ctx.lineTo(px, py)
    }
  }
  ctx.stroke()
  ctx.globalAlpha *= 4
}

function gigoAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.lineWidth *= 1.5
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+23*H/24)
  cpx = x+4*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+22*H/24)
  cpx = x+4*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+2*H/24)
  cpx = x+4*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+1*H/24)
  cpx = x+19*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+1*H/24)
  cpx = x+20*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+2*H/24)
  cpx = x+20*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+22*H/24)
  cpx = x+20*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+23*H/24)
  cpx = x+5*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+23*H/24)
  ctx.stroke()
  ctx.lineWidth /= 1.5
  
  //2
  let bc = ctx.fillStyle
  ctx.fillStyle = color
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+22*H/24)
  ctx.lineTo(x+4*W/24, y+16*H/24)
  ctx.lineTo(x+20*W/24, y+16*H/24)
  ctx.lineTo(x+20*W/24, y+22*H/24)
  cpx = x+20*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+23*H/24)
  cpx = x+5*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+23*H/24)
  cpx = x+4*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+22*H/24)
  ctx.fill()

  ctx.fillStyle = bc
  ctx.font = "800 "+W/8+"pt Arial"
  width = ctx.measureText("G I G O").width
  ctx.fillText("G I G O", x + W/2 - (width/2), y+21*H/24)
  //3
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+6*H/24)
  ctx.lineTo(x+10*W/24, y+13*H/24)
  ctx.lineTo(x+14*W/24, y+13*H/24)
  ctx.lineTo(x+15*W/24, y+6*H/24)
  ctx.lineTo(x+9*W/24, y+6*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+6*H/24)
  ctx.lineTo(x+10*W/24, y+3*H/24)
  ctx.stroke()
}

function zero_knowledge_proofAt (x,y,W,color,INVERT) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  x -=0.5*W/24
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+8*H/24)
  cpx = x+12*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+15*H/24)
  cpx = x+12*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+17*H/24)
  cpx = x+10*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+15*H/24)
  cpx = x+10*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+12*H/24)
  cpx = x+10*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+17*H/24)
  cpx = x+10*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+19*H/24)
  cpx = x+8*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+17*H/24)
  cpx = x+8*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+13*H/24)
  cpx = x+8*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+18*H/24)
  cpx = x+8*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+20*H/24)
  cpx = x+6*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+18*H/24)
  cpx = x+6*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+13*H/24)
  cpx = x+6*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+17*H/24)
  cpx = x+6*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+19*H/24)
  cpx = x+4*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+17*H/24)
  cpx = x+4*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+12*H/24)
  cpx = x+3*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+15*H/24)
  cpx = x+1*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+14*H/24)
  cpx = x+2*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+8*H/24)
  cpx = x+2*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+4*H/24)
  cpx = x+12*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+8*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+8*H/24)
  cpx = x+2*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+4*H/24)
  cpx = x+12*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+8*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+12*H/24)
  cpx = x+3*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+15*H/24)
  cpx = x+1*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+14*H/24)
  cpx = x+2*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+8*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+12*H/24)
  cpx = x+9*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+10*H/24)
  cpx = x+9*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+8*H/24)
  cpx = x+5*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+10*H/24)
  cpx = x+5*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+12*H/24)
  ctx.fillStyle = "#ff0000"
  if (INVERT)
    ctx.fillStyle = color
  ctx.fill()

  x+=1*W/24
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+8*H/24)
  cpx = x+12*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+4*H/24)
  cpx = x+22*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+8*H/24)
  cpx = x+22*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+14*H/24)
  cpx = x+23*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+15*H/24)
  cpx = x+21*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+12*H/24)
  cpx = x+20*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+17*H/24)
  cpx = x+20*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+19*H/24)
  cpx = x+18*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+17*H/24)
  cpx = x+18*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+13*H/24)
  cpx = x+18*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+18*H/24)
  cpx = x+18*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+20*H/24)
  cpx = x+16*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+18*H/24)
  cpx = x+16*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+13*H/24)
  cpx = x+16*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+17*H/24)
  cpx = x+16*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+19*H/24)
  cpx = x+14*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+17*H/24)
  cpx = x+14*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+12*H/24)
  cpx = x+14*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+15*H/24)
  cpx = x+14*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+17*H/24)
  cpx = x+12*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+15*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+12*H/24)
  cpx = x+15*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+10*H/24)
  cpx = x+15*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+8*H/24)
  cpx = x+19*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+10*H/24)
  cpx = x+19*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+12*H/24)
   ctx.fillStyle = "#00ff00"
  if (INVERT)
    ctx.fillStyle = color
  ctx.fill()

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+15*H/24)
  cpx = x+12*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+8*H/24)
  ctx.stroke()
}

function bikeRAt (x,y,W,color,canvas) {
  if (!canvas)
    canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, d = 0, angle = pet(360)

  //1
  ctx.beginPath()
  p = rotatePoint(x+5*W/24+pet(d), y+14*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+12*W/24+pet(d), y+14*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+17*W/24+pet(d), y+8*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //2
  ctx.beginPath()
  p = rotatePoint(x+19*W/24+pet(d), y+14*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+16*W/24+pet(d), y+5*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+18*W/24+pet(d), y+4*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //3
  ctx.beginPath()
  p = rotatePoint(x+5*W/24+pet(d), y+14*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+8*W/24+pet(d), y+9*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+17*W/24+pet(d), y+7*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //4
  ctx.beginPath()
  p = rotatePoint(x+12*W/24+pet(d), y+14*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+5*W/24+pet(d), y+6*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //5
  ctx.beginPath()
  p = rotatePoint(x+4*W/24+pet(d), y+6*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+7*W/24+pet(d), y+6*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //6
  ctx.beginPath()
  p = rotatePoint(x+5*W/24+pet(d), y+14*H/24+pet(d) ,cx,cy,angle)
  ctx.arc(p[0],p[1],4.25*W/24,0,Math.PI*2)
  ctx.stroke()

  //7
  ctx.beginPath()
  p = rotatePoint(x+19*W/24+pet(d), y+14*H/24+pet(d) ,cx,cy,angle)
  ctx.arc(p[0],p[1],4.25*W/24,0,Math.PI*2)
  ctx.stroke()

  //8
  ctx.beginPath()
  p = rotatePoint(x+12*W/24+pet(d), y+14*H/24+pet(d) ,cx,cy,angle)
  ctx.arc(p[0],p[1],W/24,0,Math.PI*2)
  ctx.stroke()
}

function bicycles_are_everywhereAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let off = document.createElement('CANVAS')
  let ctxoff = off.getContext("2d")
  off.width = canvas.width, off.height = canvas.height
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  let i = 0, x0 = x, y0 = y, W0 = W
  ctxoff.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctxoff.strokeStyle = color
  ctxoff.clearRect(0,0,W,W)
  let d = W/5
  let v = document.getElementById("featuresize").value
  let f = "bikeRAt"//randomPick(atList)
  window [f] (x,y,W*0.67,color,off)
  W/=2, d = W/10
  for (;i < 4; i++) {
    if(isRectBlank(x,y,W,H,ctxoff))
      window [f] (x,y,W*0.7,color,off)
    x+=W
    if (i > 0 && i%2 === 1) 
      y += W
    if (x >= x0 + W0)
      x = x0
  }
  document.getElementById("featuresize").value *= 0.8
  W/=2, i = 0, d = W/10
  x = x0, y = y0
  for (;i < 16; i++) {
    if (i > 0 && i%4 === 0) 
      y += W
      if(isRectBlank(x+d,y+d,W,W,ctxoff))
        window [f] (x,y,W,color,off)
      x+=W
    if (x >= x0 + W0)
      x = x0
  }
document.getElementById("featuresize").value *= 0.8
  W/=2, i = 0, d = W/10
  x = x0, y = y0
  for (;i < 64; i++) {
    if (i > 0 && i%8 === 0) 
      y += W
    if(isRectBlank(x,y,W,W))
      window [f] (x,y,W,color,off,ctxoff)
    x+=W
    if (x >= x0 + W0)
      x = x0
  }
  document.getElementById("featuresize").value *= 0.8
  W/=2, i = 0, d = W/5
  x = x0, y = y0
  for (;i < 256; i++) {
    if (i > 0 && i%16 === 0) 
      y += W
    if(isRectBlank(x+d,y+d,W-d/2,W-d/2,ctxoff))
      window [f] (x,y,W,color,off)
    x+=W
    if (x >= x0 + W0)
      x = x0
  }
  document.getElementById("featuresize").value = v
  ctx.drawImage(off,0,0)
}

function mid_century_modernAt (x,y,W,color,INVERT) {
  let mms = shuffle([mmchair1At,mmchair2At,mmchair3At])
  if (INVERT)
    mms[0](x,y,W,color)
  else
    mms[1](x,y,W,color)

}

function mmchair3At (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = [], MIRROR = false
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/30
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let xi = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]
  if (MIRROR)
    xi.reverse()
  //1
  ctx.beginPath()
  ctx.moveTo(x+xi[5]*W/24, y+8*H/24)
  cpx = x+xi[0]*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[1]*W/24, y+8*H/24)
  cpx = x+xi[2]*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[3]*W/24, y+11*H/24)
  cpx = x+xi[4]*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[3]*W/24, y+15*H/24)
  cpx = x+xi[2]*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[6]*W/24, y+18*H/24)
  cpx = x+xi[18]*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[18]*W/24, y+18*H/24)
  cpx = x+xi[22]*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[21]*W/24, y+15*H/24)
  cpx = x+xi[20]*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[21]*W/24, y+11*H/24)
  cpx = x+xi[22]*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[23]*W/24, y+8*H/24)
  cpx = x+xi[24]*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[19]*W/24, y+8*H/24)
  cpx = x+xi[17]*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[17]*W/24, y+7*H/24)
  cpx = x+xi[17]*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[19]*W/24, y+2*H/24)
  cpx = x+xi[20]*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[12]*W/24, y+0*H/24)
  cpx = x+xi[4]*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[5]*W/24, y+2*H/24)
  cpx = x+xi[7]*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[7]*W/24, y+7*H/24)
  cpx = x+xi[7]*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[5]*W/24, y+8*H/24)
  ctx.globalAlpha /= 4
  ctx.fill()
  ctx.globalAlpha *= 4
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+xi[12]*W/24, y+18*H/24)
  cpx = x+xi[12]*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[12]*W/24, y+20*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+xi[12]*W/24, y+19*H/24)
  cpx = x+xi[6]*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[6]*W/24, y+21*H/24)
  cpx = x+xi[6]*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[12]*W/24, y+23*H/24)
  cpx = x+xi[18]*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[18]*W/24, y+21*H/24)
  cpx = x+xi[18]*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[12]*W/24, y+19*H/24)
  ctx.stroke()
}


function mmchair2At (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = [], MIRROR = false
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/30
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let xi = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]
  if (MIRROR)
    xi.reverse()
  //1
  //2
  ctx.beginPath()
  ctx.moveTo(x+xi[10]*W/24, y+18*H/24)
  cpx = x+xi[12]*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[13]*W/24, y+19*H/24)
  cpx = x+xi[16]*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[21]*W/24, y+17*H/24)
  cpx = x+xi[22]*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[23]*W/24, y+9*H/24)
  cpx = x+xi[23]*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[14]*W/24, y+7*H/24)
  cpx = x+xi[12]*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[12]*W/24, y+2*H/24)
  cpx = x+xi[6]*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[2]*W/24, y+3*H/24)
  cpx = x+xi[2]*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[1]*W/24, y+9*H/24)
  cpx = x+xi[2]*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[4]*W/24, y+16*H/24)
  cpx = x+xi[10]*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+xi[10]*W/24, y+18*H/24)
  ctx.globalAlpha /= 4
  ctx.fill()
  ctx.globalAlpha *= 4
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+4.5*W/24, y+16.2*H/24)
  ctx.lineTo(x+xi[3]*W/24, y+20*H/24)
  ctx.lineTo(x+3.5*W/24, y+20*H/24)
  ctx.lineTo(x+5.3*W/24, y+16.5*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+xi[10]*W/24, y+18*H/24)
  ctx.lineTo(x+xi[9]*W/24, y+23*H/24)
  ctx.lineTo(x+9.5*W/24, y+23*H/24)
  ctx.lineTo(x+xi[11]*W/24, y+18.5*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+17.5*H/24)
  ctx.lineTo(x+21.5*W/24, y+21*H/24)
  ctx.lineTo(x+xi[21]*W/24, y+21*H/24)
  ctx.lineTo(x+19.1*W/24, y+17.7*H/24)
  ctx.stroke()
}

function mmchair1At (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let off = document.createElement('CANVAS')
  let H = W, cpx, cpy, points = [], MIRROR = false
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/30
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let xi = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]
  if (MIRROR)
    xi.reverse()

  //1
  y -= 1*H/24
  x += 1.5*W/24

  var path = new Path2D()
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+6*H/24)
  cpx = x+2*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+2*H/24)
  cpx = x+12*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+8*H/24)
  cpx = x+12*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+11*H/24)
  cpx = x+21.5*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+15*H/24)
  cpx = x+16*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+19*H/24)
  cpx = x+2*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+6*H/24)
  ctx.globalAlpha /= 4
  ctx.fill()
  ctx.globalAlpha *= 4
  ctx.stroke()

  //1
  ctx.beginPath()
  ctx.moveTo(x+xi[10]*W/24, y+19*H/24)
  ctx.lineTo(x+xi[10]*W/24, y+21*H/24)
  ctx.lineTo(x+xi[3]*W/24, y+23*H/24)
  ctx.lineTo(x+xi[3]*W/24, y+24*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+xi[10]*W/24, y+21*H/24)
  ctx.lineTo(x+xi[16]*W/24, y+23*H/24)
  ctx.lineTo(x+xi[16]*W/24, y+24*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+xi[10]*W/24, y+21*H/24)
  ctx.lineTo(x+xi[4]*W/24, y+20*H/24)
  ctx.lineTo(x+xi[4]*W/24, y+21*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+xi[10]*W/24, y+21*H/24)
  ctx.lineTo(x+xi[15]*W/24, y+20*H/24)
  ctx.lineTo(x+xi[15]*W/24, y+21*H/24)
  ctx.stroke()
}

function ishihara_testAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let off = document.createElement('CANVAS')
  let ctxoff = off.getContext("2d")
  off.width = canvas.width, off.height = canvas.height
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color

  let c1 = ["#ff8080", "#ce9960", "#ac7f4b", "#deb177"]
  let c2 = [ "#55aa55", "#75b285", "#60987b", "#19ad98"]

  if (Math.random() > 0.5) {
    c1 = ["#0e9ae8", "#6fb8ed", "#4d96d7", "#a6c2e4"]
    c2 = ["#eeb1d9", "#e77ec2", "#c27996", "#d5b6bf"]
  }
  if (Math.random() > 0.5) {
    c1 = ["#f0675c", "#f99f90", "#963344", "#f52f34"]
    c2 = ["#3e3835", "#93796a", "#c2ab98", "#786858"]
  }

  let i = 0, x0 = x, y0 = y, W0 = W
  let cx = x+W/2, cy = y+H/2
  ctxoff.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctxoff.strokeStyle = color
  ctxoff.clearRect(0,0,W,W)
  let d = W/5
  let v = document.getElementById("featuresize").value
  let f = "bikeRAt"//randomPick(atList)
  let path = new Path2D() // 7
  path.moveTo(x+7*W/24, y+7*H/24)
  path.lineTo(x+8*W/24, y+5*H/24)
  path.lineTo(x+16*W/24, y+5*H/24)
  cpx = x+14*W/24
  cpy = y+10*H/24
  path.quadraticCurveTo(cpx, cpy, x+13*W/24, y+20*H/24)
  cpx = x+11*W/24
  cpy = y+20*H/24
  path.quadraticCurveTo(cpx, cpy, x+11*W/24, y+20*H/24)
  cpx = x+12*W/24
  cpy = y+10*H/24
  path.quadraticCurveTo(cpx, cpy, x+13*W/24, y+7*H/24)
  cpx = x+7*W/24
  cpy = y+7*H/24
  path.quadraticCurveTo(cpx, cpy, x+7*W/24, y+7*H/24)
  ctx.closePath()

  if (Math.random() > 0.5) {
    path = new Path2D()
    path.moveTo(x+17*W/24, y+8*H/24)
    cpx = x+19*W/24
    cpy = y+8*H/24
    path.quadraticCurveTo(cpx, cpy, x+19*W/24, y+8*H/24)
    cpx = x+19*W/24
    cpy = y+4*H/24
    path.quadraticCurveTo(cpx, cpy, x+12*W/24, y+4*H/24)
    cpx = x+6*W/24
    cpy = y+5*H/24
    path.quadraticCurveTo(cpx, cpy, x+6*W/24, y+13*H/24)
    cpx = x+6*W/24
    cpy = y+20*H/24
    path.quadraticCurveTo(cpx, cpy, x+12*W/24, y+20*H/24) //
    cpx = x+18*W/24
    cpy = y+20*H/24
    path.quadraticCurveTo(cpx, cpy, x+18*W/24, y+15*H/24)
    cpx = x+18*W/24
    cpy = y+11*H/24
    path.quadraticCurveTo(cpx, cpy, x+12*W/24, y+11*H/24)
    cpx = x+9*W/24
    cpy = y+11*H/24
    path.quadraticCurveTo(cpx, cpy, x+8*W/24, y+13*H/24)
    cpx = x+9*W/24
    cpy = y+15*H/24
    path.quadraticCurveTo(cpx, cpy, x+9*W/24, y+15*H/24)
    cpx = x+10*W/24
    cpy = y+13*H/24
    path.quadraticCurveTo(cpx, cpy, x+12*W/24, y+13*H/24)
    cpx = x+16*W/24
    cpy = y+13*H/24
    path.quadraticCurveTo(cpx, cpy, x+16*W/24, y+15*H/24)
    cpx = x+16*W/24
    cpy = y+18*H/24
    path.quadraticCurveTo(cpx, cpy, x+12*W/24, y+18*H/24)
    cpx = x+8*W/24
    cpy = y+18*H/24
    path.quadraticCurveTo(cpx, cpy, x+8*W/24, y+13*H/24)//
    cpx = x+8*W/24
    cpy = y+4*H/24
    path.quadraticCurveTo(cpx, cpy, x+12*W/24, y+6*H/24)
    cpx = x+16*W/24
    cpy = y+6*H/24
    path.quadraticCurveTo(cpx, cpy, x+17*W/24, y+8*H/24)
    path.closePath()
  }

  if (Math.random() > 0.5) {  
    path = new Path2D
    path.moveTo(x+14*W/24, y+12*H/24)
    path.lineTo(x+14*W/24, y+3*H/24)
    path.lineTo(x+6*W/24, y+12*H/24)
    path.lineTo(x+6*W/24, y+14*H/24)
    path.lineTo(x+12*W/24, y+14*H/24)
    path.lineTo(x+12*W/24, y+20*H/24)
    path.lineTo(x+14*W/24, y+20*H/24)
    path.lineTo(x+14*W/24, y+14*H/24)
    path.lineTo(x+18*W/24, y+14*H/24)
    path.lineTo(x+18*W/24, y+12*H/24)
    path.lineTo(x+12*W/24, y+12*H/24)
    path.lineTo(x+12*W/24, y+8*H/24)
    path.lineTo(x+8*W/24, y+12*H/24)
    path.lineTo(x+14*W/24, y+12*H/24)
    path.closePath()
  }
  W/=2, d = W/10
  for (;i < 164; i++) {
    x = x0+Math.random() * W0
    y = y0+Math.random() * W0
    if(distance(x,y,cx,cy) < W0*0.45 && isRectBlank(x-W/24,y-W/24,W/12,W/12,ctxoff)) {
      ctxoff.beginPath()
      ctxoff.arc(x,y,W/17,0,Math.PI*2)
      ctxoff.fillStyle = ctx.isPointInPath(path, x, y, "evenodd") ? randomPick(c1) : randomPick(c2) ;
      ctxoff.fill()  
    }
  }
  document.getElementById("featuresize").value *= 0.8
  W/=1.5, i = 0, d = W/10
  x = x0, y = y0
  for (;i < 460; i++) {
    x = x0+Math.random() * W0
    y = y0+Math.random() * W0
    if(distance(x,y,cx,cy) < W0*0.45 && isRectBlank(x-W/24,y-W/24,W/12,W/12,ctxoff)) {
      ctxoff.beginPath()
      ctxoff.arc(x,y,W/17,0,Math.PI*2)
      ctxoff.fillStyle = ctx.isPointInPath(path, x,y, "evenodd") ? randomPick(c1) : randomPick(c2) ;
      ctxoff.fill()  
    }
  }
  W/=1.5, i = 0, d = W/10
  x = x0, y = y0
  for (;i < 3500; i++) {
    x = x0+Math.random() * W0
    y = y0+Math.random() * W0
    if(distance(x,y,cx,cy) < W0*0.45 && isRectBlank(x-W/24,y-W/24,W/12,W/12,ctxoff)) {
      ctxoff.beginPath()
      ctxoff.arc(x,y,W/17,0,Math.PI*2)
      ctxoff.fillStyle = ctx.isPointInPath(path, x,y, "evenodd") ? randomPick(c1) : randomPick(c2) ;
      ctxoff.fill()  
    }
  }
  document.getElementById("featuresize").value = v
  ctx.drawImage(off,0,0)
}

function price_of_a_dozen_eggsAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let d = 2+Math.floor(Math.random()*6)
  let bi =(d).toString(2)
  bi = bi.padStart(8,"0")
  ctx.font = "800 italic "+W/6+"pt Garamond"
  width = ctx.measureText("$ "+bi).width
  ctx.fillText("$"+bi, x + W/2 - (width/2), y+13*H/24)
  //3
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+14*H/24)
  cpx = x+4*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+23*H/24)
  cpx = x+20*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+14*H/24)
  cpx = x+19*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+1*H/24)
  cpx = x+5*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+14*H/24)
  cpx = x+4*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+23*H/24)
  ctx.stroke()
}

function buildingsAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, d = 0, angle = pet(180)
  x == pet(100), y += pet(100)
  //1
  ctx.beginPath()
  p = rotatePoint(x+4*W/24+pet(d), y+18*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+8*W/24+pet(d), y+22*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+22*W/24+pet(d), y+22*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+22*W/24+pet(d), y+4*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+14*W/24+pet(d), y+4*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+14*W/24+pet(d), y+6*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+12*W/24+pet(d), y+4*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+8*W/24+pet(d), y+4*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+8*W/24+pet(d), y+22*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+8*W/24+pet(d), y+4*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+4*W/24+pet(d), y+2*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+4*W/24+pet(d), y+18*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //2
  ctx.beginPath()
  p = rotatePoint(x+14*W/24+pet(d), y+4*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+11*W/24+pet(d), y+2*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+20*W/24+pet(d), y+2*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+22*W/24+pet(d), y+4*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //3
  ctx.beginPath()
  p = rotatePoint(x+18*W/24+pet(d), y+6*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+18*W/24+pet(d), y+8*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+19*W/24+pet(d), y+8*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+19*W/24+pet(d), y+6*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+18*W/24+pet(d), y+6*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //4
  ctx.beginPath()
  p = rotatePoint(x+15*W/24+pet(d), y+6*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+15*W/24+pet(d), y+8*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+16*W/24+pet(d), y+8*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+16*W/24+pet(d), y+6*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+15*W/24+pet(d), y+6*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //5
  ctx.beginPath()
  p = rotatePoint(x+12*W/24+pet(d), y+6*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+13*W/24+pet(d), y+6*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+13*W/24+pet(d), y+8*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+12*W/24+pet(d), y+8*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+12*W/24+pet(d), y+6*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //6
  ctx.beginPath()
  p = rotatePoint(x+12*W/24+pet(d), y+10*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+13*W/24+pet(d), y+10*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+13*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+12*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+12*W/24+pet(d), y+10*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //7
  ctx.beginPath()
  p = rotatePoint(x+15*W/24+pet(d), y+10*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+16*W/24+pet(d), y+10*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+16*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+15*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+15*W/24+pet(d), y+10*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //8
  ctx.beginPath()
  p = rotatePoint(x+18*W/24+pet(d), y+10*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+19*W/24+pet(d), y+10*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+19*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+18*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+18*W/24+pet(d), y+10*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //9
  ctx.beginPath()
  p = rotatePoint(x+12*W/24+pet(d), y+14*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+13*W/24+pet(d), y+14*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+13*W/24+pet(d), y+16*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+12*W/24+pet(d), y+16*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+12*W/24+pet(d), y+14*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //10
  ctx.beginPath()
  p = rotatePoint(x+15*W/24+pet(d), y+14*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+16*W/24+pet(d), y+14*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+16*W/24+pet(d), y+16*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+15*W/24+pet(d), y+16*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+15*W/24+pet(d), y+14*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //11
  ctx.beginPath()
  p = rotatePoint(x+18*W/24+pet(d), y+14*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+19*W/24+pet(d), y+14*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+19*W/24+pet(d), y+16*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+18*W/24+pet(d), y+16*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+18*W/24+pet(d), y+14*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //12
  ctx.beginPath()
  p = rotatePoint(x+12*W/24+pet(d), y+18*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+12*W/24+pet(d), y+20*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+13*W/24+pet(d), y+20*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+13*W/24+pet(d), y+18*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+13*W/24+pet(d), y+18*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+12*W/24+pet(d), y+18*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //13
  ctx.beginPath()
  p = rotatePoint(x+15*W/24+pet(d), y+18*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+15*W/24+pet(d), y+20*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+16*W/24+pet(d), y+20*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+16*W/24+pet(d), y+18*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+15*W/24+pet(d), y+18*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //14
  ctx.beginPath()
  p = rotatePoint(x+18*W/24+pet(d), y+18*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+19*W/24+pet(d), y+18*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+19*W/24+pet(d), y+20*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+18*W/24+pet(d), y+20*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+18*W/24+pet(d), y+18*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //15
  ctx.beginPath()
  p = rotatePoint(x+4*W/24+pet(d), y+2*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+9*W/24+pet(d), y+2*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+12*W/24+pet(d), y+4*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //16
  ctx.beginPath()
  p = rotatePoint(x+11*W/24+pet(d), y+2*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+11*W/24+pet(d), y+3*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()
angle = pet(360)
x == pet(100), y += pet(100)
  //17
  ctx.beginPath()
  p = rotatePoint(x+2*W/24+pet(d), y+6*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+6*W/24+pet(d), y+6*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+6*W/24+pet(d), y+1*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+16*W/24+pet(d), y+1*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+16*W/24+pet(d), y+14*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+21*W/24+pet(d), y+14*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+21*W/24+pet(d), y+21*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+2*W/24+pet(d), y+21*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+2*W/24+pet(d), y+6*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+6*W/24+pet(d), y+8*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+9*W/24+pet(d), y+8*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+6*W/24+pet(d), y+6*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+9*W/24+pet(d), y+8*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+9*W/24+pet(d), y+1*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()
}

function newspeakAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/20
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "round"
  ctx.lineJoin = "bevel"
  ctx.font = "800 italic " +W*0.039+"pt Garamont"
  let newspeak = shuffle(["merit-based society","exceptional cabinet nominees","new media voices","woke mind virus","illegal DEI programs","social engineering policies","illegal criminals","Green New Scam","Gulf of America"])
  //1
  let bulletlist = newspeak.join("\u{2022}").split("")
  let x0 = x+7.5*W/24, y0 = y+7.5*H/24, i = 0
  for (; i < bulletlist.length; i++) {
    let w = ctx.measureText(bulletlist[i]).width
    ctx.fillText(bulletlist[i], x0, y0)
    x0 += w
    if (x0 > x+22*W/24) {
      x0 = x+7.5*W/24
      y0 += W*0.07
    }
  }
  //1
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+23*H/24)
  cpx = x+4*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+20*H/24)
  cpx = x+4*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+18*H/24)
  cpx = x+4*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+16*H/24)
  cpx = x+5*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+14*H/24)
  cpx = x+0*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+0*W/24, y+12*H/24)
  cpx = x+4*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+12*H/24)
  cpx = x+5*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+10*H/24)
  cpx = x+4*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+6*H/24)
  cpx = x+4*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+5*H/24)
  cpx = x+7*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+5*H/24)
  cpx = x+8*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+0*H/24)
  ctx.stroke()

//1
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+4*H/24)
  cpx = x+3*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2.5*W/24, y+4.5*H/24)
  ctx.stroke()
  //3
  y+= W/48
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+13*H/24)
  ctx.lineTo(x+7*W/24, y+16*H/24)
  cpx = x+7*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+18*H/24)
  cpx = x+21*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+18*H/24)
  cpx = x+23*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+16*H/24)
  cpx = x+23*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+7*H/24)
  cpx = x+23*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+5*H/24)
  cpx = x+9*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+5*H/24)
  cpx = x+7*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+7*H/24)
  cpx = x+7*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+10*H/24)
  cpx = x+4*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+13*H/24)
  cpx = x+7*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+13*H/24)
  ctx.stroke()
}


function not_my_circus_not_my_monkeysAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = [], p = W/48
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  ctx.lineWidth /= 3
  let i = 0
  ctx.globalAlpha /= 2
  for (; i < 17; i++) {
    //1
    ctx.beginPath()
    ctx.arc(x+12*W/24+pet(p), y+17*H/24+pet(p), 5*W/24+pet(p) ,0,Math.PI*2)
    ctx.stroke()
    ctx.beginPath()
    ctx.arc(x+12*W/24+pet(p), y+9*H/24+pet(p), 7*W/24+pet(p),Math.PI*0.72,Math.PI*.29)
    ctx.stroke()

    //2
    ctx.beginPath()
    ctx.arc(x+9*W/24+pet(p), y+9.5*H/24+pet(p), 2*W/24+pet(p*3), 0, Math.PI*2)
    ctx.stroke()
    ctx.beginPath()
    ctx.arc(x+15*W/24+pet(p), y+9.5*H/24+pet(p), 2*W/24+pet(p*3), 0, Math.PI*2)
    ctx.stroke()

    //3
    ctx.beginPath()
    ctx.arc(x+5*W/24+pet(p), y+11*H/24+pet(p), 2*W/24+pet(p), Math.PI/3, Math.PI*1.5)
    ctx.stroke()
    ctx.beginPath()
    ctx.arc(x+19*W/24+pet(p), y+11*H/24+pet(p), 2*W/24+pet(p), Math.PI*1.5, Math.PI*2/3)
    ctx.stroke()

    //4
    ctx.beginPath()
    ctx.arc(x+10.5*W/24+pet(p), y+14.5*H/24+pet(p), 0.8*W/24+pet(p), 0, Math.PI*2)
    ctx.stroke()
    ctx.beginPath()
    ctx.arc(x+13.5*W/24+pet(p), y+14.5*H/24+pet(p), 0.8*W/24+pet(p), 0, Math.PI*2)
    ctx.stroke()

    //5
    ctx.beginPath()
    ctx.moveTo(x+7*W/24+pet(p), y+17*H/24+pet(p*3))
    ctx.lineTo(x+17*W/24+pet(p), y+17*H/24+pet(p*3))
    ctx.stroke()
  }
  ctx.globalAlpha *= 2
}

function hurricaneAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, d = 0, angle = pet(90)
  //angle -= 35
  gulfAt(x,y,W,color)
  y -= 4*W/24, x += 0
  //1
  ctx.beginPath()
  p = rotatePoint(x+8*W/24+pet(d), y+17*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+9*W/24+pet(d)
  cpy = y+17*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+10*W/24+pet(d), y+15*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+12*W/24+pet(d)
  cpy = y+11*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+17*W/24+pet(d), y+10*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+20*W/24+pet(d)
  cpy = y+10*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+20*W/24+pet(d), y+7*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+20*W/24+pet(d)
  cpy = y+4*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+16*W/24+pet(d), y+4*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+6*W/24+pet(d)
  cpy = y+6*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+7*W/24+pet(d), y+16*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+7*W/24+pet(d)
  cpy = y+17*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+8*W/24+pet(d), y+17*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()
  ctx.globalAlpha /= 4
  ctx.fill()
  ctx.globalAlpha *= 4

  //2
  ctx.beginPath()
  p = rotatePoint(x+7*W/24+pet(d), y+16*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+7*W/24+pet(d)
  cpy = y+17*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+8*W/24+pet(d), y+17*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+9*W/24+pet(d)
  cpy = y+17*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+9*W/24+pet(d), y+16*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+9*W/24+pet(d)
  cpy = y+15*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+8*W/24+pet(d), y+15*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+7*W/24+pet(d)
  cpy = y+15*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+7*W/24+pet(d), y+16*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()
  ctx.globalAlpha /= 2
  ctx.fill()
  ctx.globalAlpha *= 2

  //3
  ctx.beginPath()
  p = rotatePoint(x+8*W/24+pet(d), y+13*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+8*W/24+pet(d)
  cpy = y+14*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+9*W/24+pet(d), y+14*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+10*W/24+pet(d)
  cpy = y+14*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+10*W/24+pet(d), y+13*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+10*W/24+pet(d)
  cpy = y+12*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+9*W/24+pet(d), y+12*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+8*W/24+pet(d)
  cpy = y+12*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+8*W/24+pet(d), y+13*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()

  //4
  ctx.beginPath()
  p = rotatePoint(x+10*W/24+pet(d), y+10*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+10*W/24+pet(d)
  cpy = y+11*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+11*W/24+pet(d), y+11*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+12*W/24+pet(d)
  cpy = y+11*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24+pet(d), y+10*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+12*W/24+pet(d)
  cpy = y+9*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+11*W/24+pet(d), y+9*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+10*W/24+pet(d)
  cpy = y+9*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+10*W/24+pet(d), y+10*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()

  //5
  ctx.beginPath()
  p = rotatePoint(x+13*W/24+pet(d), y+8*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+13*W/24+pet(d)
  cpy = y+9*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+14*W/24+pet(d), y+9*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+15*W/24+pet(d)
  cpy = y+9*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+15*W/24+pet(d), y+8*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+15*W/24+pet(d)
  cpy = y+7*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+14*W/24+pet(d), y+7*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+13*W/24+pet(d)
  cpy = y+7*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+13*W/24+pet(d), y+8*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()

  //6
  ctx.beginPath()
  p = rotatePoint(x+16*W/24+pet(d), y+7*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+16*W/24+pet(d)
  cpy = y+8*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+17*W/24+pet(d), y+8*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+18*W/24+pet(d)
  cpy = y+8*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+18*W/24+pet(d), y+7*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+18*W/24+pet(d)
  cpy = y+6*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+17*W/24+pet(d), y+6*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+16*W/24+pet(d)
  cpy = y+6*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+16*W/24+pet(d), y+7*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()
}

function gulfAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  let fs = Math.round(W*0.04)
  ctx.font = "italic "+fs+"pt Garamond"  
  ctx.fillText(" GULF",x+10*W/24, y+9*H/24)
  ctx.fillText("  OF",x+10*W/24, y+10.5*H/24)
  ctx.fillText("MEXICO",x+10*W/24, y+12*H/24)
  //1
  ctx.beginPath()
  ctx.moveTo(x+19*W/24, y+24*H/24)
  ctx.lineTo(x+18*W/24, y+23*H/24)
  ctx.lineTo(x+17*W/24, y+23*H/24)
  ctx.lineTo(x+16*W/24, y+23*H/24)
  ctx.lineTo(x+14*W/24, y+23*H/24)
  ctx.lineTo(x+13*W/24, y+23*H/24)
  ctx.lineTo(x+14*W/24, y+22*H/24)
  ctx.lineTo(x+14*W/24, y+21*H/24)
  ctx.lineTo(x+14*W/24, y+20*H/24)
  ctx.lineTo(x+14*W/24, y+19*H/24)
  ctx.lineTo(x+15*W/24, y+16*H/24)
  ctx.lineTo(x+14*W/24, y+15*H/24)
  ctx.lineTo(x+11*W/24, y+16*H/24)
  ctx.lineTo(x+11*W/24, y+18*H/24)
  ctx.lineTo(x+9*W/24, y+20*H/24)
  ctx.lineTo(x+8*W/24, y+19*H/24)
  ctx.lineTo(x+6*W/24, y+20*H/24)
  ctx.lineTo(x+4*W/24, y+19*H/24)
  ctx.lineTo(x+2*W/24, y+14*H/24)
  ctx.lineTo(x+2*W/24, y+10*H/24)
  ctx.lineTo(x+3*W/24, y+9*H/24)
  ctx.lineTo(x+2*W/24, y+7*H/24)
  ctx.lineTo(x+4*W/24, y+5*H/24)
  ctx.lineTo(x+5*W/24, y+5*H/24)
  ctx.lineTo(x+6*W/24, y+4*H/24)
  ctx.lineTo(x+7*W/24, y+4*H/24)
  ctx.lineTo(x+8*W/24, y+4*H/24)
  ctx.lineTo(x+10*W/24, y+4*H/24)
  ctx.lineTo(x+10*W/24, y+5*H/24)
  ctx.lineTo(x+11*W/24, y+5*H/24)
  ctx.lineTo(x+12*W/24, y+4*H/24)
  ctx.lineTo(x+13*W/24, y+3*H/24)
  ctx.lineTo(x+15*W/24, y+3*H/24)
  ctx.lineTo(x+16*W/24, y+3*H/24)
  ctx.lineTo(x+17*W/24, y+4*H/24)
  ctx.lineTo(x+18*W/24, y+4*H/24)
  ctx.lineTo(x+19*W/24, y+3*H/24)
  ctx.lineTo(x+20*W/24, y+5*H/24)
  ctx.lineTo(x+20*W/24, y+6*H/24)
  ctx.lineTo(x+21*W/24, y+8*H/24)
  ctx.lineTo(x+22*W/24, y+9*H/24)
  ctx.lineTo(x+22*W/24, y+10*H/24)
  ctx.lineTo(x+23*W/24, y+10*H/24)
  ctx.lineTo(x+24*W/24, y+9*H/24)
  ctx.lineTo(x+24*W/24, y+8*H/24)
  ctx.lineTo(x+23*W/24, y+6*H/24)
  ctx.lineTo(x+22*W/24, y+3*H/24)
  ctx.lineTo(x+22*W/24, y+2*H/24)
  ctx.lineTo(x+23*W/24, y+0*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+22*H/24)
  ctx.lineTo(x+2*W/24, y+23*H/24)
  ctx.lineTo(x+3*W/24, y+23*H/24)
  ctx.lineTo(x+5*W/24, y+23*H/24)
  ctx.lineTo(x+6*W/24, y+23*H/24)
  ctx.lineTo(x+7*W/24, y+24*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+23*W/24, y+10*H/24)
  cpx = x+23*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+11*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+15*H/24)
  ctx.lineTo(x+20*W/24, y+14*H/24)
  ctx.lineTo(x+22*W/24, y+14*H/24)
  ctx.lineTo(x+23*W/24, y+15*H/24)
  ctx.lineTo(x+24*W/24, y+16*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+15*H/24)
  ctx.lineTo(x+19*W/24, y+14*H/24)
  ctx.lineTo(x+21*W/24, y+13*H/24)
  ctx.lineTo(x+22*W/24, y+13*H/24)
  ctx.lineTo(x+23*W/24, y+13*H/24)
  ctx.lineTo(x+24*W/24, y+14*H/24)
  ctx.stroke()
}

function voidAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  ctx.fillStyle = "#000000"
  ctx.strokeStyle = "#202020"

}

function cellular_automataAt (x,y,W,color,d) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  ctx.fillStyle = color
  let H = W
  if (d=== false || d === true || d === undefined)
  d = Math.floor(Math.random() * 255)
  let rule = d.toString(2).padStart(8,"0").split("")
  ctx.font = "800 italic "+W/14+"pt Garamond"
  width = ctx.measureText("Rule "+d).width
  ctx.fillText("Rule "+d, x + W/2 - (width/2), y - W/24)
  let seed = [], i = 0, j = 0
  for (; i < 32; i++)
    seed.push((Math.random() > 0.5)? 1: 0)
  i = 0
  for (; i < 32; i++) {
    if (seed[i] === 1)
      ctx.fillRect(x+i*W/32, y, W/32, H/32)
  }
  let ruletable = {"111":rule[0],"110":rule[1],"101":rule[2], "100":rule[3],
                  "011":rule[4],"010":rule[5],"001":rule[6], "000":rule[7],}
  for (; j < 32; j++) {
    i = 0
    y += H/32
    let temp = []
    for (; i < 32; i++) {
      let m = (i-1 < 0)? 31: i-1
      let triplet = seed[m]+""+seed[i]+""+seed[(i+1)%32]
      temp.push(parseInt(ruletable[triplet]))
    }
    seed = temp, i = 0
    for (; i < 32; i++) {
      if (seed[i] === 1)
        ctx.fillRect(x+i*W/32, y, W/32, H/32)
    }
  }
}

function washing_machineAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+23*H/24)
  ctx.lineTo(x+18*W/24, y+23*H/24)
  ctx.lineTo(x+22*W/24, y+20*H/24)
  ctx.lineTo(x+22*W/24, y+1*H/24)
  ctx.lineTo(x+6*W/24, y+1*H/24)
  ctx.lineTo(x+6*W/24, y+5*H/24)
  ctx.lineTo(x+22*W/24, y+5*H/24)
  ctx.lineTo(x+18*W/24, y+7*H/24)
  ctx.lineTo(x+18*W/24, y+23*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+7*H/24)
  ctx.lineTo(x+2*W/24, y+7*H/24)
  ctx.lineTo(x+2*W/24, y+23*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+7*H/24)
  ctx.lineTo(x+6*W/24, y+5*H/24)
  ctx.stroke()
  let r = 5*W/24
  //4
  ctx.save()
  ctx.beginPath()
  ctx.arc(x+10*W/24, y+15*H/24, r, 0, Math.PI*2)
  ctx.stroke()
  ctx.clip()

  ctx.fillStyle = ctx.strokeStyle
  ctx.globalAlpha /= 3
  ctx.beginPath()
  ctx.arc(x+11*W/24, y+14*H/24, r, 0, Math.PI*2)
  ctx.fill()  
  ctx.globalAlpha *= 3
  ctx.restore()
  r = W/24
  //5
  ctx.beginPath()
  ctx.arc(x+17*W/24, y+3*H/24, r, 0, Math.PI*2)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.arc(x+20*W/24, y+3*H/24, r, 0, Math.PI*2)
  ctx.stroke()
}
function scotomaAt (x,y,W,color,INVERT) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let fs = ctx.fillStyle
  window [randomPick(atList)] (x, y, W, color)
  ctx.fillStyle = fs
  let r = W/4
  ctx.globalAlpha *= 0.6
  ctx.beginPath()
  ctx.arc(x+W/2-W/24, y+H/2,r,0,Math.PI*2)
  ctx.fill()

  ctx.beginPath()
  ctx.arc(x+W/2, y+H/2-H/24,r*1.3,0,Math.PI*2)
  ctx.fill()

  ctx.beginPath()
  ctx.arc(x+W/2, y+H/2+H/24,r*1.6,0,Math.PI*2)
  ctx.fill()
  ctx.globalAlpha /= 0.6
  ctx.fillStyle = fs
}

function synapseAt (x,y,W,color,INVERT) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let r = W/48
  if (!INVERT) {
    //1
    ctx.beginPath()
    ctx.moveTo(x+12*W/24, y+14*H/24)
    cpx = x+8*W/24
    cpy = y+18*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+14*H/24)
    cpx = x+3*W/24
    cpy = y+12*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+0*W/24, y+14*H/24)
    ctx.stroke()

    //2
    ctx.beginPath()
    ctx.moveTo(x+12*W/24, y+10*H/24)
    cpx = x+8*W/24
    cpy = y+14*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+10*H/24)
    cpx = x+3*W/24
    cpy = y+8*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+0*W/24, y+10*H/24)
    ctx.stroke()

    //3
    ctx.beginPath()
    ctx.moveTo(x+12*W/24, y+10*H/24)
    cpx = x+12*W/24
    cpy = y+2*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+2*H/24)
    cpx = x+18*W/24
    cpy = y+2*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+4*H/24)
    cpx = x+19*W/24
    cpy = y+4*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+5*H/24)
    cpx = x+19*W/24
    cpy = y+6*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+6*H/24)
    cpx = x+18*W/24
    cpy = y+7*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+7*H/24)
    cpx = x+19*W/24
    cpy = y+7*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+8*H/24)
    cpx = x+19*W/24
    cpy = y+9*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+9*H/24)
    cpx = x+18*W/24
    cpy = y+10*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+10*H/24)
    cpx = x+19*W/24
    cpy = y+10*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+11*H/24)
    cpx = x+19*W/24
    cpy = y+12*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+12*H/24)
    cpx = x+18*W/24
    cpy = y+13*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+13*H/24)
    cpx = x+19*W/24
    cpy = y+13*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+14*H/24)
    cpx = x+19*W/24
    cpy = y+15*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+15*H/24)
    cpx = x+18*W/24
    cpy = y+16*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+16*H/24)
    cpx = x+19*W/24
    cpy = y+16*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+17*H/24)
    cpx = x+19*W/24
    cpy = y+18*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+18*H/24)
    cpx = x+18*W/24
    cpy = y+19*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+19*H/24)
    cpx = x+19*W/24
    cpy = y+19*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+20*H/24)
    cpx = x+19*W/24
    cpy = y+21*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+21*H/24)
    cpx = x+18*W/24
    cpy = y+22*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+22*H/24)
    cpx = x+12*W/24
    cpy = y+22*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+14*H/24)
    ctx.stroke()

    
    //4
    ctx.beginPath()
    ctx.arc(x+21*W/24, y+3*H/24,r,0,Math.PI*2)
    ctx.stroke()

    //5
    ctx.beginPath()
    ctx.arc(x+22*W/24, y+5*H/24,r,0,Math.PI*2)
    ctx.stroke()

    //6
    ctx.beginPath()
    ctx.arc(x+21*W/24, y+8*H/24,r,0,Math.PI*2)
    ctx.stroke()

    //7
    ctx.beginPath()
    ctx.arc(x+23*W/24, y+10*H/24,r,0,Math.PI*2)
    ctx.stroke()

    //8
    ctx.beginPath()
    ctx.arc(x+21*W/24, y+11*H/24,r,0,Math.PI*2)
    ctx.stroke()

    //9
    ctx.beginPath()
    ctx.arc(x+22*W/24, y+13*H/24,r,0,Math.PI*2)
    ctx.stroke()

    //10
    ctx.beginPath()
    ctx.arc(x+21*W/24, y+15*H/24,r,0,Math.PI*2)
    ctx.stroke()

    //11
    ctx.beginPath()
    ctx.arc(x+23*W/24, y+17*H/24,r,0,Math.PI*2)
    ctx.stroke()

    //12
    ctx.beginPath()
    ctx.arc(x+21*W/24, y+18*H/24,r,0,Math.PI*2)
    ctx.stroke()

    //13
    ctx.beginPath()
    ctx.arc(x+21*W/24, y+22*H/24,r,0,Math.PI*2)
    ctx.stroke()

    //14
    ctx.beginPath()
    ctx.arc(x+22*W/24, y+20*H/24,r,0,Math.PI*2)
    ctx.stroke()

    //1
    ctx.beginPath()
    ctx.arc(x+18*W/24, y+5*H/24,r,0,Math.PI*2)
    ctx.stroke()

    //2
    ctx.beginPath()
    ctx.arc(x+18*W/24, y+14*H/24,r,0,Math.PI*2)
    ctx.stroke()

    //3
    ctx.beginPath()
    ctx.arc(x+18*W/24, y+20*H/24,r,0,Math.PI*2)
    ctx.stroke()

    //4
    ctx.beginPath()
    ctx.arc(x+23*W/24, y+3*H/24,r,0,Math.PI*2)
    ctx.stroke()

    //5
    ctx.beginPath()
    ctx.arc(x+23*W/24, y+22*H/24,r,0,Math.PI*2)
    ctx.stroke()

  } else {
    y -= H/24
    ctx.beginPath()
    ctx.moveTo(x+12*W/24, y+14*H/24)
    cpx = x+8*W/24
    cpy = y+18*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+14*H/24)
    cpx = x+2*W/24
    cpy = y+12*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+0*W/24, y+14*H/24)
    ctx.stroke()

    //2
    ctx.beginPath()
    ctx.moveTo(x+12*W/24, y+10*H/24)
    cpx = x+8*W/24
    cpy = y+14*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+10*H/24)
    cpx = x+2*W/24
    cpy = y+8*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+0*W/24, y+10*H/24)
    ctx.stroke()

    //3
    ctx.beginPath()
    ctx.moveTo(x+12*W/24, y+10*H/24)
    cpx = x+12*W/24
    cpy = y+2*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+2*H/24)
    cpx = x+18*W/24
    cpy = y+2*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+4*H/24)
    cpx = x+17*W/24
    cpy = y+4*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+5*H/24)
    cpx = x+17*W/24
    cpy = y+6*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+6*H/24)
    cpx = x+18*W/24
    cpy = y+7*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+7*H/24)
    cpx = x+17*W/24
    cpy = y+7*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+8*H/24)
    cpx = x+17*W/24
    cpy = y+9*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+9*H/24)
    cpx = x+18*W/24
    cpy = y+10*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+10*H/24)
    cpx = x+17*W/24
    cpy = y+10*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+11*H/24)
    cpx = x+17*W/24
    cpy = y+12*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+12*H/24)
    cpx = x+18*W/24
    cpy = y+13*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+13*H/24)
    cpx = x+17*W/24
    cpy = y+13*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+14*H/24)
    cpx = x+17*W/24
    cpy = y+15*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+15*H/24)
    cpx = x+18*W/24
    cpy = y+16*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+16*H/24)
    cpx = x+17*W/24
    cpy = y+16*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+17*H/24)
    cpx = x+17*W/24
    cpy = y+18*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+18*H/24)
    cpx = x+18*W/24
    cpy = y+19*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+19*H/24)
    cpx = x+17*W/24
    cpy = y+19*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+20*H/24)
    cpx = x+17*W/24
    cpy = y+21*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+21*H/24)
    cpx = x+18*W/24
    cpy = y+22*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+22*H/24)
    cpx = x+12*W/24
    cpy = y+22*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+14*H/24)
    ctx.stroke()

    //4
    ctx.beginPath()
    ctx.arc(x+18*W/24, y+8*H/24,r,0,Math.PI*2)
    ctx.stroke()

    //5
    ctx.beginPath()
    ctx.arc(x+19*W/24, y+5*H/24,r,0,Math.PI*2)
    ctx.stroke()

    //6
    ctx.beginPath()
    ctx.arc(x+18*W/24, y+14*H/24,r,0,Math.PI*2)
    ctx.stroke()

    //7
    ctx.beginPath()
    ctx.arc(x+19*W/24, y+20*H/24,r,0,Math.PI*2)
    ctx.stroke()

    //8
    ctx.beginPath()
    ctx.arc(x+20*W/24, y+17*H/24,r,0,Math.PI*2)
    ctx.stroke()

    //9
    ctx.beginPath()
    ctx.arc(x+21*W/24, y+19*H/24,r,0,Math.PI*2)
    ctx.stroke()

    //10
    ctx.beginPath()
    ctx.arc(x+21*W/24, y+14*H/24,r,0,Math.PI*2)
    ctx.stroke()

    //11
    ctx.beginPath()
    ctx.arc(x+20*W/24, y+12*H/24,r,0,Math.PI*2)
    ctx.stroke()

    //12
    ctx.beginPath()
    ctx.arc(x+22*W/24, y+10*H/24,r,0,Math.PI*2)
    ctx.stroke()

    //13
    ctx.beginPath()
    ctx.arc(x+21*W/24, y+8*H/24,r,0,Math.PI*2)
    ctx.stroke()

    //14
    ctx.beginPath()
    ctx.arc(x+22*W/24, y+4*H/24,r,0,Math.PI*2)
    ctx.stroke()

    //15
    ctx.beginPath()
    ctx.arc(x+23*W/24, y+17*H/24,r,0,Math.PI*2)
    ctx.stroke()

    //16
    ctx.beginPath()
    ctx.arc(x+20*W/24, y+3*H/24,r,0,Math.PI*2)
    ctx.stroke()

    //17
    ctx.beginPath()
    ctx.arc(x+22*W/24, y+21*H/24,r,0,Math.PI*2)
    ctx.stroke()
  }
}

function cat_doorAt (x,y,W,color,INVERT) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  if (INVERT) {
    //1
    y -= H/24
     //1
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+3*H/24)
  ctx.lineTo(x+1*W/24, y+22*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+10*H/24)
  ctx.lineTo(x+10*W/24, y+7*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+11*H/24)
  ctx.lineTo(x+9*W/24, y+11*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+17*H/24)
  ctx.lineTo(x+8*W/24, y+17*H/24)
  ctx.lineTo(x+10*W/24, y+21*H/24)
  cpx = x+10*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+22*H/24)
  cpx = x+10*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+17*H/24)
  cpx = x+11*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+13*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+17*H/24)
  cpx = x+6*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+22*H/24)
  cpx = x+5*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+21*H/24)
  cpx = x+6*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+17*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+8*H/24)
  cpx = x+9*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+11*H/24)
  cpx = x+9*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+13*H/24)
  cpx = x+13*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+11*H/24)
  cpx = x+13*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+8*H/24)
  cpx = x+12*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+10*H/24)
  cpx = x+10*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+10*H/24)
  cpx = x+10*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+8*H/24)
  ctx.stroke()

    //1
    let saved = ctx.fillStyle
    ctx.fillStyle = color
    ctx.beginPath()
    ctx.arc(x+1*W/24, y+10*H/24, W/48, Math.PI*1.5,Math.PI*0.5)
    ctx.fill()
    ctx.fillStyle = saved
  } else {
    x -= 2*W/24
    //1
    ctx.beginPath()
    ctx.moveTo(x+25*W/24, y+10*H/24)
    cpx = x+16*W/24
    cpy = y+10*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+10*H/24)
    cpx = x+16*W/24
    cpy = y+3*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+3*H/24)
    cpx = x+16*W/24
    cpy = y+2*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+2*H/24)
    cpx = x+15*W/24
    cpy = y+10*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+10*H/24)
    cpx = x+15*W/24
    cpy = y+11*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+11*H/24)
    cpx = x+15*W/24
    cpy = y+11*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+12*H/24)
    cpx = x+15*W/24
    cpy = y+20*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+20*H/24)
    cpx = x+15*W/24
    cpy = y+21*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+21*H/24)
    cpx = x+18*W/24
    cpy = y+16*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+16*H/24)
    cpx = x+25*W/24
    cpy = y+16*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+25*W/24, y+16*H/24)
    ctx.stroke()

    //2
    ctx.beginPath()
    ctx.moveTo(x+18*W/24, y+16*H/24)
    cpx = x+20*W/24
    cpy = y+21*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+21*H/24)
    cpx = x+19*W/24
    cpy = y+21*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+20*H/24)
    cpx = x+17.25*W/24
    cpy = y+18.25*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+17.25*W/24, y+18.25*H/24)
    ctx.stroke()
    //3
    ctx.beginPath()
    ctx.moveTo(x+25*W/24, y+2*H/24)
    ctx.lineTo(x+25*W/24, y+21*H/24)
    ctx.stroke()
  }
}

function your_better_halfAt (x,y,W,color,INVERT) {
  if (INVERT)
    better_halfIAt(x,y,W,color)
  else
    better_halfUAt(x,y,W,color)
}

function better_halfUAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  //2
  ctx.beginPath()
  ctx.moveTo(x+24*W/24, y+15*H/24)
  cpx = x+22*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+23*H/24)
  cpx = x+17*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+23*H/24)
  cpx = x+17*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+22*H/24)
  cpx = x+20*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+21*H/24)
  cpx = x+20*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+9*H/24)
  cpx = x+20*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+14*H/24)
  cpx = x+20*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+15*H/24)
  cpx = x+18*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+14*H/24)
  cpx = x+18*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+7*H/24)
  cpx = x+18*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+6*H/24)
  cpx = x+20*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+6*H/24)
  cpx = x+21*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+5*H/24)
  cpx = x+21*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+4*H/24)
  cpx = x+21*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+24*W/24, y+1*H/24)
  ctx.stroke()
}
function i_apos_m_with_stupidAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+2*H/24)
  ctx.lineTo(x+18*W/24, y+2*H/24)
  ctx.lineTo(x+20*W/24, y+3*H/24)
  ctx.lineTo(x+23*W/24, y+7*H/24)
  ctx.lineTo(x+19*W/24, y+10*H/24)
  ctx.lineTo(x+18*W/24, y+8*H/24)
  ctx.lineTo(x+18*W/24, y+22*H/24)
  ctx.lineTo(x+6*W/24, y+22*H/24)
  ctx.lineTo(x+6*W/24, y+8*H/24)
  ctx.lineTo(x+5*W/24, y+10*H/24)
  ctx.lineTo(x+1*W/24, y+7*H/24)
  ctx.lineTo(x+4*W/24, y+3*H/24)
  ctx.lineTo(x+6*W/24, y+2*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+2*H/24)
  cpx = x+9*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+4*H/24)
  cpx = x+15*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+2*H/24)
  ctx.stroke()

  //3
  ctx.fillStyle = color
  ctx.font = "bold "+1.5*W/24+"pt Tahoma"
  let w = ctx.measureText("I'm").width
  ctx.fillText("I'm",x+W/2-w/2, y+7*H/24)
  w = ctx.measureText("with").width
  ctx.fillText("with",x+W/2-w/2, y+9*H/24)
  
  w = ctx.measureText("stupid").width
  ctx.fillText("stupid",x+W/2-w/2, y+11*H/24)
  ctx.font = "bold "+4*W/24+"pt Garamond"
  w = ctx.measureText("\u{27A1}").width
  ctx.fillText("\u{27A1}",x+W/2-w/2, y+16*H/24) //arrow
}

function better_halfIAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  y -= H/24
  //1
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+2*H/24)
  cpx = x+3*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+5*H/24)
  cpx = x+3*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+6*H/24)
  cpx = x+3*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+7*H/24)
  cpx = x+5*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+7*H/24)
  cpx = x+6*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+8*H/24)
  cpx = x+6*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+15*H/24)
  cpx = x+6*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+16*H/24)
  cpx = x+4*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+15*H/24)
  cpx = x+4*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+10*H/24)
  cpx = x+4*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+22*H/24)
  cpx = x+4*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+23*H/24)
  cpx = x+7*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+24*H/24)
  ctx.lineTo(x+2*W/24, y+24*H/24)
  ctx.lineTo(x+0*W/24, y+16*H/24)
  ctx.stroke()
}

function kkkAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+22*H/24)
  ctx.lineTo(x+15*W/24, y+22*H/24)
  ctx.lineTo(x+15*W/24, y+16*H/24)
  ctx.lineTo(x+15*W/24, y+18*H/24)
  ctx.lineTo(x+17*W/24, y+18*H/24)
  cpx = x+17*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+9*H/24)
  cpx = x+12*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+1*H/24)
  cpx = x+10*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+9*H/24)
  cpx = x+7*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+18*H/24)
  cpx = x+9*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+18*H/24)
  cpx = x+9*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+16*H/24)
  cpx = x+9*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+22*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+9*H/24)
  cpx = x+12*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+9*H/24)
  ctx.stroke()

  //3
  ctx.fillStyle = color
  ctx.beginPath()
  ctx.arc(x+11.25*W/24, y+7*H/24,W/90,0,Math.PI*2)
  ctx.fill()

  //4
  ctx.beginPath()
  ctx.arc(x+12.75*W/24, y+7*H/24,W/90,0,Math.PI*2)
  ctx.fill()

  //5
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+22*H/24)
  ctx.lineTo(x+11*W/24, y+23*H/24)
  ctx.lineTo(x+9*W/24, y+23*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+22*H/24)
  ctx.lineTo(x+13*W/24, y+23*H/24)
  ctx.lineTo(x+15*W/24, y+23*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+18*H/24)
  ctx.lineTo(x+8*W/24, y+19*H/24)
  //ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+18*H/24)
  ctx.lineTo(x+16*W/24, y+19*H/24)
  //ctx.stroke()
}

function cruxAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+10*H/24)
  ctx.lineTo(x+11*W/24, y+23*H/24)
  ctx.lineTo(x+13*W/24, y+23*H/24)
  ctx.lineTo(x+13*W/24, y+10*H/24)
  ctx.lineTo(x+20*W/24, y+10*H/24)
  ctx.lineTo(x+20*W/24, y+8*H/24)
  ctx.lineTo(x+13*W/24, y+8*H/24)
  ctx.lineTo(x+13*W/24, y+1*H/24)
  ctx.lineTo(x+11*W/24, y+1*H/24)
  ctx.lineTo(x+11*W/24, y+8*H/24)
  ctx.lineTo(x+4*W/24, y+8*H/24)
  ctx.lineTo(x+4*W/24, y+10*H/24)
  ctx.lineTo(x+11*W/24, y+10*H/24)
  ctx.stroke()
}

function femAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+21*H/24)
  ctx.lineTo(x+15*W/24, y+21*H/24)
  ctx.lineTo(x+15*W/24, y+17*H/24)
  cpx = x+18*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+14*H/24)
  cpx = x+18*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+11*H/24)
  cpx = x+15*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+8*H/24)
  cpx = x+13*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+7*H/24)
  cpx = x+9*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+12*H/24)
  cpx = x+8*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+21*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+7*H/24)
  cpx = x+14*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+6*H/24)
  cpx = x+14*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+3*H/24)
  cpx = x+11*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+5*H/24)
  cpx = x+11*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+7*H/24)
  //ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+21*H/24)
  ctx.lineTo(x+10*W/24, y+23*H/24)
  ctx.lineTo(x+11*W/24, y+23*H/24)
  ctx.lineTo(x+12*W/24, y+23*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+21*H/24)
  ctx.lineTo(x+13*W/24, y+23*H/24)
  ctx.lineTo(x+15*W/24, y+23*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+9*H/24)
  ctx.lineTo(x+11*W/24, y+13*H/24)
  ctx.lineTo(x+15*W/24, y+14*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+7*H/24)
  cpx = x+14*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+6*H/24)
  cpx = x+14*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+3*H/24)
  cpx = x+11*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+4*H/24)
  cpx = x+11*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+7*H/24)
  ctx.stroke()
}
function usflag2At (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
   //1
  ctx.beginPath()
  ctx.moveTo(x+19*W/24, y+11*H/24)
  ctx.lineTo(x+19*W/24, y+23*H/24)
  ctx.lineTo(x+5*W/24, y+23*H/24)
  ctx.lineTo(x+5*W/24, y+1*H/24)
  ctx.lineTo(x+19*W/24, y+1*H/24)
  ctx.lineTo(x+19*W/24, y+11*H/24)
  ctx.lineTo(x+11*W/24, y+11*H/24)
  ctx.lineTo(x+11*W/24, y+1*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+1*H/24)
  ctx.lineTo(x+7*W/24, y+23*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+1*H/24)
  ctx.lineTo(x+9*W/24, y+23*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+1*H/24)
  ctx.lineTo(x+11*W/24, y+23*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+11*H/24)
  ctx.lineTo(x+13*W/24, y+23*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+11*H/24)
  ctx.lineTo(x+15*W/24, y+23*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+11*H/24)
  ctx.lineTo(x+17*W/24, y+23*H/24)
  ctx.stroke()
}

function transAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.arc(x+12*W/24, y+3.5*H/24, 2.5*W/24, 0, Math.PI*2)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+6*H/24)
  ctx.lineTo(x+14*W/24, y+6*H/24)
  cpx = x+16*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+8*H/24)
  ctx.lineTo(x+19*W/24, y+13*H/24)
  cpx = x+19*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+14*H/24)
  cpx = x+15*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+9*H/24)
  cpx = x+18*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+16*H/24)
  cpx = x+14*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+16*H/24)
  cpx = x+14*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+22*H/24)
  cpx = x+13*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+22*H/24)
  cpx = x+12*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+16*H/24)
  cpx = x+12*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+22*H/24)
  cpx = x+11*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+22*H/24)
  cpx = x+10*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+10*H/24)
  cpx = x+10*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+14*H/24)
  cpx = x+9*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+14*H/24)
  cpx = x+8*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+7*H/24)
  cpx = x+8*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+6*H/24)
  ctx.stroke()
}

function prideflagAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  //5
  ctx.fillStyle = "purple"
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+1*H/24)
  ctx.lineTo(x+7*W/24, y+1*H/24)
  ctx.lineTo(x+7*W/24, y+23*H/24)
  ctx.lineTo(x+5*W/24, y+23*H/24)
  ctx.fill()

  //3
  ctx.fillStyle = "blue"
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+1*H/24)
  ctx.lineTo(x+9*W/24, y+1*H/24)
  ctx.lineTo(x+9*W/24, y+23*H/24)
  ctx.lineTo(x+7*W/24, y+23*H/24)
  ctx.fill()

  //4
  ctx.fillStyle = "green"
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+1*H/24)
  ctx.lineTo(x+11*W/24, y+1*H/24)
  ctx.lineTo(x+11*W/24, y+23*H/24)
  ctx.lineTo(x+9*W/24, y+23*H/24)
  ctx.fill()

  //5
  ctx.fillStyle = "yellow"
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+1*H/24)
  ctx.lineTo(x+13*W/24, y+1*H/24)
  ctx.lineTo(x+13*W/24, y+23*H/24)
  ctx.lineTo(x+11*W/24, y+23*H/24)
  ctx.fill()

  //6
  ctx.fillStyle = "orange"
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+1*H/24)
  ctx.lineTo(x+15*W/24, y+1*H/24)
  ctx.lineTo(x+15*W/24, y+23*H/24)
  ctx.lineTo(x+13*W/24, y+23*H/24)
  ctx.fill()

  //7
  ctx.fillStyle = "red"
  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+1*H/24)
  ctx.lineTo(x+17*W/24, y+1*H/24)
  ctx.lineTo(x+17*W/24, y+23*H/24)
  ctx.lineTo(x+15*W/24, y+23*H/24)
  ctx.fill()

  //8
  ctx.fillStyle = "pink"
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+1*H/24)
  ctx.lineTo(x+19*W/24, y+1*H/24)
  ctx.lineTo(x+19*W/24, y+23*H/24)
  ctx.lineTo(x+17*W/24, y+23*H/24)
  ctx.fill()
}

function liberal_eliteAt (x,y,W,color) {
let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+7*H/24)
  ctx.lineTo(x+12*W/24, y+8*H/24)
  ctx.lineTo(x+8*W/24, y+8*H/24)
  ctx.lineTo(x+4*W/24, y+8*H/24)
  ctx.lineTo(x+4*W/24, y+10*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+8*H/24)
  ctx.lineTo(x+20*W/24, y+8*H/24)
  ctx.lineTo(x+20*W/24, y+10*H/24)
  ctx.stroke()
//8
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+8*H/24)
  ctx.lineTo(x+12*W/24, y+10*H/24)
  ctx.stroke()

  //11
  ctx.beginPath()
  ctx.moveTo(x+14.5*W/24, y+13*H/24)
  ctx.lineTo(x+16*W/24, y+13*H/24)
  ctx.lineTo(x+16*W/24, y+16*H/24)
  ctx.stroke()

  //12
  ctx.beginPath()
  ctx.moveTo(x+9.5*W/24, y+13*H/24)
  ctx.lineTo(x+8*W/24, y+13*H/24)
  ctx.lineTo(x+8*W/24, y+16*H/24)
  ctx.stroke()
  //3
  let v = document.getElementById("featuresize").value
  document.getElementById("featuresize").value /= 2
  x -= W/24
  bannedAt(x+10*W/24, y+1*H/24, W/4,color)
  prayerAt(x+10.5*W/24, y+1.2*H/24, W/4.5,color)
  prideflagAt(x+2*W/24, y+10*H/24, W/4,color)
  esspressoAt(x+4.5*W/24, y+16*H/24, W/4,color)
  peace_symbolAt(x+10*W/24, y+16*H/24, W/4,color)
  transAt(x+15*W/24, y+16*H/24, W/4,color)
  greenwashingAt(x+18*W/24, y+10*H/24, W/4,color)
  pbsAt(x+10*W/24, y+10*H/24, W/4,color)
  document.getElementById("featuresize").value = v
}

function bannedAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  ctx.lineWidth *= 2
  //1
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+20*H/24)
  ctx.lineTo(x+20*W/24, y+4*H/24)
  ctx.stroke()
  //2
  ctx.beginPath()
  ctx.arc(x+12*W/24, y+12*H/24, 11.4*W/24,0,Math.PI*2)
  ctx.stroke()
}

function esspressoAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+22*H/24)
  ctx.lineTo(x+18*W/24, y+22*H/24)
  ctx.lineTo(x+16*W/24, y+12*H/24)
  ctx.lineTo(x+13*W/24, y+12*H/24)
  ctx.lineTo(x+14*W/24, y+22*H/24)
  ctx.lineTo(x+10*W/24, y+22*H/24)
  ctx.lineTo(x+11*W/24, y+12*H/24)
  ctx.lineTo(x+8*W/24, y+12*H/24)
  ctx.lineTo(x+6*W/24, y+22*H/24)
  ctx.stroke()
  //2
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+12*H/24)
  ctx.lineTo(x+8*W/24, y+12*H/24)
  ctx.lineTo(x+7*W/24, y+5*H/24)
  ctx.lineTo(x+10*W/24, y+5*H/24)
  ctx.lineTo(x+11*W/24, y+12*H/24)
  ctx.lineTo(x+13*W/24, y+12*H/24)
  ctx.lineTo(x+14*W/24, y+5*H/24)
  ctx.lineTo(x+17*W/24, y+5*H/24)
  ctx.lineTo(x+16*W/24, y+12*H/24)
  ctx.stroke()
  //3
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+5*H/24)
  ctx.lineTo(x+8*W/24, y+4*H/24)
  ctx.lineTo(x+12*W/24, y+4*H/24)
  ctx.lineTo(x+11*W/24, y+2*H/24)
  ctx.lineTo(x+13*W/24, y+2*H/24)
  ctx.lineTo(x+12*W/24, y+4*H/24)
  ctx.lineTo(x+16*W/24, y+4*H/24)
  ctx.lineTo(x+17*W/24, y+5*H/24)
  ctx.stroke()
  //4
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+5*H/24)
  ctx.lineTo(x+14*W/24, y+5*H/24)
  ctx.stroke()
  //5
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+5*H/24)
  ctx.lineTo(x+21*W/24, y+5*H/24)
  ctx.lineTo(x+22*W/24, y+6*H/24)
  ctx.lineTo(x+22*W/24, y+10*H/24)
  ctx.lineTo(x+21*W/24, y+11*H/24)
  ctx.lineTo(x+21*W/24, y+7*H/24)
  ctx.lineTo(x+20*W/24, y+6*H/24)
  ctx.lineTo(x+18*W/24, y+6*H/24)
  ctx.lineTo(x+17*W/24, y+7*H/24)
  ctx.stroke()
  //6
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+5*H/24)
  ctx.lineTo(x+5*W/24, y+5*H/24)
  ctx.lineTo(x+7*W/24, y+8*H/24)
  ctx.stroke()
}

function croxAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  //1
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+8*H/24)
  cpx = x+11*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+7*H/24)
  cpx = x+18*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+14*H/24)
  cpx = x+23*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+16*H/24)
  cpx = x+23*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+20*H/24)
  cpx = x+9*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+16*H/24)
  cpx = x+7*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+14*H/24)
  cpx = x+2*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+8*H/24)
  cpx = x+1*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+5*H/24)
  cpx = x+3*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+4*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+4*H/24)
  cpx = x+10*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+8*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+3*H/24)
  cpx = x+9*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+2*H/24)
  cpx = x+4*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+4*H/24)
  cpx = x+3*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+9*H/24)
  cpx = x+4*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+11*H/24)
  cpx = x+7*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+9*H/24)
  cpx = x+7*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+7*H/24)
  cpx = x+5*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+5*H/24)
  cpx = x+7*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+3*H/24)
  cpx = x+11*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+7*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+8*H/24)
  cpx = x+8*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+5*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+5*H/24)
  cpx = x+2*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+8*H/24)
  ctx.stroke()
  let r1 = W/24, r2 = W/32
  //6
  ctx.beginPath()
  ctx.ellipse(x+11*W/24, y+15*H/24, r1,r2, Math.PI/4, 0, Math.PI*2)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.ellipse(x+14*W/24, y+16.5*H/24, r1,r2, Math.PI/4, 0, Math.PI*2)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.ellipse(x+17.2*W/24, y+17.3*H/24, r1,r2, Math.PI/4, 0, Math.PI*2)
  ctx.stroke()

 //10 strap 
  ctx.beginPath()
  ctx.arc(x+5.5*W/24, y+9*H/24,r1,0,Math.PI*2)
  ctx.stroke()

r1*=0.8
r2*=0.8
  //9
  ctx.beginPath()
  ctx.ellipse(x+21*W/24, y+16.5*H/24, r1,r2, Math.PI/4, 0, Math.PI*2)
  ctx.stroke()

 
  //11
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+5*H/24)
  cpx = x+3*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+8*H/24)
 // ctx.stroke()

  //12
  ctx.beginPath()
  ctx.ellipse(x+13*W/24, y+13*H/24, r1,r2, Math.PI/4, 0, Math.PI*2)
  ctx.stroke()
  
  //13
  ctx.beginPath()
  ctx.ellipse(x+15*W/24, y+14*H/24, r1,r2, Math.PI/4, 0, Math.PI*2)
  ctx.stroke()

  //14
  ctx.beginPath()
  ctx.ellipse(x+17*W/24, y+15*H/24, r1,r2, Math.PI/4, 0, Math.PI*2)
  ctx.stroke()

r1*=0.8
r2*=0.8
 //15
  ctx.beginPath()
  ctx.ellipse(x+19*W/24, y+15*H/24, r1,r2, Math.PI/4, 0, Math.PI*2)
  ctx.stroke()
  //16
  ctx.beginPath()
  ctx.ellipse(x+16*W/24, y+12*H/24, r1,r2, Math.PI/4, 0, Math.PI*2)
  ctx.stroke()

  //17
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+14*H/24)
  ctx.stroke()

  //18
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+14*H/24)
  ctx.stroke()
}

function pbsAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+15*H/24)
  ctx.lineTo(x+12*W/24, y+18*H/24)
  ctx.lineTo(x+8*W/24, y+18*H/24)
  ctx.lineTo(x+8*W/24, y+15*H/24)
  cpx = x+5*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+11*H/24)
  cpx = x+5*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+6*H/24)
  ctx.lineTo(x+12*W/24, y+6*H/24)
  ctx.lineTo(x+15*W/24, y+12*H/24)
  ctx.lineTo(x+14*W/24, y+12*H/24)
  ctx.lineTo(x+14*W/24, y+14*H/24)
  cpx = x+14*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+15*H/24)
  cpx = x+12*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+15*H/24)
  cpx = x+12*W/24
  cpy = y+12*H/24
  ctx.stroke()
  //2
  ctx.beginPath()
  ctx.arc(x+12*W/24, y+12*H/24,9*W/24,0,Math.PI*2)
  ctx.stroke()
  //3
  ctx.beginPath()
  ctx.arc(x+12*W/24, y+10*H/24,W/24,0,Math.PI*2)
  ctx.stroke()
  //4
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+18*H/24)
  ctx.lineTo(x+14*W/24, y+15*H/24)
  cpx = x+15*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+15*H/24)
  cpx = x+16*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+14*H/24)
  ctx.lineTo(x+16*W/24, y+12*H/24)
  ctx.lineTo(x+17*W/24, y+12*H/24)
  ctx.lineTo(x+14*W/24, y+6*H/24)
  ctx.lineTo(x+16*W/24, y+6*H/24)
  ctx.lineTo(x+19*W/24, y+12*H/24)
  ctx.lineTo(x+18*W/24, y+12*H/24)
  ctx.lineTo(x+18*W/24, y+14*H/24)
  cpx = x+18*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+15*H/24)
  cpx = x+16*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+15*H/24)
  cpx = x+16*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+18*H/24)
  cpx = x+14*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+18*H/24)
  ctx.stroke()
}

function patriarchyAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+7*H/24)
  ctx.lineTo(x+12*W/24, y+8*H/24)
  ctx.lineTo(x+8*W/24, y+8*H/24)
  ctx.lineTo(x+4*W/24, y+8*H/24)
  ctx.lineTo(x+4*W/24, y+10*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+8*H/24)
  ctx.lineTo(x+20*W/24, y+8*H/24)
  ctx.lineTo(x+20*W/24, y+10*H/24)
  ctx.stroke()
//8
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+8*H/24)
  ctx.lineTo(x+12*W/24, y+10*H/24)
  ctx.stroke()

  //11
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+13*H/24)
  ctx.lineTo(x+16*W/24, y+13*H/24)
  ctx.lineTo(x+16*W/24, y+16*H/24)
  ctx.stroke()

  //12
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+13*H/24)
  ctx.lineTo(x+8*W/24, y+13*H/24)
  ctx.lineTo(x+8*W/24, y+16*H/24)
  ctx.stroke()
  //3
  let v = document.getElementById("featuresize").value
  document.getElementById("featuresize").value /= 2
  x -= W/24
  cruxAt(x+10*W/24, y+1*H/24, W/4,color)
  usflag2At(x+2*W/24, y+10*H/24, W/4,color)
  marryAt(x+5*W/24, y+16*H/24, W/4,color)
  coat_hangerAt(x+10*W/24, y+16*H/24, W/4,color)
  femAt(x+15*W/24, y+16*H/24, W/4,color)
  i_votedAt(x+18*W/24, y+10*H/24, W/4,color)
  kkkAt(x+10*W/24, y+10*H/24, W/4,color)
  document.getElementById("featuresize").value = v
}

function i_votedAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+12*H/24)
  cpx = x+1*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+6*H/24)
  cpx = x+23*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+12*H/24)
  cpx = x+23*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+18*H/24)
  cpx = x+1*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+12*H/24)
  ctx.stroke()

  //2
  ctx.fillStyle = color
  ctx.font = "italic bold "+5*W/24+"pt Garamond"
  ctx.fillText("I",x+11*W/24, y+11*H/24)
  ctx.fillText("Voted",x+4*W/24, y+16*H/24)

}

function marryAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  y-= 1*W/24
  //1
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+9*H/24)
  cpx = x+5*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+16*H/24)
  cpx = x+5*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+23*H/24)
  cpx = x+19*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+16*H/24)
  cpx = x+19*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+9*H/24)
  ctx.stroke()
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+10*H/24)
  cpx = x+18*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+16*H/24)
  cpx = x+18*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+22*H/24)
  cpx = x+6*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+16*H/24)
  cpx = x+6*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+10*H/24)
  ctx.stroke()


  //2
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+6*H/24)
  ctx.lineTo(x+15*W/24, y+6*H/24)
  ctx.lineTo(x+12*W/24, y+9*H/24)
  ctx.lineTo(x+9*W/24, y+6*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+6*H/24)
  ctx.lineTo(x+10*W/24, y+4*H/24)
  ctx.lineTo(x+14*W/24, y+4*H/24)
  ctx.lineTo(x+15*W/24, y+6*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+4*H/24)
  ctx.lineTo(x+11*W/24, y+6*H/24)
  ctx.lineTo(x+10*W/24, y+4*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+4*H/24)
  ctx.lineTo(x+13*W/24, y+6*H/24)
  ctx.lineTo(x+14*W/24, y+4*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+6*H/24)
  ctx.lineTo(x+12*W/24, y+9*H/24)
  ctx.lineTo(x+13*W/24, y+6*H/24)
  ctx.stroke()
}

function traumaAt(x,y,W,color,INVERT) {
  if (INVERT)
    damagedAt(x,y,W,color)
  else
    five_headAt(x,y,W,color)
}

function wineStainAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, d = 0, angle = pet(180)

  //1
  ctx.beginPath()
  p = rotatePoint(x+9*W/24+pet(d), y+5*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+9*W/24+pet(d)
  cpy = y+2*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24+pet(d), y+1*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+16*W/24+pet(d)
  cpy = y+1*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+18*W/24+pet(d), y+7*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+20*W/24+pet(d)
  cpy = y+7*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+20*W/24+pet(d), y+15*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+20*W/24+pet(d)
  cpy = y+17*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+17*W/24+pet(d), y+17*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+17*W/24+pet(d)
  cpy = y+19*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+15*W/24+pet(d), y+19*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+13*W/24+pet(d)
  cpy = y+19*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+13*W/24+pet(d), y+17*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+8*W/24+pet(d)
  cpy = y+18*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+6*W/24+pet(d), y+17*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+3*W/24+pet(d)
  cpy = y+14*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+6*W/24+pet(d), y+10*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+3*W/24+pet(d)
  cpy = y+4*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+9*W/24+pet(d), y+5*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()

  //2
  ctx.beginPath()
  p = rotatePoint(x+10*W/24+pet(d), y+22*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+11*W/24+pet(d)
  cpy = y+22*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+11*W/24+pet(d), y+20*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+11*W/24+pet(d)
  cpy = y+19*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+10*W/24+pet(d), y+19*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+9*W/24+pet(d)
  cpy = y+19*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+9*W/24+pet(d), y+21*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+9*W/24+pet(d)
  cpy = y+22*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+10*W/24+pet(d), y+22*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()
}
function razorAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+4*H/24)
  ctx.lineTo(x+11*W/24, y+4*H/24)
  ctx.lineTo(x+11*W/24, y+21*H/24)
  ctx.lineTo(x+13*W/24, y+21*H/24)
  ctx.lineTo(x+13*W/24, y+4*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+5*H/24)
  ctx.lineTo(x+14*W/24, y+5*H/24)
  ctx.lineTo(x+14*W/24, y+20*H/24)
  ctx.lineTo(x+10*W/24, y+20*H/24)
  ctx.lineTo(x+10*W/24, y+5*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+20*H/24)
  ctx.lineTo(x+12*W/24, y+5*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+22*H/24)
  ctx.lineTo(x+14*W/24, y+21*H/24)
  ctx.lineTo(x+10*W/24, y+21*H/24)
  ctx.lineTo(x+10*W/24, y+22*H/24)
  cpx = x+10*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+23*H/24)
  cpx = x+13*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+23*H/24)
  cpx = x+14*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+22*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+3.1*H/24)
  ctx.lineTo(x+6*W/24, y+4*H/24)
  ctx.lineTo(x+18*W/24, y+4*H/24)
  ctx.lineTo(x+18*W/24, y+3.1*H/24)
  ctx.stroke()
  //6
  
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+3*H/24)
  ctx.lineTo(x+6*W/24, y+3.5*H/24)
  ctx.lineTo(x+18*W/24, y+3.5*H/24)
  ctx.lineTo(x+18*W/24, y+3*H/24)
  ctx.globalAlpha /= 4
  ctx.fill()
  //2
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+4*H/24)
  ctx.lineTo(x+11*W/24, y+5*H/24)
  ctx.lineTo(x+13*W/24, y+5*H/24)
  ctx.lineTo(x+13*W/24, y+4*H/24)
  ctx.lineTo(x+11*W/24, y+4*H/24)
  ctx.fill()

  //3
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+20*H/24)
  ctx.lineTo(x+11*W/24, y+21*H/24)
  ctx.lineTo(x+13*W/24, y+21*H/24)
  ctx.lineTo(x+13*W/24, y+20*H/24)
  ctx.lineTo(x+11*W/24, y+20*H/24)
  ctx.fill()
  ctx.globalAlpha *= 4


  ctx.lineWidth /= 2
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+2.5*H/24)
  ctx.lineTo(x+5.5*W/24, y+3*H/24)
  ctx.lineTo(x+18.5*W/24, y+3*H/24)
  ctx.lineTo(x+18*W/24, y+2.5*H/24)
  ctx.lineTo(x+6*W/24, y+2.5*H/24)
  ctx.stroke()
  
  ctx.lineWidth *= 2

  //7
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+2.5*H/24)
  cpx = x+6*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+1*H/24)
  cpx = x+17*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+1*H/24)
  cpx = x+18*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+2.5*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+21*H/24)
  ctx.lineTo(x+11*W/24, y+23*H/24)
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+21*H/24)
  ctx.lineTo(x+12*W/24, y+23*H/24)
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+21*H/24)
  ctx.lineTo(x+13*W/24, y+23*H/24)
  ctx.stroke()
}

function damagedAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.globalAlpha /=2
  damageAt(x+12*W/24, y+16*H/24, 8*W/24,"#DC143C")
  damageAt(x+12*W/24, y+16*H/24, 8*W/24,"#DC143C")
  damageAt(x+12*W/24, y+16*H/24, 8*W/24,"#DC143C")
  ctx.globalAlpha *=2
  ctx.strokeStyle = color

  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+23*H/24)
  cpx = x+17*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+16*H/24)
  cpx = x+17*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+13*H/24)
  cpx = x+23*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+13*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+23*H/24)
  cpx = x+5*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+16*H/24)
  cpx = x+5*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+13*H/24)
  cpx = x+1*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+13*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+23*W/24, y+9*H/24)
  cpx = x+20*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+9*H/24)
  cpx = x+18*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17.2*W/24, y+10*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+9*H/24)
  cpx = x+6*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+9*H/24)
  cpx = x+9*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+5*H/24)
  cpx = x+11*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+2*H/24)
  cpx = x+19.5*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+6*H/24)
  cpx = x+18.2*W/24
  cpy = y+11.2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+11*H/24)
  cpx = x+11*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+9*H/24)
  ctx.stroke()
  ctx.strokeStyle = color
  // arrow
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+18*H/24)
  ctx.lineTo(x+23*W/24, y+18*H/24)
  ctx.lineTo(x+23*W/24, y+17*H/24)
  ctx.lineTo(x+20*W/24, y+17*H/24)
  ctx.lineTo(x+20*W/24, y+16*H/24)
  ctx.lineTo(x+18*W/24, y+17.5*H/24)
  ctx.lineTo(x+20*W/24, y+19*H/24)
  ctx.lineTo(x+20*W/24, y+18*H/24)
  ctx.stroke()
}

function damageAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/4, cy = y+H/4, d = 0, angle = pet(360)

  //1
  ctx.beginPath()
  p = rotatePoint(x+2*W/24+pet(d), y+4*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+2*W/24+pet(d)
  cpy = y+2*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+3*W/24+pet(d), y+2*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+4*W/24+pet(d)
  cpy = y+2*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+4*W/24+pet(d), y+3*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+4*W/24+pet(d)
  cpy = y+5*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+3*W/24+pet(d), y+5*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+2*W/24+pet(d)
  cpy = y+5*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+2*W/24+pet(d), y+4*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()

  //2
  ctx.beginPath()
  p = rotatePoint(x+6*W/24+pet(d), y+6*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+7*W/24+pet(d)
  cpy = y+6*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+7*W/24+pet(d), y+5*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+7*W/24+pet(d)
  cpy = y+4*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+6*W/24+pet(d), y+4*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+5*W/24+pet(d)
  cpy = y+4*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+5*W/24+pet(d), y+5*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+5*W/24+pet(d)
  cpy = y+6*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+6*W/24+pet(d), y+6*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()

  //3
  ctx.beginPath()
  p = rotatePoint(x+3*W/24+pet(d), y+7*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+3*W/24+pet(d)
  cpy = y+6*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+5*W/24+pet(d), y+6*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+6*W/24+pet(d)
  cpy = y+6*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+6*W/24+pet(d), y+7*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+6*W/24+pet(d)
  cpy = y+8*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+4*W/24+pet(d), y+8*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+3*W/24+pet(d)
  cpy = y+8*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+3*W/24+pet(d), y+7*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()

  //4
  ctx.beginPath()
  p = rotatePoint(x+5*W/24+pet(d), y+9*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+6*W/24+pet(d)
  cpy = y+8*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+7*W/24+pet(d), y+8*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+8*W/24+pet(d)
  cpy = y+8*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+8*W/24+pet(d), y+9*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+7*W/24+pet(d)
  cpy = y+10*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+6*W/24+pet(d), y+10*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+5*W/24+pet(d)
  cpy = y+10*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+5*W/24+pet(d), y+9*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()

  //5
  ctx.beginPath()
  p = rotatePoint(x+3*W/24+pet(d), y+11*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+4*W/24+pet(d)
  cpy = y+11*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+4*W/24+pet(d), y+10*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+4*W/24+pet(d)
  cpy = y+9*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+3*W/24+pet(d), y+9*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+2*W/24+pet(d)
  cpy = y+9*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+2*W/24+pet(d), y+10*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+2*W/24+pet(d)
  cpy = y+11*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+3*W/24+pet(d), y+11*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()

  //6
  ctx.beginPath()
  p = rotatePoint(x+5*W/24+pet(d), y+2*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+5*W/24+pet(d)
  cpy = y+3*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+7*W/24+pet(d), y+3*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+8*W/24+pet(d)
  cpy = y+3*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+8*W/24+pet(d), y+2*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+8*W/24+pet(d)
  cpy = y+1*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+6*W/24+pet(d), y+1*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+5*W/24+pet(d)
  cpy = y+1*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+5*W/24+pet(d), y+2*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()

  //7
  ctx.beginPath()
  p = rotatePoint(x+8*W/24+pet(d), y+4*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+8*W/24+pet(d)
  cpy = y+3*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+9*W/24+pet(d), y+3*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+10*W/24+pet(d)
  cpy = y+3*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+10*W/24+pet(d), y+5*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+10*W/24+pet(d)
  cpy = y+6*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+9*W/24+pet(d), y+6*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+8*W/24+pet(d)
  cpy = y+6*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+8*W/24+pet(d), y+5*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()

  //8
  ctx.beginPath()
  p = rotatePoint(x+9*W/24+pet(d), y+8*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+9*W/24+pet(d)
  cpy = y+7*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+10*W/24+pet(d), y+7*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+11*W/24+pet(d)
  cpy = y+7*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24+pet(d), y+8*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+12*W/24+pet(d)
  cpy = y+9*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+11*W/24+pet(d), y+9*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+10*W/24+pet(d)
  cpy = y+9*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+9*W/24+pet(d), y+8*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()

  //9
  ctx.beginPath()
  p = rotatePoint(x+8*W/24+pet(d), y+10*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+8*W/24+pet(d)
  cpy = y+9*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+9*W/24+pet(d), y+9*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+10*W/24+pet(d)
  cpy = y+9*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+10*W/24+pet(d), y+11*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+10*W/24+pet(d)
  cpy = y+12*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+9*W/24+pet(d), y+12*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+8*W/24+pet(d)
  cpy = y+12*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+8*W/24+pet(d), y+10*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()

  //10
  ctx.beginPath()
  p = rotatePoint(x+5*W/24+pet(d), y+11*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+5*W/24+pet(d)
  cpy = y+10*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+6*W/24+pet(d), y+10*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+7*W/24+pet(d)
  cpy = y+10*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+7*W/24+pet(d), y+11*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+7*W/24+pet(d)
  cpy = y+12*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+6*W/24+pet(d), y+12*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+5*W/24+pet(d)
  cpy = y+12*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+5*W/24+pet(d), y+11*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()

  //11
  ctx.beginPath()
  p = rotatePoint(x+11*W/24+pet(d), y+6*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+11*W/24+pet(d)
  cpy = y+5*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24+pet(d), y+5*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+13*W/24+pet(d)
  cpy = y+5*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+13*W/24+pet(d), y+6*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+13*W/24+pet(d)
  cpy = y+7*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24+pet(d), y+7*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+11*W/24+pet(d)
  cpy = y+7*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+11*W/24+pet(d), y+6*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()

  //12
  ctx.beginPath()
  p = rotatePoint(x+10*W/24+pet(d), y+3*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+10*W/24+pet(d)
  cpy = y+2*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+11*W/24+pet(d), y+2*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+12*W/24+pet(d)
  cpy = y+2*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+13*W/24+pet(d), y+3*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+13*W/24+pet(d)
  cpy = y+4*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+11*W/24+pet(d), y+4*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+10*W/24+pet(d)
  cpy = y+4*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+10*W/24+pet(d), y+3*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()

  //13
  ctx.beginPath()
  p = rotatePoint(x+11*W/24+pet(d), y+10*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+10*W/24+pet(d)
  cpy = y+10*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+10*W/24+pet(d), y+11*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+10*W/24+pet(d)
  cpy = y+12*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24+pet(d), y+12*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+13*W/24+pet(d)
  cpy = y+12*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+13*W/24+pet(d), y+11*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+13*W/24+pet(d)
  cpy = y+10*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+11*W/24+pet(d), y+10*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()

  //14
  ctx.beginPath()
  p = rotatePoint(x+13*W/24+pet(d), y+9*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+13*W/24+pet(d)
  cpy = y+8*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+14*W/24+pet(d), y+8*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+15*W/24+pet(d)
  cpy = y+8*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+15*W/24+pet(d), y+9*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+15*W/24+pet(d)
  cpy = y+10*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+14*W/24+pet(d), y+10*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+13*W/24+pet(d)
  cpy = y+10*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+13*W/24+pet(d), y+9*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()
}

function five_headAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  wineStainAt(x+6*W/24, y+6.5*H/24, 6*W/24, "#7e0d55")
  ctx.strokeStyle = color
  //ctx.fillStyle = color

  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+2*H/24)
  ctx.lineTo(x+2*W/24, y+1*H/24)
  ctx.lineTo(x+6*W/24, y+5*H/24)
  ctx.lineTo(x+7*W/24, y+4*H/24)
  ctx.lineTo(x+7*W/24, y+7*H/24)
  ctx.lineTo(x+4*W/24, y+7*H/24)
  ctx.lineTo(x+5*W/24, y+6*H/24)
  ctx.lineTo(x+1*W/24, y+2*H/24)
  ctx.stroke()

x += 1*W/24
  //1
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+22*H/24)
  cpx = x+4*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+19*H/24)
  cpx = x+2*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+16*H/24)
  cpx = x+4*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+12*H/24)
  cpx = x+4*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+6*H/24)
  cpx = x+20*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+12*H/24)
  cpx = x+20*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+16*H/24)
  cpx = x+22*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+19*H/24)
  cpx = x+20*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+22*H/24)
 // ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+16*H/24)
  cpx = x+10*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+17*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+17*H/24)
  cpx = x+14*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+16*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+18*H/24)
  cpx = x+10*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+18*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+18*H/24)
  cpx = x+17*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+18*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+18*H/24)
  cpx = x+13*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+21*H/24)
  cpx = x+14*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+22*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+18*H/24)
  cpx = x+11*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+21*H/24)
  cpx = x+10*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+22*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+14*H/24)
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+22*H/24)
  cpx = x+22*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+18*H/24)
  cpx = x+22*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+17*H/24)
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+22*H/24)
  cpx = x+2*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+18*H/24)
  cpx = x+2*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+17*H/24)
  ctx.stroke()

  //11
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+22*H/24)
  cpx = x+4*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+12*H/24)
  cpx = x+4*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+6*H/24)
  cpx = x+20*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+12*H/24)
  cpx = x+20*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+22*H/24)
  ctx.stroke()
}

function banned_bookAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  let saved = ctx.fillStyle
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  ctx.beginPath()
  ctx.moveTo(x+22*W/24, y+1*H/24)
  ctx.lineTo(x+6*W/24, y+1*H/24)
  ctx.lineTo(x+2*W/24, y+20*H/24)
  ctx.lineTo(x+18*W/24, y+20*H/24)
  ctx.lineTo(x+22*W/24, y+1*H/24)
  ctx.lineTo(x+22*W/24, y+4*H/24)
  ctx.lineTo(x+18*W/24, y+23*H/24)
  ctx.lineTo(x+2*W/24, y+23*H/24)
  cpx = x+1.3*W/24
  cpy = y+21.5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+20*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+20*H/24)
  ctx.lineTo(x+18*W/24, y+23*H/24)
  ctx.stroke()
  let keys = Object.keys(title_author)
  let k = randomPick(keys)
  let spaces = k.match(/\s/g)
  let parts = []
  if (spaces && spaces.length >= 3) {
  let idx = k.indexOf(" ", Math.floor(k.length/2))
    parts.push(k.substring(0,idx))
    parts.push(k.substring(idx,k.length))
  } else
  parts.push(k)
  let availablewidth = 13*W/24, w = 0, scale = 1
  let p = 0, yinc = 0
  //console.log(parts)
  for (; p < parts.length; p++) {
    ctx.font = "italic bold "+W/24+"pt Garamond"
    w = ctx.measureText(parts[p]).width
    scale = availablewidth/w
    if (scale > 3.5)
      scale = 3.3
   // console.log(scale, W/24)
    ctx.font = "italic bold "+(scale*W/24)+"pt Garamond"
   // console.log(ctx.font, scale *1.5* W/24)
    ctx.fillText((parts[p]), x+7*W/24-(p*W/24), y+scale *1.5* W/24+W/24+yinc)
    yinc = scale *1.5* W/24
  }

  ctx.font = "italic "+W/24+"pt Garamond"
  w = ctx.measureText(title_author[k]).width
  scale = availablewidth/w
  ctx.font = "italic "+(scale*W/24)+"pt Garamond"
  ctx.fillText(title_author[k], x+3.8*W/24, y+18*H/24)

  flame2At(x+6*W/24, y+5*H/24, 11*W/24, "yellow")
  ctx.fill()
  let lw = ctx.lineWidth
  ctx.lineWidth /= 4
  ctx.strokeStyle = color
  let i = 0,inc = W/120
  for (; i < 15; i++) {
    ctx.beginPath()
    ctx.moveTo(x+2*W/24, y+20*H/24+i*inc)
    ctx.lineTo(x+18*W/24, y+20*H/24+i*inc)
    ctx.stroke()
  }
  ctx.lineWidth = lw
  ctx.fillStyle = saved
}

function flame2At (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.fillStyle = "red"
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+22*H/24)
  cpx = x+21*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+15*H/24)
  cpx = x+21*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+8*H/24)
  cpx = x+17*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+12*H/24)
  cpx = x+15*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+9*H/24)
  cpx = x+16*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+2*H/24)
  cpx = x+8*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+12*H/24)
  cpx = x+5*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+7*H/24)
  cpx = x+2*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+13*H/24)
  cpx = x+2*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+22*H/24)
  ctx.fill()

  //3
  ctx.fillStyle = "yellow"
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+20*H/24)
  cpx = x+20*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+14*H/24)
  cpx = x+20*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+9*H/24)
  cpx = x+17*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+14*H/24)
  cpx = x+14*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+9*H/24)
  cpx = x+14*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+3*H/24)
  cpx = x+8*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+15*H/24)
  cpx = x+5*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+9*H/24)
  cpx = x+4*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+20*H/24)
  ctx.fill()
}

function graveYardAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let i = 0, s = 1

  for (; i < 21; i++) {
    x2 = Math.random()*W -W/12
    y2 = Math.random()*W
    s = 0.5 + (y2/H)
    gs1At (x+x2,y+y2,W/8*s,color)
  }
}

function gs1At (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, d = 0, angle = pet(9)

  //1
  ctx.beginPath()
  p = rotatePoint(x+8*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+16*W/24+pet(d)
  cpy = y+12*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+16*W/24+pet(d), y+12*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+16*W/24+pet(d)
  cpy = y+4*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+16*W/24+pet(d), y+4*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+16*W/24+pet(d)
  cpy = y+0*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24+pet(d), y+0*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+8*W/24+pet(d)
  cpy = y+0*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+8*W/24+pet(d), y+4*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+8*W/24+pet(d)
  cpy = y+12*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+8*W/24+pet(d), y+12*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()


  angle = 170 + pet(9)
  ctx.globalAlpha /= 3
  ctx.beginPath()
  p = rotatePoint(x+8*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+16*W/24+pet(d)
  cpy = y+12*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+16*W/24+pet(d), y+12*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+16*W/24+pet(d)
  cpy = y+4*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+16*W/24+pet(d), y+4*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+16*W/24+pet(d)
  cpy = y+0*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24+pet(d), y+0*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+8*W/24+pet(d)
  cpy = y+0*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+8*W/24+pet(d), y+4*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+8*W/24+pet(d)
  cpy = y+12*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+8*W/24+pet(d), y+12*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()
  ctx.globalAlpha *= 3

}

function red_lineAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  savedcolor = color
  color = "#ff0000"
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, angle = pet(180)

  //1
  ctx.beginPath()
  p = rotatePoint(x+16*W/32, y+31.3*H/32 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+17*W/32, y+31*H/32 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+16*W/32, y+1*H/32 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+15*W/32, y+1.3*H/32 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+16*W/32, y+31*H/32 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.fill()
  ctx.fillStyle = savedcolor
}

function people_are_sayingAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+22*H/24)
  cpx = x+12*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+20*H/24)
  cpx = x+18*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+22*H/24)
  cpx = x+22*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+16*H/24)
  cpx = x+22*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+14*H/24)
  cpx = x+20*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+11*H/24)
  cpx = x+20*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+9*H/24)
  cpx = x+22*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+2*H/24)
  cpx = x+20*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+4*H/24)
  cpx = x+18*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+4*H/24)
  cpx = x+14*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+2*H/24)
  cpx = x+14*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+5*H/24)
  cpx = x+14*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+6*H/24)
  cpx = x+13*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+8*H/24)
  cpx = x+8*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+7*H/24)
  cpx = x+2*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+15*H/24)
  cpx = x+2*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+22*H/24)
  ctx.stroke()

  //1
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+6*H/24)
  ctx.lineTo(x+8*W/24, y+5*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+6*H/24)
  ctx.lineTo(x+13*W/24, y+5*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+10.5*W/24, y+6*H/24)
  ctx.lineTo(x+10.5*W/24, y+5*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+22*W/24, y+10*H/24)
  ctx.lineTo(x+23*W/24, y+9*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+22*W/24, y+13*H/24)
  ctx.lineTo(x+23*W/24, y+14*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+22*W/24, y+11.5*H/24)
  ctx.lineTo(x+23*W/24, y+11.5*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+22*H/24)
  ctx.lineTo(x+15*W/24, y+23*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+22*H/24)
  ctx.lineTo(x+18*W/24, y+23*H/24)
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+22*H/24)
  ctx.lineTo(x+12*W/24, y+23*H/24)
  ctx.stroke()
}

function flowAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //
  ctx.font = "italic "+W/72+"pt Arial"
  let things = words.match(/\b\w{3,}(ist(ic)?|able|ible|ous)\b/g)

  ctx.fillText(randomPick(things),x+1.9*W/24, y+6*H/24)
  ctx.fillText(randomPick(things),x+7.8*W/24, y+6*H/24)
  ctx.fillText(randomPick(things),x+13.8*W/24, y+6*H/24)
  ctx.fillText(randomPick(things),x+20.0*W/24, y+6*H/24)

  ctx.fillText(randomPick(things),x+3.8*W/24, y+13*H/24)
  ctx.fillText(randomPick(things),x+10.4*W/24, y+13*H/24)
  ctx.fillText(randomPick(things),x+17.8*W/24, y+13*H/24)

  ctx.fillText(randomPick(things),x+6.7*W/24, y+20*H/24)
  ctx.fillText(randomPick(things),x+12.7*W/24, y+20*H/24)
  ctx.fillText(randomPick(things),x+18.5*W/24, y+20*H/24)

  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+5*H/24)
  ctx.lineTo(x+7*W/24, y+8*H/24)
  ctx.lineTo(x+11*W/24, y+8*H/24)
  ctx.lineTo(x+11*W/24, y+5*H/24)
  ctx.lineTo(x+7*W/24, y+5*H/24)
  ctx.stroke()
  if (Math.random() > 0.75) {
    ctx.globalAlpha /= 3
    ctx.fill()
    ctx.globalAlpha *= 3
  }
  //2
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+5*H/24)
  ctx.lineTo(x+13*W/24, y+8*H/24)
  ctx.lineTo(x+17*W/24, y+8*H/24)
  ctx.lineTo(x+17*W/24, y+5*H/24)
  ctx.lineTo(x+13*W/24, y+5*H/24)
  ctx.stroke()
  if (Math.random() > 0.75) {
    ctx.globalAlpha /= 3
    ctx.fill()
    ctx.globalAlpha *= 3
  }
  //3
  ctx.beginPath()
  ctx.moveTo(x+19*W/24, y+6*H/24)
  ctx.lineTo(x+21*W/24, y+8*H/24)
  ctx.lineTo(x+23*W/24, y+6*H/24)
  ctx.lineTo(x+21*W/24, y+4*H/24)
  ctx.lineTo(x+19*W/24, y+6*H/24)
  ctx.stroke()
  if (Math.random() > 0.75) {
    ctx.globalAlpha /= 3
    ctx.fill()
    ctx.globalAlpha *= 3
  }
  //4
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+8*H/24)
  cpx = x+5*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+6*H/24)
  cpx = x+5*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+4*H/24)
  cpx = x+1*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+6*H/24)
  cpx = x+1*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+8*H/24)
  ctx.stroke()
  if (Math.random() > 0.75) {
    ctx.globalAlpha /= 3
    ctx.fill()
    ctx.globalAlpha *= 3
  }
  //5
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+22*H/24)
  cpx = x+22*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+20*H/24)
  cpx = x+22*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+18*H/24)
  cpx = x+18*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+20*H/24)
  cpx = x+18*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+22*H/24)
  ctx.stroke()
  if (Math.random() > 0.75) {
    ctx.globalAlpha /= 3
    ctx.fill()
    ctx.globalAlpha *= 3
  }
  //6
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+15*H/24)
  ctx.lineTo(x+7*W/24, y+13*H/24)
  ctx.lineTo(x+5*W/24, y+11*H/24)
  ctx.lineTo(x+3*W/24, y+13*H/24)
  ctx.lineTo(x+5*W/24, y+15*H/24)
  ctx.stroke()
  if (Math.random() > 0.75) {
    ctx.globalAlpha /= 3
    ctx.fill()
    ctx.globalAlpha *= 3
  }
  //7
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+12*H/24)
  ctx.lineTo(x+10*W/24, y+15*H/24)
  ctx.lineTo(x+14*W/24, y+15*H/24)
  ctx.lineTo(x+14*W/24, y+12*H/24)
  ctx.lineTo(x+10*W/24, y+12*H/24)
  ctx.stroke()
  if (Math.random() > 0.75) {
    ctx.globalAlpha /= 3
    ctx.fill()
    ctx.globalAlpha *= 3
  }
  //8
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+13*H/24)
  ctx.lineTo(x+19*W/24, y+11*H/24)
  ctx.lineTo(x+21*W/24, y+13*H/24)
  ctx.lineTo(x+19*W/24, y+15*H/24)
  ctx.lineTo(x+17*W/24, y+13*H/24)
  ctx.stroke()
  if (Math.random() > 0.75) {
    ctx.globalAlpha /= 3
    ctx.fill()
    ctx.globalAlpha *= 3
  }
  //9
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+22*H/24)
  ctx.lineTo(x+10*W/24, y+22*H/24)
  ctx.lineTo(x+10*W/24, y+19*H/24)
  ctx.lineTo(x+6*W/24, y+19*H/24)
  ctx.lineTo(x+6*W/24, y+22*H/24)
  ctx.stroke()
  if (Math.random() > 0.75) {
    ctx.globalAlpha /= 3
    ctx.fill()
    ctx.globalAlpha *= 3
  }
  //10
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+19*H/24)
  ctx.lineTo(x+12*W/24, y+22*H/24)
  ctx.lineTo(x+16*W/24, y+22*H/24)
  ctx.lineTo(x+16*W/24, y+19*H/24)
  ctx.lineTo(x+12*W/24, y+19*H/24)
  ctx.stroke()
  if (Math.random() > 0.75) {
    ctx.globalAlpha /= 3
    ctx.fill()
    ctx.globalAlpha *= 3
  }
  //11
  ctx.beginPath()
  ctx.moveTo(x+21*W/24, y+4*H/24)
  ctx.lineTo(x+21*W/24, y+2*H/24)
  cpx = x+21*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+1*H/24)
  cpx = x+10*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+1*H/24)
  cpx = x+9*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+2*H/24)
  cpx = x+9*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+4*H/24)
  ctx.stroke()

  //12
  ctx.beginPath()
  ctx.moveTo(x+19*W/24, y+15*H/24)
  cpx = x+19*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+16*H/24)
  cpx = x+19*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+17*H/24)
  cpx = x+9*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+17*H/24)
  cpx = x+8*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+18*H/24)
  ctx.stroke()
  
  //13
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+13*H/24)
  cpx = x+9*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+13*H/24)
  ctx.stroke()
  //14
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+13*H/24)
  ctx.lineTo(x+16*W/24, y+13*H/24)
  ctx.stroke()
  //15
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+20*H/24)
  ctx.lineTo(x+11*W/24, y+20*H/24)
  ctx.stroke()

  //16
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+20*H/24)
  ctx.lineTo(x+17*W/24, y+20*H/24)
  ctx.stroke()

  //17
  ctx.beginPath()
  ctx.moveTo(x+21*W/24, y+8*H/24)
  ctx.lineTo(x+21*W/24, y+9*H/24)
  cpx = x+21*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+10*H/24)
  cpx = x+6*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+10*H/24)
  cpx = x+5*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+11*H/24)
  ctx.stroke()

  //18
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+6*H/24)
  cpx = x+12*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+6*H/24)
  ctx.stroke()

  //19
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+6*H/24)
  ctx.lineTo(x+6*W/24, y+6*H/24)
  ctx.stroke()

  //20
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+6*H/24)
  ctx.lineTo(x+18*W/24, y+6*H/24)
  ctx.stroke()
  //21
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+6*H/24)
  ctx.lineTo(x+7*W/24, y+6*H/24)
  ctx.stroke()

  //22
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+18*H/24)
  ctx.lineTo(x+8*W/24, y+19*H/24)
  ctx.stroke()

  //23
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+20*H/24)
  ctx.lineTo(x+12*W/24, y+20*H/24)
  ctx.stroke()

  //24
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+20*H/24)
  ctx.lineTo(x+18*W/24, y+20*H/24)
  ctx.stroke()

  //25
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+13*H/24)
  ctx.lineTo(x+17*W/24, y+13*H/24)
  ctx.stroke()

  //26
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+13*H/24)
  ctx.lineTo(x+10*W/24, y+13*H/24)
  ctx.stroke()

  //27
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+6*H/24)
  ctx.lineTo(x+19*W/24, y+6*H/24)
  ctx.stroke()

  //28
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+6*H/24)
  ctx.lineTo(x+13*W/24, y+6*H/24)
  ctx.stroke()

  //29
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+4*H/24)
  ctx.lineTo(x+9*W/24, y+5*H/24)
  ctx.stroke()
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+22*H/24)
  ctx.lineTo(x+14*W/24, y+23*H/24)
  cpx = x+14*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+24*H/24)
  cpx = x+9*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+24*H/24)
  cpx = x+8*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+23*H/24)
  cpx = x+8*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+22*H/24)
  ctx.stroke()
}

function fishrAt (x,y,W,color,a) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, angle = pet(180)
  angle = a
  //1
  ctx.beginPath()
  p = rotatePoint(x+12*W/24, y+1*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+4*W/24
  cpy = y+10*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24, y+20*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+20*W/24
  cpy = y+10*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24, y+1*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()

  //2
  ctx.beginPath()
  p = rotatePoint(x+8*W/24, y+23*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+8*W/24
  cpy = y+20*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24, y+20*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+16*W/24
  cpy = y+20*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+16*W/24, y+23*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+12*W/24
  cpy = y+20*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+8*W/24, y+23*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()

  //3
  ctx.beginPath()
  p = rotatePoint(x+12*W/24, y+6*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+13*W/24
  cpy = y+6*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+13*W/24, y+5*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+13*W/24
  cpy = y+4*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24, y+4*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+11*W/24
  cpy = y+4*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+11*W/24, y+5*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+11*W/24
  cpy = y+6*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24, y+6*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()

  //4
  ctx.beginPath()
  p = rotatePoint(x+8*W/24, y+8*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+6*W/24
  cpy = y+8*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+6*W/24, y+16*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+8*W/24
  cpy = y+15*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+8*W/24, y+12*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()

  //5
  ctx.beginPath()
  p = rotatePoint(x+16*W/24, y+8*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+18*W/24
  cpy = y+8*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+18*W/24, y+16*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+16*W/24
  cpy = y+15*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+16*W/24, y+12*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()
}

function tidallyAt (x,y,W,color,a) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, angle = pet(180)
  angle = a
  //1
  ctx.beginPath()
  p = rotatePoint(x+12*W/24, y+2*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+21.5*W/24
  cpy = y+2.5*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+22*W/24, y+12*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+21.5*W/24
  cpy = y+21.5*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24, y+22*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+2.5*W/24
  cpy = y+21.5*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+2*W/24, y+12*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+2.5*W/24
  cpy = y+2.5*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24, y+2*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()

  //2
  ctx.beginPath()
  p = rotatePoint(x+12*W/24, y+2*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+2.5*W/24
  cpy = y+2.5*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+2*W/24, y+12*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+2.5*W/24
  cpy = y+21.5*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24, y+22*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+12*W/24
  cpy = y+2*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24, y+2*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()
}

function tidally_lockedAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let i = 0
  let r = W/3
  let a = Math.random() * 2*Math.PI
  let x2 = 0
  let y2 = 0
  ctx.beginPath()
  ctx.arc(x+W/2, y+H/2, 2*W/24,0,Math.PI*2)
  ctx.stroke()
  ctx.globalAlpha /= 3
  ctx.font = "italic "+3*W/24 + "pt Times New Roman"
  //ctx.fillText("nothing", x+6*W/24, y+12.6*H/24)
  ctx.globalAlpha *= 3
  x -= 2*W/24, y -= 2*H/24
  let cx = W/2, cy = H/2
  for (; i < 8; i++) {
    x2 = r * Math.cos(a)+cx
    y2 = r * Math.sin(a)+cy
    tidallyAt (x+x2,y+y2,W/6,color,a*180/Math.PI)
    a += Math.PI/4
  }
}

function swimming_in_circlesAt(x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let i = 0
  let r = W/2.5
  let a = Math.random() * 2*Math.PI
  let x2 = 0
  let y2 = 0

  x -= 2*W/24, y -= 2*H/24
  let cx = W/2, cy = H/2
  for (; i < 13; i++) {
    x2 = r * Math.cos(a)+cx
    y2 = r * Math.sin(a)+cy
    fishrAt (x+x2,y+y2,W/6,color,a*180/Math.PI)
    a += Math.PI/6.5
  }
  a += Math.random() *360
  i = 0, r *= 0.7
  for (; i < 9; i++) {
    x2 = r * Math.cos(a)+cx
    y2 = r * Math.sin(a)+cy
    fishrAt (x+x2,y+y2,W/6,color,a*180/Math.PI)
    a += Math.PI/4.5
  }
  a += Math.random() *360
  i = 0, r *= 0.6
  for (; i < 5; i++) {
    x2 = r * Math.cos(a)+cx
    y2 = r * Math.sin(a)+cy
    fishrAt (x+x2,y+y2,W/6,color,a*180/Math.PI)
    a += Math.PI/2.5
  }
  a += Math.random() *360
  i = 0, r *= 0.35
  for (; i < 2; i++) {
    x2 = r * Math.cos(a)+cx
    y2 = r * Math.sin(a)+cy
    fishrAt (x+x2,y+y2,W/6,color,a*180/Math.PI)
    a += Math.PI/1
  }
}

function concept_of_a_planAt(x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let i = 0
  let r = W/2.5
  let a = Math.random() * 2*Math.PI
  let x2 = 0
  let y2 = 0
  ctx.globalAlpha /= 3
  ctx.font = "italic "+3*W/24 + "pt Times New Roman"
  ctx.fillText("nothing", x+6*W/24, y+12.6*H/24)
  ctx.globalAlpha *= 3
  x -= 2*W/24, y -= 2*H/24
  let cx = W/2, cy = H/2
  for (; i < 12; i++) {
    x2 = r * Math.cos(a)+cx
    y2 = r * Math.sin(a)+cy
    arrowAt (x+x2,y+y2,W/6,color,a*180/Math.PI-90)
    a += Math.PI/6
  }
}

function arrowAt (x,y,W,color,a) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, angle = pet(180)
  if (a)
    angle = a
  //1
  ctx.beginPath()
  p = rotatePoint(x+12*W/24, y+23*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+12*W/24, y+3*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+8*W/24, y+7*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+12*W/24, y+3*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+16*W/24, y+7*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()
}


function forestshadowAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let i = 0, s = 1

  for (; i < 21; i++) {
    x2 = Math.random()*W -W/12
    y2 = Math.random()*W
    s = 0.5 + (y2/H)
    hillockAt (x+x2,y+y2,W/8*s,color)
  }
}

function convenience_store_sushiAt(x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, d = 0, angle = 0//pet(180)
  let i = 0, xi = W/2.2, yi = W/2.2
  trayAt(x+3,y+3,W-6,'#a88888')
  sushiAt(x+W/48,y,W/2,color)
  sushiAt(x+W/48+xi,y,W/2,color)
  sushiAt(x+W/48,y+yi,W/2,color)
  sushiAt(x+W/48+xi,y+yi,W/2,color)
  wrappingAt(x,y,W,'#ffffff')
  ctx.strokeStyle = color
  ctx.fillStyle = color
}

function wrappingAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = "#ffffee"
  ctx.fillStyle = "#ffffee"
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, d = W/24, angle = randomPick([0,90,-90,180])
  ctx.globalAlpha /= 6
  //1
  ctx.beginPath()
  p = rotatePoint(x+0*W/24+pet(d), y+21*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+0*W/24+pet(d)
  cpy = y+24*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+4*W/24+pet(d), y+24*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+12*W/24+pet(d)
  cpy = y+21*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+17*W/24+pet(d), y+23*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+23*W/24+pet(d)
  cpy = y+23*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+23*W/24+pet(d), y+16*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+22*W/24+pet(d)
  cpy = y+13*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+13*W/24+pet(d), y+12*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+5*W/24+pet(d)
  cpy = y+14*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+0*W/24+pet(d), y+21*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()

  //2
  angle = randomPick([0,90,-90,180])
  ctx.beginPath()
  p = rotatePoint(x+1*W/24+pet(d), y+6*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+1*W/24+pet(d)
  cpy = y+1*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+6*W/24+pet(d), y+1*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+12*W/24+pet(d)
  cpy = y+3*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+17*W/24+pet(d), y+1*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+23*W/24+pet(d)
  cpy = y+1*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+23*W/24+pet(d), y+5*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+22*W/24+pet(d)
  cpy = y+8*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+13*W/24+pet(d), y+9*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+6*W/24+pet(d)
  cpy = y+9*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+1*W/24+pet(d), y+6*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()

  //3
  angle = randomPick([0,90,-90,180])
  ctx.beginPath()
  p = rotatePoint(x+1*W/24+pet(d), y+9*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+1*W/24+pet(d)
  cpy = y+1*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+8*W/24+pet(d), y+1*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+9*W/24+pet(d)
  cpy = y+1*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+9*W/24+pet(d), y+2*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+9*W/24+pet(d)
  cpy = y+3*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+8*W/24+pet(d), y+3*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+4*W/24+pet(d)
  cpy = y+3*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+3*W/24+pet(d), y+8*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+3*W/24+pet(d)
  cpy = y+11*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+2*W/24+pet(d), y+11*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+1*W/24+pet(d)
  cpy = y+11*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+1*W/24+pet(d), y+9*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()

  //4
  angle = randomPick([0,90,-90,180])
  ctx.beginPath()
  p = rotatePoint(x+11*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+10*W/24+pet(d)
  cpy = y+12*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+10*W/24+pet(d), y+13*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+10*W/24+pet(d)
  cpy = y+14*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+11*W/24+pet(d), y+14*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+15*W/24+pet(d)
  cpy = y+14*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+15*W/24+pet(d), y+12*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+15*W/24+pet(d)
  cpy = y+10*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+14*W/24+pet(d), y+10*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+13*W/24+pet(d)
  cpy = y+10*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+13*W/24+pet(d), y+12*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+11*W/24+pet(d)
  cpy = y+12*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+11*W/24+pet(d), y+12*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()
  ctx.globalAlpha *= 6
  ctx.fillStyle = "#ffffde"
  angle = 0
  //1 price tag
  d = 0
  ctx.shadowBlur = 6
  ctx.shadowColor = "#777777"
  ctx.shadowOffsetX = 3
  ctx.shadowOffsetY  = 3
  ctx.beginPath()
  p = rotatePoint(x+7*W/24+pet(d), y+14*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+8*W/24+pet(d), y+18*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+17*W/24+pet(d), y+18*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+16*W/24+pet(d), y+14*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+7*W/24+pet(d), y+14*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.fill()

  ctx.fillStyle = "#FF3E00"
  ctx.beginPath()
  ctx.arc(x+21.2*W/24, y + 3 *H/24, 2*W/24,0,Math.PI*2)
  ctx.fill()
  
  ctx.shadowBlur = 0
  ctx.shadowOffsetX = 0
  ctx.shadowOffsetY  = 0

  ctx.fillStyle = "#ffffff"
  ctx.globalAlpha /= 2
  //1
  ctx.beginPath()
  p = rotatePoint(x+1.5*W/24+pet(d), y+1.5*H/24+pet(d) ,cx,cy,angle)
  ctx.arc(p[0],p[1], W/60, 0, Math.PI*2)
  ctx.fill()

  ctx.beginPath()
  p = rotatePoint(x+2*W/24+pet(d), y+2*H/24+pet(d) ,cx,cy,angle)
  ctx.arc(p[0],p[1], W/20, 0, Math.PI*2)
  ctx.fill()

  //2
  ctx.beginPath()
  p = rotatePoint(x+1.5*W/24+pet(d), y+22*H/24+pet(d) ,cx,cy,angle)
  ctx.arc(p[0],p[1], W/72, 0, Math.PI*2)
  ctx.fill()

  ctx.beginPath()
  p = rotatePoint(x+2*W/24+pet(d), y+21.5*H/24+pet(d) ,cx,cy,angle)
  ctx.arc(p[0],p[1], W/30, 0, Math.PI*2)
  ctx.fill()
  ctx.globalAlpha *= 2

  ctx.fillStyle = "#000000"
  ctx.font = "bold "+1.0*W/24+"pt Garamond"
  p = rotatePoint(x+19.6*W/24+pet(d), y+3.5*H/24+pet(d) ,cx,cy,angle)
  ctx.fillText("$2.99",p[0],p[1])
  ctx.fillStyle = "red"
  ctx.font = "bold "+1.5*W/24+"pt Garamond"
  p = rotatePoint(x+9*W/24+pet(d), y+16.5*H/24+pet(d) ,cx,cy,angle)
  ctx.fillText("Fresh!",p[0],p[1])
}

function trayAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = '#655555'
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, d = 0, angle = 0

  //1
  ctx.beginPath()
  p = rotatePoint(x+12*W/24+pet(d), y+24*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+21*W/24+pet(d)
  cpy = y+24*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+21*W/24+pet(d), y+24*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+24*W/24+pet(d)
  cpy = y+24*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+24*W/24+pet(d), y+21*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+24*W/24+pet(d)
  cpy = y+3*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+24*W/24+pet(d), y+3*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+24*W/24+pet(d)
  cpy = y+0*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+21*W/24+pet(d), y+0*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+3*W/24+pet(d)
  cpy = y+0*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+3*W/24+pet(d), y+0*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+0*W/24+pet(d)
  cpy = y+0*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+0*W/24+pet(d), y+3*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+0*W/24+pet(d)
  cpy = y+21*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+0*W/24+pet(d), y+21*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+0*W/24+pet(d)
  cpy = y+24*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+3*W/24+pet(d), y+24*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+12*W/24+pet(d)
  cpy = y+24*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24+pet(d), y+24*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()
  //1
  ctx.fillStyle = '#433333'
  ctx.strokeStyle = '#433333'
  ctx.stroke()
  ctx.beginPath()
  p = rotatePoint(x+20*W/24+pet(d), y+23*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+23*W/24+pet(d)
  cpy = y+23*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+23*W/24+pet(d), y+20*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+23*W/24+pet(d)
  cpy = y+4*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+23*W/24+pet(d), y+4*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+23*W/24+pet(d)
  cpy = y+1*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+20*W/24+pet(d), y+1*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+4*W/24+pet(d)
  cpy = y+1*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+4*W/24+pet(d), y+1*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+1*W/24+pet(d)
  cpy = y+1*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+1*W/24+pet(d), y+4*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+1*W/24+pet(d)
  cpy = y+20*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+1*W/24+pet(d), y+20*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+1*W/24+pet(d)
  cpy = y+23*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+4*W/24+pet(d), y+23*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+20*W/24+pet(d)
  cpy = y+23*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+20*W/24+pet(d), y+23*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()
  //1
  ctx.fillStyle = "#211111"
  ctx.beginPath()
  p = rotatePoint(x+19*W/24+pet(d), y+21*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+21*W/24+pet(d)
  cpy = y+21*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+21*W/24+pet(d), y+19*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+21*W/24+pet(d)
  cpy = y+5*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+21*W/24+pet(d), y+5*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+21*W/24+pet(d)
  cpy = y+3*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+19*W/24+pet(d), y+3*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+5*W/24+pet(d)
  cpy = y+3*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+5*W/24+pet(d), y+3*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+3*W/24+pet(d)
  cpy = y+3*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+3*W/24+pet(d), y+5*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+3*W/24+pet(d)
  cpy = y+19*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+3*W/24+pet(d), y+19*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+3*W/24+pet(d)
  cpy = y+21*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+5*W/24+pet(d), y+21*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+19*W/24+pet(d)
  cpy = y+21*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+19*W/24+pet(d), y+21*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()
}

function cone_of_shameAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  x -= W/24
  //1
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+10*H/24)
  cpx = x+6*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+3*H/24)
  cpx = x+5*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+4*H/24)
  cpx = x+5*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+10*H/24)
  cpx = x+5*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+11*H/24)
  cpx = x+5*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+12*H/24)
  cpx = x+5*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+19*H/24)
  cpx = x+5*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+20*H/24)
  cpx = x+6*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+15*H/24)
  cpx = x+6*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+19*H/24)
  cpx = x+6*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+20*H/24)
  cpx = x+7*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+15*H/24)
  cpx = x+14*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+15*H/24)
  cpx = x+14*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+19*H/24)
  cpx = x+14*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+20*H/24)
  cpx = x+15*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+15*H/24)
  cpx = x+15*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+19*H/24)
  cpx = x+15*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+20*H/24)
  cpx = x+16*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+15*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+10*H/24)
  cpx = x+12*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+10*H/24)
  ctx.stroke()

  //3 cone at neck
  ctx.beginPath()
  ctx.moveTo(x+19.2*W/24, y+11.9*H/24)
  ctx.lineTo(x+16*W/24, y+13*H/24)
  cpx = x+13*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+10*H/24)
  ctx.lineTo(x+14.5*W/24, y+6.1*H/24)
  ctx.stroke()
  
  //5
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+12*H/24)
  cpx = x+22*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+8*H/24)
  cpx = x+22*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+4*H/24)
  cpx = x+14*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+9*H/24)
  cpx = x+14*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+12*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+15*H/24)
  ctx.lineTo(x+16*W/24, y+13*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+10*H/24)
  ctx.lineTo(x+13*W/24, y+10*H/24)
  ctx.stroke()

  //8 head
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+11.7*H/24)
  cpx = x+16*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+11*H/24)
  cpx = x+19*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+10*H/24)
  cpx = x+19*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+6*H/24)
  cpx = x+18*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+8*H/24)
  cpx = x+16*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+8*H/24)
  cpx = x+16*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+6*H/24)
  cpx = x+15*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+8*H/24)
  cpx = x+15*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14.2*W/24, y+10*H/24)
  ctx.stroke()
  x += W/24
}

function sushiAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, d = 0, angle = 0//pet(180)

  //1
  y += H/24, cy += H/24
  ctx.beginPath()
  p = rotatePoint(x+12*W/24+pet(d), y+10*H/24+pet(d) ,cx,cy,angle)
  ctx.arc(p[0],p[1], 10*W/24, 0, Math.PI*2)
  ctx.fillStyle = "#ffffee"
  ctx.fill()
  ctx.strokeStyle = "#595c3a"
  ctx.stroke()

  ctx.fillStyle = "#595c3a"
  cy -= H/24, y -= H/24
  //2
   ctx.beginPath()
  p = rotatePoint(x+2*W/24+pet(d), y+10*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+2*W/24+pet(d)
  cpy = y+20*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24+pet(d), y+20*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+22*W/24+pet(d)
  cpy = y+20*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+22*W/24+pet(d), y+10*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+22*W/24+pet(d)
  cpy = y+14*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+22*W/24+pet(d), y+14*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+22*W/24+pet(d)
  cpy = y+24*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24+pet(d), y+24*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+2*W/24+pet(d)
  cpy = y+24*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+2*W/24+pet(d), y+14*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+2*W/24+pet(d)
  cpy = y+14*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+2*W/24+pet(d), y+10*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+2*W/24+pet(d)
  cpy = y+10*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  ctx.fill()

  cy -= H/24, y -= H/24
  W *= 1.1, H *= 1.1
  // spiral
  angle = Math.random() *360
  ctx.beginPath()
  p = rotatePoint(x+12*W/24+pet(d), y+20*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+20*W/24+pet(d)
  cpy = y+19*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+20*W/24+pet(d), y+10*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+18.5*W/24+pet(d)
  cpy = y+3.6*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24+pet(d), y+3.5*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+5*W/24+pet(d)
  cpy = y+4*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+6*W/24+pet(d), y+11*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+8*W/24+pet(d)
  cpy = y+16*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24+pet(d), y+15*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()
  W /= 1.1, H /= 1.1
  cy += H/24, y += H/24

//9 fish
  cy -= W/24
  d = W/48
  angle = Math.random() *360
  ctx.fillStyle = 'salmon'
  ctx.beginPath()
  p = rotatePoint(x+12*W/24+pet(d), y+10*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+11*W/24+pet(d)
  cpy = y+8*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+11*W/24+pet(d), y+6*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+13*W/24+pet(d)
  cpy = y+5*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+14*W/24+pet(d), y+5*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+15*W/24+pet(d)
  cpy = y+7*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+14*W/24+pet(d), y+9*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+13*W/24+pet(d)
  cpy = y+10*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24+pet(d), y+10*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.closePath()
  ctx.fill()

  //3
  ctx.fillStyle = 'salmon'
  ctx.beginPath()
  p = rotatePoint(x+10*W/24+pet(d), y+7*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+10*W/24+pet(d)
  cpy = y+9*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+11*W/24+pet(d), y+10*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+11*W/24+pet(d)
  cpy = y+11*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+10*W/24+pet(d), y+12*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+8*W/24+pet(d)
  cpy = y+11*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+8*W/24+pet(d), y+9*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+8*W/24+pet(d)
  cpy = y+7*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+10*W/24+pet(d), y+7*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.closePath()
  ctx.fill()

  // wasabi
  ctx.fillStyle = '#86942A'
  ctx.beginPath()
  p = rotatePoint(x+12*W/24+pet(d), y+11*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+14*W/24+pet(d)
  cpy = y+11*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+14*W/24+pet(d), y+12*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+13*W/24+pet(d)
  cpy = y+14*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24+pet(d), y+14*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+11*W/24+pet(d)
  cpy = y+14*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+11*W/24+pet(d), y+13*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+11*W/24+pet(d)
  cpy = y+12*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24+pet(d), y+11*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.closePath()
  ctx.fill()
}

function treewshadowAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, angle = pet(18)
  let d = 1*W/24
  //1
  ctx.beginPath()
  p = rotatePoint(x+10*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+12*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+12*W/24+pet(d), y+11*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+12*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+14*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+14*W/24+pet(d), y+11*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+13*W/24+pet(d), y+9*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+14*W/24+pet(d), y+7*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+14*W/24+pet(d), y+4*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+13*W/24+pet(d), y+3*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+13*W/24+pet(d), y+2*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+13*W/24+pet(d), y+1*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+12*W/24+pet(d), y+1*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+11*W/24+pet(d), y+1*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+11*W/24+pet(d), y+2*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+11*W/24+pet(d), y+3*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+10*W/24+pet(d), y+4*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+10*W/24+pet(d), y+7*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+11*W/24+pet(d), y+9*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+10*W/24+pet(d), y+11*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+10*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.fill()
  ctx.globalAlpha /=3
angle = 100+ pet(18)
   ctx.beginPath()
  p = rotatePoint(x+10*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+12*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+12*W/24+pet(d), y+11*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+12*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+14*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+14*W/24+pet(d), y+11*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+13*W/24+pet(d), y+9*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+14*W/24+pet(d), y+7*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+14*W/24+pet(d), y+4*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+13*W/24+pet(d), y+3*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+13*W/24+pet(d), y+2*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+13*W/24+pet(d), y+1*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+12*W/24+pet(d), y+1*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+11*W/24+pet(d), y+1*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+11*W/24+pet(d), y+2*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+11*W/24+pet(d), y+3*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+10*W/24+pet(d), y+4*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+10*W/24+pet(d), y+7*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+11*W/24+pet(d), y+9*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+10*W/24+pet(d), y+11*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+10*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.fill()
  ctx.globalAlpha *=3
}

function dollaAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, p = W/120
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.fillStyle = color
  ctx.fillStyle = color
  y -= H/24

  //1
  ctx.beginPath()
  ctx.moveTo(x+2*W/12, y+2*H/12)
  ctx.rect(x+2*W/12, y+2*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
  //2
  ctx.beginPath()
  ctx.moveTo(x+2*W/12, y+10*H/12)
  ctx.rect(x+2*W/12, y+10*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
  //1
  ctx.beginPath()
  ctx.moveTo(x+3*W/12, y+2*H/12)
  ctx.rect(x+3*W/12, y+2*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
  //2
  ctx.beginPath()
  ctx.moveTo(x+3*W/12, y+3*H/12)
  ctx.rect(x+3*W/12, y+3*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
  //3
  ctx.beginPath()
  ctx.moveTo(x+3*W/12, y+4*H/12)
  ctx.rect(x+3*W/12, y+4*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
  //4
  ctx.beginPath()
  ctx.moveTo(x+3*W/12, y+5*H/12)
  ctx.rect(x+3*W/12, y+5*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
  //5
  ctx.beginPath()
  ctx.moveTo(x+4*W/12, y+2*H/12)
  ctx.rect(x+4*W/12, y+2*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
  //6
  ctx.beginPath()
  ctx.moveTo(x+5*W/12, y+2*H/12)
  ctx.rect(x+5*W/12, y+2*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
  //7
  ctx.beginPath()
  ctx.moveTo(x+6*W/12, y+2*H/12)
  ctx.rect(x+6*W/12, y+2*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
  //8
  ctx.beginPath()
  ctx.moveTo(x+7*W/12, y+2*H/12)
  ctx.rect(x+7*W/12, y+2*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
  //9
  ctx.beginPath()
  ctx.moveTo(x+8*W/12, y+3*H/12)
  ctx.rect(x+8*W/12, y+3*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
  //10
  ctx.beginPath()
  ctx.moveTo(x+8*W/12, y+4*H/12)
  ctx.rect(x+8*W/12, y+4*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
  //11
  ctx.beginPath()
  ctx.moveTo(x+8*W/12, y+5*H/12)
  ctx.rect(x+8*W/12, y+5*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
  //12
  ctx.beginPath()
  ctx.moveTo(x+7*W/12, y+6*H/12)
  ctx.rect(x+7*W/12, y+6*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
  //13
  ctx.beginPath()
  ctx.moveTo(x+6*W/12, y+6*H/12)
  ctx.rect(x+6*W/12, y+6*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
  //14
  ctx.beginPath()
  ctx.moveTo(x+5*W/12, y+6*H/12)
  ctx.rect(x+5*W/12, y+6*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
  //15
  ctx.beginPath()
  ctx.moveTo(x+4*W/12, y+6*H/12)
  ctx.rect(x+4*W/12, y+6*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
  //16
  ctx.beginPath()
  ctx.moveTo(x+3*W/12, y+6*H/12)
  ctx.rect(x+3*W/12, y+6*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
  //17
  ctx.beginPath()
  ctx.moveTo(x+3*W/12, y+7*H/12)
  ctx.rect(x+3*W/12, y+7*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
  //18
  ctx.beginPath()
  ctx.moveTo(x+3*W/12, y+8*H/12)
  ctx.rect(x+3*W/12, y+8*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
  //19
  ctx.beginPath()
  ctx.moveTo(x+8*W/12, y+7*H/12)
  ctx.rect(x+8*W/12, y+7*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
  //20
  ctx.beginPath()
  ctx.moveTo(x+8*W/12, y+8*H/12)
  ctx.rect(x+8*W/12, y+8*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
  //21
  ctx.beginPath()
  ctx.moveTo(x+8*W/12, y+9*H/12)
  ctx.rect(x+8*W/12, y+9*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
  //22
  ctx.beginPath()
  ctx.moveTo(x+7*W/12, y+10*H/12)
  ctx.rect(x+7*W/12, y+10*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
  //23
  ctx.beginPath()
  ctx.moveTo(x+6*W/12, y+10*H/12)
  ctx.rect(x+6*W/12, y+10*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
  //24
  ctx.beginPath()
  ctx.moveTo(x+5*W/12, y+10*H/12)
  ctx.rect(x+5*W/12, y+10*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
  //25
  ctx.beginPath()
  ctx.moveTo(x+4*W/12, y+10*H/12)
  ctx.rect(x+4*W/12, y+10*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
  //26
  ctx.beginPath()
  ctx.moveTo(x+3*W/12, y+10*H/12)
  ctx.rect(x+3*W/12, y+10*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
  //27
  ctx.beginPath()
  ctx.moveTo(x+3*W/12, y+9*H/12)
  ctx.rect(x+3*W/12, y+9*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
  //28
  ctx.beginPath()
  ctx.moveTo(x+4*W/12, y+1*H/12)
  ctx.rect(x+4*W/12, y+1*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
  //29
  ctx.beginPath()
  ctx.moveTo(x+6*W/12, y+1*H/12)
  ctx.rect(x+6*W/12, y+1*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
  //30
  ctx.beginPath()
  ctx.moveTo(x+4*W/12, y+11*H/12)
  ctx.rect(x+4*W/12, y+11*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
  //31
  ctx.beginPath()
  ctx.moveTo(x+6*W/12, y+11*H/12)
  ctx.rect(x+6*W/12, y+11*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
}

function cryptoAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, p = 2
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.fillStyle = color
  ctx.strokeStyle = color
  ctx.lineWidth = W/50
  p = W/200

  ctx.beginPath()
  ctx.arc(x+6.5*W/14, y+6.5*H/14, 3*H/7, 0, Math.PI*2)
  ctx.closePath()
  ctx.stroke()

  ctx.beginPath()
  ctx.arc(x+7*W/14, y+7*H/14, 3*H/7, Math.PI * 0.75, Math.PI*1.75,true)
 // ctx.closePath()
  ctx.stroke()

  ctx.globalAlpha /= 3
  ctx.beginPath()
  ctx.arc(x+7*W/14, y+7*H/14, 3*H/7, Math.PI * 1.75, Math.PI*0.75,false)
  ctx.arc(x+6.5*W/14, y+6.5*H/14, 3*H/7, Math.PI * 0.75, Math.PI*1.75,true)
  ctx.closePath()
  ctx.fill()
  ctx.globalAlpha *= 3

  dollaAt(x+2*W/14, y+W/10, W*0.7,color)
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
}

function bomberAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "round"
  ctx.lineJoin = "bevel"
 
  ctx.setLineDash([W/24])
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+15*H/24)
  ctx.lineTo(x+2*W/24, y+16*H/24)
  ctx.lineTo(x+6*W/24, y+13*H/24)
  ctx.lineTo(x+8*W/24, y+16*H/24)
  ctx.lineTo(x+10*W/24, y+14*H/24)
  ctx.lineTo(x+12*W/24, y+16*H/24)
  ctx.lineTo(x+14*W/24, y+14*H/24)
  ctx.lineTo(x+16*W/24, y+16*H/24)
  ctx.lineTo(x+18*W/24, y+13*H/24)
  ctx.lineTo(x+22*W/24, y+16*H/24)
  ctx.lineTo(x+23*W/24, y+15*H/24)
  ctx.lineTo(x+12*W/24, y+6.5*H/24)
  ctx.lineTo(x+1*W/24, y+15*H/24)
  ctx.stroke()
  ctx.setLineDash([])
}

function local_maximaAt (x,y,W,color,INVERT) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+2*W/32, y+26*H/32)
  cpx = x+2*W/32
  cpy = y+30*H/32
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/32, y+30*H/32)
  cpx = x+6*W/32
  cpy = y+30*H/32
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/32, y+26*H/32)
  cpx = x+6*W/32
  cpy = y+22*H/32
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/32, y+22*H/32)
  cpx = x+6*W/32
  cpy = y+18*H/32
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/32, y+18*H/32)
  cpx = x+10*W/32
  cpy = y+18*H/32
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/32, y+20*H/32)
  cpx = x+10*W/32
  cpy = y+24*H/32
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/32, y+24*H/32)
  cpx = x+14*W/32
  cpy = y+24*H/32
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/32, y+22*H/32)
  cpx = x+14*W/32
  cpy = y+18*H/32
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/32, y+18*H/32)
  cpx = x+14*W/32
  cpy = y+14*H/32
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/32, y+14*H/32)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+16*W/32, y+14*H/32)
  cpx = x+18*W/32
  cpy = y+14*H/32
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/32, y+16*H/32)
  cpx = x+18*W/32
  cpy = y+18*H/32
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/32, y+18*H/32)
  cpx = x+18*W/32
  cpy = y+20*H/32
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/32, y+20*H/32)
  cpx = x+22*W/32
  cpy = y+20*H/32
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/32, y+18*H/32)
  cpx = x+22*W/32
  cpy = y+14*H/32
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/32, y+14*H/32)
  cpx = x+22*W/32
  cpy = y+10*H/32
  ctx.quadraticCurveTo(cpx, cpy, x+24*W/32, y+10*H/32)
  cpx = x+26*W/32
  cpy = y+10*H/32
  ctx.quadraticCurveTo(cpx, cpy, x+26*W/32, y+12*H/32)
  cpx = x+26*W/32
  cpy = y+14*H/32
  ctx.quadraticCurveTo(cpx, cpy, x+26*W/32, y+14*H/32)
  cpx = x+26*W/32
  cpy = y+16*H/32
  ctx.quadraticCurveTo(cpx, cpy, x+28*W/32, y+16*H/32)
  cpx = x+30*W/32
  cpy = y+16*H/32
  ctx.quadraticCurveTo(cpx, cpy, x+30*W/32, y+14*H/32)
  cpx = x+30*W/32
  cpy = y+14*H/32
  ctx.quadraticCurveTo(cpx, cpy, x+30*W/32, y+8*H/32)
  cpx = x+30*W/32
  cpy = y+8*H/32
  ctx.stroke()
  
  if (INVERT)
    figureRotatedAt(x+10.5*W/24, y+10.5*H/24, 3*W/24, color, 180)
  else
    figureRotatedAt(x+10.5*W/24, y+7.5*H/24, 3*W/24, color, 0)

  ctx.fillStyle = color
  ctx.globalAlpha /= 3
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+12*H/24)
  ctx.lineTo(x+0*W/24, y+24*H/24)
  ctx.lineTo(x+24*W/24, y+24*H/24)
  ctx.lineTo(x+24*W/24, y+0*H/24)
  ctx.lineTo(x+0*W/24, y+0*H/24)
  ctx.lineTo(x+0*W/24, y+12*H/24)
  ctx.lineTo(x+7*W/24, y+12*H/24)
  cpx = x+7*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+7*H/24)
  cpx = x+17*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+12*H/24)
  cpx = x+17*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+17*H/24)
  cpx = x+7*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+12*H/24)
  ctx.lineTo(x+0*W/24, y+12*H/24)
  ctx.fill()
  ctx.globalAlpha *= 3
}

function nimbyAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.font = "900 italic "+5*W/24+"pt Garamond"
  ctx.fillText("NO!",x+6.0*W/24, y+19.3*H/24)
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+20*H/24)
  ctx.lineTo(x+22*W/24, y+20*H/24)
  ctx.lineTo(x+22*W/24, y+23*H/24)
  ctx.lineTo(x+6*W/24, y+23*H/24)
  ctx.lineTo(x+6*W/24, y+20*H/24)
  ctx.lineTo(x+22*W/24, y+20*H/24)
  ctx.lineTo(x+16*W/24, y+14*H/24)
  ctx.lineTo(x+16*W/24, y+17*H/24)
  ctx.lineTo(x+19*W/24, y+20*H/24)
  ctx.stroke()
  //2
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+14*H/24)
  ctx.lineTo(x+14*W/24, y+14*H/24)
  ctx.lineTo(x+14*W/24, y+17*H/24)
  ctx.lineTo(x+16*W/24, y+17*H/24)
  ctx.lineTo(x+16*W/24, y+14*H/24)
  ctx.stroke()
  //3
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+14*H/24)
  ctx.lineTo(x+4*W/24, y+14*H/24)
  ctx.lineTo(x+4*W/24, y+16*H/24)
  ctx.stroke()
  //4
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+14*H/24)
  ctx.lineTo(x+6*W/24, y+20*H/24)
  ctx.lineTo(x+6*W/24, y+23*H/24)
  ctx.lineTo(x+2*W/24, y+17*H/24)
  ctx.lineTo(x+2*W/24, y+14*H/24)
  ctx.stroke()
  //5
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+16*H/24)
  ctx.lineTo(x+4*W/24, y+17*H/24)
  ctx.lineTo(x+14*W/24, y+17*H/24)
  ctx.lineTo(x+14*W/24, y+8*H/24)
  ctx.stroke()
  //21
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+1*H/24)
  ctx.lineTo(x+1*W/24, y+5*H/24)
  ctx.stroke()
  //22
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+17*H/24)
  ctx.lineTo(x+4*W/24, y+8*H/24)
  ctx.stroke()
  //6
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+8*H/24)
  ctx.lineTo(x+6*W/24, y+10*H/24)
  ctx.lineTo(x+8*W/24, y+10*H/24)
  ctx.lineTo(x+8*W/24, y+8*H/24)
  ctx.lineTo(x+6*W/24, y+8*H/24)
  ctx.stroke()
  //7
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+8*H/24)
  ctx.lineTo(x+12*W/24, y+8*H/24)
  ctx.lineTo(x+12*W/24, y+10*H/24)
  ctx.lineTo(x+10*W/24, y+10*H/24)
  ctx.lineTo(x+10*W/24, y+8*H/24)
  ctx.stroke()
  //8
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+8*H/24)
  ctx.lineTo(x+1*W/24, y+5*H/24)
  ctx.stroke()
  //17
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+17*H/24)
  ctx.lineTo(x+8*W/24, y+14*H/24)
  ctx.lineTo(x+10*W/24, y+14*H/24)
  ctx.lineTo(x+10*W/24, y+17*H/24)
  ctx.stroke()
  //23
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+8*H/24)
  ctx.lineTo(x+9.2*W/24, y+3.8*H/24)
  ctx.stroke()
  //11
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+5*H/24)
  ctx.lineTo(x+1*W/24, y+14*H/24)
  ctx.lineTo(x+2*W/24, y+15.5*H/24)
  ctx.stroke()
  //12
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+2.7*H/24)
  ctx.lineTo(x+8*W/24, y+1*H/24)
  ctx.lineTo(x+10*W/24, y+1*H/24)
  ctx.lineTo(x+10*W/24, y+4.5*H/24)
  ctx.stroke()
  //19
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+1*H/24)
  ctx.lineTo(x+14*W/24, y+8*H/24)
  ctx.stroke()
}

function rear_viewAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "round"
  ctx.lineJoin = "bevel"
  y -= 3*H/24
  //1
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+16*H/24)
  cpx = x+12*W/24
  cpy = y+15.5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+15.5*H/24)
  cpx = x+14*W/24
  cpy = y+15.5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+16*H/24)
  ctx.fill()
  ctx.stroke()
  //7
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+15.5*H/24)
  ctx.lineTo(x+6*W/24, y+15.5*H/24)
  ctx.stroke()

  ctx.globalAlpha /= 3
  //2
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+15.5*H/24)
  ctx.lineTo(x+19*W/24, y+10*H/24)
  cpx = x+7*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+15.5*H/24)
  ctx.lineTo(x+13*W/24, y+15.5*H/24)
  ctx.lineTo(x+13*W/24, y+16*H/24)
  ctx.lineTo(x+2*W/24, y+16*H/24)
  cpx = x+2*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+8*H/24)
  cpx = x+22*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+16*H/24)
  ctx.lineTo(x+14*W/24, y+16*H/24)
  ctx.fill()
  ctx.fillStyle = "#ffffff"
  let i = 0, r = W/48
  for (; i < 3; i++) {
    ctx.beginPath()
    ctx.arc(x+9.5*W/24, y+13*H/24, r,0,Math.PI*2)
    ctx.fill()

    ctx.beginPath()
    ctx.arc(x+14*W/24, y+13*H/24, r,0,Math.PI*2)
    ctx.fill()
    r += W/48
  }
  ctx.globalAlpha *= 3
  ctx.fillStyle = color
  //10
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+6*H/24)
  ctx.lineTo(x+1*W/24, y+19*H/24)
  ctx.lineTo(x+23*W/24, y+19*H/24)
  ctx.lineTo(x+23*W/24, y+6*H/24)
  ctx.lineTo(x+12*W/24, y+6*H/24)
  ctx.lineTo(x+12*W/24, y+8*H/24)
  cpx = x+22*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+16*H/24)
  ctx.lineTo(x+2*W/24, y+16*H/24)
  cpx = x+2*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+8*H/24)
  ctx.lineTo(x+12*W/24, y+6*H/24)
  ctx.lineTo(x+1*W/24, y+6*H/24)
  ctx.fill()
}

function cartopAt (x,y,W,color,a) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  let v = document.getElementById("featuresize").value
  document.getElementById("featuresize").value /= 3
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, angle = pet(14)
  if (a)
    angle = a+pet(14)
  //1
  ctx.beginPath()
  p = rotatePoint(x+7*W/24, y+6*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+7*W/24, y+20*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  cpx = x+7*W/24
  cpy = y+22*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+9*W/24, y+22*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+15*W/24
  cpy = y+22*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+15*W/24, y+22*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+17*W/24
  cpy = y+22*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+17*W/24, y+20*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+17*W/24
  cpy = y+6*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+17*W/24, y+6*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+17*W/24
  cpy = y+2*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+13*W/24, y+2*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+11*W/24
  cpy = y+2*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+11*W/24, y+2*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+7*W/24
  cpy = y+2*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+7*W/24, y+6*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()
  //2
  ctx.beginPath()
  p = rotatePoint(x+8*W/24, y+19*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+8*W/24
  cpy = y+21*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+10*W/24, y+21*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+14*W/24
  cpy = y+21*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+14*W/24, y+21*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+16*W/24
  cpy = y+21*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+16*W/24, y+19*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  p = rotatePoint(x+8*W/24, y+19*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()
  //3
  ctx.beginPath()
  p = rotatePoint(x+8*W/24, y+12*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+8*W/24
  cpy = y+9*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+11*W/24, y+9*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+13*W/24
  cpy = y+9*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+13*W/24, y+9*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+16*W/24
  cpy = y+9*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+16*W/24, y+12*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  p = rotatePoint(x+8*W/24, y+12*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()
  //4
  ctx.beginPath()
  p = rotatePoint(x+17*W/24, y+11*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+18*W/24
  cpy = y+11*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+18*W/24, y+12*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+17*W/24
  cpy = y+12*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+17*W/24, y+12*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()
  //5
  ctx.beginPath()
  p = rotatePoint(x+7*W/24, y+11*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+6*W/24
  cpy = y+11*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+6*W/24, y+12*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+7*W/24
  cpy = y+12*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+7*W/24, y+12*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()
  ctx.lineWidth /= 2
  //6
  ctx.beginPath()
  p = rotatePoint(x+8*W/24, y+13.25*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+8*W/24, y+14.75*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()
  //7
  ctx.beginPath()
  p = rotatePoint(x+8*W/24, y+16.25*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+8*W/24, y+17.75*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  ctx.lineWidth /=
  //8
  ctx.beginPath()
  p = rotatePoint(x+16*W/24, y+17.75*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+16*W/24, y+16.25*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //9
  ctx.beginPath()
  p = rotatePoint(x+16*W/24, y+14.75*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+16*W/24, y+13.25*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()
  ctx.lineWidth *= 2
  //10
  ctx.beginPath()
  p = rotatePoint(x+10*W/24, y+2*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+10*W/24
  cpy = y+3*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+11*W/24, y+3*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+13*W/24
  cpy = y+3*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+13*W/24, y+3*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+14*W/24
  cpy = y+3*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+14*W/24, y+2*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()
  document.getElementById("featuresize").value = v
}

function greenwashingAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  let savedW = ctx.lineWidth
  ctx.lineWidth *= 3
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "round"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, angle = 0

  ctx.font = "900 italic "+6*W/24+"pt Arial"
  ctx.fillText(""+Math.floor(3+Math.random()*5),x+9.5*W/24, y+14.5*H/24 )
  ctx.beginPath()
  p = rotatePoint(x+7.8*W/24, y+8*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+10*W/24, y+4*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  cpx = x+12*W/24
  cpy = y+0*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+14*W/24, y+4*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+16.2*W/24
  cpy = y+8*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+16.2*W/24, y+8*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()

  ctx.lineCap = "square"
  ctx.beginPath()
  p = rotatePoint(x+14.5*W/24, y+7*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+16.2*W/24, y+8*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+16.2*W/24, y+6*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()
  angle = 120

  ctx.lineCap = "round"
  p = rotatePoint(x+7.8*W/24, y+8*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+10*W/24, y+4*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  cpx = x+12*W/24
  cpy = y+0*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+14*W/24, y+4*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+16.2*W/24
  cpy = y+8*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+16.2*W/24, y+8*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()

  ctx.lineCap = "square"
  ctx.beginPath()
  p = rotatePoint(x+14.5*W/24, y+7*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+16.2*W/24, y+8*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+16.2*W/24, y+6*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  angle = 240
  ctx.lineCap = "round"
  p = rotatePoint(x+7.8*W/24, y+8*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+10*W/24, y+4*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  cpx = x+12*W/24
  cpy = y+0*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+14*W/24, y+4*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+16.2*W/24
  cpy = y+8*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+16.2*W/24, y+8*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()

  ctx.lineCap = "square"
  ctx.beginPath()
  p = rotatePoint(x+14.5*W/24, y+7*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+16.2*W/24, y+8*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+16.2*W/24, y+6*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  ctx.lineWidth = savedW
}

function tree_hugging_communistAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  //1
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+19*H/24)
  cpx = x+16*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+23*H/24)
  ctx.stroke()
  //2
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+23*H/24)
  ctx.lineTo(x+16*W/24, y+23*H/24)
  ctx.lineTo(x+16*W/24, y+10*H/24)
  cpx = x+16*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+9*H/24)
  cpx = x+14*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+10*H/24)
  cpx = x+14*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+13*H/24)
  cpx = x+10*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+13*H/24)
  cpx = x+9*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+14*H/24)
  cpx = x+9*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+15*H/24)
  cpx = x+14*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+15*H/24)
  cpx = x+14*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+22*H/24)
  cpx = x+12*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+23*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+15*H/24)
  cpx = x+10*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+23*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+13*H/24)
  cpx = x+9*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+12*H/24)
  cpx = x+9*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+11*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+13*H/24)
  cpx = x+10*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+9*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+10*H/24)
  ctx.lineTo(x+14*W/24, y+9*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+9*H/24)
  cpx = x+20*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+6*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+7*H/24)
  cpx = x+20*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+4*H/24)
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+5*H/24)
  cpx = x+20*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+2*H/24)
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+3*H/24)
  cpx = x+20*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+0*H/24)
  ctx.stroke()

  //11
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+9*H/24)
  cpx = x+4*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+6*H/24)
  ctx.stroke()

  //12
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+7*H/24)
  cpx = x+4*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+4*H/24)
  ctx.stroke()

  //13
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+5*H/24)
  cpx = x+4*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+2*H/24)
  ctx.stroke()

  //14
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+3*H/24)
  cpx = x+4*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+0*H/24)
  ctx.stroke()

  //15
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+1*H/24)
  cpx = x+8*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+0*H/24)
  ctx.stroke()

  //16
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+1*H/24)
  cpx = x+16*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+0*H/24)
  ctx.stroke()

  //18
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+7*H/24)
  ctx.lineTo(x+10*W/24, y+5*H/24)
  ctx.stroke()

  //19
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+3*H/24)
  ctx.lineTo(x+10*W/24, y+1*H/24)
  ctx.stroke()

  //20
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+7*H/24)
  ctx.lineTo(x+14*W/24, y+5*H/24)
  ctx.stroke()

  //21
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+3*H/24)
  ctx.lineTo(x+14*W/24, y+1*H/24)
  ctx.stroke()
}

function mass_shootingAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = "#ff0000"
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, angle = pet(20)
  //1
  ctx.beginPath()
  p = rotatePoint(x+12*W/24, y+22*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+15*W/24
  cpy = y+22*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+15*W/24, y+20*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+15*W/24
  cpy = y+19*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+18*W/24, y+19*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+21*W/24
  cpy = y+19*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+21*W/24, y+16*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+21*W/24
  cpy = y+13*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+19*W/24, y+13*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+17*W/24
  cpy = y+13*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+16*W/24, y+10*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+16*W/24
  cpy = y+8*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+13*W/24, y+8*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+10*W/24
  cpy = y+8*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+10*W/24, y+11*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+9*W/24
  cpy = y+13*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+7*W/24, y+13*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+4*W/24
  cpy = y+13*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+3*W/24, y+15*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+3*W/24
  cpy = y+18*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+5*W/24, y+18*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+6*W/24
  cpy = y+18*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+6*W/24, y+20*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+6*W/24
  cpy = y+22*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+8*W/24, y+22*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+10*W/24
  cpy = y+20*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24, y+22*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()
  //2
  ctx.beginPath()
  p = rotatePoint(x+8*W/24, y+10*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+8*W/24
  cpy = y+8*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+5*W/24, y+8*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+2*W/24
  cpy = y+8*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+2*W/24, y+10*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+2*W/24
  cpy = y+12*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+5*W/24, y+12*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+8*W/24
  cpy = y+12*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+8*W/24, y+10*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()
  //3
  ctx.beginPath()
  p = rotatePoint(x+18*W/24, y+9*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+20*W/24
  cpy = y+9*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+20*W/24, y+7*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+20*W/24
  cpy = y+6*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+18*W/24, y+6*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+16*W/24
  cpy = y+6*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+16*W/24, y+7*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+16*W/24
  cpy = y+9*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+18*W/24, y+9*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()
  //4
  ctx.beginPath()
  p = rotatePoint(x+17*W/24, y+21*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+17*W/24
  cpy = y+20*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+19*W/24, y+20*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+22*W/24
  cpy = y+20*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+22*W/24, y+22*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+22*W/24
  cpy = y+23*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+20*W/24, y+23*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+17*W/24
  cpy = y+23*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+17*W/24, y+21*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()
  victim1At(x+4*W/24, y+10*H/24, 5*W/24, color)
  victim1At(x+16*W/24, y+11*H/24, 5*W/24, color)
  victim2At(x+9*W/24, y+13*H/24, 5*W/24, color)
  victim1At(x+4*W/24, y+18*H/24, 5*W/24, color)
  victim2At(x+15*W/24, y+18*H/24, 5*W/24, color)
  victim2At(x+6*W/24, y+6*H/24, 5*W/24, color)
  victim1At(x+14*W/24, y+5*H/24, 5*W/24, color)
}

function victim1At (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, angle = 0

  //1
  ctx.beginPath()
  p = rotatePoint(x+17*W/24, y+18*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+17*W/24, y+10*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  cpx = x+7*W/24
  cpy = y+11*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+6*W/24, y+15*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+6*W/24
  cpy = y+18*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+17*W/24, y+18*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()

  //2
  ctx.beginPath()
  p = rotatePoint(x+6*W/24, y+15*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+6*W/24
  cpy = y+17*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+4*W/24, y+17*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+1*W/24
  cpy = y+17*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+1*W/24, y+15*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+1*W/24
  cpy = y+13*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+3*W/24, y+13*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+6*W/24
  cpy = y+13*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+6*W/24, y+15*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()

  //3
  ctx.beginPath()
  p = rotatePoint(x+17*W/24, y+16*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+22*W/24, y+17*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+23*W/24, y+15*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //4
  ctx.beginPath()
  p = rotatePoint(x+17*W/24, y+14*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+22*W/24, y+15*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+23*W/24, y+13*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()
  if (Math.random() > 0.5) {
    //5
    ctx.beginPath()
    p = rotatePoint(x+9*W/24, y+16*H/24 ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    p = rotatePoint(x+5*W/24, y+19*H/24 ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+2*W/24, y+19*H/24 ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    ctx.stroke()
  } else {
    //6
    ctx.beginPath()
    p = rotatePoint(x+9*W/24, y+16*H/24 ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    p = rotatePoint(x+12*W/24, y+19*H/24 ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+14*W/24, y+19*H/24 ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    ctx.stroke()
  }
}
 
function victim2At (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, angle = 0

  //1
  ctx.beginPath()
  p = rotatePoint(x+7*W/24, y+18*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+7*W/24, y+10*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  cpx = x+17*W/24
  cpy = y+11*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+18*W/24, y+15*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+18*W/24
  cpy = y+18*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+7*W/24, y+18*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()

  //2
  ctx.beginPath()
  p = rotatePoint(x+18*W/24, y+15*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+18*W/24
  cpy = y+13*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+21*W/24, y+13*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+23*W/24
  cpy = y+13*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+23*W/24, y+15*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+23*W/24
  cpy = y+17*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+20*W/24, y+17*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+18*W/24
  cpy = y+17*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+18*W/24, y+15*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()

  //3
  ctx.beginPath()
  p = rotatePoint(x+7*W/24, y+14*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+2*W/24, y+15*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+1*W/24, y+13*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //4
  ctx.beginPath()
  p = rotatePoint(x+7*W/24, y+16*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+2*W/24, y+17*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+1*W/24, y+15*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()
  if (Math.random() > 0.5) {
  //5
    ctx.beginPath()
    p = rotatePoint(x+15*W/24, y+16*H/24 ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    p = rotatePoint(x+19*W/24, y+19*H/24 ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+22*W/24, y+19*H/24 ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    ctx.stroke()
  } else {
    //6
    ctx.beginPath()
    p = rotatePoint(x+15*W/24, y+16*H/24 ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    p = rotatePoint(x+13*W/24, y+19*H/24 ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+11*W/24, y+19*H/24 ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    ctx.stroke()
  }
}

function hunter_bidens_laptopAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+12*H/24)
  ctx.lineTo(x+6*W/24, y+4*H/24)
  ctx.lineTo(x+22*W/24, y+4*H/24)
  ctx.lineTo(x+17*W/24, y+12*H/24)
  ctx.lineTo(x+1*W/24, y+12*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+12*H/24)
  ctx.lineTo(x+6*W/24, y+20*H/24)
  ctx.lineTo(x+22.5*W/24, y+20*H/24)
  ctx.lineTo(x+17*W/24, y+12*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+11*H/24)
  ctx.lineTo(x+7*W/24, y+5*H/24)
  ctx.lineTo(x+20*W/24, y+5*H/24)
  ctx.lineTo(x+16*W/24, y+11*H/24)
  ctx.lineTo(x+3*W/24, y+11*H/24)
  ctx.stroke()
//1
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+12*H/24)
  ctx.lineTo(x+1*W/24, y+13*H/24)
  ctx.lineTo(x+6*W/24, y+21*H/24)
  ctx.lineTo(x+22.5*W/24, y+21*H/24)
  ctx.lineTo(x+22.5*W/24, y+20*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+21*H/24)
  ctx.lineTo(x+6*W/24, y+20*H/24)
  ctx.stroke()

  //3 trackpad
  ctx.beginPath()
  ctx.moveTo(x+10.5*W/24, y+18*H/24)
  ctx.lineTo(x+12*W/24, y+19.5*H/24)
  ctx.lineTo(x+17*W/24, y+19.5*H/24)
  ctx.lineTo(x+15.5*W/24, y+18*H/24)
  ctx.lineTo(x+10.5*W/24, y+18*H/24)
  ctx.stroke()
  //4 keys
  let i = 0, inset = 2*W/24
  for (; i < 9; i++) {
    key2At(x+3*W/24 + i * 1.5 * W/24, y+13*H/24, 1.5*W/24,color)
    key2At(x+4*W/24 + i * 1.5 * W/24, y+14*H/24, 1.5*W/24,color)
    key2At(x+5*W/24 + i * 1.5 * W/24, y+15*H/24, 1.5*W/24,color)
    key2At(x+5*W/24 + i * 1.5 * W/24, y+16*H/24, 1.5*W/24,color)
  }
}

function key2At (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  //1
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+2*H/24)
  ctx.lineTo(x+16*W/24, y+2*H/24)
  ctx.lineTo(x+23*W/24, y+9*H/24)
  ctx.lineTo(x+9*W/24, y+9*H/24)
  ctx.lineTo(x+2*W/24, y+2*H/24)
  ctx.lineTo(x+2*W/24, y+9*H/24)
  ctx.lineTo(x+9*W/24, y+16*H/24)
  ctx.lineTo(x+9*W/24, y+9*H/24)
  ctx.lineTo(x+23*W/24, y+9*H/24)
  ctx.lineTo(x+23*W/24, y+16*H/24)
  ctx.lineTo(x+9*W/24, y+16*H/24)
  ctx.lineTo(x+9*W/24, y+15*H/24)
  ctx.stroke()
}

function dyslexiaAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "round"
  ctx.lineJoin = "bevel"
  let m = "dyslexia"//randomPick(words.split("\n").join(",").match(/\b[a-z]{8}\b/g))
  let reg = new RegExp("\\b["+m+"]{8}\\b","g")
  let p = words.split("\n").join(",").match(reg).slice(0,3)
  let letters = shuffle(m.split(""))
  let og = m.split("")
  let fs = 5*W/24
  ctx.font = "900 italic "+fs+"pt Garamond"
  let pos = [], i = 0, x0 = fs*1, y0 = fs*1.1, inc = W/4.5
  for (; i < og.length; i++) {
    pos.push(new point(x+x0+pet(fs*1.1), y+y0+pet(fs*1.1)))
    if (i % 2) {
      y0 += inc 
      x0 = fs*1
    } else
      x0 = W-fs*2
  } 
  pos = shuffle(pos)
  let w = ctx.measureText(og[0]).width
  ctx.fillText(og[0], pos[0].x, pos[0].y)
  i = 1
  for (; i < og.length; i++) {
    ctx.fillText(og[i], pos[i].x, pos[i].y)
    w = ctx.measureText(og[i]).width
    ctx.beginPath()
    ctx.moveTo(pos[i-1].x+fs/4, pos[i-1].y-fs/4)
    ctx.lineTo(pos[i].x+fs/4,   pos[i].y-fs/4)
    ctx.stroke()
  }
}

function sunporchAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+0*H/24)
  ctx.lineTo(x+4*W/24, y+4*H/24)
  ctx.lineTo(x+24*W/24, y+4*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+4*H/24)
  ctx.lineTo(x+4*W/24, y+17*H/24)
  ctx.lineTo(x+0*W/24, y+19*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+5*H/24)
  ctx.lineTo(x+11*W/24, y+5*H/24)
  ctx.lineTo(x+11*W/24, y+17*H/24)
  ctx.lineTo(x+5*W/24, y+17*H/24)
  ctx.lineTo(x+5*W/24, y+5*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+5*H/24)
  ctx.lineTo(x+12*W/24, y+17*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+18.25*H/24)
  ctx.lineTo(x+0.5*W/24, y+22*H/24)
  ctx.lineTo(x+9*W/24, y+23*H/24)
  ctx.lineTo(x+11*W/24, y+18.4*H/24)
  ctx.lineTo(x+5*W/24, y+18.25*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+6*H/24)
  ctx.lineTo(x+6*W/24, y+10*H/24)
  ctx.lineTo(x+10*W/24, y+10*H/24)
  ctx.lineTo(x+10*W/24, y+6*H/24)
  ctx.lineTo(x+6*W/24, y+6*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+10*H/24)
  ctx.lineTo(x+6*W/24, y+15*H/24)
  ctx.lineTo(x+10*W/24, y+15*H/24)
  ctx.lineTo(x+10*W/24, y+10*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+11.2*H/24)
  ctx.lineTo(x+1*W/24, y+11*H/24)
  ctx.lineTo(x+1*W/24, y+8*H/24)
  ctx.lineTo(x+0*W/24, y+7.8*H/24)
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+14.3*H/24)
  ctx.lineTo(x+1*W/24, y+14*H/24)
  ctx.lineTo(x+1*W/24, y+12*H/24)
  ctx.lineTo(x+0*W/24, y+12.3*H/24)
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+6.75*H/24)
  ctx.lineTo(x+1*W/24, y+7*H/24)
  ctx.lineTo(x+1*W/24, y+6*H/24)
  ctx.lineTo(x+0*W/24, y+5.75*H/24)
  ctx.stroke()

  //41
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+15*H/24)
  ctx.lineTo(x+10*W/24, y+14*H/24)
  ctx.stroke()
  //11
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+15*H/24)
  ctx.lineTo(x+13*W/24, y+13*H/24)
  ctx.lineTo(x+20*W/24, y+13*H/24)
  ctx.lineTo(x+20*W/24, y+15*H/24)
  ctx.lineTo(x+13*W/24, y+15*H/24)
  ctx.lineTo(x+14*W/24, y+15*H/24)
  ctx.lineTo(x+14*W/24, y+19*H/24)
  ctx.lineTo(x+14*W/24, y+15*H/24)
  ctx.lineTo(x+19*W/24, y+15*H/24)
  ctx.lineTo(x+19*W/24, y+18*H/24)
  ctx.lineTo(x+19*W/24, y+15*H/24)
  ctx.lineTo(x+20*W/24, y+15*H/24)
  ctx.lineTo(x+20*W/24, y+19*H/24)
  ctx.stroke()

  //32
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+15*H/24)
  ctx.lineTo(x+13*W/24, y+18*H/24)
  ctx.stroke()
  //12
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+5*H/24)
  ctx.lineTo(x+13*W/24, y+12*H/24)
  ctx.lineTo(x+20*W/24, y+12*H/24)
  ctx.lineTo(x+20*W/24, y+5*H/24)
  ctx.lineTo(x+13*W/24, y+5*H/24)
  ctx.stroke()

  //13
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+3*H/24)
  ctx.lineTo(x+5*W/24, y+0*H/24)
  ctx.stroke()

  //14
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+3*H/24)
  ctx.lineTo(x+10*W/24, y+3*H/24)
  ctx.lineTo(x+8*W/24, y+0*H/24)
  ctx.stroke()

  //15
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+0*H/24)
  ctx.lineTo(x+14*W/24, y+3*H/24)
  ctx.lineTo(x+17*W/24, y+3*H/24)
  ctx.lineTo(x+15*W/24, y+0*H/24)
  ctx.stroke()

  //16
  ctx.beginPath()
  ctx.moveTo(x+21*W/24, y+5*H/24)
  ctx.lineTo(x+21*W/24, y+12*H/24)
  ctx.lineTo(x+24*W/24, y+12*H/24)
  ctx.stroke()

  //17
  ctx.beginPath()
  ctx.moveTo(x+21*W/24, y+5*H/24)
  ctx.lineTo(x+24*W/24, y+5*H/24)
  ctx.stroke()

  //18
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+18*H/24)
  ctx.lineTo(x+21*W/24, y+18*H/24)
  ctx.lineTo(x+5*W/24, y+18*H/24)
  ctx.lineTo(x+0*W/24, y+21*H/24)
  ctx.stroke()

  //19
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+5*H/24)
  ctx.lineTo(x+16*W/24, y+8*H/24)
  ctx.lineTo(x+13*W/24, y+8*H/24)
  ctx.stroke()

  //20
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+9*H/24)
  ctx.lineTo(x+17*W/24, y+9*H/24)
  ctx.lineTo(x+19*W/24, y+5*H/24)
  ctx.stroke()

  //21
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+9*H/24)
  ctx.lineTo(x+15*W/24, y+9.4*H/24)
  ctx.lineTo(x+15*W/24, y+12*H/24)
  ctx.lineTo(x+14*W/24, y+12*H/24)
  ctx.lineTo(x+14*W/24, y+9*H/24)
  ctx.stroke()
  /43
  ctx.beginPath()
  ctx.moveTo(x+19*W/24, y+0*H/24)
  ctx.lineTo(x+20*W/24, y+3*H/24)
  ctx.lineTo(x+23*W/24, y+3*H/24)
  ctx.lineTo(x+22*W/24, y+0*H/24)
  ctx.stroke()
  //22
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+9*H/24)
  ctx.lineTo(x+19*W/24, y+9*H/24)
  ctx.lineTo(x+19*W/24, y+12*H/24)
  ctx.lineTo(x+18*W/24, y+12*H/24)
  ctx.lineTo(x+18*W/24, y+9*H/24)
  ctx.stroke()

  //23
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+9*H/24)
  ctx.lineTo(x+17*W/24, y+12*H/24)
  ctx.stroke()

  //24
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+8*H/24)
  ctx.lineTo(x+9*W/24, y+8.5*H/24)
  ctx.lineTo(x+9*W/24, y+6.5*H/24)
  ctx.lineTo(x+6*W/24, y+6*H/24)
  ctx.stroke()

  //25
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+8.5*H/24)
  ctx.lineTo(x+9*W/24, y+11.5*H/24)
  ctx.lineTo(x+6*W/24, y+11*H/24)
  ctx.stroke()
  //53
  ctx.beginPath()
  ctx.moveTo(x+10.5*W/24, y+10*H/24)
  ctx.lineTo(x+10.5*W/24, y+11*H/24)
  ctx.stroke()
  //26
  ctx.beginPath()
  ctx.moveTo(x+24*W/24, y+19*H/24)
  ctx.lineTo(x+23*W/24, y+19*H/24)
  ctx.lineTo(x+21*W/24, y+17*H/24)
  ctx.lineTo(x+23*W/24, y+17*H/24)
  ctx.lineTo(x+23*W/24, y+14*H/24)
  ctx.lineTo(x+24*W/24, y+14*H/24)
  ctx.stroke()

  //27
  ctx.beginPath()
  ctx.moveTo(x+21*W/24, y+17*H/24)
  ctx.lineTo(x+21*W/24, y+20*H/24)
  ctx.stroke()

  //28
  ctx.beginPath()
  ctx.moveTo(x+23*W/24, y+19*H/24)
  ctx.lineTo(x+23*W/24, y+22*H/24)
  ctx.stroke()

  //29
  ctx.beginPath()
  ctx.moveTo(x+23*W/24, y+6*H/24)
  ctx.lineTo(x+22*W/24, y+7*H/24)
  ctx.lineTo(x+23*W/24, y+8*H/24)
  ctx.lineTo(x+24*W/24, y+8*H/24)
  ctx.lineTo(x+23*W/24, y+8*H/24)
  ctx.lineTo(x+22*W/24, y+8*H/24)
  ctx.lineTo(x+23*W/24, y+9*H/24)
  ctx.lineTo(x+22*W/24, y+10*H/24)
  ctx.lineTo(x+23*W/24, y+11*H/24)
  ctx.lineTo(x+23*W/24, y+12*H/24)
  ctx.stroke()

  //30
  ctx.beginPath()
  ctx.moveTo(x+23*W/24, y+11*H/24)
  ctx.lineTo(x+23*W/24, y+10*H/24)
  ctx.stroke()

  //31
  ctx.beginPath()
  ctx.moveTo(x+23*W/24, y+6*H/24)
  ctx.lineTo(x+22*W/24, y+5*H/24)
  ctx.lineTo(x+23*W/24, y+6*H/24)
  ctx.lineTo(x+23*W/24, y+5*H/24)
  ctx.stroke()

   //32
  ctx.beginPath()
  ctx.moveTo(x+23*W/24, y+17*H/24)
  ctx.lineTo(x+24*W/24, y+18*H/24)
  ctx.stroke()

  //33
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+15*H/24)
  ctx.lineTo(x+14*W/24, y+18.*H/24)
  ctx.stroke()

  //34
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+13*H/24)
  cpx = x+16*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+10*H/24)
  ctx.stroke()

  //35
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+11*H/24)
  cpx = x+16*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+9*H/24)
  ctx.stroke()

  //36
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+8*H/24)
  ctx.lineTo(x+16*W/24, y+9*H/24)
  ctx.stroke()

  //37
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+9*H/24)
  cpx = x+15*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+8*H/24)
  ctx.stroke()

  //38
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+10*H/24)
  cpx = x+17*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+9*H/24)
  ctx.stroke()

  //39
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+12*H/24)
  cpx = x+16*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+11*H/24)
  ctx.stroke()

  //40
  ctx.beginPath()
  ctx.moveTo(x+22*W/24, y+6*H/24)
  cpx = x+21*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+9*H/24)
  cpx = x+21*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+10*H/24)
  cpx = x+23*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+9*H/24)
  ctx.stroke()

  //41
  ctx.beginPath()
  ctx.moveTo(x+22*W/24, y+12*H/24)
  cpx = x+22*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+10*H/24)
  ctx.stroke()

  //42
  ctx.beginPath()
  ctx.moveTo(x+21*W/24, y+11*H/24)
  cpx = x+22*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+9*H/24)
  ctx.stroke()

  //43
  ctx.beginPath()
  ctx.moveTo(x+21*W/24, y+18*H/24)
  ctx.lineTo(x+22*W/24, y+18*H/24)
  ctx.stroke()
  //49
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+3*H/24)
  ctx.lineTo(x+2*W/24, y+3.8*H/24)
  ctx.lineTo(x+2*W/24, y+4.1*H/24)
  ctx.lineTo(x+0*W/24, y+3.3*H/24)
  ctx.stroke()
  //35
  ctx.beginPath()
  ctx.moveTo(x+24*W/24, y+6*H/24)
  cpx = x+23*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+10*H/24)
  ctx.stroke()

  //36
  ctx.beginPath()
  ctx.moveTo(x+23*W/24, y+7*H/24)
  cpx = x+24*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+11*H/24)
  ctx.stroke()

  //37
  ctx.beginPath()
  ctx.moveTo(x+19*W/24, y+13*H/24)
  cpx = x+19*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+11*H/24)
  ctx.stroke()

  //38
  ctx.beginPath()
  ctx.moveTo(x+19*W/24, y+13*H/24)
  cpx = x+19*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+10*H/24)
  ctx.stroke()

  //39
  ctx.beginPath()
  ctx.moveTo(x+19*W/24, y+11*H/24)
  cpx = x+19*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+9*H/24)
  ctx.stroke()
  //44
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+13*H/24)
  cpx = x+14*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+10*H/24)
  ctx.stroke()

  //45
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+13*H/24)
  cpx = x+14*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+10*H/24)
  ctx.stroke()

  //46
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+13*H/24)
  cpx = x+14*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+9*H/24)
  ctx.stroke()

  //47
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+11*H/24)
  cpx = x+14*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+8*H/24)
  ctx.stroke()

  //48
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+12*H/24)
  cpx = x+14*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+12*H/24)
  ctx.stroke()
}

function trashAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+22*H/24)
  ctx.lineTo(x+18*W/24, y+22*H/24)
  ctx.lineTo(x+19*W/24, y+6*H/24)
  ctx.lineTo(x+5*W/24, y+6*H/24)
  ctx.lineTo(x+6*W/24, y+22*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+8*H/24)
  ctx.lineTo(x+12*W/24, y+20*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+20*H/24)
  ctx.lineTo(x+8*W/24, y+8*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+20*H/24)
  ctx.lineTo(x+16*W/24, y+8*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+6*H/24)
  ctx.lineTo(x+5*W/24, y+5*H/24)
  ctx.lineTo(x+6*W/24, y+4*H/24)
  ctx.lineTo(x+11*W/24, y+4*H/24)
  ctx.lineTo(x+11*W/24, y+3*H/24)
  ctx.lineTo(x+13*W/24, y+3*H/24)
  ctx.lineTo(x+13*W/24, y+4*H/24)
  ctx.lineTo(x+11*W/24, y+4*H/24)
  ctx.lineTo(x+18*W/24, y+4*H/24)
  ctx.lineTo(x+19*W/24, y+5*H/24)
  ctx.lineTo(x+19*W/24, y+6*H/24)
  ctx.stroke()
}

function junkAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
//1
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+5*H/24)
  ctx.lineTo(x+10*W/24, y+5*H/24)
  ctx.lineTo(x+10*W/24, y+3*H/24)
  ctx.lineTo(x+9*W/24, y+2*H/24)
  ctx.lineTo(x+2*W/24, y+2*H/24)
  ctx.lineTo(x+1*W/24, y+3*H/24)
  ctx.lineTo(x+1*W/24, y+5*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+18*H/24)
  cpx = x+19*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+13*H/24)
  cpx = x+19*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+8*H/24)
  cpx = x+9*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+13*H/24)
  cpx = x+9*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+18*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+16*H/24)
  ctx.lineTo(x+18.5*W/24, y+10*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+5*H/24)
  ctx.lineTo(x+1*W/24, y+20*H/24)
  ctx.lineTo(x+22*W/24, y+20*H/24)
  ctx.lineTo(x+22*W/24, y+4*H/24)
  ctx.lineTo(x+10*W/24, y+4*H/24)
  ctx.stroke()
}

function did_you_even_read_my_email_q_At (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  ctx.font = +(W/24)+"pt Arial" 

  ctx.globalAlpha /= 3
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+1*H/24)
  ctx.lineTo(x+23*W/24, y+1*H/24)
  ctx.lineTo(x+23*W/24, y+5*H/24)
  ctx.lineTo(x+1*W/24, y+5*H/24)
  ctx.fill()
  ctx.globalAlpha *= 3
  //2
  ctx.beginPath()
  ctx.moveTo(x+1.5*W/24, y+2.4*H/24)
  ctx.lineTo(x+2.3*W/24, y+3*H/24)
  ctx.lineTo(x+1.5*W/24, y+3.6*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+2*H/24)
  ctx.lineTo(x+5*W/24, y+2*H/24)
  ctx.lineTo(x+5*W/24, y+4*H/24)
  ctx.lineTo(x+3*W/24, y+4*H/24)
  ctx.lineTo(x+3*W/24, y+2*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+3*H/24)
  cpx = x+4*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+3*H/24)
  ctx.stroke()

  ctx.fillText("Inbox", x+6*W/24, y+4*H/24)
  ctx.fillText("Drafts", x+6*W/24, y+7.8*H/24)
  ctx.fillText("Sent Items", x+6*W/24, y+10.74*H/24)
  ctx.fillText("Deleted Items", x+6*W/24, y+14*H/24)
  ctx.fillText("Junk Email", x+6*W/24, y+17*H/24)
  //5
  pencilAt(x+2.5*W/24, y+6*H/24, 2.2*W/24, color)
  trashAt(x+2.5*W/24, y+12*H/24, 2.4*W/24, color)
  junkAt(x+3*W/24, y+15.35*H/24, 2*W/24, color)

  ctx.font = "900 "+(W/18)+"pt Arial" 
  ctx.fillText(Math.floor(10000+Math.random() * 20000), x+17*W/24, y+4*H/24)

  //2 arrow dart sent
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+11*H/24)
  ctx.lineTo(x+5*W/24, y+10*H/24)
  ctx.lineTo(x+3*W/24, y+9*H/24)
  ctx.lineTo(x+3.5*W/24, y+10*H/24)
  ctx.lineTo(x+3*W/24, y+11*H/24)
  ctx.stroke()
  ctx.beginPath()
  ctx.moveTo(x+3.5*W/24, y+10*H/24)
  ctx.lineTo(x+5*W/24, y+10*H/24)
  ctx.stroke()

  //12
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+3*H/24)
  ctx.stroke()
}

function bmAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+20*H/24)
  cpx = x+15*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+18*H/24)
  cpx = x+15*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+15*H/24)
  cpx = x+14*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+14*H/24)
  cpx = x+15*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+10*H/24)
  cpx = x+13*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+7*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+20*H/24)
  cpx = x+9*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+18*H/24)
  cpx = x+9*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+15*H/24)
  cpx = x+10*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+14*H/24)
  cpx = x+9*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+10*H/24)
  cpx = x+11*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+7*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+15*H/24)
  cpx = x+7*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+13*H/24)
  cpx = x+8*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+7*H/24)
  cpx = x+10*W/24
  cpy = y+3.5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+3.5*H/24)
  cpx = x+14*W/24
  cpy = y+3.5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+7*H/24)
  cpx = x+16*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+13*H/24)
  cpx = x+17*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+15*H/24)
  ctx.stroke()
}
function jogo_do_bichoAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.font = "900 " +W/10+"pt Times New Roman"
  ctx.fillText("E", x+3*W/24,y+3*W/24)

  ctx.font = "900 " +W/14+"pt Times New Roman"
  ctx.fillText("LEPHANTE - ", x+3*W/24+W/10,y+3*W/24)

  ctx.font = "900 " +W/10+"pt Times New Roman"
  ctx.fillText("12", x+3*W/24+W/10+(8.3*W/14),y+3*W/24)

  gopAt (x+5*W/24,y+3.5*W/24,W/1.5,color)
  dieAt(x+4*W/24, y+15*H/24, W/3,color)
  dieAt(x+13*W/24, y+15*H/24, W/3,color)

}

function gopAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+19*W/24, y+4*H/24)
  ctx.lineTo(x+19*W/24, y+10*H/24)
  ctx.lineTo(x+4*W/24, y+10*H/24)
  ctx.lineTo(x+4*W/24, y+1*H/24)
  ctx.lineTo(x+7*W/24, y+1*H/24)
  ctx.lineTo(x+7*W/24, y+4*H/24)
  ctx.lineTo(x+12*W/24, y+4*H/24)
  ctx.lineTo(x+12*W/24, y+1*H/24)
  ctx.lineTo(x+15*W/24, y+1*H/24)
  ctx.lineTo(x+15*W/24, y+5*H/24)
  cpx = x+15*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+6*H/24)
  cpx = x+16*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+1*H/24)
  cpx = x+21*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+4*H/24)
  cpx = x+20*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+4*H/24)
  cpx = x+19.5*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+4*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+10.5*H/24)
  cpx = x+19*W/24
  cpy = y+10.5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+10.5*H/24)
  cpx = x+19*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+17*H/24)
  cpx = x+4*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+11*H/24)
  ctx.stroke()

  pstarAt(x+5.5*W/24, y+11.25*H/24, W/6,color)
  //4
  pstarAt(x+9.5*W/24, y+11.25*H/24,  W/6,color)
  //5
  pstarAt(x+13.5*W/24, y+11.25*H/24,  W/6,color)

}

function pstarAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+1*H/24)
  ctx.lineTo(x+15*W/24, y+9*H/24)
  ctx.lineTo(x+22*W/24, y+9*H/24)
  ctx.lineTo(x+16*W/24, y+14*H/24)
  ctx.lineTo(x+19*W/24, y+23*H/24)
  ctx.lineTo(x+12*W/24, y+17*H/24)
  ctx.lineTo(x+5*W/24, y+23*H/24)
  ctx.lineTo(x+8*W/24, y+14*H/24)
  ctx.lineTo(x+2*W/24, y+9*H/24)
  ctx.lineTo(x+9*W/24, y+9*H/24)
  ctx.lineTo(x+12*W/24, y+1*H/24)
  ctx.stroke()
}

function bobberAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = "#000000"
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let cx = x+W/2, cy = y+H/2, angle = pet(180)
  let p = [], cp = [], lastp = []

  ctx.globalAlpha /= 3
  //5
  ctx.beginPath()
  p = rotatePoint(x+2*W/24, y+12*H/24 ,cx,cy,0)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+22*W/24, y+12*H/24 ,cx,cy,0)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+22*W/24, y+24*H/24 ,cx,cy,0)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+2*W/24, y+24*H/24 ,cx,cy,0)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+2*W/24, y+12*H/24 ,cx,cy,0)
  ctx.lineTo(p[0],p[1])
  ctx.fill()
  ctx.globalAlpha *= 3

  //1
  ctx.fillStyle = "#ff0000"
   ctx.beginPath()
  p = rotatePoint(x+6*W/24, y+13*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+6*W/24
  cpy = y+19*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24, y+19*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+18*W/24
  cpy = y+19*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+18*W/24, y+13*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  p = rotatePoint(x+18.5*W/24, y+13*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+18.5*W/24, y+12.5*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+5.5*W/24, y+12.5*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+5.5*W/24, y+13*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+6*W/24, y+13*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.fill()

  //2
  ctx.fillStyle = "#ffffff"
  ctx.beginPath()
  p = rotatePoint(x+6*W/24, y+12.5*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+6*W/24
  cpy = y+6.5*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24, y+6.5*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+18*W/24
  cpy = y+6.5*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+18*W/24, y+12.5*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()

  //3
  ctx.fillStyle = "#ff0000"
  ctx.beginPath()
  p = rotatePoint(x+11*W/24, y+6.5*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+13*W/24, y+6.5*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+13*W/24, y+5*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+11*W/24, y+5*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+11*W/24, y+5*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.fill()

  //4
  ctx.beginPath()
  p = rotatePoint(x+12*W/24, y+5*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  ctx.lineTo(x+12*W/24, y+0*H/24)
  ctx.stroke()

  ctx.beginPath()
  p = rotatePoint(x+12*W/24, y+19*H/24 ,cx,cy,angle)
  ctx.arc(p[0],p[1],W/60,0,Math.PI*2)
  ctx.fill()
  //5
  ctx.beginPath()
  p = rotatePoint(x+12*W/24, y+19.2*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  ctx.lineTo(x+12*W/24, y+24*H/24)
  ctx.stroke()

  ctx.beginPath()
  p = rotatePoint(x+12*W/24, y+5*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+12*W/24
  cpy = y+4*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+13*W/24, y+3*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()

  //3
  ctx.beginPath()
  p = rotatePoint(x+12*W/24, y+19*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+11*W/24
  cpy = y+19*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+11*W/24, y+20*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()
}

function bathtub_madonnaAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  //1 inner path
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+8*H/24)
  cpx = x+12*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+8*H/24)
  cpx = x+9.5*W/24
  cpy = y+8.5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+11*H/24)
  cpx = x+11*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+14*H/24)
  cpx = x+9*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+18*H/24)
  cpx = x+9*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+20*H/24)
  cpx = x+15*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+18*H/24)
  cpx = x+15*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+14*H/24)
  cpx = x+13*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+11*H/24)
  cpx = x+14.5*W/24
  cpy = y+8.5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+8*H/24)
  ctx.stroke()
//1
  ctx.beginPath()
  ctx.moveTo(x+14.6*W/24, y+15*H/24)
  cpx = x+16.5*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16.5*W/24, y+13*H/24)
  cpx = x+16.5*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+7*H/24)
  cpx = x+14*W/24
  cpy = y+3.5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+3.5*H/24)
  cpx = x+10*W/24
  cpy = y+3.5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+7*H/24)
  cpx = x+7.5*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7.5*W/24, y+13*H/24)
  cpx = x+7.5*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9.4*W/24, y+15*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+5*H/24)
  cpx = x+11*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+7*H/24)
  cpx = x+13*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+5*H/24)
  ctx.stroke()

  // globe
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+20*H/24)
  cpx = x+15*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+23*H/24)
  cpx = x+12*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+23*H/24)
  cpx = x+9*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+20*H/24)
  ctx.stroke()

  //2 hands
  ctx.beginPath()
  ctx.moveTo(x+8.5*W/24, y+14.8*H/24)
  cpx = x+8.5*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+16*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+16*H/24)
  cpx = x+15.5*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15.5*W/24, y+14.8*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+5*H/24)
  cpx = x+11*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+7*H/24)
  cpx = x+13*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+5*H/24)
  ctx.stroke()

  //1
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+23*H/24)
  cpx = x+3*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+8*H/24)
  cpx = x+3*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+1*H/24)
  cpx = x+21*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+8*H/24)
  cpx = x+21*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+23*H/24)
  cpx = x+19*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+23*H/24)
  cpx = x+19*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+8*H/24)
  cpx = x+19*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+3*H/24)
  cpx = x+5*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+8*H/24)
  cpx = x+5*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+23*H/24)
  cpx = x+3*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+23*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+23*H/24)
  cpx = x+6*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9.4*W/24, y+21*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+14.6*W/24, y+21*H/24)
  cpx = x+18*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+23*H/24)
  ctx.stroke()
  //1 feet
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+20*H/24)
  cpx = x+11*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+21*H/24)
  cpx = x+12*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+20*H/24)
  ctx.stroke()
  //2
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+21*H/24)
  cpx = x+13*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+20*H/24)
  ctx.stroke()
  //2
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+20*H/24)
  ctx.lineTo(x+13*W/24, y+20*H/24)
  ctx.stroke()
}

function automatic_writingAt (x,y,W,color) {
  let i = 0
  for (; i < 8; i++)
    automaticAt (x+pet(W/24),y+(i*W/11),W+pet(W/14),color)
}

function burdenAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  x -= 1.5*W/24
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+20*H/24)
  ctx.lineTo(x+22*W/24, y+19*H/24)
  ctx.lineTo(x+22*W/24, y+5*H/24)
  ctx.lineTo(x+12*W/24, y+3*H/24)
  ctx.lineTo(x+2*W/24, y+5*H/24)
  ctx.lineTo(x+2*W/24, y+19*H/24)
  ctx.lineTo(x+12*W/24, y+20*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+3*H/24)
  ctx.lineTo(x+12*W/24, y+20*H/24)
  ctx.stroke()
  
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+19.48*H/24)
  ctx.lineTo(x+2*W/24, y+23*H/24)
  ctx.lineTo(x+12*W/24, y+24*H/24)
  ctx.lineTo(x+22*W/24, y+23*H/24)
  ctx.lineTo(x+18*W/24, y+19.48*H/24)
  ctx.lineTo(x+12*W/24, y+20*H/24)
  ctx.globalAlpha /= 3
  ctx.fill()
  ctx.globalAlpha *= 3
  bent_figureAt (x+9*W/24,y+18*H/24,W/4,color)
}

function on_the_spectrumAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "round"
  ctx.lineJoin = "bevel"

  let grad = ctx.createLinearGradient(x,y,x+W,y)
  grad.addColorStop(0, "red")
  grad.addColorStop(0.4, "yellow")
  grad.addColorStop(0.5, "orange")
  grad.addColorStop(0.6, "green")
  grad.addColorStop(0.8, "blue")
  grad.addColorStop(1, "purple")
  ctx.fillStyle = grad
  ctx.fillRect(x, y+H/3, W, H/3)

  ctx.fillStyle = color
  let x0 = x + Math.random() * W *0.9 +W/24
  let hex = colorOf (ctx,x0,  y+H/3+6,4)
  let rgb = [hexToR(hex), hexToG(hex), hexToB(hex)]
  let hsv = rgbtohsv(rgb[0],rgb[1],rgb[2])
  let wave = Math.floor(650 - 250 / 270 *hsv[0]) + "nm"
  ctx.font = "800 "+W/24+"pt Garamond "
  let width = ctx.measureText(wave).width/2
  ctx.fillText(wave, x0-width, y+H/3-1.4*H/24-5)
  ctx.beginPath()
  ctx.moveTo(x0,  y+H/3)
  ctx.lineTo(x0-W/24,  y+H/3-H/24-5)
  ctx.lineTo(x0+W/24,  y+H/3-H/24-5)
  ctx.closePath()
  ctx.fill()
}

function double_slitAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "round"
  ctx.lineJoin = "bevel"
  //1
  ctx.setLineDash([1,13])//[W/72,W/48])
  ctx.beginPath()
  ctx.moveTo(x+23*W/24, y+21*H/24)
  ctx.lineTo(x+18*W/24, y+17*H/24)
  ctx.stroke()
  ctx.setLineDash([])
  //2
  ctx.beginPath()
  ctx.moveTo(x+17.8*W/24, y+15.2*H/24)
  ctx.lineTo(x+17.8*W/24, y+19.2*H/24)
  ctx.stroke()
  //3
  ctx.beginPath()
  ctx.moveTo(x+18.3*W/24, y+15*H/24)
  ctx.lineTo(x+18.3*W/24, y+19*H/24)
  ctx.stroke()
  //7
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+16*H/24)
  ctx.lineTo(x+22*W/24, y+12*H/24)
  ctx.lineTo(x+22*W/24, y+18*H/24)
  ctx.lineTo(x+14*W/24, y+22*H/24)
  ctx.lineTo(x+14*W/24, y+16*H/24)
  ctx.stroke()

  //6
  ctx.save()
  let col2 = color
  col2 = "rgba("+hexToR(col2)+", "+hexToG(col2)+", "+hexToB(col2)+", 0.0)";// transparent
  let grad = ctx.createLinearGradient(x,y,x+W,y)
  grad.addColorStop(0, col2)
  grad.addColorStop(0.1, color)
  grad.addColorStop(0.2, col2)
  grad.addColorStop(0.3, color)
  grad.addColorStop(0.4, col2)
  grad.addColorStop(0.5, color)
  grad.addColorStop(0.6, col2)
  grad.addColorStop(0.7, color)
  grad.addColorStop(0.8, col2)
  grad.addColorStop(0.9, color)

  grad.addColorStop(1, col2)
 
  ctx.fillStyle = grad
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+20*H/24)
  ctx.lineTo(x+24*W/24, y+9*H/24)
  ctx.lineTo(x+24*W/24, y+0*H/24)
  ctx.lineTo(x+0*W/24, y+11*H/24)
  ctx.lineTo(x+0*W/24, y+20*H/24)
  ctx.closePath()
  //ctx.clip()
  ctx.fill()
  ctx.restore()
}

function bent_figureAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  y -= 0.3*W/24
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+18*H/24)
  cpx = x+14*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+18*H/24)
  ctx.lineTo(x+17*W/24, y+14*H/24)
  cpx = x+18*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+9*H/24)
  cpx = x+14*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+10*H/24)
  cpx = x+5*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+18*H/24)
  ctx.stroke()
  
  //4
  let x0 = x
  x += 0.1 + W/40
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+10*H/24)
  cpx = x+17*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+8*H/24)
  cpx = x+22*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+9*H/24)
  cpx = x+22*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+11*H/24)
  cpx = x+17*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+10*H/24)
  ctx.stroke()
  x = x0
  //5
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+11*H/24)
  ctx.lineTo(x+14*W/24, y+16*H/24)
  ctx.lineTo(x+16*W/24, y+19*H/24)
  ctx.lineTo(x+15*W/24, y+20*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+18*H/24)
  ctx.lineTo(x+9*W/24, y+20*H/24)
  ctx.lineTo(x+7*W/24, y+22*H/24)
  ctx.lineTo(x+8.5*W/24, y+22*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+18*H/24)
  ctx.lineTo(x+12*W/24, y+20*H/24)
  ctx.lineTo(x+10*W/24, y+22*H/24)
  ctx.lineTo(x+11.8*W/24, y+22*H/24)
  ctx.stroke()
}

function autoAt () {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let W = 55 + document.getElementById("featuresize").value*10
  let H = W, cpx, cpy, points = []
  console.log(W)
  let lw = 0.5 + Math.log(W)/6
  console.log(lw)
  ctx.lineWidth = lw
  color = getselectedcolor()
  ctx.lineWidth = lw
  ctx.strokeStyle = color
  ctx.lineCap = "round"
  ctx.lineJoin = "bevel" 
  x = LASTCLICK[0], y = LASTCLICK[1]
  let x0 = x, y0 = y, count =0
  W/=12, H/=12
  let i = 0, offset = 12*W/24
  let d = W/8
  let D = pet(d)
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+24*H/24)
  let max = randomPick([5,2,3,2,4])
  for (; i < max; i++) {
      D = pet(d)
      if (Math.random() > 0.15) {
        cpx = x+21*W/24+pet(d)
        cpy = y+12*H/24+pet(d)
        ctx.quadraticCurveTo(cpx, cpy, x+24*W/24+pet(d), y+4*H/24+pet(d))
        cpx = x+24*W/24+pet(d)
        cpy = y+0*H/24+pet(d)
        ctx.quadraticCurveTo(cpx, cpy, x+19*W/24+pet(d), y+2*H/24+pet(d))
        cpx = x+1*W/24+pet(d/4)
        cpy = y+20*H/24+pet(d/4)
        ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+24*H/24)
      } else {
        cpx = x+17*W/24+pet(d)
        cpy = y+24*H/24+pet(d)
        ctx.quadraticCurveTo(cpx, cpy, x+24*W/24+pet(d), y+12*H/24+pet(d))
        cpx = x+24*W/24+pet(d)
        cpy = y+1*H/24+pet(d)
        ctx.quadraticCurveTo(cpx, cpy, x+13*W/24+pet(d), y+1*H/24+pet(d))
        cpx = x+3*W/24+pet(d)
        cpy = y+4*H/24+pet(d)
        ctx.quadraticCurveTo(cpx, cpy, x+2*W/24+pet(d), y+12*H/24+pet(d))
        cpx = x+2*W/24+pet(d)
        cpy = y+21*H/24+pet(d)
        ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+24*H/24)
      }
      x += offset
      LASTCLICK[0] += offset
      if (x >= canvas.width) {
        LASTCLICK[0] = 0
        //x = 0
        LASTCLICK[1] += H*1.1
        break;
      }
  }
  ctx.stroke()
}

function automaticAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let lw = 1 + document.getElementById("featuresize").value/50
  ctx.lineWidth = lw
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel" 
  y += 2*H/24, x += W/48
  let x0 = x, y0 = y, count =0
  W/=12, H/=12
  let i = 0, offset = 12*W/24
  let d = W/12
  let D = pet(d)
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+22*H/24)
  for (; i < 9; i++) {
    if (Math.random() > 0.25) {
      D = pet(d)
      cpx = x+7*W/24+D
      cpy = y+22*H/24+D
      D = pet(d)
      ctx.quadraticCurveTo(cpx, cpy, x+10*W/24+D, y+7*H/24+D)
      D = pet(d)
      cpx = x+10*W/24+D
      cpy = y+2*H/24+D
      D = pet(d)
      ctx.quadraticCurveTo(cpx, cpy, x+8*W/24+D, y+2*H/24+D)
      D = pet(d)
      cpx = x+6*W/24+D
      cpy = y+2*H/24+D
      D = pet(d)
      ctx.quadraticCurveTo(cpx, cpy, x+6*W/24+D, y+16*H/24+D)
      D = pet(d)
      cpx = x+6*W/24+D
      cpy = y+21*H/24+D
      ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+22*H/24)
      x += offset
      count++
      if (count > 19)
        break;
    }
    if (Math.random() > 0.7) {
      D = pet(d)
      cpx = x+6*W/24+D
      cpy = y+22*H/24+D
      D = pet(d)
      ctx.quadraticCurveTo(cpx, cpy, x+10*W/24+D, y+10*H/24+D)
      D = pet(d)
      cpx = x+4*W/24+D
      cpy = y+19*H/24+D
      ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+22*H/24)
      x += offset
      count++
      if (count > 19)
        break;
    }
    if (Math.random() > 0.7) {
      cpx = x+10*W/24+pet(d)
      cpy = y+22*H/24+pet(d)
      ctx.quadraticCurveTo(cpx, cpy, x+12*W/24+pet(d), y+16*H/24+pet(d))
      cpx = x+12*W/24+pet(d)
      cpy = y+10*H/24+pet(d)
      ctx.quadraticCurveTo(cpx, cpy, x+7*W/24+pet(d), y+10*H/24+pet(d))
      cpx = x+2*W/24+pet(d)
      cpy = y+10*H/24+pet(d)
      ctx.quadraticCurveTo(cpx, cpy, x+2*W/24+pet(d), y+16*H/24+pet(d))
      cpx = x+2*W/24+pet(d)
      cpy = y+22*H/24+pet(d)
      ctx.quadraticCurveTo(cpx, cpy, x+12*W/24+pet(d), y+22*H/24+pet(d))
      x += offset
      count++
      if (count > 19)
        break;
    }
    if (Math.random() > 0.8) { //c
      cpx = x+2*W/24+pet(d)
      cpy = y+22*H/24+pet(d)
      ctx.quadraticCurveTo(cpx, cpy, x+2*W/24+pet(d), y+20*H/24+pet(d))
      cpx = x+3*W/24+pet(d)
      cpy = y+12*H/24+pet(d)
      ctx.quadraticCurveTo(cpx, cpy, x+6*W/24+pet(d), y+12*H/24+pet(d))
      cpx = x+10*W/24+pet(d)
      cpy = y+11*H/24+pet(d)
      ctx.quadraticCurveTo(cpx, cpy, x+8*W/24+pet(d), y+17*H/24+pet(d))
      cpx = x+9*W/24+pet(d)
      cpy = y+11*H/24+pet(d)
      ctx.quadraticCurveTo(cpx, cpy, x+5*W/24+pet(d), y+12*H/24+pet(d))
      cpx = x+2*W/24+pet(d)
      cpy = y+12*H/24+pet(d)
      ctx.quadraticCurveTo(cpx, cpy, x+2*W/24+pet(d), y+18*H/24+pet(d))
      cpx = x+4*W/24+pet(d)
      cpy = y+22*H/24+pet(d)
      ctx.quadraticCurveTo(cpx, cpy, x+12*W/24+pet(d), y+22*H/24+pet(d))
      x += offset
      count++
      if (count > 19)
        break;
    }
    if (Math.random() > 0.7) {
      cpx = x+2*W/24+pet(d)
      cpy = y+22*H/24+pet(d)
      ctx.quadraticCurveTo(cpx, cpy, x+4*W/24+pet(d), y+12*H/24+pet(d))
      cpx = x+2*W/24+pet(d)
      cpy = y+22*H/24+pet(d)
      ctx.quadraticCurveTo(cpx, cpy, x+5*W/24+pet(d), y+22*H/24+pet(d))
      cpx = x+8*W/24+pet(d)
      cpy = y+22*H/24+pet(d)
      ctx.quadraticCurveTo(cpx, cpy, x+10*W/24+pet(d), y+12*H/24+pet(d))
      cpx = x+8*W/24+pet(d)
      cpy = y+22*H/24+pet(d)
      ctx.quadraticCurveTo(cpx, cpy, x+12*W/24+pet(d), y+22*H/24+pet(d))
      x += offset
      count++
      if (count > 19)
        break;
    }
    if (Math.random() > 0.7) { // j,y
      cpx = x+3*W/24+pet(d)
      cpy = y+22*H/24+pet(d)
      ctx.quadraticCurveTo(cpx, cpy, x+4*W/24+pet(d), y+18*H/24+pet(d))
      cpx = x+4*W/24+pet(d)
      cpy = y+12*H/24+pet(d)
      ctx.quadraticCurveTo(cpx, cpy, x+8*W/24+pet(d), y+12*H/24+pet(d))
      cpx = x+12*W/24+pet(d)
      cpy = y+12*H/24+pet(d)
      ctx.quadraticCurveTo(cpx, cpy, x+7*W/24+pet(d), y+22*H/24+pet(d))
      cpx = x+1*W/24+pet(d)
      cpy = y+27*H/24+pet(d)
      ctx.quadraticCurveTo(cpx, cpy, x+1*W/24+pet(d), y+29*H/24+pet(d))
      cpx = x+1*W/24+pet(d)
      cpy = y+32*H/24+pet(d)
      ctx.quadraticCurveTo(cpx, cpy, x+3*W/24+pet(d), y+32*H/24+pet(d))
      cpx = x+6*W/24+pet(d)
      cpy = y+32*H/24+pet(d)
      ctx.quadraticCurveTo(cpx, cpy, x+7*W/24+pet(d), y+33*H/24+pet(d))
      cpx = x+7*W/24+pet(d)
      cpy = y+20*H/24+pet(d)
      ctx.quadraticCurveTo(cpx, cpy, x+9*W/24+pet(d), y+20*H/24+pet(d))
      cpx = x+11*W/24+pet(d)
      cpy = y+22*H/24+pet(d)
      ctx.quadraticCurveTo(cpx, cpy, x+12*W/24+pet(d), y+22*H/24+pet(d))
      x += offset
      count+=2
      if (count > 19)
        break;
    }
    if (Math.random() > 0.7) { // m
      cpx = x+3*W/24
      cpy = y+22*H/24
      ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+16*H/24)
      cpx = x+9*W/24
      cpy = y+12*H/24
      ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+12*H/24)
      cpx = x+16*W/24
      cpy = y+12*H/24
      ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+21*H/24)
      cpx = x+7*W/24
      cpy = y+22*H/24
      ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+16*H/24)
      cpx = x+15*W/24
      cpy = y+12*H/24
      ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+12*H/24)
      cpx = x+22*W/24
      cpy = y+12*H/24
      ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+17*H/24)
      cpx = x+17*W/24
      cpy = y+21*H/24
      ctx.quadraticCurveTo(cpx, cpy, x+24*W/24, y+22*H/24)
      x += offset*2
      count++
      if (count > 19)
        break;
    }
    if (Math.random() > 0.7) { // w
      cpx = x+4*W/24+pet(d)
      cpy = y+20*H/24+pet(d)
      ctx.quadraticCurveTo(cpx, cpy, x+7*W/24+pet(d), y+12*H/24+pet(d))
      cpx = x+5*W/24+pet(d)
      cpy = y+18*H/24+pet(d)
      ctx.quadraticCurveTo(cpx, cpy, x+5*W/24+pet(d), y+20*H/24+pet(d))
      cpx = x+5*W/24+pet(d)
      cpy = y+22*H/24+pet(d)
      ctx.quadraticCurveTo(cpx, cpy, x+8*W/24+pet(d), y+22*H/24+pet(d))
      cpx = x+11*W/24+pet(d)
      cpy = y+20*H/24+pet(d)
      ctx.quadraticCurveTo(cpx, cpy, x+14*W/24+pet(d), y+12*H/24+pet(d))
      cpx = x+12*W/24+pet(d)
      cpy = y+19*H/24+pet(d)
      ctx.quadraticCurveTo(cpx, cpy, x+12*W/24+pet(d), y+21*H/24+pet(d))
      cpx = x+12*W/24+pet(d)
      cpy = y+22*H/24+pet(d)
      ctx.quadraticCurveTo(cpx, cpy, x+15*W/24+pet(d), y+22*H/24+pet(d))
      cpx = x+18*W/24+pet(d)
      cpy = y+21*H/24+pet(d)
      ctx.quadraticCurveTo(cpx, cpy, x+21*W/24+pet(d), y+12*H/24+pet(d))
      cpx = x+19*W/24+pet(d)
      cpy = y+18*H/24+pet(d)
      ctx.quadraticCurveTo(cpx, cpy, x+19*W/24+pet(d), y+20*H/24+pet(d))
      cpx = x+19*W/24+pet(d)
      cpy = y+22*H/24+pet(d)
      ctx.quadraticCurveTo(cpx, cpy, x+24*W/24, y+22*H/24)
      x += offset*2
      count += 2
      if (count > 19)
        break;
    }
    if (Math.random() > 0.7) { // n
      cpx = x+2*W/24+pet(d)
      cpy = y+22*H/24+pet(d)
      ctx.quadraticCurveTo(cpx, cpy, x+4*W/24+pet(d), y+15*H/24+pet(d))
      cpx = x+5*W/24+pet(d)
      cpy = y+11*H/24+pet(d)
      ctx.quadraticCurveTo(cpx, cpy, x+7*W/24+pet(d), y+11*H/24+pet(d))
      cpx = x+10*W/24+pet(d)
      cpy = y+11*H/24+pet(d)
      ctx.quadraticCurveTo(cpx, cpy, x+8*W/24+pet(d), y+15*H/24+pet(d))
      cpx = x+6*W/24+pet(d)
      cpy = y+22*H/24+pet(d)
      ctx.quadraticCurveTo(cpx, cpy, x+12*W/24+pet(d), y+22*H/24+pet(d))
      x += offset
      count++
      if (count > 19)
        break;
    }
    if (Math.random() > 0.6) { // dots and dashes
      x -= offset
      ctx.moveTo(x+4*W/24+pet(d*3), y+6*H/24+pet(d*3))
      cpx = x+7*W/24+pet(d*2)
      cpy = y+10*H/24+pet(d*2)
      ctx.quadraticCurveTo(cpx, cpy, x+9*W/24+pet(d*3), y+7*H/24+pet(d*3))
      ctx.moveTo(x+12*W/24, y+22*H/24)
      x += offset
    }
    if (Math.random() > 0.5) { // space
      x += offset
      ctx.moveTo(x+12*W/24, y+22*H/24)
      count++
      if (count > 19)
        break;
    }
  }
  ctx.stroke()
}

function up_lateAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  BRIGHT = true
  sortByBrightness()
  let colors = getCurrentPalette()
  //1
  let col2 = "#001122"
  //col2 = "rgba("+hexToR(col2)+", "+hexToG(col2)+", "+hexToB(col2)+", 0.0)";// transparent
  let grad = ctx.createLinearGradient(x,y,x,y+H*1.2)
  grad.addColorStop(0, col2);
  grad.addColorStop(1, "#003023");
  ctx.fillStyle = grad
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+0*H/24)
  ctx.lineTo(x+24*W/24, y+0*H/24)
  ctx.lineTo(x+24*W/24, y+24*H/24)
  ctx.lineTo(x+0*W/24, y+24*H/24)
  ctx.fill()

  ctx.fillStyle = "#ffffff"
  let r = 0.8,mx, my
  i = 0
  for (; i < 13; i++) {
    mx = Math.random() * 24
    my = Math.random() * 12
    ctx.beginPath()
    ctx.arc(x+mx*W/24, y+my*H/24,r+pet(r/2),0,Math.PI*2)
    ctx.fill()
  } 
  //2
  ctx.fillStyle = colors[colors.length-1]
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+13*H/24)
  ctx.lineTo(x+11*W/24, y+8*H/24)
  ctx.lineTo(x+19*W/24, y+16*H/24)
  ctx.lineTo(x+19*W/24, y+19*H/24)
  ctx.lineTo(x+24*W/24, y+19*H/24)
  ctx.lineTo(x+24*W/24, y+24*H/24)
  ctx.lineTo(x+0*W/24, y+24*H/24)
  ctx.fill()

  //3
  ctx.fillStyle = colors[Math.floor(colors.length/2)]
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+13*H/24)
  ctx.lineTo(x+11*W/24, y+8*H/24)
  ctx.lineTo(x+6*W/24, y+6*H/24)
  ctx.lineTo(x+6*W/24, y+2*H/24)
  ctx.lineTo(x+3*W/24, y+2*H/24)
  ctx.lineTo(x+3*W/24, y+5*H/24)
  ctx.lineTo(x+0*W/24, y+4*H/24)
  ctx.fill()

  //4
  ctx.fillStyle = colors[1]
  if (colors.length <= 2)
    ctx.fillStyle = colors[0]
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+12*H/24)
  ctx.lineTo(x+12*W/24, y+12*H/24)
  ctx.lineTo(x+12*W/24, y+17*H/24)
  ctx.lineTo(x+8*W/24, y+17*H/24)
  ctx.fill()
}

function a_trapAt (x,y,W,color) {
  if (Math.random() > 0.5) {
    flytrapAt(x,y,W,color)
    return
  }
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+19*W/24, y+18*H/24)
  ctx.lineTo(x+21*W/24, y+13*H/24)
  ctx.lineTo(x+14*W/24, y+6*H/24)
  ctx.lineTo(x+4*W/24, y+6*H/24)
  ctx.lineTo(x+2*W/24, y+11*H/24)
  ctx.lineTo(x+9*W/24, y+18*H/24)
  ctx.stroke()
  //2
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+11*H/24)
  ctx.lineTo(x+12*W/24, y+11*H/24)
  ctx.lineTo(x+19*W/24, y+18*H/24)
  ctx.stroke()

  //1
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+18*H/24)
  ctx.lineTo(x+10*W/24, y+18*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+13.5*W/24, y+18*H/24)
  ctx.lineTo(x+19*W/24, y+18*H/24)
  ctx.stroke()
  
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+11*H/24)
  ctx.lineTo(x+14*W/24, y+6*H/24)
  ctx.stroke()

  //1
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+18*H/24)
  ctx.lineTo(x+11*W/24, y+13*H/24)
  ctx.lineTo(x+14*W/24, y+13*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+13*H/24)
  ctx.lineTo(x+9*W/24, y+11*H/24)
  ctx.stroke()

  cakeAt(x+9.8*W/24, y+15.7*H/24, 4*W/24, color)
  ctx.lineWidth *= 3
  //4
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+11*H/24)
  ctx.lineTo(x+6*W/24, y+20*H/24)
  ctx.stroke()
  //6
  ctx.globalAlpha /= 3
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+20*H/24)
  ctx.lineTo(x+12*W/24, y+20*H/24)
  ctx.lineTo(x+19*W/24, y+18*H/24)
  ctx.lineTo(x+12*W/24, y+11*H/24)
  ctx.lineTo(x+2*W/24, y+11*H/24)
  ctx.lineTo(x+9*W/24, y+18*H/24)
  ctx.lineTo(x+1*W/24, y+20*H/24)
  ctx.fill()
  ctx.globalAlpha *= 3
}

function sunsetAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  //2
  ctx.fillStyle = "#003343"
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+0*H/24)
  ctx.lineTo(x+24*W/24, y+0*H/24)
  ctx.lineTo(x+24*W/24, y+24*H/24)
  ctx.lineTo(x+0*W/24, y+24*H/24)
  ctx.fill()
  
  ctx.globalAlpha = 0.3
  let i = 0, d = 0
  for (; i < 7; i++) {
    let col2 = "#000000"
    col2 = "rgba("+hexToR(col2)+", "+hexToG(col2)+", "+hexToB(col2)+", 0.0)";// transparent
    let grad = ctx.createLinearGradient(x,y,x,y+H*1.2)
    grad.addColorStop(0, "#004060");
    grad.addColorStop(1, randomPick(['#ff5000','red','#eebc00', '#ec79af'] ));
    ctx.fillStyle = grad

    ctx.beginPath()
    ctx.moveTo(x+0*W/24, y+0*H/24)
    ctx.lineTo(x+24*W/24, y+0*H/24)
    d = -1*(Math.random() * 2*H/24)
    ctx.lineTo(x+24*W/24, y+20*H/24+d)
    cpx = x+19*W/24
    d = -1*(Math.random() * 2*H/24)
    cpy = y+18*H/24 + d
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+20*H/24)
    cpx = x+6*W/24
    d = -1*(Math.random() * 2*H/24)
    cpy = y+23*H/24 + d 
    d = -1*(Math.random() * 2*H/24)
    ctx.quadraticCurveTo(cpx, cpy, x+0*W/24, y+20*H/24+ d)
    ctx.fill()
    //d -= 7* H/24
  }
  ctx.globalAlpha = 1

  ctx.fillStyle = "#ffffff"
  let r = 0.8,mx, my
  i = 0
  for (; i < 4; i++) {
    mx = Math.random() * 24
    my = Math.random() * 9
    ctx.beginPath()
    ctx.arc(x+mx*W/24, y+my*H/24,r+pet(r/2),0,Math.PI*2)
    ctx.fill()
  }
}

function soundingsAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, angle = randomPick([0,90,-90,180])

  ctx.globalAlpha /=6
  ctx.beginPath()
  p = rotatePoint(x+11*W/24, y+17*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+13*W/24
  cpy = y+17*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+13*W/24, y+16*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+14*W/24
  cpy = y+14*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+16*W/24, y+14*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+19*W/24
  cpy = y+14*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+20*W/24, y+12*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+20*W/24
  cpy = y+10*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+15*W/24, y+10*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+12*W/24
  cpy = y+10*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+11*W/24, y+13*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+10*W/24
  cpy = y+15*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+10*W/24, y+16*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+10*W/24
  cpy = y+17*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+11*W/24, y+17*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()
  //2
  ctx.beginPath()
  p = rotatePoint(x+0*W/24, y+21*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+12*W/24
  cpy = y+20*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+13*W/24, y+18*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+16*W/24
  cpy = y+15*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+21*W/24, y+15*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+23*W/24
  cpy = y+14*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+22*W/24, y+11*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+20*W/24
  cpy = y+8*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+18*W/24, y+8*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+12*W/24
  cpy = y+8*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+10*W/24, y+11*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+9*W/24
  cpy = y+14*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+5*W/24, y+14*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+2*W/24
  cpy = y+14*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+0*W/24, y+13*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()

  //3
  ctx.beginPath()
  p = rotatePoint(x+0*W/24, y+18*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+2*W/24
  cpy = y+19*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+5*W/24, y+19*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+7*W/24
  cpy = y+19*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+7*W/24, y+17*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+7*W/24
  cpy = y+16*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+5*W/24, y+16*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+2*W/24
  cpy = y+16*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+0*W/24, y+15*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()

  //4
  ctx.beginPath()
  p = rotatePoint(x+13*W/24, y+24*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+13*W/24
  cpy = y+20*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+16*W/24, y+18*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+20*W/24
  cpy = y+16*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+24*W/24, y+16*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+24*W/24
  cpy = y+24*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+24*W/24, y+24*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()
  //5
  ctx.beginPath()
  p = rotatePoint(x+16*W/24, y+24*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+16*W/24
  cpy = y+21*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+19*W/24, y+20*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+23*W/24
  cpy = y+19*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+24*W/24, y+20*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+24*W/24
  cpy = y+24*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+24*W/24, y+24*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()

  //6
   ctx.beginPath()
  p = rotatePoint(x+19*W/24, y+24*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+19*W/24
  cpy = y+22*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+20*W/24, y+22*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+22*W/24
  cpy = y+22*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+24*W/24, y+23*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+24*W/24
  cpy = y+24*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+24*W/24, y+24*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()

  //7
  ctx.beginPath()
  p = rotatePoint(x+24*W/24, y+10*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+22*W/24
  cpy = y+9*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+21*W/24, y+7*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+21*W/24
  cpy = y+5*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+24*W/24, y+4*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()

  ctx.beginPath()
  p = rotatePoint(x+11*W/24, y+24*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+11*W/24
  cpy = y+23*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+10*W/24, y+22*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+6*W/24
  cpy = y+21*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+0*W/24, y+23*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+0*W/24
  cpy = y+24*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+0*W/24, y+24*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()

  //9
  ctx.beginPath()
  p = rotatePoint(x+3*W/24, y+24*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+5*W/24
  cpy = y+23*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+7*W/24, y+23*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+9*W/24
  cpy = y+23*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+9*W/24, y+24*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()

  //10
   ctx.beginPath()
  p = rotatePoint(x+0*W/24, y+9*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+1*W/24
  cpy = y+12*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+4*W/24, y+12*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+8*W/24
  cpy = y+12*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+9*W/24, y+9*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+10*W/24
  cpy = y+2*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+6*W/24, y+1*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+3*W/24
  cpy = y+1*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+2*W/24, y+0*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+0*W/24
  cpy = y+0*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+0*W/24, y+0*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()

  //11
  ctx.beginPath()
  p = rotatePoint(x+0*W/24, y+6*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+2*W/24
  cpy = y+7*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+2*W/24, y+9*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+2*W/24
  cpy = y+10*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+4*W/24, y+10*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+7*W/24
  cpy = y+10*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+7*W/24, y+7*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+7*W/24
  cpy = y+3*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+4*W/24, y+3*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+1*W/24
  cpy = y+3*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+0*W/24, y+2*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()

  //12
 ctx.beginPath()
  p = rotatePoint(x+4*W/24, y+8*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+6*W/24
  cpy = y+8*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+6*W/24, y+6*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+6*W/24
  cpy = y+5*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+4*W/24, y+5*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+3*W/24
  cpy = y+5*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+3*W/24, y+6*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+3*W/24
  cpy = y+8*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+4*W/24, y+8*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()

  //13
  ctx.beginPath()
  p = rotatePoint(x+9*W/24, y+0*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+10*W/24
  cpy = y+1*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+11*W/24, y+4*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+11*W/24
  cpy = y+7*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+14*W/24, y+7*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+20*W/24
  cpy = y+7*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+21*W/24, y+4*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+22*W/24
  cpy = y+2*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+22*W/24, y+0*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()

  //14
  ctx.beginPath()
  p = rotatePoint(x+11*W/24, y+0*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+12*W/24
  cpy = y+0*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+13*W/24, y+2*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+14*W/24
  cpy = y+5*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+16*W/24, y+5*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+19*W/24
  cpy = y+4*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+20*W/24, y+0*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()
//15
  ctx.beginPath()
  p = rotatePoint(x+14*W/24, y+0*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+14*W/24
  cpy = y+2*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+15*W/24, y+2*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+18*W/24
  cpy = y+2*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+18*W/24, y+0*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()

//2
  ctx.beginPath()
  p = rotatePoint(x+15*W/24, y+13*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+17*W/24
  cpy = y+13*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+17*W/24, y+12*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+17*W/24
  cpy = y+11*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+15*W/24, y+11*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+14*W/24
  cpy = y+11*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+14*W/24, y+12*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+14*W/24
  cpy = y+13*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+15*W/24, y+13*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()

  //3
  ctx.beginPath()
  p = rotatePoint(x+24*W/24, y+6*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+23*W/24
  cpy = y+6*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+23*W/24, y+7*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+23*W/24
  cpy = y+8*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+24*W/24, y+8*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()
  ctx.globalAlpha *=6
  
  LASTCLICK[0] = x+Math.random() * W
  LASTCLICK[1] = y+Math.random() * W
  ctx.save()
  ctx.beginPath()
  ctx.moveTo(x,y)
  ctx.lineTo(x+W ,y)
  ctx.lineTo(x+W ,y+W)
  ctx.lineTo(x ,y+W)
  ctx.closePath()
  ctx.clip()
  navlinesAt(x,y,W,color)
  PolarAt(x+Math.random()*W,y+Math.random()*W,W,color)
  ctx.restore()
  ctx.font = "italic "+(W/48)+"pt Garamond"
  let i = 0, j = 0
  y += W/48
  for (; i < 24; i++) {
  j = 0
    for (; j < 24; j++) {
    if (Math.random() > 0.5)
      ctx.fillText(4+Math.floor(Math.random()* 44), x + i * W/24+pet(W/52), y + j * W/24 +pet(W/52))
    }
  }
}

function blankCard (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
}


function navlinesAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, angle = randomPick([0,90,-90,180])
  ctx.lineWidth /= 2
  //1
  ctx.setLineDash([W/90,W/60])
  ctx.beginPath()
  p = rotatePoint(x+6*W/24, y+24*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+14*W/24, y+12*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+24*W/24, y+10*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()
  //2
  ctx.beginPath()
  p = rotatePoint(x+0*W/24, y+16*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+10*W/24, y+2*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+9*W/24, y+0*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()
  angle = randomPick([0,90,-90,180])
  //3
  ctx.setLineDash([W/48])
  ctx.beginPath()
  p = rotatePoint(x+0*W/24, y+4*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+10*W/24, y+12*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+18*W/24, y+0*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()
  angle = randomPick([0,90,-90,180])
  //4
  ctx.setLineDash([W/72])
  ctx.beginPath()
  p = rotatePoint(x+22*W/24, y+24*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+18*W/24, y+16*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+0*W/24, y+18*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()
  ctx.setLineDash([])
  ctx.lineWidth *= 2
}

function PolarAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  ctx.globalAlpha = (document.getElementById("opacity").value)/60
  let mode = document.getElementById("mode").value
  ctx.globalCompositeOperation = "source-over"
  ctx.fillStyle = color
  ctx.strokeStyle = ctx.fillStyle
  ctx.lineWidth = 0.5
  let cx =  x
  let cy =  y
  let angle = (Math.random() * Math.PI)/180
  let a = 0, r = W/4 + pet(W/6), ir = r*0.75
  if (W)
    r = W
  let i = 10, width = 0, iw = 0
  let inc = Math.PI/180
  ctx.beginPath()
  ctx.moveTo(x, y)
  ctx.arc(x,y,r,0,Math.PI*2)
  ctx.closePath()
  ctx.stroke()
  let x2, y2, off = 11
  for (; i < 190; i++) {
    if (i % 45 === 0)
      ir = 0
    else
    if (i % 10 === 0)
      ir = r*(0.8)
    else 
    if (i % 5 === 0)
      ir = r*(0.7)
    else 
      ir  = r* 0.9
    x2 = ir * Math.cos(a)+x;
    y2 = ir * Math.sin(a)+y;
    ctx.beginPath()
    ctx.moveTo(x2, y2)
    x2 = r * Math.cos(a)+x;
    y2 = r * Math.sin(a)+y;
    ctx.lineTo(x2 ,y2)
    ctx.closePath()
    ctx.stroke()
    a +=2* Math.PI/180
  }
  ctx.globalCompositeOperation = mode
}

function pants_on_fireAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  //1
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+2*H/24)
  ctx.lineTo(x+17*W/24, y+2*H/24)
  ctx.lineTo(x+22*W/24, y+20*H/24)
  ctx.lineTo(x+16*W/24, y+22*H/24)
  ctx.lineTo(x+12*W/24, y+8*H/24)
  ctx.lineTo(x+8*W/24, y+22*H/24)
  ctx.lineTo(x+2*W/24, y+20*H/24)
  ctx.lineTo(x+7*W/24, y+2*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+3*H/24)
  cpx = x+9*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+6*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+3*H/24)
  cpx = x+15*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+6*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+11.5*W/24, y+2*H/24)
  ctx.lineTo(x+11.5*W/24, y+6*H/24)
  ctx.lineTo(x+12.5*W/24, y+6*H/24)
  ctx.lineTo(x+12.5*W/24, y+2*H/24)
  ctx.stroke()

  let i = 0, j = 0
  let mx,my = 1
  ctx.fillStyle = color
  let lw = document.getElementById("featuresize").value
  document.getElementById("featuresize").value = 0
    //1
  if (Math.random() > 0.5) {
    flameAt(x+6*W/24, y+1*H/24, (4+pet(2))*W/24)
    ctx.fill()
  }
  //2
  if (Math.random() > 0.5) {
    flameAt(x+11*W/24, y+1*H/24, (4+pet(2))*W/24)
    ctx.fill()
  }
  //3
  if (Math.random() > 0.5) {
    flameAt(x+16*W/24, y+1*H/24, (4+pet(2))*W/24)
    ctx.fill()
  }
  //4
  if (Math.random() > 0.5) {
    flameAt(x+4*W/24, y+6*H/24, (4+pet(2))*W/24)
    ctx.fill()
  }
  //5
  if (Math.random() > 0.5) {
    flameAt(x+10*W/24, y+6*H/24, (4+pet(2))*W/24)
    ctx.fill()
  }
  //6
  if (Math.random() > 0.5) {
    flameAt(x+15*W/24, y+6*H/24, (4+pet(2))*W/24)
    ctx.fill()
  }
  //7
  if (Math.random() > 0.5) {
    flameAt(x+4*W/24, y+10*H/24, (4+pet(2))*W/24)
    ctx.fill()
  }
  //8
  if (Math.random() > 0.5) {
    flameAt(x+8*W/24, y+10*H/24, (4+pet(2))*W/24)
    ctx.fill()
  }
  //9
  if (Math.random() > 0.5) {
    flameAt(x+16*W/24, y+9*H/24, (4+pet(2))*W/24)
    ctx.fill()
  }
  //10
  if (Math.random() > 0.5) {
    flameAt(x+3*W/24, y+14*H/24, (4+pet(2))*W/24)
    ctx.fill()
  }

  //11
  if (Math.random() > 0.5) {
    flameAt(x+7*W/24, y+14*H/24, (4+pet(2))*W/24)
    ctx.fill()
  }

  //12
  if (Math.random() > 0.5) {
    flameAt(x+13*W/24, y+12*H/24, (4+pet(2))*W/24)
    ctx.fill()
  }
  //13
  if (Math.random() > 0.5) {
    flameAt(x+18*W/24, y+12*H/24, (4+pet(2))*W/24)
    ctx.fill()
  }

  //14
  if (Math.random() > 0.5) {
    flameAt(x+2*W/24, y+17*H/24, (4+pet(2))*W/24)
    ctx.fill()
  }

  //15
  if (Math.random() > 0.5) {
    flameAt(x+7*W/24, y+18*H/24, (4+pet(2))*W/24)
    ctx.fill()
  }
  //16
  if (Math.random() > 0.5) {
    flameAt(x+17*W/24, y+18*H/24, (4+pet(2))*W/24)
    ctx.fill()
  }

  //18
  if (Math.random() > 0.5) {
    flameAt(x+16*W/24, y+13*H/24, (4+pet(2))*W/24)
    ctx.fill()
  }
  document.getElementById("featuresize").value = lw
}

function pantsAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  //1
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+2*H/24)
  ctx.lineTo(x+17*W/24, y+2*H/24)
  ctx.lineTo(x+22*W/24, y+20*H/24)
  ctx.lineTo(x+16*W/24, y+22*H/24)
  ctx.lineTo(x+12*W/24, y+8*H/24)
  ctx.lineTo(x+8*W/24, y+22*H/24)
  ctx.lineTo(x+2*W/24, y+20*H/24)
  ctx.lineTo(x+7*W/24, y+2*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+3*H/24)
  cpx = x+9*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+6*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+3*H/24)
  cpx = x+15*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+6*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+11.5*W/24, y+2*H/24)
  ctx.lineTo(x+11.5*W/24, y+6*H/24)
  ctx.lineTo(x+12.5*W/24, y+6*H/24)
  ctx.lineTo(x+12.5*W/24, y+2*H/24)
  ctx.stroke()
}

function house_on_fireAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+22*H/24)
  ctx.lineTo(x+23*W/24, y+22*H/24)
  ctx.lineTo(x+23*W/24, y+10*H/24)
  ctx.lineTo(x+19*W/24, y+2*H/24)
  ctx.lineTo(x+15*W/24, y+10*H/24)
  ctx.lineTo(x+15*W/24, y+22*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+10*H/24)
  ctx.lineTo(x+1*W/24, y+10*H/24)
  ctx.lineTo(x+1*W/24, y+22*H/24)
  ctx.stroke()

  //3 chimney
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+10*H/24)
  ctx.lineTo(x+5*W/24, y+2*H/24)
  ctx.lineTo(x+8*W/24, y+2*H/24)
  ctx.stroke()
  //11
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+2*H/24)
  ctx.lineTo(x+19*W/24, y+2*H/24)
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+1*H/24)
  ctx.lineTo(x+10*W/24, y+1*H/24)
  ctx.lineTo(x+10*W/24, y+5*H/24)
  ctx.lineTo(x+8*W/24, y+5*H/24)
  ctx.lineTo(x+8*W/24, y+1*H/24)
  ctx.stroke()


  //4
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+11*H/24)
  ctx.lineTo(x+3*W/24, y+14*H/24)
  ctx.lineTo(x+6*W/24, y+14*H/24)
  ctx.lineTo(x+6*W/24, y+11*H/24)
  ctx.lineTo(x+3*W/24, y+11*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+11*H/24)
  ctx.lineTo(x+13*W/24, y+11*H/24)
  ctx.lineTo(x+13*W/24, y+14*H/24)
  ctx.lineTo(x+10*W/24, y+14*H/24)
  ctx.lineTo(x+10*W/24, y+11*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+8*H/24)
  ctx.lineTo(x+18*W/24, y+10*H/24)
  ctx.lineTo(x+20*W/24, y+10*H/24)
  ctx.lineTo(x+20*W/24, y+8*H/24)
  ctx.lineTo(x+18*W/24, y+8*H/24)
  ctx.stroke()

   //12 door
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+22*H/24)
  ctx.lineTo(x+18*W/24, y+18*H/24)
  ctx.lineTo(x+20*W/24, y+18*H/24)
  ctx.lineTo(x+20*W/24, y+22*H/24)
  ctx.stroke()

ctx.fillStyle = color
let lw = document.getElementById("featuresize").value
document.getElementById("featuresize").value = 0
  //7
 flameAt (x+1.5*W/24, y+6*H/24, 6*W/24,color)
  ctx.fill()
  //8
  flameAt(x+8.5*W/24, y+6*H/24, 6*W/24,color)
  ctx.fill()
  //9
  flameAt(x+16*W/24, y+3*H/24, 6*W/24,color)
  ctx.fill()

  flameAt(x+16*W/24, y+13.5*H/24, 6*W/24,color)
  ctx.fill()
  document.getElementById("featuresize").value = lw
}

function colanderAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "round"
  y -= 3*H/24
  //1
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+22*H/24)
  cpx = x+16*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+20*H/24)
  cpx = x+22*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+8*H/24)
  cpx = x+2*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+8*H/24)
  cpx = x+2*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+20*H/24)
  cpx = x+8*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+22*H/24)
  cpx = x+16*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+22*H/24)
  ctx.stroke()

  ctx.save()
   //4
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+20*H/24)
  cpx = x+14*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+20*H/24)
  cpx = x+22*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+8*H/24)
  cpx = x+2*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+8*H/24)
  cpx = x+2*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+20*H/24)
  ctx.closePath()
  ctx.clip()
  let i = 0, y0 = y, x0 = x, r = W/90
  let yoff = 0, xoff = 0, yinc = 2 * W/24
  for (; i < 20; i++) {
    j = 0
    for (; j < 8; j++) {
      ctx.beginPath()
      ctx.arc(x+3*W/24+xoff,y + 9*H/24+yoff+(j*yinc),r,0,Math.PI*2)
      ctx.fill()
    }
    xoff += 1*W/24
    yoff = (yoff === 0)? W/24: 0
  }
  ctx.restore()
  //2
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+8*H/24)
  cpx = x+2*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+6*H/24)
  cpx = x+4*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+8*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+8*H/24)
  cpx = x+20*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+6*H/24)
  cpx = x+22*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+8*H/24)
  ctx.stroke()

  ctx.lineWidth *= 1.5
  //1
  ctx.beginPath()
  ctx.moveTo(x+1.8*W/24, y+8*H/24)
  ctx.lineTo(x+22.2*W/24, y+8*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+7.8*W/24, y+22*H/24)
  ctx.lineTo(x+16.2*W/24, y+22*H/24)
  ctx.stroke()
}

function asteriskAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/12
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+1*H/24)
  ctx.lineTo(x+12*W/24, y+23*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+12*H/24)
  ctx.lineTo(x+22*W/24, y+12*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+20*H/24)
  ctx.lineTo(x+20*W/24, y+4*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+4*H/24)
  ctx.lineTo(x+20*W/24, y+20*H/24)
  ctx.stroke()
}

function pat_yourself_on_the_backAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+22*H/24)
  cpx = x+2*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+10*H/24)
  cpx = x+2*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+7*H/24)
  cpx = x+4*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+1*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+7*H/24)
  cpx = x+19*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+2*H/24)
  ctx.lineTo(x+15*W/24, y+7*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+1*H/24)
  cpx = x+11*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+8*H/24)
  cpx = x+11*W/24
  cpy = y+8*H/24
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+13*H/24)
  cpx = x+22*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+6*H/24)
  cpx = x+22*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+2*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+15*H/24)
  cpx = x+6*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+22*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+8*H/24)
  cpx = x+11*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+13*H/24)
  cpx = x+11*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+15*H/24)
  cpx = x+15*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+14*H/24)
  cpx = x+15*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+11*H/24)
  ctx.stroke()
//4 back of head
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+1*H/24)
  cpx = x+13*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+3*H/24)
  ctx.stroke()
  //2
  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+13*H/24)
  cpx = x+16*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+12*H/24)
  cpx = x+16*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+10*H/24)
  cpx = x+16*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+7*H/24)
  ctx.stroke()
//5
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+13*H/24)
  ctx.lineTo(x+18*W/24, y+22*H/24)
  ctx.stroke()
  //8
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+11*H/24)
  cpx = x+14*W/24
  cpy = y+14.8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+14.8*H/24)
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+11*H/24)
  cpx = x+13*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+15*H/24)
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+11*H/24)
  cpx = x+12*W/24
  cpy = y+14.8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+14.8*H/24)
  ctx.stroke()
}

function synecdocheAt (x,y,W,color,INVERTED) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  H = W
  ctx.beginPath()
  ctx.moveTo(x+W/2, y + H/24)
  ctx.lineTo(x+W/2, y + H-H/24)
  ctx.closePath()
  ctx.stroke()
  if (!INVERTED) {
    pineneedlesAt(x,y+H/4,  W/2,color)
    fallen_treeAt(x+W/2,y+H/4,W/2,color,0)
  } else {
    fallen_treeAt(x,y+H/4,  W/2,color,0)
    pineneedlesAt(x+W/2,y+H/4,W/2,color)
  }
}

function pineneedlesAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+22*H/24)
  cpx = x+12*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+19*H/24)
  cpx = x+12*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+1*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+22*H/24)
  cpx = x+12*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+19*H/24)
  cpx = x+14*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+3*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+22*H/24)
  cpx = x+12*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+19*H/24)
  cpx = x+10*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+3*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+22*H/24)
  ctx.lineTo(x+12*W/24, y+20*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+20*H/24)
  cpx = x+11*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+1*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+20*H/24)
  cpx = x+14*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+1*H/24)
  ctx.stroke()

  ctx.lineWidth *= 2.5
   //4
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+22*H/24)
  ctx.lineTo(x+12*W/24, y+20*H/24)
  ctx.stroke()
  ctx.lineWidth /= 12.5

}

function late_stage_capitalismAt (x,y,W,color,INVERTED) {
  if (!INVERTED)
    amazonAt (x,y,W,color)
  else
    twitterAt(x,y,W,color)
}

function counterfactualAt (x,y,W,color,INVERTED) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  H = W
  ctx.beginPath()
  ctx.moveTo(x+W/2, y + H/24)
  ctx.lineTo(x+W/2, y + H-H/24)
  ctx.closePath()
  ctx.stroke()

  ctx.setLineDash([W/32])
  appleAt(x,y+H/4,  W/2,color,INVERTED)
  ctx.setLineDash([])
  appleAt(x+W/2,y+H/4,W/2,color,INVERTED)
}

function late_stage_capitalismAt (x,y,W,color,INVERTED) {
  if (!INVERTED)
    amazonAt (x,y,W,color)
  else
    twitterAt(x,y,W,color)
}
/* trope_
  fingerprint search shows all non matches. 99.7 % match

*/

function cowboy_hatAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  let dots = (color === 'gray')
  //1
  //if (dots)
   // ctx.fillStyle = 'black'
 ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+6*H/24)
  cpx = x+18*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+4*H/24)
  cpx = x+14*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+5*H/24)
  cpx = x+14*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+6*H/24)
  cpx = x+10*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+5*H/24)
  cpx = x+10*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+4*H/24)
  cpx = x+6*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+6*H/24)
  cpx = x+6*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+15*H/24)
  cpx = x+6*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+16*H/24)
  cpx = x+4*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+16*H/24)
  cpx = x+3*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+14*H/24)
  cpx = x+2*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+14*H/24)
  cpx = x+1*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+16*H/24)
  cpx = x+1*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+18*H/24)
  cpx = x+21*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+18*H/24)
  cpx = x+23*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+16*H/24)
  cpx = x+23*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+14*H/24)
  cpx = x+21*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+14*H/24)
  cpx = x+21*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+15*H/24)
  cpx = x+21*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+16*H/24)
  cpx = x+18*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+15*H/24)
  cpx = x+18*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+6*H/24)
  ctx.fill()

  if (1 < 0) {
    ctx.fillStyle = 'white'
    ctx.save()
    ctx.beginPath()
    ctx.moveTo(x+18*W/24, y+6*H/24)
    cpx = x+18*W/24
    cpy = y+4*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+4*H/24)
    cpx = x+14*W/24
    cpy = y+4*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+5*H/24)
    cpx = x+14*W/24
    cpy = y+6*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+6*H/24)
    cpx = x+10*W/24
    cpy = y+6*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+5*H/24)
    cpx = x+10*W/24
    cpy = y+4*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+4*H/24)
    cpx = x+6*W/24
    cpy = y+4*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+6*H/24)
    cpx = x+6*W/24
    cpy = y+15*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+15*H/24)
    cpx = x+6*W/24
    cpy = y+16*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+16*H/24)
    cpx = x+4*W/24
    cpy = y+16*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+16*H/24)
    cpx = x+3*W/24
    cpy = y+16*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+15*H/24)
    cpx = x+3*W/24
    cpy = y+14*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+14*H/24)
    cpx = x+1*W/24
    cpy = y+14*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+16*H/24)
    cpx = x+1*W/24
    cpy = y+18*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+18*H/24)
    cpx = x+21*W/24
    cpy = y+18*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+18*H/24)
    cpx = x+23*W/24
    cpy = y+18*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+16*H/24)
    cpx = x+23*W/24
    cpy = y+14*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+14*H/24)
    cpx = x+21*W/24
    cpy = y+14*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+14*H/24)
    cpx = x+21*W/24
    cpy = y+16*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+16*H/24)
    cpx = x+19*W/24
    cpy = y+16*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+16*H/24)
    cpx = x+18*W/24
    cpy = y+16*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+15*H/24)
    cpx = x+18*W/24
    cpy = y+6*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+6*H/24)
    ctx.closePath()
    ctx.clip()
    dots_tone('white')
    ctx.restore()
  }
}

function gray_areaAt (x,y,W,color,INVERTED) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  H = W
  ctx.strokeStyle = color
  ctx.beginPath()
  ctx.moveTo(x+W/2, y + H/24)
  ctx.lineTo(x+W/2, y + H-H/24)
  ctx.closePath()
 // ctx.stroke()
  if (!INVERTED) {
    color = randomPick(['black','white'])
    cowboy_hatAt(x,y,W,color,INVERTED)
  } else {
    cowboy_hatAt(x,y,W,'gray',INVERTED)
  }
}

function boarAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+13*H/24)
  cpx = x+2*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+15*H/24)
  cpx = x+4*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+14*H/24)
  cpx = x+5*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+13*H/24)
  cpx = x+7*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+16*H/24)
  cpx = x+5*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+16*H/24)
  cpx = x+5*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+17*H/24)
  cpx = x+8*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+13*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+13*H/24)
  cpx = x+2*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+10*H/24)
  cpx = x+5*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+7*H/24)
  cpx = x+6*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+6*H/24)
  cpx = x+7*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+8*H/24)
  cpx = x+7*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+6*H/24)
  cpx = x+16*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+8*H/24)
  cpx = x+20*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+11*H/24)
  cpx = x+21*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+13*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+13*H/24)
  cpx = x+10*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+15*H/24)
  cpx = x+15*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+14*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+11*H/24)
  cpx = x+15*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+15*H/24)
  cpx = x+17*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+16*H/24)
  cpx = x+18*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+20*H/24)
  cpx = x+19*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+19*H/24)
  cpx = x+19*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+14*H/24)
  cpx = x+20*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+11*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+10*H/24)
  cpx = x+7*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+9*H/24)
  cpx = x+4*W/24
  cpy = y+13*H/24
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+12*H/24)
  cpx = x+4*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+10*H/24)
  cpx = x+3*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+12*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+19*W/24, y+16*H/24)
  cpx = x+21*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+18*H/24)
  cpx = x+22*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+17*H/24)
  cpx = x+20*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+13*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+14*H/24)
  cpx = x+9*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+17*H/24)
  cpx = x+7*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+16*H/24)
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+7*H/24)
  ctx.lineTo(x+9*W/24, y+6*H/24)
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+7*H/24)
  ctx.lineTo(x+10*W/24, y+6*H/24)
  ctx.stroke()

  //11
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+7*H/24)
  ctx.lineTo(x+11*W/24, y+6*H/24)
  ctx.stroke()

  //12
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+7*H/24)
  ctx.lineTo(x+12*W/24, y+6*H/24)
  ctx.stroke()

  //13
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+7*H/24)
  ctx.lineTo(x+13*W/24, y+6*H/24)
  ctx.stroke()

  //14
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+7*H/24)
  ctx.lineTo(x+14*W/24, y+7*H/24)
  ctx.stroke()
}

function koanAt (x,y,W,color,INVERTED) {
  let f = randomPick([0,1,2])
  if (f === 0) {
    defs["koanAt"].i = "after you retire\\c, what is your job?"
    defs["koanAt"].u = "what is your original face\\c, the face you had before you were born?"
    if (INVERTED)
      lawn_mowerAt (x,y,W,color)
    else  
      original_faceAt (x,y,W,color)
  } else 
  if (f === 1){
    defs["koanAt"].u = "what is the sound of one hand clapping?"
    defs["koanAt"].i = "if a tree falls in the forest and no living thing is around,what sound does it make?"
    if (INVERTED)
      fallen_treeAt (x,y,W,color)
    else  
      one_handAt (x,y,W,color)
  } else {
    defs["koanAt"].u = "does a dog have buddha nature? - Moof!"
    defs["koanAt"].i = "if you meet the buddha on the road\\c kill him"
    if (INVERTED)
      if_you_meet_the_buddhaAt (x,y,W,color)
    else  
      dogcowAt (x,y,W,color)
  }

  'waiting for the other shoe to drop'
}

function fallen_treeAt (x,y,W,color,a) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, angle = 90
  if (a !== undefined)
    angle = a
  //1
  ctx.beginPath()
  p = rotatePoint(x+11*W/24, y+19*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+11*W/24, y+23*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+13*W/24, y+23*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+13*W/24, y+19*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+23*W/24, y+19*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+13*W/24, y+16*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+21*W/24, y+16*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+13*W/24, y+13*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+20*W/24, y+13*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+13*W/24, y+10*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+18*W/24, y+10*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+13*W/24, y+7*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+17*W/24, y+7*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+13*W/24, y+4*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+16*W/24, y+4*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+12*W/24, y+1*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+8*W/24, y+4*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+11*W/24, y+4*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+7*W/24, y+7*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+11*W/24, y+7*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+6*W/24, y+10*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+11*W/24, y+10*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+4*W/24, y+13*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+11*W/24, y+13*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+3*W/24, y+16*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+11*W/24, y+16*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+1*W/24, y+19*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+11*W/24, y+19*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.fill()
}

function one_handAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+20*H/24)
  cpx = x+19*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+16*H/24)
  cpx = x+19*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+9*H/24)
  cpx = x+19*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+7*H/24)
  cpx = x+17*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+9*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+9*H/24)
  cpx = x+17*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+7*H/24)
  cpx = x+17*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+5*H/24)
  cpx = x+15*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+7*H/24)
  cpx = x+15*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+6*H/24)
  cpx = x+15*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+4*H/24)
  cpx = x+13*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+6*H/24)
  cpx = x+13*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+7*H/24)
  cpx = x+13*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+5*H/24)
  cpx = x+11*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+7*H/24)
  cpx = x+11*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+12*H/24)
  cpx = x+11*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+9*H/24)
  cpx = x+8*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+10*H/24)
  cpx = x+9*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+15*H/24)
  cpx = x+9*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+20*H/24)
  cpx = x+3*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+20*H/24)
  cpx = x+9*W/24
  cpy = y+15*H/24
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+15*H/24)
  cpx = x+5*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+14*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+7*H/24)
  ctx.lineTo(x+13*W/24, y+11*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+7*H/24)
  ctx.lineTo(x+15*W/24, y+11*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+9*H/24)
  ctx.lineTo(x+17*W/24, y+12*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+20*H/24)
  ctx.lineTo(x+12*W/24, y+20*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+13*H/24)
  cpx = x+14*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+17*H/24)
  ctx.stroke()
}

function lithomancyAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let i = 0, r = W/50
  let cx = x + W/2, cy = y + W/2
  let ix = 0, iy = 0
  //1

  ctx.beginPath()
  ctx.arc(cx,cy,W*0.46,0,Math.PI*2)
  ctx.closePath()
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x, cy)
  ctx.lineTo(x+W, cy)
  ctx.closePath()
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(cx, y)
  ctx.lineTo(cx, y+H)
  ctx.closePath()
  ctx.stroke()


  for (; i < 7; i++) {
    ix = Math.random()*W - 2*r
    iy = Math.random()*W - 2*r
    shadowStone (x+r*2+ix,y+r*2+iy,r,randomPick(["#000000", "#ffffff"]))
  }
}

function pareidoliaAt (x,y,w,color,INVERTED) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let size = document.getElementById("featuresize").value
  let a = ctx.globalAlpha
  toastoutlineAt(x,y,w,color)
  ctx.globalAlpha = 0.6
  if (!INVERTED) {
    jesustoast (x+10,y+10,w-20,color)
    jesustoast (x+10,y+10,w-20,color)
    jesustoast (x+10,y+10,w-20,color)
    document.getElementById("featuresize").value /=2
    jesustoast (x+10,y+10,w-20,color)
    jesustoast (x+10,y+10,w-20,color)
    jesustoast (x+10,y+10,w-20,color)
    jesustoast (x+10,y+10,w-20,color)
    jesustoast (x+10,y+10,w-20,color)
    jesustoast (x+10,y+10,w-20,color)
   
  } else {
    toastAt (x+10,y+10,w-20,color)
    toastAt (x+10,y+10,w-20,color)
    //toastAt (x+10,y+10,w-20,color)
    document.getElementById("featuresize").value /=2
    toastAt (x+10,y+10,w-20,color)
    toastAt (x+10,y+10,w-20,color)
    toastAt (x+10,y+10,w-20,color)
    toastAt (x+10,y+10,w-20,color)
    //toastAt (x+10,y+10,w-20,color)
    //toastAt (x+10,y+10,w-20,color)
  
  }
  document.getElementById("featuresize").value = size
  toastAt(x,y,w,color)
  document.getElementById("featuresize").value /=2
  toastAt(x,y,w,color)
  ctx.globalAlpha = a
  document.getElementById("featuresize").value = size
  ctx.globalAlpha = a
}

function toastoutlineAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  let H = W, cpx, cpy, points = [], n = 0
  let P = 0
  ctx.strokeStyle = color
  ctx.beginPath()
  ctx.moveTo(x+3*W/24+pet(P), y+23*H/24+pet(P))
  cpx = x+1*W/24+pet(P)
  cpy = y+23*H/24+pet(P)
  ctx.quadraticCurveTo(cpx+pet(P), cpy+pet(P), x+1*W/24+pet(P), y+21*H/24+pet(P))
  cpx = x+1*W/24+pet(P)
  cpy = y+12*H/24+pet(P)
  ctx.quadraticCurveTo(cpx+pet(P), cpy+pet(P), x+2*W/24+pet(P), y+10*H/24+pet(P))
  cpx = x+1*W/24+pet(P)
  cpy = y+10*H/24+pet(P)
  ctx.quadraticCurveTo(cpx+pet(P), cpy+pet(P), x+1*W/24+pet(P), y+8*H/24+pet(P))
  cpx = x+1*W/24+pet(P)
  cpy = y+1*H/24+pet(P)
  ctx.quadraticCurveTo(cpx+pet(P), cpy+pet(P), x+12*W/24+pet(P), y+1*H/24+pet(P))
  cpx = x+23*W/24+pet(P)
  cpy = y+1*H/24+pet(P)
  ctx.quadraticCurveTo(cpx+pet(P), cpy+pet(P), x+23*W/24+pet(P), y+8*H/24+pet(P))
  cpx = x+23*W/24+pet(P)
  cpy = y+10*H/24+pet(P)
  ctx.quadraticCurveTo(cpx+pet(P), cpy+pet(P), x+22*W/24+pet(P), y+10*H/24+pet(P))
  cpx = x+23*W/24+pet(P)
  cpy = y+12*H/24+pet(P)
  ctx.quadraticCurveTo(cpx+pet(P), cpy+pet(P), x+23*W/24+pet(P), y+21*H/24+pet(P))
  cpx = x+23*W/24+pet(P)
  cpy = y+23*H/24+pet(P)
  ctx.quadraticCurveTo(cpx+pet(P), cpy+pet(P), x+21*W/24+pet(P), y+23*H/24+pet(P))
  cpx = x+3*W/24+pet(P)
  cpy = y+23*H/24+pet(P)
  ctx.quadraticCurveTo(cpx+pet(P), cpy+pet(P), x+3*W/24+pet(P), y+23*H/24+pet(P))
  ctx.closePath()
  ctx.stroke()
}

function toastAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let colors = getCurrentPalette()
  let H = W, cpx, cpy, points = [], n = 0
  let P = 0
  ctx.strokeStyle = color
  ctx.fillStyle = color
  //1
  ctx.beginPath()
  ctx.moveTo(x+3*W/24+pet(P), y+23*H/24+pet(P))
  cpx = x+1*W/24+pet(P)
  cpy = y+23*H/24+pet(P)
  ctx.quadraticCurveTo(cpx+pet(P), cpy+pet(P), x+1*W/24+pet(P), y+21*H/24+pet(P))
  cpx = x+1*W/24+pet(P)
  cpy = y+12*H/24+pet(P)
  ctx.quadraticCurveTo(cpx+pet(P), cpy+pet(P), x+2*W/24+pet(P), y+10*H/24+pet(P))
  cpx = x+1*W/24+pet(P)
  cpy = y+10*H/24+pet(P)
  ctx.quadraticCurveTo(cpx+pet(P), cpy+pet(P), x+1*W/24+pet(P), y+8*H/24+pet(P))
  cpx = x+1*W/24+pet(P)
  cpy = y+1*H/24+pet(P)
  ctx.quadraticCurveTo(cpx+pet(P), cpy+pet(P), x+12*W/24+pet(P), y+1*H/24+pet(P))
  cpx = x+23*W/24+pet(P)
  cpy = y+1*H/24+pet(P)
  ctx.quadraticCurveTo(cpx+pet(P), cpy+pet(P), x+23*W/24+pet(P), y+8*H/24+pet(P))
  cpx = x+23*W/24+pet(P)
  cpy = y+10*H/24+pet(P)
  ctx.quadraticCurveTo(cpx+pet(P), cpy+pet(P), x+22*W/24+pet(P), y+10*H/24+pet(P))
  cpx = x+23*W/24+pet(P)
  cpy = y+12*H/24+pet(P)
  ctx.quadraticCurveTo(cpx+pet(P), cpy+pet(P), x+23*W/24+pet(P), y+21*H/24+pet(P))
  cpx = x+23*W/24+pet(P)
  cpy = y+23*H/24+pet(P)
  ctx.quadraticCurveTo(cpx+pet(P), cpy+pet(P), x+21*W/24+pet(P), y+23*H/24+pet(P))
  cpx = x+3*W/24+pet(P)
  cpy = y+23*H/24+pet(P)
  ctx.quadraticCurveTo(cpx+pet(P), cpy+pet(P), x+3*W/24+pet(P), y+23*H/24+pet(P))
  ctx.closePath()
  //ctx.stroke()
  ctx.save()
  ctx.clip()
  stippleRect(ctx,0,0,canvas.width*2,canvas.height*2,color)
  ctx.restore()
}

function jesustoast (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, n = 0
  let P = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  //1
  P = 12
  ctx.save()
  ctx.beginPath()
  ctx.moveTo(x+1*W/24+pet(P), y+21*H/24+pet(P))
  cpx = x+2*W/24+pet(P)
  cpy = y+22*H/24+pet(P)
  ctx.quadraticCurveTo(cpx+pet(P), cpy+pet(P), x+5*W/24+pet(P), y+22*H/24+pet(P))
  cpx = x+7*W/24+pet(P)
  cpy = y+21*H/24+pet(P)
  ctx.quadraticCurveTo(cpx+pet(P), cpy+pet(P), x+8*W/24+pet(P), y+20*H/24+pet(P))
  cpx = x+8*W/24+pet(P)
  cpy = y+15*H/24+pet(P)
  ctx.quadraticCurveTo(cpx+pet(P), cpy+pet(P), x+8*W/24+pet(P), y+15*H/24+pet(P))
  cpx = x+11*W/24+pet(P)
  cpy = y+19*H/24+pet(P)
  ctx.quadraticCurveTo(cpx+pet(P), cpy+pet(P), x+13*W/24+pet(P), y+19*H/24+pet(P))
  cpx = x+14*W/24+pet(P)
  cpy = y+19*H/24+pet(P)
  ctx.quadraticCurveTo(cpx+pet(P), cpy+pet(P), x+16*W/24+pet(P), y+17*H/24+pet(P))
  cpx = x+16*W/24+pet(P)
  cpy = y+20*H/24+pet(P)
  ctx.quadraticCurveTo(cpx+pet(P), cpy+pet(P), x+17*W/24+pet(P), y+21*H/24+pet(P))
  cpx = x+19*W/24+pet(P)
  cpy = y+22*H/24+pet(P)
  ctx.quadraticCurveTo(cpx+pet(P), cpy+pet(P), x+22*W/24+pet(P), y+22*H/24+pet(P))
  cpx = x+23*W/24+pet(P)
  cpy = y+21*H/24+pet(P)
  ctx.quadraticCurveTo(cpx+pet(P), cpy+pet(P), x+23*W/24+pet(P), y+20*H/24+pet(P))
  cpx = x+23*W/24+pet(P)
  cpy = y+18*H/24+pet(P)
  ctx.quadraticCurveTo(cpx+pet(P), cpy+pet(P), x+21*W/24+pet(P), y+18*H/24+pet(P))
  cpx = x+20*W/24+pet(P)
  cpy = y+15*H/24+pet(P)
  ctx.quadraticCurveTo(cpx+pet(P), cpy+pet(P), x+19*W/24+pet(P), y+15*H/24+pet(P))
  cpx = x+19*W/24+pet(P)
  cpy = y+1*H/24+pet(P)
  ctx.quadraticCurveTo(cpx+pet(P), cpy+pet(P), x+13*W/24+pet(P), y+1*H/24+pet(P))
  cpx = x+12*W/24+pet(P)
  cpy = y+2*H/24+pet(P)
  ctx.quadraticCurveTo(cpx+pet(P), cpy+pet(P), x+11*W/24+pet(P), y+1*H/24+pet(P))
  cpx = x+5*W/24+pet(P)
  cpy = y+1*H/24+pet(P)
  ctx.quadraticCurveTo(cpx+pet(P), cpy+pet(P), x+5*W/24+pet(P), y+9*H/24+pet(P))
  cpx = x+6*W/24+pet(P)
  cpy = y+11*H/24+pet(P)
  ctx.quadraticCurveTo(cpx+pet(P), cpy+pet(P), x+5*W/24+pet(P), y+13*H/24+pet(P))
  cpx = x+3*W/24+pet(P)
  cpy = y+15*H/24+pet(P)
  ctx.quadraticCurveTo(cpx+pet(P), cpy+pet(P), x+5*W/24+pet(P), y+16*H/24+pet(P))
  cpx = x+5*W/24+pet(P)
  cpy = y+17*H/24+pet(P)
  ctx.quadraticCurveTo(cpx+pet(P), cpy+pet(P), x+3*W/24+pet(P), y+17*H/24+pet(P))
  cpx = x+3*W/24+pet(P)
  cpy = y+19*H/24+pet(P)
  ctx.quadraticCurveTo(cpx+pet(P), cpy+pet(P), x+2*W/24+pet(P), y+19*H/24+pet(P))
  cpx = x+1*W/24+pet(P)
  cpy = y+19*H/24+pet(P)
  ctx.quadraticCurveTo(cpx+pet(P), cpy+pet(P), x+1*W/24+pet(P), y+21*H/24+pet(P))

    ctx.fillStyle = getselectedcolor()
    ctx.closePath()
    ctx.clip()
    stippleRect(ctx,0,0,canvas.width*2,canvas.height*2,color)
    ctx.restore()
  //2
  ctx.save()
  ctx.beginPath()
  ctx.moveTo(x+9*W/24+pet(P), y+10*H/24+pet(P))
  cpx = x+10*W/24+pet(P)
  cpy = y+9*H/24+pet(P)
  ctx.quadraticCurveTo(cpx+pet(P), cpy+pet(P), x+12*W/24+pet(P), y+10*H/24+pet(P))
  cpx = x+11*W/24+pet(P)
  cpy = y+11*H/24+pet(P)
  ctx.quadraticCurveTo(cpx+pet(P), cpy+pet(P), x+9*W/24+pet(P), y+10*H/24+pet(P))

    ctx.fillStyle = getselectedcolor()
    ctx.closePath()
    ctx.clip()
    stippleRect(ctx,0,0,canvas.width*2,canvas.height*2,color)
    ctx.restore()

  //3
  ctx.save()
  ctx.beginPath()
  ctx.moveTo(x+13*W/24+pet(P), y+10*H/24+pet(P))
  cpx = x+14*W/24+pet(P)
  cpy = y+9*H/24+pet(P)
  ctx.quadraticCurveTo(cpx+pet(P), cpy+pet(P), x+15*W/24+pet(P), y+9*H/24+pet(P))
  cpx = x+16*W/24+pet(P)
  cpy = y+9*H/24+pet(P)
  ctx.quadraticCurveTo(cpx+pet(P), cpy+pet(P), x+16*W/24+pet(P), y+10*H/24+pet(P))
  cpx = x+15*W/24+pet(P)
  cpy = y+10*H/24+pet(P)
  ctx.quadraticCurveTo(cpx+pet(P), cpy+pet(P), x+13*W/24+pet(P), y+10*H/24+pet(P))

    ctx.fillStyle = getselectedcolor()
    ctx.closePath()
    ctx.clip()
    stippleRect(ctx,0,0,canvas.width*2,canvas.height*2,color)
    ctx.restore()

  //4
  ctx.save()
  ctx.beginPath()
  ctx.moveTo(x+13*W/24+pet(P), y+14*H/24+pet(P))
  cpx = x+13*W/24+pet(P)
  cpy = y+15*H/24+pet(P)
  ctx.quadraticCurveTo(cpx+pet(P), cpy+pet(P), x+11*W/24+pet(P), y+15*H/24+pet(P))
  cpx = x+11*W/24+pet(P)
  cpy = y+16*H/24+pet(P)
  ctx.quadraticCurveTo(cpx+pet(P), cpy+pet(P), x+12*W/24+pet(P), y+16*H/24+pet(P))
  cpx = x+13*W/24+pet(P)
  cpy = y+16*H/24+pet(P)
  ctx.quadraticCurveTo(cpx+pet(P), cpy+pet(P), x+14*W/24+pet(P), y+16*H/24+pet(P))
  cpx = x+15*W/24+pet(P)
  cpy = y+15*H/24+pet(P)
  ctx.quadraticCurveTo(cpx+pet(P), cpy+pet(P), x+15*W/24+pet(P), y+14*H/24+pet(P))
  cpx = x+14*W/24+pet(P)
  cpy = y+14*H/24+pet(P)
  ctx.quadraticCurveTo(cpx+pet(P), cpy+pet(P), x+14*W/24+pet(P), y+13*H/24+pet(P))
  cpx = x+16*W/24+pet(P)
  cpy = y+14*H/24+pet(P)
  ctx.quadraticCurveTo(cpx+pet(P), cpy+pet(P), x+16*W/24+pet(P), y+13*H/24+pet(P))
  cpx = x+16*W/24+pet(P)
  cpy = y+11*H/24+pet(P)
  ctx.quadraticCurveTo(cpx+pet(P), cpy+pet(P), x+16*W/24+pet(P), y+9*H/24+pet(P))
  cpx = x+16*W/24+pet(P)
  cpy = y+7*H/24+pet(P)
  ctx.quadraticCurveTo(cpx+pet(P), cpy+pet(P), x+13*W/24+pet(P), y+5*H/24+pet(P))
  cpx = x+10*W/24+pet(P)
  cpy = y+5*H/24+pet(P)
  ctx.quadraticCurveTo(cpx+pet(P), cpy+pet(P), x+8*W/24+pet(P), y+7*H/24+pet(P))
  cpx = x+8*W/24+pet(P)
  cpy = y+9*H/24+pet(P)
  ctx.quadraticCurveTo(cpx+pet(P), cpy+pet(P), x+8*W/24+pet(P), y+13*H/24+pet(P))
  cpx = x+9*W/24+pet(P)
  cpy = y+14*H/24+pet(P)
  ctx.quadraticCurveTo(cpx+pet(P), cpy+pet(P), x+10*W/24+pet(P), y+15*H/24+pet(P))
  cpx = x+11*W/24+pet(P)
  cpy = y+14*H/24+pet(P)
  ctx.quadraticCurveTo(cpx+pet(P), cpy+pet(P), x+11*W/24+pet(P), y+15*H/24+pet(P))
  cpx = x+10*W/24+pet(P)
  cpy = y+17*H/24+pet(P)
  ctx.quadraticCurveTo(cpx+pet(P), cpy+pet(P), x+8*W/24+pet(P), y+15*H/24+pet(P))
  cpx = x+8*W/24+pet(P)
  cpy = y+20*H/24+pet(P)
  ctx.quadraticCurveTo(cpx+pet(P), cpy+pet(P), x+7*W/24+pet(P), y+21*H/24+pet(P))
  cpx = x+5*W/24+pet(P)
  cpy = y+22*H/24+pet(P)
  ctx.quadraticCurveTo(cpx+pet(P), cpy+pet(P), x+1*W/24+pet(P), y+21*H/24+pet(P))
  cpx = x+2*W/24+pet(P)
  cpy = y+19*H/24+pet(P)
  ctx.quadraticCurveTo(cpx+pet(P), cpy+pet(P), x+3*W/24+pet(P), y+17*H/24+pet(P))
  cpx = x+5*W/24+pet(P)
  cpy = y+16*H/24+pet(P)
  ctx.quadraticCurveTo(cpx+pet(P), cpy+pet(P), x+5*W/24+pet(P), y+13*H/24+pet(P))
  cpx = x+5*W/24+pet(P)
  cpy = y+9*H/24+pet(P)
  ctx.quadraticCurveTo(cpx+pet(P), cpy+pet(P), x+8*W/24+pet(P), y+2*H/24+pet(P))
  cpx = x+12*W/24+pet(P)
  cpy = y+1*H/24+pet(P)
  ctx.quadraticCurveTo(cpx+pet(P), cpy+pet(P), x+15*W/24+pet(P), y+2*H/24+pet(P))
  cpx = x+18*W/24+pet(P)
  cpy = y+6*H/24+pet(P)
  ctx.quadraticCurveTo(cpx+pet(P), cpy+pet(P), x+18*W/24+pet(P), y+10*H/24+pet(P))
  cpx = x+19*W/24+pet(P)
  cpy = y+13*H/24+pet(P)
  ctx.quadraticCurveTo(cpx+pet(P), cpy+pet(P), x+18*W/24+pet(P), y+15*H/24+pet(P))
  cpx = x+19*W/24+pet(P)
  cpy = y+15*H/24+pet(P)
  ctx.quadraticCurveTo(cpx+pet(P), cpy+pet(P), x+20*W/24+pet(P), y+17*H/24+pet(P))
  cpx = x+22*W/24+pet(P)
  cpy = y+18*H/24+pet(P)
  ctx.quadraticCurveTo(cpx+pet(P), cpy+pet(P), x+22*W/24+pet(P), y+22*H/24+pet(P))
  cpx = x+19*W/24+pet(P)
  cpy = y+22*H/24+pet(P)
  ctx.quadraticCurveTo(cpx+pet(P), cpy+pet(P), x+17*W/24+pet(P), y+21*H/24+pet(P))
  cpx = x+17*W/24+pet(P)
  cpy = y+18*H/24+pet(P)
  ctx.quadraticCurveTo(cpx+pet(P), cpy+pet(P), x+16*W/24+pet(P), y+17*H/24+pet(P))
  cpx = x+13*W/24+pet(P)
  cpy = y+19*H/24+pet(P)
  ctx.quadraticCurveTo(cpx+pet(P), cpy+pet(P), x+12*W/24+pet(P), y+19*H/24+pet(P))
  cpx = x+10*W/24+pet(P)
  cpy = y+17*H/24+pet(P)
  ctx.quadraticCurveTo(cpx+pet(P), cpy+pet(P), x+10*W/24+pet(P), y+17*H/24+pet(P))

    ctx.fillStyle = getselectedcolor()
    ctx.closePath()
    ctx.clip()
    stippleRect(ctx,0,0,canvas.width*2,canvas.height*2,color)
    ctx.restore()
  //5
  ctx.save()
  ctx.beginPath()
  ctx.moveTo(x+9*W/24+pet(P), y+9*H/24+pet(P))
  cpx = x+10*W/24+pet(P)
  cpy = y+9*H/24+pet(P)
  ctx.quadraticCurveTo(cpx+pet(P), cpy+pet(P), x+11*W/24+pet(P), y+9*H/24+pet(P))
  cpx = x+10*W/24+pet(P)
  cpy = y+8*H/24+pet(P)
  ctx.quadraticCurveTo(cpx+pet(P), cpy+pet(P), x+9*W/24+pet(P), y+9*H/24+pet(P))

    ctx.fillStyle = getselectedcolor()
    ctx.closePath()
    ctx.clip()
    stippleRect(ctx,0,0,canvas.width*2,canvas.height*2,color)
    ctx.restore()
  //6
  ctx.save()
  ctx.beginPath()
  ctx.moveTo(x+13*W/24+pet(P), y+9*H/24+pet(P))
  cpx = x+14*W/24+pet(P)
  cpy = y+8*H/24+pet(P)
  ctx.quadraticCurveTo(cpx+pet(P), cpy+pet(P), x+15*W/24+pet(P), y+8*H/24+pet(P))
  cpx = x+16*W/24+pet(P)
  cpy = y+9*H/24+pet(P)
  ctx.quadraticCurveTo(cpx+pet(P), cpy+pet(P), x+15*W/24+pet(P), y+8*H/24+pet(P))
  cpx = x+13*W/24+pet(P)
  cpy = y+9*H/24+pet(P)
  ctx.quadraticCurveTo(cpx+pet(P), cpy+pet(P), x+13*W/24+pet(P), y+9*H/24+pet(P))

  ctx.fillStyle = getselectedcolor()
  ctx.closePath()
  ctx.clip()
  stippleRect(ctx,0,0,canvas.width*2,canvas.height*2,color)
  ctx.restore()
}

function red_shirtAt (x,y,W,color,INVERTED) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  let savedF = ctx.fillStyle
  let savedS = ctx.strokeStyle
  ctx.strokeStyle = "black" 
  ctx.fillStyle = "#ff0000"
  if (INVERTED)
   ctx.fillStyle = "#e0b629"
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+22*H/24)
  ctx.lineTo(x+18*W/24, y+22*H/24)
  ctx.lineTo(x+18*W/24, y+9*H/24)
  ctx.lineTo(x+19*W/24, y+22*H/24)
  ctx.lineTo(x+22*W/24, y+22*H/24)
  ctx.lineTo(x+22*W/24, y+9*H/24)
  cpx = x+21*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+2*H/24)
  cpx = x+7*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+2*H/24)
  cpx = x+3*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+9*H/24)
  cpx = x+2*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+22*H/24)
  ctx.lineTo(x+5*W/24, y+22*H/24)
  ctx.lineTo(x+6*W/24, y+9*H/24)
  ctx.lineTo(x+6*W/24, y+22*H/24)
  ctx.closePath()
  ctx.fill()
  ctx.stroke()

  ctx.fillStyle = "#000000"
  //2
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+2*H/24)
  ctx.lineTo(x+12*W/24, y+6*H/24)
  ctx.lineTo(x+15*W/24, y+2*H/24)
  ctx.lineTo(x+14*W/24, y+2*H/24)
  ctx.lineTo(x+12*W/24, y+5*H/24)
  ctx.lineTo(x+10*W/24, y+2*H/24)
  ctx.closePath()
  ctx.fill()

  ctx.fillStyle = "gold"
  //3
  ctx.beginPath()
  ctx.beginPath()
  ctx.moveTo(x+14.5*W/24, y+8*H/24)
  cpx = x+14.5*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15.5*W/24, y+6*H/24)
  cpx = x+16*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+7.4*H/24)
  cpx = x+15.5*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14.5*W/24, y+8*H/24)
  ctx.closePath()
  ctx.fill()
  ctx.stroke()
  ctx.fillStyle = savedF
  ctx.strokeStyle = savedS
}


function trope_they_re_shutting_down_the_x_filesAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  let saved = ctx.fillStyle
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let a = ctx.globalAlpha
  ctx.globalAlpha /= 3
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+6*H/24)
  cpx = x+7*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+4*H/24)
  cpx = x+9*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+2*H/24)
  cpx = x+11*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+5*H/24)
  cpx = x+11*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+6*H/24)
  cpx = x+15*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+6*H/24)
  cpx = x+16*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+7*H/24)
  cpx = x+11*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+8.5*H/24)
  cpx = x+9*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+7*H/24)
  cpx = x+5*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+6*H/24)
  ctx.fill()
  ctx.globalAlpha *= 3
  //1
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+6*H/24)
  cpx = x+7*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+4*H/24)
  cpx = x+9*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+2*H/24)
  cpx = x+15*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+4*H/24)
  cpx = x+17*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+6*H/24)
  cpx = x+16*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+8*H/24)
  cpx = x+12*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+8*H/24)
  cpx = x+8*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+6*H/24)
  cpx = x+12*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+6*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+9*H/24)
  ctx.lineTo(x+9*W/24, y+23*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+9*H/24)
  ctx.lineTo(x+15*W/24, y+23*H/24)
  ctx.stroke()
  cowAt(x+9.8*W/24, y+18.5*H/24, W/5,color)
  ctx.fillStyle = saved
}

function cowAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  let a = ctx.globalAlpha
  ctx.globalAlpha /= 3
  //1
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+12*H/24)
  cpx = x+1*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+14*H/24)
  cpx = x+4*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+10*H/24)
  cpx = x+6*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+19*H/24)
  cpx = x+5*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+20*H/24)
  cpx = x+8*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+12*H/24)
  cpx = x+9*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+20*H/24)
  cpx = x+11*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+19*H/24)
  cpx = x+11*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+12*H/24)
  cpx = x+14*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+13*H/24)
  cpx = x+15*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+13*H/24)
  cpx = x+15*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+20*H/24)
  cpx = x+16*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+18*H/24)
  cpx = x+17*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+17*H/24)
  cpx = x+18*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+16*H/24)
  cpx = x+20*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+20*H/24)
  cpx = x+21*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+19*H/24)
  cpx = x+21*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+10*H/24)
  cpx = x+14*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+9*H/24)
  cpx = x+8*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+10*H/24)
  cpx = x+5*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+12*H/24)
  cpx = x+2*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+12*H/24)
  ctx.fill()

  ctx.globalAlpha = a

  //1
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+4*H/24)
  cpx = x+20*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+10*H/24)
  cpx = x+21*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+19*H/24)
  cpx = x+21*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+20*H/24)
  cpx = x+20*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+15*H/24)
  cpx = x+18*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+12*H/24)
  cpx = x+15*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+16*H/24)
  cpx = x+18*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+16*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+15.5*W/24, y+14*H/24)
  cpx = x+15*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+20*H/24)
  cpx = x+16*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+18*H/24)
  cpx = x+17*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+16.5*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+8*H/24)
  cpx = x+21*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+15*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+15.5*W/24, y+13*H/24)
  cpx = x+12*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+12*H/24)
  cpx = x+11*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+19*H/24)
  cpx = x+11*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+20*H/24)
  cpx = x+9*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+12*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+4*H/24)
  cpx = x+8*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+7*H/24)
  cpx = x+2*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+5*H/24)
  cpx = x+2*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+8*H/24)
  cpx = x+1*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+13*H/24)
  cpx = x+1*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+14*H/24)
  cpx = x+3*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+13*H/24)
  cpx = x+5*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+10*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+10*H/24)
  cpx = x+8*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+8*H/24)
  cpx = x+7*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+9*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+11*H/24)
  cpx = x+5*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+19*H/24)
  cpx = x+5*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+20*H/24)
  cpx = x+8*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+12.5*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.arc(x+4*W/24, y+10*H/24,W/90,0,Math.PI*2)
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.arc(x+2*W/24, y+9.5*H/24,W/90,0,Math.PI*2)
  ctx.stroke()
}

function you_make_a_better_door_than_a_windowAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  //1
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+24*H/24)
  cpx = x+2*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+10*H/24)
  cpx = x+2*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+5*H/24)
  cpx = x+9*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+4*H/24)
  cpx = x+8*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+0*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+22*W/24, y+24*H/24)
  cpx = x+22*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+10*H/24)
  cpx = x+22*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+5*H/24)
  cpx = x+15*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+4*H/24)
  cpx = x+16*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+0*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+14*H/24)
  ctx.lineTo(x+6*W/24, y+24*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+14*H/24)
  ctx.lineTo(x+18*W/24, y+24*H/24)
  ctx.stroke()
}

function transducerAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+10.5*W/24, y+2*H/24)
  cpx = x+10*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+8*H/24)
  ctx.lineTo(x+8*W/24, y+8*H/24)
  ctx.lineTo(x+6*W/24, y+10*H/24)
  ctx.lineTo(x+6*W/24, y+15*H/24)
  cpx = x+6*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+16*H/24)
  ctx.lineTo(x+11.75*W/24, y+16*H/24)
  ctx.lineTo(x+11.75*W/24, y+19*H/24)
  ctx.lineTo(x+11*W/24, y+19*H/24)
  ctx.lineTo(x+12*W/24, y+21*H/24)
  ctx.lineTo(x+13*W/24, y+19*H/24)
  ctx.lineTo(x+12.25*W/24, y+19*H/24)
  ctx.lineTo(x+12.25*W/24, y+16*H/24)
  ctx.lineTo(x+17*W/24, y+16*H/24)
  cpx = x+18*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+15*H/24)
  ctx.lineTo(x+18*W/24, y+10*H/24)
  ctx.lineTo(x+16*W/24, y+8*H/24)
  ctx.lineTo(x+14*W/24, y+8*H/24)
  ctx.lineTo(x+13.5*W/24, y+2*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+10*H/24)
  ctx.lineTo(x+18*W/24, y+10*H/24)
  ctx.stroke()
  //10
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+19*H/24)
  ctx.lineTo(x+13*W/24, y+19*H/24)
  ctx.stroke()
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+8*H/24)
  ctx.lineTo(x+15*W/24, y+8*H/24)
  ctx.stroke()
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+16*H/24)
  ctx.lineTo(x+13*W/24, y+16*H/24)
  ctx.stroke()
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+12*H/24)
  ctx.lineTo(x+22*W/24, y+12*H/24)
  cpx = x+22*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+11*H/24)
  ctx.lineTo(x+18*W/24, y+11*H/24)
  ctx.stroke()

  let fs = 2 * W/24
  ctx.font = "800 italic "+fs+"pt Garamond "
  let text = "Hi - Fi"
  let width = ctx.measureText(text).width
  ctx.fillText(text, x+W/2-width/2, y+14*H/24)

  let v = document.getElementById("featuresize").value
  document.getElementById("featuresize").value /= 4
  ctx.save()
  ctx.beginPath()
  ctx.moveTo(x+10.5*W/24, y+2*H/24)
  ctx.lineTo(x+10*W/24, y+8*H/24)
  ctx.lineTo(x+8*W/24, y+8*H/24)
  ctx.lineTo(x+6*W/24, y+10*H/24)
  ctx.lineTo(x+6*W/24, y+15*H/24)
  cpx = x+6*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+16*H/24)
  ctx.lineTo(x+11.75*W/24, y+16*H/24)
  ctx.lineTo(x+11.75*W/24, y+19*H/24)
  ctx.lineTo(x+11*W/24, y+19*H/24)
  ctx.lineTo(x+12*W/24, y+21*H/24)
  ctx.lineTo(x+13*W/24, y+19*H/24)
  ctx.lineTo(x+12.25*W/24, y+19*H/24)
  ctx.lineTo(x+12.25*W/24, y+16*H/24)
  ctx.lineTo(x+17*W/24, y+16*H/24)
  cpx = x+18*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+15*H/24)
  ctx.lineTo(x+18*W/24, y+12*H/24)
  ctx.lineTo(x+22*W/24, y+12*H/24)
  cpx = x+22*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+11*H/24)
  ctx.lineTo(x+18*W/24, y+11*H/24)
  ctx.lineTo(x+18*W/24, y+10*H/24)
  ctx.lineTo(x+16*W/24, y+8*H/24)
  ctx.lineTo(x+14*W/24, y+8*H/24)
  ctx.lineTo(x+13.5*W/24, y+2*H/24)
  ctx.lineTo(x+23*W/24, y+2*H/24)
  ctx.lineTo(x+23*W/24, y+23*H/24)
  ctx.lineTo(x+1*W/24, y+23*H/24)
  ctx.lineTo(x+1*W/24, y+2*H/24)
  ctx.lineTo(x+11.5*W/24, y+2*H/24)
  ctx.closePath()
  ctx.clip()
  LASTCLICK[0] = x- W/4
  LASTCLICK[1] = y + W/2
  skinnyRings(color)
  document.getElementById("featuresize").value *= 4
  ctx.restore()
}

function templateAt (x,y,W,color) { // for fully filled card
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+1*H/24)
  cpx = x+0*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+0*H/24)
  cpx = x+10*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+0*H/24)
  cpx = x+11*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+1*H/24)
  cpx = x+11*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+15*H/24)
  cpx = x+11*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+16*H/24)
  cpx = x+1*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+16*H/24)
  cpx = x+0*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+0*W/24, y+15*H/24)
  ctx.stroke()
}

function crazy_cat_ladyAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+4*H/24)
  cpx = x+10*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+8*H/24)
  cpx = x+14*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+4*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+11*H/24)
  cpx = x+5*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+13*H/24)
  cpx = x+5*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+15*H/24)
  cpx = x+11*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+15*H/24)
  cpx = x+13*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+16*H/24)
  cpx = x+13*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+17*H/24)
  cpx = x+8*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+17*H/24)
  cpx = x+3*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+13*H/24)
  cpx = x+3*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+9*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+11*H/24)
  cpx = x+19*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+13*H/24)
  cpx = x+19*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+15*H/24)
  cpx = x+12*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+15*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+9*H/24)
  cpx = x+21*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+13*H/24)
  cpx = x+21*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+17*H/24)
  cpx = x+12*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+17*H/24)
  ctx.stroke()


  //8
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+17*H/24)
  ctx.lineTo(x+7*W/24, y+23*H/24)
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+17*H/24)
  ctx.lineTo(x+17*W/24, y+23*H/24)
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+11*H/24)
  cpx = x+7*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+13*H/24)
  cpx = x+7*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+15*H/24)
  ctx.stroke()

  //11
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+11*H/24)
  cpx = x+17*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+13*H/24)
  cpx = x+17*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+15*H/24)
  ctx.stroke()

    //13
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+9*H/24)
  cpx = x+8*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+6*H/24)
  cpx = x+8*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+1*H/24)
  cpx = x+16*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+6*H/24)
  cpx = x+16*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+9*H/24)
  ctx.stroke()

  //12
  catAt(x+9*W/24, y+9.5*H/24, 6*H/24,color)
  ctx.globalAlpha /= 3
  ctx.fill()
  ctx.globalAlpha *= 3
}
function night_drivingAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  ctx.fillStyle = "#000050" // sky
  //1 sky
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+12*H/24)
  ctx.lineTo(x+24*W/24, y+12*H/24)
  ctx.lineTo(x+24*W/24, y+0*H/24)
  ctx.lineTo(x+0*W/24, y+0*H/24)
  ctx.fill()
  let col2 = "#000000"
  col2 = "rgba("+hexToR(col2)+", "+hexToG(col2)+", "+hexToB(col2)+", 0.0)";// transparent
  let grad = ctx.createLinearGradient(x,y,x,y+H/2)
  grad.addColorStop(0, "#000000");
  grad.addColorStop(1, col2);
  ctx.fillStyle = grad
  ctx.beginPath() // sky overlay
  ctx.moveTo(x+24*W/24, y+12*H/24)
  ctx.lineTo(x+24*W/24, y+0*H/24)
  ctx.lineTo(x+0*W/24, y+0*H/24)
  ctx.lineTo(x+0*W/24, y+12*H/24)
  ctx.lineTo(x+24*W/24, y+12*H/24)
  ctx.closePath()
  ctx.fill()
  //2 road
  ctx.fillStyle = "#202020" // sky
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+10*H/24)
  ctx.lineTo(x+24*W/24, y+10*H/24)
  ctx.lineTo(x+24*W/24, y+24*H/24)
  ctx.lineTo(x+0*W/24, y+24*H/24)
  ctx.lineTo(x+0*W/24, y+10*H/24)
  ctx.fill()
  //3
  ctx.fillStyle = "#202020" 
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+22*H/24)
  ctx.lineTo(x+0*W/24, y+24*H/24)
  ctx.lineTo(x+24*W/24, y+24*H/24)
  ctx.lineTo(x+24*W/24, y+22*H/24)
  cpx = x+18*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+10*H/24)
  cpx = x+11*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+10*H/24)
  cpx = x+6*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+0*W/24, y+22*H/24)
  ctx.fill()

  // white stripes
  ctx.strokeStyle = "#ffffff"
  ctx.beginPath()
  ctx.moveTo(x+10.5*W/24, y+10.2*H/24)
  cpx = x+4.8*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+0.4*W/24, y+24*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+10.2*H/24)
  cpx = x+19.8*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23.8*W/24, y+24*H/24)
  ctx.stroke()

  ctx.strokeStyle = "#ff8c00" // orange stripes
  //6
  ctx.beginPath()
  ctx.moveTo(x+11.9*W/24, y+10.2*H/24)
  cpx = x+11.9*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12.1*W/24, y+24*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+11.8*W/24, y+10.2*H/24)
  cpx = x+11.3*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11.4*W/24, y+24*H/24)
  ctx.stroke()

  col2 = "#000000"
  col2 = "rgba("+hexToR(col2)+", "+hexToG(col2)+", "+hexToB(col2)+", 0.0)";// transparent
  grad = ctx.createLinearGradient(x,y+H/2.5,x,y+H)
  grad.addColorStop(0, "#000000");
  grad.addColorStop(1, col2);
  ctx.fillStyle = grad

  //3 road pverlay
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+10*H/24)
  ctx.lineTo(x+24*W/24, y+10*H/24)
  ctx.lineTo(x+24*W/24, y+24*H/24)
  ctx.lineTo(x+0*W/24, y+24*H/24)
  ctx.fill()
  
  //4 sides
  ctx.fillStyle = "#002010"
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+22*H/24)
  cpx = x+6*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+10*H/24)
  ctx.lineTo(x+10*W/24, y+8.75*H/24)
  ctx.lineTo(x+9*W/24, y+9*H/24)
  ctx.lineTo(x+7*W/24, y+7*H/24)
  ctx.lineTo(x+4*W/24, y+8*H/24)
  ctx.lineTo(x+2*W/24, y+6*H/24)
  ctx.lineTo(x+0*W/24, y+7*H/24)
  ctx.fill()

  //5
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+10*H/24)
  ctx.lineTo(x+14*W/24, y+8.75*H/24)
  ctx.lineTo(x+15*W/24, y+9*H/24)
  ctx.lineTo(x+17*W/24, y+7*H/24)
  ctx.lineTo(x+20*W/24, y+8*H/24)
  ctx.lineTo(x+22*W/24, y+6*H/24)
  ctx.lineTo(x+24*W/24, y+8*H/24)
  ctx.lineTo(x+24*W/24, y+22*H/24)
  cpx = x+18*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+10*H/24)
  ctx.fill()

  ctx.fillStyle = 'red'
  let r = W/112
  //7
  ctx.beginPath()
  ctx.arc(x+14*W/24, y+14*H/24,r,0,Math.PI*2)
  ctx.closePath()
  ctx.fill()
  //8
  ctx.beginPath()
  ctx.arc(x+15*W/24, y+14*H/24,r,0,Math.PI*2)
  ctx.closePath()
  ctx.fill()
  ctx.fillStyle = "#ffffff"
  r *= 1.3
  //9
  ctx.beginPath()
  ctx.arc(x+6.5*W/24, y+18*H/24,r,0,Math.PI*2)
  ctx.closePath()
  ctx.fill()
  //10
  ctx.beginPath()
  ctx.arc(x+8.1*W/24, y+18*H/24,r,0,Math.PI*2)
  ctx.closePath()
  ctx.fill()

  ctx.beginPath()
  ctx.arc(x+10.5*W/24, y+11*H/24,r/3,0,Math.PI*2)
  ctx.fill()

  ctx.beginPath()
  ctx.arc(x+10.8*W/24, y+11*H/24,r/3,0,Math.PI*2)
  ctx.closePath()
  ctx.fill()
  r /= 3
  // *************** stars
  ctx.beginPath()
  ctx.arc(x+2*W/24, y+2*H/24, r + pet(r/2),0,Math.PI*2)
  ctx.closePath()
  ctx.fill()
  //12
  ctx.beginPath()
  ctx.arc(x+5*W/24, y+4*H/24, r + pet(r/2),0,Math.PI*2)
  ctx.closePath()
  ctx.fill()
  //13
  ctx.beginPath()
  ctx.arc(x+3*W/24, y+6*H/24, r + pet(r/2),0,Math.PI*2)
  ctx.closePath()
  ctx.fill()
  //14
  ctx.beginPath()
  ctx.arc(x+23*W/24, y+1*H/24, r + pet(r/2),0,Math.PI*2)
  ctx.closePath()
  ctx.fill()
  //15
  ctx.beginPath()
  ctx.arc(x+12*W/24, y+7*H/24, r + pet(r/2),0,Math.PI*2)
  ctx.closePath()
  ctx.fill()
  //16
  ctx.beginPath()
  ctx.arc(x+13*W/24, y+6*H/24, r + pet(r/2),0,Math.PI*2)
  ctx.closePath()
  ctx.fill()
  //17
  ctx.beginPath()
  ctx.arc(x+19*W/24, y+4*H/24, r + pet(r/2),0,Math.PI*2)
  ctx.closePath()
  ctx.fill()
  //18
  ctx.beginPath()
  ctx.arc(x+21*W/24, y+3*H/24, r + pet(r/2),0,Math.PI*2)
  ctx.closePath()
  ctx.fill()
  //19
  ctx.beginPath()
  ctx.arc(x+10*W/24, y+2*H/24, r + pet(r/2),0,Math.PI*2)
  ctx.closePath()
  ctx.fill()
  //20
  ctx.beginPath()
  ctx.arc(x+6*W/24, y+1*H/24, r + pet(r/2),0,Math.PI*2)
  ctx.closePath()
  ctx.fill()

  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function building2At (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  let i = 0
  //1
  ctx.fillStyle = colors[i++]
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+0*H/24)
  ctx.lineTo(x+16*W/24, y+0*H/24)
  ctx.lineTo(x+16*W/24, y+24*H/24)
  ctx.lineTo(x+0*W/24, y+24*H/24)
  ctx.fill()

  //2
  ctx.fillStyle = colors[i++]
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+4*H/24)
  ctx.lineTo(x+10*W/24, y+7*H/24)
  ctx.lineTo(x+10*W/24, y+24*H/24)
  ctx.lineTo(x+0*W/24, y+21*H/24)
  ctx.lineTo(x+0*W/24, y+4*H/24)
  ctx.fill()

  //3
  ctx.fillStyle = colors[i++]
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+7*H/24)
  ctx.lineTo(x+10*W/24, y+24*H/24)
  ctx.lineTo(x+16*W/24, y+20*H/24)
  ctx.lineTo(x+16*W/24, y+3*H/24)
  ctx.lineTo(x+10*W/24, y+7*H/24)
  ctx.fill()

  //4
  ctx.fillStyle = colors[i++]
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+7*H/24)
  ctx.lineTo(x+16*W/24, y+3*H/24)
  ctx.lineTo(x+7*W/24, y+0*H/24)
  ctx.lineTo(x+0*W/24, y+0*H/24)
  ctx.lineTo(x+0*W/24, y+4*H/24)
  ctx.lineTo(x+10*W/24, y+7*H/24)
  ctx.fill()

  ///windows
  ctx.fillStyle = colors[i++]
  ctx.strokeStyle = colors[i++]
  //5
  let x0 = x, y0 = y
  i = 0
  for (; i < 30; i++) {
    ctx.beginPath()
    ctx.moveTo(x+1*W/24, y+5*H/24)
    ctx.lineTo(x+1*W/24, y+6*H/24)
    ctx.lineTo(x+1.5*W/24, y+6.25*H/24)
    ctx.lineTo(x+1.5*W/24, y+5.25*H/24)
    ctx.fill()
    x += 1.5*W/24
    y += 0.45*H/24
    if (x > x0+8*W/24) {
      x = x0
      y += H/90
    }
  }
  x = x0, y = y0
  //9
  y += 0.4*H/24
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+5*H/24)
  ctx.lineTo(x+14*W/24, y+6*H/24)
  ctx.lineTo(x+14.5*W/24, y+5.6*H/24)
  ctx.lineTo(x+14.5*W/24, y+4.6*H/24)
  ctx.fill()
  y += 6*H/24
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+5*H/24)
  ctx.lineTo(x+14*W/24, y+6*H/24)
  ctx.lineTo(x+14.5*W/24, y+5.6*H/24)
  ctx.lineTo(x+14.5*W/24, y+4.6*H/24)
  ctx.fill()
  y += 6*H/24
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+5*H/24)
  ctx.lineTo(x+14*W/24, y+6*H/24)
  ctx.lineTo(x+14.5*W/24, y+5.6*H/24)
  ctx.lineTo(x+14.5*W/24, y+4.6*H/24)
  ctx.fill()
  x = x0, y = y0

  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+6*H/24)
  ctx.lineTo(x+11*W/24, y+9*H/24)
  ctx.lineTo(x+15*W/24, y+12*H/24)
  ctx.lineTo(x+11*W/24, y+15*H/24)
  ctx.lineTo(x+15*W/24, y+18*H/24)
  ctx.lineTo(x+11*W/24, y+20.5*H/24)
  ctx.stroke()
  x += 0.25*W/24 
  y += 0.20*W/24
  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+6*H/24)
  ctx.lineTo(x+11*W/24, y+9*H/24)
  ctx.lineTo(x+15*W/24, y+12*H/24)
  ctx.lineTo(x+11*W/24, y+15*H/24)
  ctx.lineTo(x+15*W/24, y+18*H/24)
  ctx.lineTo(x+11*W/24, y+20.5*H/24)
  ctx.stroke()
  ctx.shadowBlur = 0
  ctx.shadowOffsetX = 0
  ctx.shadowOffsetY  = 0
}

function meteor_showerAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let offset = ctx.lineWidth
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "round"
 // H *= 1.5
 // W *= 1.5
  let ac =  "#101050"
  let col2 = "#000000"
  //col2 = "rgba("+hexToR(col2)+", "+hexToG(col2)+", "+hexToB(col2)+", 0.0)";// transparent
  let grad = ctx.createLinearGradient(x,y,x,y+H)
  grad.addColorStop(0, col2);
  grad.addColorStop(1, ac);
  ctx.fillStyle = grad
  //1
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+24*H/24)
  ctx.lineTo(x+24*W/24, y+24*H/24)
  ctx.lineTo(x+24*W/24, y+0*H/24)
  ctx.lineTo(x+0*W/24, y+0*H/24)
  ctx.fill()

  col2 = "#000000"
  col2 = "rgba("+hexToR(col2)+", "+hexToG(col2)+", "+hexToB(col2)+", 0.0)";// transparent
  grad = ctx.createLinearGradient(x,y+4*H/5,x,y+H)
  grad.addColorStop(0, col2);
  grad.addColorStop(1, "#ff8c00");
  ctx.fillStyle = grad
  //4 haze
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+12*H/24)
  ctx.lineTo(x+24*W/24, y+12*H/24)
  ctx.lineTo(x+24*W/24, y+24*H/24)
  ctx.lineTo(x+0*W/24, y+24*H/24)
  ctx.lineTo(x+0*W/24, y+12*H/24)
  ctx.fill()
  //2
  ctx.fillStyle = "#002010"
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+24*H/24)
  cpx = x+0*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+0*W/24, y+22*H/24)
  cpx = x+6*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+22*H/24)
  cpx = x+12*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+22*H/24)
  cpx = x+20*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+24*W/24, y+22*H/24)
  ctx.lineTo(x+24*W/24, y+24*H/24)
  ctx.lineTo(x+0*W/24, y+24*H/24)
  ctx.lineTo(x+0*W/24, y+22*H/24)
  ctx.fill()

  ctx.fillStyle = "#ffffff"
  let r = 0.8, i = 0, mx, my
  for (; i < 31; i++) {
    mx = Math.random() * 24
    my = Math.random() * 19
    ctx.beginPath()
    ctx.arc(x+mx*W/24, y+my*H/24,r+pet(r/2),0,Math.PI*2)
    ctx.fill()
  }
  ctx.globalAlpha /= 2
  ctx.strokeStyle = "#ffeeee"
  ctx.lineWidth = 1.3
  ctx.beginPath()
  mx = 2+Math.random() * 20
  my = 2+Math.random() * 18
  ctx.moveTo(x+mx*W/24,y+my*H/24)
  mx = 2+Math.random() * 20
  my = 2+Math.random() * 18
  ctx.lineTo(x+mx*W/24,y+my*H/24)
  ctx.stroke()
  r = 2 + Math.random() * 2

  ctx.beginPath()
  ctx.arc(x+mx*W/24,y+my*H/24,r,0,Math.PI*2)
  ctx.fill()
  ctx.globalAlpha *=2
  ctx.lineWidth = offset
  ctx.strokeStyle = color
}

function deer_in_the_headlightsAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  let offset = ctx.lineWidth
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  let c = color
  ctx.strokeStyle = color
  //6 sky
  ctx.fillStyle = "#204030"
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+15*H/24)
  cpx = x+13*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+0*W/24, y+8*H/24)
  ctx.lineTo(x+0*W/24, y+0*H/24)
  ctx.lineTo(x+15*W/24, y+0*H/24)
  ctx.lineTo(x+24*W/24, y+0*H/24)
  ctx.lineTo(x+24*W/24, y+15*H/24)
  ctx.fill()
   //5 road
  ctx.lineWidth /= 2
  ctx.fillStyle = "#404040"
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+8*H/24)
  cpx = x+13*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+24*W/24, y+15*H/24)
  ctx.lineTo(x+24*W/24, y+24*H/24)
  ctx.lineTo(x+0*W/24, y+24*H/24)
  ctx.lineTo(x+0*W/24, y+8*H/24)
  ctx.fill()
// road line
  ctx.strokeStyle = "#cccccc"
  ctx.lineWidth *= 3
  ctx.setLineDash([2*W/24])
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+12*H/24)
  cpx = x+14*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+24*H/24)
  ctx.stroke()
  ctx.setLineDash([])

  ctx.beginPath()
  ctx.moveTo(x+24*W/24, y+15*H/24)
  cpx = x+13*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+0*W/24, y+8*H/24)
  ctx.stroke()
//7 sky above trees
  ctx.fillStyle = "#205080"
  ctx.beginPath()
    ctx.moveTo(x+0*W/24, y+0*H/24)
  ctx.lineTo(x+0*W/24, y+3*H/24)
  ctx.lineTo(x+1*W/24, y+1*H/24)
  ctx.lineTo(x+2*W/24, y+3*H/24)
  ctx.lineTo(x+3*W/24, y+2*H/24)
  ctx.lineTo(x+4*W/24, y+3*H/24)
  ctx.lineTo(x+5*W/24, y+3*H/24)
  ctx.lineTo(x+6*W/24, y+1*H/24)
  ctx.lineTo(x+7*W/24, y+3*H/24)
  ctx.lineTo(x+8*W/24, y+2*H/24)
  ctx.lineTo(x+9*W/24, y+3*H/24)
  ctx.lineTo(x+10*W/24, y+0*H/24)
  ctx.lineTo(x+11*W/24, y+3*H/24)
  ctx.lineTo(x+12*W/24, y+3*H/24)
  ctx.lineTo(x+13*W/24, y+2*H/24)
  ctx.lineTo(x+14*W/24, y+3*H/24)
  ctx.lineTo(x+15*W/24, y+4*H/24)
  ctx.lineTo(x+16*W/24, y+2*H/24)
  ctx.lineTo(x+17*W/24, y+4*H/24)
  ctx.lineTo(x+18*W/24, y+3*H/24)
  ctx.lineTo(x+20*W/24, y+5*H/24)
  ctx.lineTo(x+21*W/24, y+3*H/24)
  ctx.lineTo(x+22*W/24, y+6*H/24)
  ctx.lineTo(x+23*W/24, y+4*H/24)
  ctx.lineTo(x+24*W/24, y+6*H/24)
  ctx.lineTo(x+24*W/24, y+0*H/24)
  ctx.lineTo(x+0*W/24, y+0*H/24)
  ctx.fill()

  //2 deer
  ctx.fillStyle = "#674c18" 
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+12*H/24)
  cpx = x+10*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+10*H/24)
  cpx = x+9*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+9*H/24)
  cpx = x+9*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+8*H/24)
  cpx = x+10*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+9*H/24)
  cpx = x+11*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+9*H/24)
  cpx = x+12*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+8*H/24)
  cpx = x+13*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+9*H/24)
  cpx = x+13*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+10*H/24)
  cpx = x+12*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+11*H/24)
  cpx = x+12*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+12*H/24)
  cpx = x+16*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+12*H/24)
  cpx = x+17*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+11*H/24)
  cpx = x+17*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+9*H/24)
  cpx = x+18*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+10*H/24)
  cpx = x+18*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+12*H/24)
  cpx = x+18*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+13*H/24)
  cpx = x+18*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+20*H/24)
  cpx = x+17*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+16*H/24)
  cpx = x+16*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+20*H/24)
  cpx = x+16*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+15*H/24)
  cpx = x+14*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+15*H/24)
  cpx = x+13*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+20*H/24)
  cpx = x+12*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+15*H/24)
  cpx = x+11*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+20*H/24)
  cpx = x+11*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+12*H/24)
  ctx.fill()

  ctx.fillStyle = "#775c28" 
  //1 belly
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+14*H/24)
  cpx = x+13*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+15*H/24)
  cpx = x+14*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+15*H/24)
  cpx = x+16*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+14*H/24)
  cpx = x+14*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+14*H/24)
  ctx.fill()

  //7 tail
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+12*H/24)
  cpx = x+18*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+10*H/24)
  cpx = x+18*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+9*H/24)
  cpx = x+18*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+12*H/24)
  ctx.fill()

  ctx.fillStyle = "#d3fdf5"
  //3 eyes
  ctx.beginPath()
  ctx.arc(x+11.5*W/24, y+10.5*H/24,W/90,0,Math.PI*2)
  ctx.fill()
  //4
  ctx.beginPath()
  ctx.arc(x+10*W/24, y+10.5*H/24,W/90,0,Math.PI*2)
  ctx.fill()
  ctx.globalAlpha /= 4
  ctx.beginPath()
  ctx.arc(x+11.5*W/24, y+10.5*H/24,W/40,0,Math.PI*2)
  ctx.fill()
  //4
  ctx.beginPath()
  ctx.arc(x+10*W/24, y+10.5*H/24,W/40,0,Math.PI*2)
  ctx.fill()
  ctx.globalAlpha *= 4
  //2 overlay
  col2 = "#000000"
  col2 = "rgba("+hexToR(col2)+", "+hexToG(col2)+", "+hexToB(col2)+", 0.0)";// transparent
  const grad=ctx.createRadialGradient(x+11*W/24, y+12*H/24,40,x+12*W/24, y+14*H/24,W/3);
  grad.addColorStop(0,col2);
  grad.addColorStop(1,"black");
  ctx.globalAlpha /= 1.8
  ctx.fillStyle = grad
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+0*H/24)
  ctx.lineTo(x+24*W/24, y+0*H/24)
  ctx.lineTo(x+24*W/24, y+24*H/24)
  ctx.lineTo(x+0*W/24, y+24*H/24)
  ctx.fill()

  //3 stars
  ctx.fillStyle = "#ffffff"
  let r = 1
  ctx.beginPath()
  ctx.arc(x+3*W/24, y+1*H/24,r,0,Math.PI*2)
  ctx.fill()
  //4
  ctx.beginPath()
  ctx.arc(x+7*W/24, y+2*H/24,r,0,Math.PI*2)
  ctx.fill()
  //5
  ctx.beginPath()
  ctx.arc(x+15*W/24, y+1.5*H/24,r,0,Math.PI*2)
  ctx.fill()
  //6
  ctx.beginPath()
  ctx.arc(x+11*W/24, y+1*H/24,r,0,Math.PI*2)
  ctx.fill()
  //6
  ctx.beginPath()
  ctx.arc(x+19*W/24, y+1*H/24,r,0,Math.PI*2)
  ctx.fill()
  ctx.beginPath()
  ctx.arc(x+22*W/24, y+3*H/24,r,0,Math.PI*2)
  ctx.fill()
  ctx.globalAlpha *= 1.8
  ctx.lineWidth = offset
  ctx.strokeStyle = c
}

function auroraAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy
  let offset = ctx.lineWidth
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  let saved = ctx.fillStyle

  let ac = randomPick(["#00ea8d","#017ed5","#b53dff","#ff1684","#A3DC6F"])
  let col2 = "#000000"
  col2 = "rgba("+hexToR(col2)+", "+hexToG(col2)+", "+hexToB(col2)+", 0.0)";// transparent
  let grad = ctx.createLinearGradient(x,y,x,y+2*H/3)
  grad.addColorStop(0, col2);
  grad.addColorStop(1, ac);
  ctx.fillStyle = "#101024"
  //1
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+0*H/24)
  ctx.lineTo(x+24*W/24, y+0*H/24)
  ctx.lineTo(x+24*W/24, y+24*H/24)
  ctx.lineTo(x+0*W/24, y+24*H/24)
  ctx.fill()

  ctx.fillStyle = grad
  //1
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+1*H/24)
  cpx = x+1*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+10*H/24)
  cpx = x+7*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+0*H/24)
  ctx.fill()
  //2
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+0*H/24)
  cpx = x+7*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+9*H/24)
  cpx = x+11*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+9*H/24)
  cpx = x+22*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+24*W/24, y+0*H/24)
  ctx.fill()

  //3
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+0*H/24)
  cpx = x+12*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+12*H/24)
  cpx = x+21*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+24*W/24, y+6*H/24)
  cpx = x+20*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+24*W/24, y+0*H/24)
  ctx.fill()

  //4
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+0*H/24)
  cpx = x+1*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+8*H/24)
  cpx = x+4*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+0*H/24)
  ctx.fill()
  y += 2*H/24
  ctx.lineWidth *=20
  ctx.globalAlpha /=12
  ctx.strokeStyle = randomPick(["#00ea8d","#017ed5","#b53dff","#ff1684","#A3DC6F"])
  ctx.beginPath() // haze
  ctx.moveTo(x+0*W/24, y+20*H/24)
  cpx = x+7*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+19*H/24)
  cpx = x+20*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+24*W/24, y+19*H/24)
  ctx.stroke()

  ctx.globalAlpha *=12
  ctx.lineWidth /=20
  //5

 //1 hills
  ctx.fillStyle = "#002010"
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+20*H/24)
  cpx = x+7*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+19*H/24)
  cpx = x+20*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+24*W/24, y+19*H/24)
  cpx = x+24*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+24*W/24, y+22*H/24)
  cpx = x+0*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+0*W/24, y+22*H/24)
  ctx.fill()

  y -= 2*H/24

  ctx.fillStyle = "#ffffff"
  let r = 0.8, i = 0
  mx = 0, my = 0
  for (;i < 23; i++) {
    ctx.beginPath()
    mx = Math.random() * 24
    my = Math.random() * 18
    ctx.arc(x+mx*W/24, y+my*H/24, r+pet(r/2), 0, Math.PI*2)
    ctx.fill()
  }
  ctx.strokeStyle = color
  ctx.fillStyle = saved
  ctx.lineWidth = offset
}

function full_moonAt (x,y,W,color) { // draw where rounded rect is drawn. do not draw as f nodraw
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy
  let offset = ctx.lineWidth
  let moons = shuffle(["pink","wolf","strawberry","beaver","cold","snow","worm","flower","buck","sturgeon","harvest","hunter's"])
  defs["full_moonAt"].i = moons[0]+" moon"
  defs["full_moonAt"].u = moons[1]+" moon"
  BRIGHT = true
  sortByBrightness()
  let colors = (getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  let saved = ctx.filledStyle
  ctx.lineCap = "round"

  
  ctx.fillStyle = colors[colors.length-1]
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+0*H/24)
  ctx.lineTo(x+24*W/24, y+0*H/24)
  ctx.lineTo(x+24*W/24, y+24*H/24)
  ctx.lineTo(x+0*W/24, y+24*H/24)
  ctx.fill()

  //1 earth
  ctx.fillStyle = colors[colors.length-2]
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+12*H/24)
  cpx = x+20*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+24*W/24, y+18*H/24)
  cpx = x+24*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+24*W/24, y+24*H/24)
  cpx = x+0*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+0*W/24, y+24*H/24)
  ctx.fill()

  //2 moon
  ctx.fillStyle = randomPick([colors[0],colors[1]])
  ctx.beginPath()
  ctx.arc(x+15*W/24, y+7.5*H/24, 5*W/24,0,Math.PI*2)
  ctx.fill()

  ctx.globalAlpha /=4
  ctx.fillStyle = randomPick([colors[0],colors[1]])
  ctx.beginPath()
  ctx.arc(x+15*W/24, y+7.5*H/24, 5.5*W/24,0,Math.PI*2)
  ctx.fill()
  ctx.globalAlpha *=4

  ctx.fillStyle = randomPick([colors[colors.length-4],colors[colors.length-3]])
  //4
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+12*H/24)
  cpx = x+20*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+24*W/24, y+18*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+15*H/24)
  cpx = x+4*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+16*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+15*H/24)
  cpx = x+12*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+16*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+17*H/24)
  cpx = x+20*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+18*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+21*H/24)
  cpx = x+6*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+22*H/24)
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+18*H/24)
  cpx = x+12*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+19*H/24)
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+21*H/24)
  cpx = x+15*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+22*H/24)
  ctx.stroke()

  //11
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+19*H/24)
  cpx = x+20*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+20*H/24)
  ctx.stroke()

   //12
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+18*H/24)
  cpx = x+6*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+19*H/24)
  ctx.stroke()

  ctx.lineWidth = offset
  ctx.filledStyle = saved
}

function flying_dreamAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+20*H/24)
  cpx = x+6*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+16*H/24)
  cpx = x+18*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+24*W/24, y+20*H/24)
  ctx.stroke()
  flyingAt (x+9.6*W/24,y+8*H/24,4*W/24,color)
}

function flyingAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+12*H/24)
  cpx = x+7*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+9*H/24)
  cpx = x+1*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+11*H/24)
  cpx = x+1*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+14*H/24)
  cpx = x+7*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+12*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+8*H/24)
  cpx = x+7*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+12*H/24)
  cpx = x+7*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+16*H/24)
  cpx = x+18*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+8*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+9*H/24)
  ctx.lineTo(x+6*W/24, y+7*H/24)
  ctx.lineTo(x+3*W/24, y+7*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+15*H/24)
  ctx.lineTo(x+6*W/24, y+17*H/24)
  ctx.lineTo(x+3*W/24, y+17*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+11*H/24)
  ctx.lineTo(x+22*W/24, y+9*H/24)
  ctx.lineTo(x+23*W/24, y+11*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+13*H/24)
  ctx.lineTo(x+22*W/24, y+12*H/24)
  ctx.lineTo(x+23*W/24, y+14*H/24)
  ctx.stroke()
}

function figureRotatedAt (x,y,W,color,a) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, angle = pet(360)
  if (!(a === undefined))
    angle = a
 // console.log(a,angle)
  //1
  ctx.beginPath()
  p = rotatePoint(x+8*W/24, y+18*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+16*W/24, y+18*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  cpx = x+16*W/24
  cpy = y+7*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24, y+7*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+8*W/24
  cpy = y+7*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+8*W/24, y+18*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()

  //2
  ctx.beginPath()
  p = rotatePoint(x+12*W/24, y+7*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+15*W/24
  cpy = y+7*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+15*W/24, y+3*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+15*W/24
  cpy = y+1*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+13*W/24, y+1*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+10*W/24
  cpy = y+1*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+10*W/24, y+5*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+10*W/24
  cpy = y+7*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24, y+7*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()

  //3
  ctx.beginPath()
  p = rotatePoint(x+12*W/24, y+9*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+13*W/24, y+12*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+18*W/24, y+12*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //4
  ctx.beginPath()
  p = rotatePoint(x+11*W/24, y+18*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+11*W/24, y+23*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+13*W/24, y+23*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //5
  ctx.beginPath()
  p = rotatePoint(x+13*W/24, y+18*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+14*W/24, y+23*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+16*W/24, y+23*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()
}

function figure_fillAt (x,y,W,color,fill) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  let savedF = ctx.fillStyle
  ctx.strokeStyle = color
  ctx.fillStyle = fill
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+18*H/24)
  cpx = x+16*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+18*H/24)
  cpx = x+16*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+7*H/24)
  cpx = x+8*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+18*H/24)
  ctx.fill()
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+5*H/24)
  cpx = x+10*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+7*H/24)
  cpx = x+15*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+3*H/24)
  cpx = x+15*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+1*H/24)
  cpx = x+10*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+5*H/24)
  ctx.fill()
  ctx.stroke()

if (Math.random() < 0.5) {
  //3
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+18*H/24)
  ctx.lineTo(x+9*W/24, y+23*H/24)
  ctx.lineTo(x+11*W/24, y+23*H/24)
  ctx.stroke()
} else {
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+18*H/24)
  ctx.lineTo(x+11*W/24, y+23*H/24)
  ctx.lineTo(x+13*W/24, y+23*H/24)
  ctx.stroke()
}
if (Math.random() < 0.5) {
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+18*H/24)
  ctx.lineTo(x+14*W/24, y+23*H/24)
  ctx.lineTo(x+16*W/24, y+23*H/24)
  ctx.stroke()
} else {
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+18*H/24)
  ctx.lineTo(x+14*W/24, y+23*H/24)
  ctx.lineTo(x+16*W/24, y+22*H/24)
  ctx.stroke()    
}
if (Math.random() < 0.5) {
  //5
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+9*H/24)
  ctx.lineTo(x+13*W/24, y+12*H/24)
  ctx.lineTo(x+18*W/24, y+12*H/24)
  ctx.stroke()
} else {
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+9*H/24)
  ctx.lineTo(x+12*W/24, y+12*H/24)
  ctx.lineTo(x+17*W/24, y+8*H/24)
  ctx.stroke()
}
}

function figureLAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+12*W/24+pet(d), y+7*H/24+pet(d))
  cpx = x+14*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+14*W/24+pet(d), y+5*H/24+pet(d))
  cpx = x+14*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+11*W/24+pet(d), y+1*H/24+pet(d))
  cpx = x+9*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+9*W/24+pet(d), y+3*H/24+pet(d))
  cpx = x+9*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+7*H/24+pet(d))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+8*W/24+pet(d), y+18*H/24+pet(d))
  cpx = x+8*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+7*H/24+pet(d))
  cpx = x+16*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*W/24+pet(d), y+18*H/24+pet(d))
  ctx.lineTo(x+8*W/24+pet(d), y+18*H/24+pet(d))
  ctx.stroke()

  if (Math.random() < 0.5) {
  //3
  ctx.beginPath()
  ctx.moveTo(x+11*W/24+pet(d), y+18*H/24+pet(d))
  ctx.lineTo(x+11*W/24+pet(d), y+23*H/24+pet(d))
  ctx.lineTo(x+9*W/24+pet(d), y+23*H/24+pet(d))
  ctx.stroke()
} else {
  ctx.beginPath()
  ctx.moveTo(x+11*W/24+pet(d), y+18*H/24+pet(d))
  ctx.lineTo(x+10*W/24+pet(d), y+23*H/24+pet(d))
  ctx.lineTo(x+8*W/24+pet(d), y+23*H/24+pet(d))
  ctx.stroke()
}
if (Math.random() < 0.5) {
  ctx.beginPath()
  ctx.moveTo(x+13*W/24+pet(d), y+18*H/24+pet(d))
  ctx.lineTo(x+13*W/24+pet(d), y+23*H/24+pet(d))
  ctx.lineTo(x+11*W/24+pet(d), y+23*H/24+pet(d))
  ctx.stroke()
} else {
  ctx.beginPath()
  ctx.moveTo(x+13*W/24+pet(d), y+18*H/24+pet(d))
  ctx.lineTo(x+14*W/24+pet(d), y+23*H/24+pet(d))
  ctx.lineTo(x+12*W/24+pet(d), y+23*H/24+pet(d))
  ctx.stroke()    
}
if (Math.random() < 0.5) {
  ctx.beginPath()
  ctx.moveTo(x+12*W/24+pet(d), y+9*H/24+pet(d))
  ctx.lineTo(x+11*W/24+pet(d), y+12*H/24+pet(d))
  ctx.lineTo(x+6*W/24+pet(d), y+12*H/24+pet(d))
  ctx.stroke()
} else {
  ctx.beginPath()
  ctx.moveTo(x+12*W/24+pet(d), y+9*H/24+pet(d))
  ctx.lineTo(x+12*W/24+pet(d), y+12*H/24+pet(d))
  ctx.lineTo(x+6*W/24+pet(d), y+7*H/24+pet(d))
  ctx.stroke()
}

  //3
  
/*
  //4
  ctx.beginPath()
  ctx.moveTo(x+13*W/24+pet(d), y+18*H/24+pet(d))
  ctx.lineTo(x+13*W/24+pet(d), y+23*H/24+pet(d))
  ctx.lineTo(x+11*W/24+pet(d), y+23*H/24+pet(d))
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+11*W/24+pet(d), y+18*H/24+pet(d))
  ctx.lineTo(x+11*W/24+pet(d), y+23*H/24+pet(d))
  ctx.lineTo(x+9*W/24+pet(d), y+23*H/24+pet(d))
  ctx.stroke()*/
}

function figureRAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+18*H/24)
  cpx = x+16*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+18*H/24)
  cpx = x+16*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+7*H/24)
  cpx = x+8*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+18*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+5*H/24)
  cpx = x+10*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+7*H/24)
  cpx = x+15*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+3*H/24)
  cpx = x+15*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+1*H/24)
  cpx = x+10*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+5*H/24)
  ctx.stroke()

if (Math.random() < 0.5) {
  //3
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+18*H/24)
  ctx.lineTo(x+9*W/24, y+23*H/24)
  ctx.lineTo(x+11*W/24, y+23*H/24)
  ctx.stroke()
} else {
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+18*H/24)
  ctx.lineTo(x+11*W/24, y+23*H/24)
  ctx.lineTo(x+13*W/24, y+23*H/24)
  ctx.stroke()
}
if (Math.random() < 0.5) {
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+18*H/24)
  ctx.lineTo(x+14*W/24, y+23*H/24)
  ctx.lineTo(x+16*W/24, y+23*H/24)
  ctx.stroke()
} else {
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+18*H/24)
  ctx.lineTo(x+14*W/24, y+23*H/24)
  ctx.lineTo(x+16*W/24, y+22*H/24)
  ctx.stroke()    
}
if (Math.random() < 0.5) {
  //5
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+9*H/24)
  ctx.lineTo(x+13*W/24, y+12*H/24)
  ctx.lineTo(x+18*W/24, y+12*H/24)
  ctx.stroke()
} else {
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+9*H/24)
  ctx.lineTo(x+12*W/24, y+12*H/24)
  ctx.lineTo(x+17*W/24, y+8*H/24)
  ctx.stroke()
}
}

function like_pulling_teethAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+21*W/24, y+8*H/24)
  cpx = x+21*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+2*H/24)
  cpx = x+12*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+3*H/24)
  cpx = x+12*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+2*H/24)
  cpx = x+3*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+8*H/24)
  cpx = x+3*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+14*H/24)
  cpx = x+5*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+19*H/24)
  cpx = x+5*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+23*H/24)
  cpx = x+9*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+19*H/24)
  cpx = x+11*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+14*H/24)
  cpx = x+13*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+19*H/24)
  cpx = x+15*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+23*H/24)
  cpx = x+19*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+19*H/24)
  cpx = x+19*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+14*H/24)
  cpx = x+21*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+8*H/24)
  ctx.stroke()
}

function like_and_followAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+10*H/24)
  ctx.lineTo(x+16*W/24, y+10*H/24)
  ctx.lineTo(x+15*W/24, y+22*H/24)
  ctx.stroke()

  //2
  figureRAt(x+2*W/24, y+6*H/24, 4*W/24,color)
  figureRAt(x+5*W/24, y+6*H/24, 4*W/24,color)
  figureRAt(x+8*W/24, y+6*H/24, 4*W/24,color)
  figureRAt(x+11*W/24, y+6*H/24, 4*W/24,color)
  figureRotatedAt(x+18*W/24, y+11*H/24, 4*W/24,color)
  figureRotatedAt(x+19*W/24, y+17*H/24, 4*W/24,color)
}

function scratchy_sweaterAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  
  ctx.save()
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+3*H/24)
  cpx = x+0*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+22*H/24)
  cpx = x+5*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+23*H/24)
  cpx = x+6*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+10*H/24)
  cpx = x+6*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+22*H/24)
  cpx = x+18*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+22*H/24)
  cpx = x+17*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+10*H/24)
  cpx = x+18*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+23*H/24)
  cpx = x+23*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+22*H/24)
  cpx = x+24*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+3*H/24)
  cpx = x+10*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+3*H/24)
  //ctx.stroke()
  ctx.clip()
  ramenAt (x,y,W,color) 
  ctx.restore()
}


function ramenAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  //1
  ctx.save()
  ctx.beginPath()
  ctx.moveTo(x+0.25*W/24, y+0.25*H/24)
  ctx.lineTo(x+23*W/24, y+0.25*H/24)
  ctx.lineTo(x+23*W/24, y+22.5*H/24)
  ctx.lineTo(x+0.25*W/24, y+22.5*H/24)
  ctx.lineTo(x+0.25*W/24, y+0.25*H/24)
  ctx.closePath()

  ctx.clip()

  let i = 0, j = 0, d = W/60, 
  x0 = x, y0 = y
  //1
  let S = 48
  for (; j < 6; j++) {
    x = x0
    ctx.beginPath()
    ctx.moveTo(x+1*W/S, y+8*H/S)
    i = 0
    for (; i < 14; i++) {
      cpx = x+1*W/S+pet(d)
      cpy = y+9*H/S+pet(d)
      ctx.quadraticCurveTo(cpx, cpy, x+2*W/S+pet(d), y+9*H/S+pet(d))
      cpx = x+3*W/S+pet(d)
      cpy = y+9*H/S+pet(d)
      ctx.quadraticCurveTo(cpx, cpy, x+3*W/S+pet(d), y+8*H/S+pet(d))
      cpx = x+3*W/S+pet(d)
      cpy = y+5*H/S+pet(d)
      ctx.quadraticCurveTo(cpx, cpy, x+3*W/S+pet(d), y+2*H/S+pet(d))
      cpx = x+3*W/S+pet(d)
      cpy = y+1*H/S+pet(d)
      ctx.quadraticCurveTo(cpx, cpy, x+4*W/S+pet(d), y+1*H/S+pet(d))
      cpx = x+5*W/S+pet(d)
      cpy = y+1*H/S+pet(d)
      ctx.quadraticCurveTo(cpx, cpy, x+5*W/S+pet(d), y+2*H/S+pet(d))
      cpx = x+5*W/S+pet(d)
      cpy = y+5*H/S+pet(d)
      x += 4*W/60
    }
    ctx.stroke()
    y += 8*W/S
  }

  j = 0
  x0 -= W/S*2
  x = x0
  y0 += W/S*3
  y = y0
  for (; j < 5; j++) {
    x = x0
    ctx.beginPath()
    ctx.moveTo(x+1*W/S, y+8*H/S)
    i = 0
    for (; i < 15; i++) {
      cpx = x+1*W/S+pet(d)
      cpy = y+9*H/S+pet(d)
      ctx.quadraticCurveTo(cpx, cpy, x+2*W/S+pet(d), y+9*H/S+pet(d))
      cpx = x+3*W/S+pet(d)
      cpy = y+9*H/S+pet(d)
      ctx.quadraticCurveTo(cpx, cpy, x+3*W/S+pet(d), y+8*H/S+pet(d))
      cpx = x+3*W/S+pet(d)
      cpy = y+5*H/S+pet(d)
      ctx.quadraticCurveTo(cpx, cpy, x+3*W/S+pet(d), y+2*H/S+pet(d))
      cpx = x+3*W/S+pet(d)
      cpy = y+1*H/S+pet(d)
      ctx.quadraticCurveTo(cpx, cpy, x+4*W/S+pet(d), y+1*H/S+pet(d))
      cpx = x+5*W/S+pet(d)
      cpy = y+1*H/S+pet(d)
      ctx.quadraticCurveTo(cpx, cpy, x+5*W/S+pet(d), y+2*H/S+pet(d))
      cpx = x+5*W/S+pet(d)
      cpy = y+5*H/S+pet(d)
      x += 4*W/60
    }
    ctx.stroke()
    y += 8*W/S
  }
  ctx.restore()
}

function agoraphobiaAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //2
  figureRAt(x+10.25*W/24, y+11*H/24, 3.5*W/24,color)

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+9*H/24)
  ctx.lineTo(x+10*W/24, y+11*H/24)
  ctx.lineTo(x+10*W/24, y+15*H/24)
  ctx.lineTo(x+14*W/24, y+15*H/24)
  ctx.lineTo(x+14*W/24, y+11*H/24)
  ctx.lineTo(x+12*W/24, y+9*H/24)
  ctx.lineTo(x+12*W/24, y+2*H/24)
  ctx.lineTo(x+22*W/24, y+2*H/24)
  ctx.lineTo(x+22*W/24, y+22*H/24)
  ctx.lineTo(x+2*W/24, y+22*H/24)
  ctx.lineTo(x+2*W/24, y+2*H/24)
  ctx.lineTo(x+12*W/24, y+2*H/24)
  ctx.lineTo(x+12*W/24, y+9*H/24)
  ctx.fill()
}

function acrophobiaAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+4*H/24)
  cpx = x+12*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+4*H/24)
  cpx = x+12*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+4*H/24)
 // ctx.stroke()
//5
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+4*H/24)
  ctx.lineTo(x+13*W/24, y+4*H/24)
  ctx.stroke()
  //2
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+23*H/24)
  cpx = x+11*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+4*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+23*W/24, y+23*H/24)
  cpx = x+13*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+4*H/24)
  ctx.stroke()

  //4
  figureRAt(x+10.2*W/24, y+0.45*H/24, 3.5*W/24,color)
}

function frogAt (x,y,W,color,INVERTED) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineJoin = "round"
  y -= 3
  //1
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+20*H/24)
  cpx = x+13*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+19*H/24)
  cpx = x+13*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+18*H/24)
  cpx = x+17*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+19*H/24)
  cpx = x+15*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+16*H/24)
  cpx = x+15*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+14*H/24)
  cpx = x+20*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+18*H/24)
  cpx = x+20*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+19*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+20*H/24)
  cpx = x+16*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+20*H/24)
  cpx = x+19*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+19*H/24)
  ctx.stroke()
  //3
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+14*H/24)
  cpx = x+18*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+12*H/24)
  cpx = x+12*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+11*H/24)
  cpx = x+10*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+12*H/24)
  cpx = x+10*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+11*H/24)
  cpx = x+8*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+12*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+12*H/24)
  cpx = x+5*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+12*H/24)
  cpx = x+4*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+13*H/24)
  cpx = x+4*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+15*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+19*H/24)
  cpx = x+14*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+19*H/24)
  ctx.stroke()

   //32 f leg
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+16*H/24)
  cpx = x+10*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+20*H/24)
  cpx = x+8*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+20*H/24)
  cpx = x+7*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+19*H/24)
  cpx = x+9*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+16*H/24)
  ctx.stroke()
  //8
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+16*H/24)
  cpx = x+11*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+18*H/24)
  ctx.stroke()
    //34
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+15*H/24)
  cpx = x+8*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+16*H/24)
  ctx.stroke()

  //11
  ctx.beginPath()
  ctx.arc(x+9*W/24, y+12*H/24, H/48,0,Math.PI*2)
  ctx.stroke()

  //12
  ctx.beginPath()
  ctx.arc(x+11*W/24, y+12*H/24, H/48,0,Math.PI*2)
  ctx.stroke()

  //13
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+13*H/24)
  cpx = x+6*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+14*H/24)
  ctx.stroke()
  //14
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+5*H/24)
  cpx = x+2*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+20*H/24)
  cpx = x+2*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+21*H/24)
  cpx = x+21*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+21*H/24)
  cpx = x+22*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+20*H/24)
  cpx = x+22*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+5*H/24)
  ctx.stroke()

  //32
  ctx.beginPath()
  ctx.moveTo(x+22*W/24, y+5*H/24)
  cpx = x+22*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+4*H/24)
  ctx.stroke()

  //33
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+5*H/24)
  cpx = x+2*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+4*H/24)
  ctx.stroke()

   // bubbles 
  if (INVERTED) {
    let r = W/36

    //34
    ctx.beginPath()
    ctx.arc(x+12*W/24, y+15*H/24,r,0,Math.PI*2)
    ctx.stroke()

    //35
    ctx.beginPath()
    ctx.arc(x+18*W/24, y+16*H/24,r,0,Math.PI*2)
    ctx.stroke()
    //20
    ctx.beginPath()
    ctx.arc(x+19*W/24, y+9*H/24,r,0,Math.PI*2)
    ctx.stroke()

    //21
    ctx.beginPath()
    ctx.arc(x+15*W/24, y+7*H/24,r,0,Math.PI*2)
    ctx.stroke()

    //22
    ctx.beginPath()
    ctx.arc(x+15*W/24, y+11*H/24,r,0,Math.PI*2)
    ctx.stroke()

    //23
    ctx.beginPath()
    ctx.arc(x+20*W/24, y+12*H/24,r,0,Math.PI*2)
    ctx.stroke()

    //24
    ctx.beginPath()
    ctx.arc(x+5*W/24, y+17*H/24,r,0,Math.PI*2)
    ctx.stroke()

    //25
    ctx.beginPath()
    ctx.arc(x+4*W/24, y+10*H/24,r,0,Math.PI*2)
    ctx.stroke()

    //26
    ctx.beginPath()
    ctx.arc(x+8*W/24, y+8*H/24,r,0,Math.PI*2)
    ctx.stroke()

    //27
    ctx.beginPath()
    ctx.arc(x+12*W/24, y+9*H/24,r,0,Math.PI*2)
    ctx.stroke()

    //28
    ctx.beginPath()
    ctx.arc(x+21*W/24, y+8*H/24,r,0,Math.PI*2)
    ctx.stroke()

    //29
    ctx.beginPath()
    ctx.arc(x+4*W/24, y+19*H/24,r,0,Math.PI*2)
    ctx.stroke()

    ctx.beginPath()
    ctx.arc(x+21*W/24, y+19*H/24,r,0,Math.PI*2)
    ctx.stroke()
  }
  let i = 0
  for (; i < 10; i++) {
    
    ctx.beginPath()
    ctx.moveTo(x+2*W/24, y+6*H/24)
    cpx = x+2*W/24
    cpy = y+7*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+7*H/24)
    cpx = x+4*W/24
    cpy = y+7*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+6*H/24)
    ctx.stroke()

    ctx.beginPath()
    ctx.moveTo(x+3*W/24, y+24*H/24)
    cpx = x+2*W/24
    cpy = y+24*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+21*H/24)
    cpx = x+4*W/24
    cpy = y+24*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+24*H/24)
    ctx.stroke()
    x += 2*W/24
  }
}

function kitchenAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  //1
  ctx.fillStyle = randomPick(colors)
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+8*H/24)
  ctx.lineTo(x+9*W/24, y+8*H/24)
  ctx.lineTo(x+7*W/24, y+11*H/24)
  ctx.lineTo(x+2*W/24, y+11*H/24)
  ctx.lineTo(x+4*W/24, y+8*H/24)
  ctx.fill()
  ctx.fillStyle = randomPick(colors)

  //2
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+8*H/24)
  ctx.lineTo(x+14*W/24, y+8*H/24)
  ctx.lineTo(x+12*W/24, y+11*H/24)
  ctx.lineTo(x+7*W/24, y+11*H/24)
  ctx.lineTo(x+9*W/24, y+8*H/24)
  ctx.fill()
  ctx.fillStyle = randomPick(colors)

  //3
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+8*H/24)
  ctx.lineTo(x+20*W/24, y+8*H/24)
  ctx.lineTo(x+18*W/24, y+11*H/24)
  ctx.lineTo(x+12*W/24, y+11*H/24)
  ctx.lineTo(x+14*W/24, y+8*H/24)
  ctx.fill()
  ctx.fillStyle = randomPick(colors)

  //4
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+8*H/24)
  ctx.lineTo(x+18*W/24, y+11*H/24)
  ctx.lineTo(x+22*W/24, y+11*H/24)
  ctx.lineTo(x+23*W/24, y+8*H/24)
  ctx.lineTo(x+20*W/24, y+8*H/24)
  ctx.fill()
  ctx.fillStyle = randomPick(colors)

  //5
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+11*H/24)
  ctx.lineTo(x+2*W/24, y+16*H/24)
  ctx.lineTo(x+7*W/24, y+16*H/24)
  ctx.lineTo(x+7*W/24, y+11*H/24)
  ctx.lineTo(x+2*W/24, y+11*H/24)
  ctx.fill()
  ctx.fillStyle = randomPick(colors)

  //6
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+1*H/24)
  ctx.lineTo(x+4*W/24, y+6*H/24)
  ctx.lineTo(x+9*W/24, y+6*H/24)
  ctx.lineTo(x+9*W/24, y+1*H/24)
  ctx.lineTo(x+4*W/24, y+1*H/24)
  ctx.fill()
  ctx.fillStyle = randomPick(colors)

  //7
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+1*H/24)
  ctx.lineTo(x+10*W/24, y+6*H/24)
  ctx.lineTo(x+15*W/24, y+6*H/24)
  ctx.lineTo(x+15*W/24, y+1*H/24)
  ctx.lineTo(x+10*W/24, y+1*H/24)
  ctx.fill()
  ctx.fillStyle = randomPick(colors)

  //8
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+11*H/24)
  ctx.lineTo(x+12*W/24, y+16*H/24)
  ctx.lineTo(x+7*W/24, y+16*H/24)
  ctx.lineTo(x+7*W/24, y+11*H/24)
  ctx.fill()
  ctx.fillStyle = randomPick(colors)

  //9
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+11*H/24)
  ctx.lineTo(x+18*W/24, y+11*H/24)
  ctx.lineTo(x+18*W/24, y+16*H/24)
  ctx.lineTo(x+12*W/24, y+16*H/24)
  ctx.lineTo(x+12*W/24, y+11*H/24)
  ctx.fill()
  ctx.fillStyle = randomPick(colors)

  //10
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+11*H/24)
  ctx.lineTo(x+18*W/24, y+16*H/24)
  ctx.lineTo(x+22*W/24, y+16*H/24)
  ctx.lineTo(x+22*W/24, y+11*H/24)
  ctx.lineTo(x+18*W/24, y+11*H/24)
  ctx.fill()
  ctx.fillStyle = randomPick(colors)

  //11
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+15*H/24)
  ctx.lineTo(x+1*W/24, y+17*H/24)
  ctx.lineTo(x+23*W/24, y+17*H/24)
  ctx.lineTo(x+23*W/24, y+16*H/24)
  ctx.lineTo(x+2*W/24, y+16*H/24)
  ctx.lineTo(x+2*W/24, y+15*H/24)
  ctx.fill()
  ctx.fillStyle = randomPick(colors)

  //12
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+1*H/24)
  ctx.lineTo(x+2*W/24, y+11*H/24)
  ctx.lineTo(x+4*W/24, y+8*H/24)
  ctx.lineTo(x+23*W/24, y+8*H/24)
  ctx.lineTo(x+23*W/24, y+3*H/24)
  ctx.lineTo(x+21*W/24, y+3*H/24)
  ctx.lineTo(x+21*W/24, y+5*H/24)
  ctx.lineTo(x+16*W/24, y+5*H/24)
  ctx.lineTo(x+16*W/24, y+4*H/24)
  ctx.lineTo(x+15*W/24, y+4*H/24)
  ctx.lineTo(x+15*W/24, y+6*H/24)
  ctx.lineTo(x+10*W/24, y+6*H/24)
  ctx.lineTo(x+10*W/24, y+4*H/24)
  ctx.lineTo(x+9*W/24, y+4*H/24)
  ctx.lineTo(x+9*W/24, y+6*H/24)
  ctx.lineTo(x+4*W/24, y+6*H/24)
  ctx.lineTo(x+4*W/24, y+1*H/24)
  ctx.lineTo(x+2*W/24, y+1*H/24)
  ctx.fill()
  ctx.fillStyle = randomPick(colors)

  //13
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+17*H/24)
  ctx.lineTo(x+1*W/24, y+22*H/24)
  ctx.lineTo(x+8*W/24, y+22*H/24)
  ctx.lineTo(x+10*W/24, y+17*H/24)
  ctx.lineTo(x+1*W/24, y+17*H/24)
  ctx.fill()
  ctx.fillStyle = randomPick(colors)

  //14
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+22*H/24)
  ctx.lineTo(x+17*W/24, y+22*H/24)
  ctx.lineTo(x+19*W/24, y+17*H/24)
  ctx.lineTo(x+10*W/24, y+17*H/24)
  ctx.lineTo(x+8*W/24, y+22*H/24)
  ctx.fill()
  ctx.fillStyle = randomPick(colors)

  //15
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+22*H/24)
  ctx.lineTo(x+23*W/24, y+22*H/24)
  ctx.lineTo(x+23*W/24, y+17*H/24)
  ctx.lineTo(x+19*W/24, y+17*H/24)
  ctx.fill()
  ctx.fillStyle = randomPick(colors)

  //16
  ctx.beginPath()
  ctx.moveTo(x+23*W/24, y+8*H/24)
  ctx.lineTo(x+23*W/24, y+13*H/24)
  ctx.lineTo(x+22*W/24, y+16*H/24)
  ctx.fill()
  ctx.fillStyle = randomPick(colors)

  //17
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+1*H/24)
  ctx.lineTo(x+16*W/24, y+5*H/24)
  ctx.lineTo(x+21*W/24, y+5*H/24)
  ctx.lineTo(x+21*W/24, y+1*H/24)
  ctx.lineTo(x+16*W/24, y+1*H/24)
  ctx.fill()
  ctx.fillStyle = randomPick(colors)

  //18
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+1*H/24)
  ctx.lineTo(x+9*W/24, y+4*H/24)
  ctx.lineTo(x+10*W/24, y+4*H/24)
  ctx.lineTo(x+10*W/24, y+1*H/24)
  ctx.lineTo(x+15*W/24, y+1*H/24)
  ctx.lineTo(x+15*W/24, y+4*H/24)
  ctx.lineTo(x+16*W/24, y+4*H/24)
  ctx.lineTo(x+16*W/24, y+1*H/24)
  ctx.lineTo(x+21*W/24, y+1*H/24)
  ctx.lineTo(x+21*W/24, y+3*H/24)
  ctx.lineTo(x+23*W/24, y+3*H/24)
  ctx.lineTo(x+23*W/24, y+1*H/24)
  ctx.lineTo(x+9*W/24, y+1*H/24)
  ctx.fill()
  ctx.fillStyle = randomPick(colors)

  //19
  ctx.beginPath()
  ctx.moveTo(x+23*W/24, y+13*H/24)
  ctx.lineTo(x+23*W/24, y+16*H/24)
  ctx.lineTo(x+22*W/24, y+16*H/24)
  ctx.fill()
  ctx.fillStyle = randomPick(colors)

  //20
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+17*H/24)
  ctx.lineTo(x+1*W/24, y+11*H/24)
  ctx.lineTo(x+2*W/24, y+11*H/24)
  ctx.lineTo(x+2*W/24, y+15*H/24)
  ctx.lineTo(x+1*W/24, y+17*H/24)
  ctx.fill()
  ctx.fillStyle = randomPick(colors)

  //21
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+11*H/24)
  ctx.lineTo(x+1*W/24, y+1*H/24)
  ctx.lineTo(x+2*W/24, y+1*H/24)
  ctx.lineTo(x+2*W/24, y+11*H/24)
  ctx.lineTo(x+1*W/24, y+11*H/24)
  ctx.fill()
  ctx.fillStyle = randomPick(colors)

  //22
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+17*H/24)
  ctx.lineTo(x+1*W/24, y+22*H/24)
  ctx.lineTo(x+1*W/24, y+17*H/24)
  ctx.fill()
  ctx.fillStyle = randomPick(colors)
} 

function poolAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.fillStyle = randomPick(colors)
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+18*H/24)
  ctx.lineTo(x+9*W/24, y+16*H/24)
  ctx.lineTo(x+10*W/24, y+16*H/24)
  ctx.lineTo(x+10*W/24, y+20*H/24)
  ctx.lineTo(x+2*W/24, y+18*H/24)
  ctx.fill()
  ctx.fillStyle = randomPick(colors)
  //2
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+16*H/24)
  ctx.lineTo(x+10*W/24, y+14*H/24)
  ctx.lineTo(x+10*W/24, y+16*H/24)
  ctx.fill()

ctx.fillStyle = randomPick(colors)
  //5
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+18*H/24)
  ctx.lineTo(x+9*W/24, y+16*H/24)
  ctx.lineTo(x+10*W/24, y+14*H/24)
  ctx.lineTo(x+10*W/24, y+9*H/24)
  ctx.lineTo(x+2*W/24, y+8*H/24)
  ctx.lineTo(x+2*W/24, y+18*H/24)
  ctx.lineTo(x+9*W/24, y+16*H/24)
  ctx.fill()
ctx.fillStyle = randomPick(colors)
  //6
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+14*H/24)
  ctx.lineTo(x+14*W/24, y+11*H/24)
  ctx.lineTo(x+22*W/24, y+12*H/24)
  ctx.lineTo(x+18*W/24, y+15*H/24)
  ctx.lineTo(x+10*W/24, y+14*H/24)
  ctx.fill()
ctx.fillStyle = randomPick(colors)
  //7
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+9*H/24)
  ctx.lineTo(x+14*W/24, y+8*H/24)
  ctx.lineTo(x+14*W/24, y+6*H/24)
  ctx.lineTo(x+2*W/24, y+8*H/24)
  ctx.lineTo(x+10*W/24, y+9*H/24)
  ctx.fill()
ctx.fillStyle = randomPick(colors)
  //8
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+9*H/24)
  ctx.lineTo(x+10*W/24, y+14*H/24)
  ctx.lineTo(x+14*W/24, y+11*H/24)
  ctx.lineTo(x+14*W/24, y+8*H/24)
  ctx.fill()
ctx.fillStyle = randomPick(colors)
  //9
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+8*H/24)
  ctx.lineTo(x+22*W/24, y+6*H/24)
  ctx.lineTo(x+22*W/24, y+12*H/24)
  ctx.lineTo(x+14*W/24, y+11*H/24)
  ctx.lineTo(x+14*W/24, y+8*H/24)
  ctx.fill()
ctx.fillStyle = randomPick(colors)
  //10
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+6*H/24)
  ctx.lineTo(x+14*W/24, y+8*H/24)
  ctx.lineTo(x+22*W/24, y+6*H/24)
  ctx.lineTo(x+14*W/24, y+6*H/24)
  ctx.fill()
ctx.fillStyle = randomPick(colors)
   //11
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+16*H/24)
  ctx.lineTo(x+17*W/24, y+17*H/24)
  ctx.lineTo(x+18*W/24, y+15*H/24)
  ctx.lineTo(x+10*W/24, y+14*H/24)
  ctx.fill()
ctx.fillStyle = randomPick(colors)
  //12
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+16*H/24)
  ctx.lineTo(x+17*W/24, y+17*H/24)
  ctx.lineTo(x+10*W/24, y+20*H/24)
  ctx.lineTo(x+10*W/24, y+16*H/24)
  ctx.fill()
}

function sigilAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W
  let cx = x + W/2, cy = y + W/2
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color

  let points = []
  if (Math.random() > 0.5)
    points = array_o(x,y,W)
  else
    points = array_p(x,y,W)
  points = nearest_first(points)
  if (!points)
    console.log("bad",points)
  let i = 0
  ctx.beginPath()
  ctx.moveTo(points[i].x,points[i++].y)
  for (; i < points.length-1; i +=2) {
    ctx.quadraticCurveTo(points[i].x,points[i].y,points[i+1].x,points[i+1].y)
  }
  ctx.stroke()

  ctx.beginPath()
  ctx.arc(x+W/2,y+W/2,W/2,0,Math.PI*2)
  ctx.stroke()
  ctx.beginPath()
  ctx.arc(x+W/2,y+W/2,W/2*0.8,0,Math.PI*2)
  ctx.stroke()

  let fs = W/20, x0, y0
  let numsymbols = randomPick([5,7,9])
  ctx.font = "800 "+fs+"pt Garamond"
  let r = W/2*0.9
  let a = Math.PI*2 * Math.random()
  cx -= fs/2
  cy += fs/2
  let symbols = ["\u{0260F}","\u{02135}","\u{02629}","\u{02646}","\u{02643}","\u{0263F}",
  "\u{02609}","\u{0260A}","\u{02126}","\u{02107}","\u{02399}","\u{02710}","\u{02204}","\u{02608}",
  "\u{00B6}","\u{02625}","\u{02647}","\u{02702}","\u{0210F}","\u{0FF04}","\u{022BE}","\u{16D2}" ]
  symbols = shuffle(symbols)
  i = 0
  for (; i < numsymbols; i++) {
    x0 = cx + r * Math.cos(a)
    y0 = cy + r * Math.sin(a)
  // let text = "\u{0260F}"
    ctx.fillText(symbols[i],x0,y0)
    a += Math.PI*2/numsymbols
  }
  points = shuffle(points)
  let max = randomPick([5,6,7])
  i = 0
  for (; i < max; i++) { // filled circles
    if (points[i]) {
      ctx.beginPath()
      ctx.arc(points[i].x,points[i].y,fs/2.4,0,Math.PI*2)
      ctx.fill()
    }
  }
  i = 0
  ctx.font = "800 "+fs*1.1+"pt Garamond"
  for (; i < max+4; i++) {
    if (points[i])
      ctx.fillText("\u{2720}",points[i].x-fs/2,points[i].y+fs/2)
  }
}

function distancei (p1, p2) {
  return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2))
}

function array_o (x,y,w) {
  points = []
  let i = 0, p = 3, inc = w/10
  let cx = x+w/2, cy = y+w/2
  let x0 = 0, y0 = 0, L = 0, off = 0
  let c = new point(cx,cy)
  let a = Math.PI * 1/3
  let yinc = inc*0.7//cy + w/12 * Math.sin(a)
 // let yinc = cy + inc * Math.sin(a)
  for (; i < 199; i++) {
    let pt = new point(x+x0+pet(p),y+y0+pet(p))
    if (distancei(pt,c) < w*0.36)
      points.push(pt)
      x0 += inc
    if (x0 > w-10) {
      L++
      if (L%2 === 1)
        off = inc/2
      else
        off = 0
      x0 = inc + off
      y0 += yinc
    }
  }
  /*
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  ctx.fillStyle = 'red'
  i = 0
  for (; i < points.length; i++) {
    ctx.beginPath()
    ctx.arc(points[i].x,points[i].y,3,0,Math.PI*2)
    ctx.closePath()
    ctx.fill()
  }
  */
  return points
}

function array_p (x,y,w) {
  points = []
  let i = 0, p = 2, inc = w/12
  let cx = x+w/2, cy = y+w/2
  let x0 = 0, y0 = 0
  let c = new point(cx,cy)
  for (; i < 199; i++) {
    let pt = new point(x+x0+pet(p),y+y0+pet(p))
    if (distancei(pt,c) < w*0.36)
      points.push(pt)
    x0 += inc
    if (x0 > w-10) {
      x0 = inc
      y0 += inc
    }
  }
  return points
}

function nearest_first (pts) {
  let res = []
  let index =0// Math.floor(Math.random()*pts.length)
  //pts[index].lo = true
  res.push(pts[index])
  let sorted = pts//closestNeighbors(index, pts)
  let i = 0, L = sorted.length-1
  while (i < L) {
    sorted = closestNeighbors(0, sorted)
    res.push(sorted[1])
    sorted = sorted.slice(1)
    i++
  }
  pts = res
  return res
}

function closestNeighbors (index, points) {
  const sortByDistance = (pts, pt) => {
    const sorter = (a, b) => distancei(a, pt) - distancei(b, pt)
    pts.sort(sorter)
  }
  sortByDistance(points, points[index])
  return points
}

function La_macetaAt (x,y,W,color) { //El que nace pa'maceta, no sale del corredor.
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1 card 52

  ctx.fillStyle = color
  ctx.font = "800 italic "+W/16+"pt Garamond"
  let width = ctx.measureText("15").width
  ctx.fillText("52", x + W/2-width/2, y + 8*H/24)

  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+3*H/24)
  cpx = x+1*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+1*H/24)
  cpx = x+23*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+3*H/24)
  cpx = x+23*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+5*H/24)
  cpx = x+1*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+3*H/24)
  cpx = x+1*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+8*H/24)
  cpx = x+1*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+10*H/24)
  cpx = x+23*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+8*H/24)
  cpx = x+23*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+3*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+9*H/24)
  cpx = x+3*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+21*H/24)
  cpx = x+3*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+23*H/24)
  cpx = x+21*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+21*H/24)
  cpx = x+22*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+9*H/24)
  ctx.stroke()
//2
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+15*H/24)
  cpx = x+10*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+14*H/24)
  cpx = x+8*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+15*H/24)
  cpx = x+8*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+16*H/24)
  cpx = x+10*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+15*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+15*H/24)
  cpx = x+14*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+14*H/24)
  cpx = x+16*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+15*H/24)
  cpx = x+16*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+16*H/24)
  cpx = x+14*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+15*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+16*H/24)
  cpx = x+11*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+18*H/24)
  cpx = x+11*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+19*H/24)
  cpx = x+13*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+18*H/24)
  cpx = x+13*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+16*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+14*H/24)
  cpx = x+13*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+12*H/24)
  cpx = x+13*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+11*H/24)
  cpx = x+11*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+12*H/24)
  cpx = x+11*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+14*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+16*H/24)
  cpx = x+13*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+15*H/24)
  cpx = x+13*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+14*H/24)
  cpx = x+11*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+15*H/24)
  cpx = x+11*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+16*H/24)
  ctx.stroke()
  //1
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+14*H/24)
  cpx = x+15*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+13*H/24)
  cpx = x+15*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+12*H/24)
  cpx = x+13*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+14*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+14*H/24)
  cpx = x+11*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+12*H/24)
  cpx = x+9*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+13*H/24)
  cpx = x+9*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+14*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+16*H/24)
  cpx = x+9*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+17*H/24)
  cpx = x+9*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+18*H/24)
  cpx = x+11*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+16*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+16*H/24)
  cpx = x+13*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+18*H/24)
  cpx = x+15*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+17*H/24)
  cpx = x+15*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+16*H/24)
  ctx.stroke()
}

function periodic_tableAt (x0, y0, w, color) { // at function
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let W = canvas.width, H = canvas.height
  let e = 1+ Math.floor(Math.random() * 115) // or pass in number

  defs["periodic_tableAt"].i = ptelements.elements[e].name+","+ptelements.elements[e].number+","+ptelements.elements[e].category+",mass: "+ptelements.elements[e].atomic_mass
  defs["periodic_tableAt"].u = ptelements.elements[e].name+","+ptelements.elements[e].number+","+ptelements.elements[e].category+",mass: "+ptelements.elements[e].atomic_mass

 // console.log(e, ptelements.elements[e].name)
  // draw the whole PT to off
  let off = document.createElement("CANVAS")
  off.width = W, off.height = H
  let ctxoff = off.getContext("2d")
  let savedF = ctx.fillStyle
  periodictable (off, savedF, color)
  // calculate the position of e in the off canvas
  // with negative offsets  -40/2 ?
  let pad = 40
  let len = (W - 2* pad)/18
  let top = (H - 10*len)/2
  let x = pad, y = top
  let i = 0, row = 1, col = 1, atomicnum = 0
  for (; i < 180; i++) {
    if ((row === 8) || (row > 7 && (col < 4 || col > 16)) || ((row === 2 || row ===3) && (col > 2 && col < 13))|| (row === 1 && (col>1 && col<18)))
      ;// skip spaces
    else {
      let symbol = ptelements.elements[e].symbol
      let name = ptelements.elements[e].name
      let number = ptelements.elements[e].number
      //console.log(atomicnum, e, symbol, name)
      if ((atomicnum) === e && atomicnum < 120) {
        //console.log(e, symbol, name)
        break;
      }
      atomicnum++
    }
    col++
    x += len
    if (col === 19) {
      x = pad
      y += len
      row++
      col = 1
    }
  }
  x -= pad*1.25, y -= pad*1.25
  // paste off to on
  let diff = (w-pad*4)
  //console.log(diff)
  ctx.fillStyle = savedF
  ctx.fillRect(x0,y0,w,w)
  ctx.drawImage(off,x-6,y-6,pad*4+8,pad*4+8,x0,y0,w,w)
  //drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight)
}

function magic_8_ballAt (x,y,W,color,INVERTED) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.fillStyle = color
  defs["magic_8_ballAt"].i = randomPick(eightball_i)
  defs["magic_8_ballAt"].u = randomPick(eightball_u)
  //1
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+17*H/24)
  cpx = x+17*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+12*H/24)
  cpx = x+17*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+7*H/24)
  cpx = x+7*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+12*H/24)
  cpx = x+7*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+17*H/24)
  cpx = x+12*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+22*H/24)
  cpx = x+2*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+12*H/24)
  cpx = x+2*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+2*H/24)
  cpx = x+22*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+12*H/24)
  cpx = x+22*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+22*H/24)
  ctx.fill()

  //2
  ctx.font = "800 "+ 6.8*W/24 +"pt Arial"
  ctx.fillText('8',x+9.5*W/24, y+14.9*H/24, 6*W/24)
}

function swimming_poolAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+16*H/24)
  ctx.lineTo(x+0*W/24, y+6*H/24)
  ctx.lineTo(x+21*W/24, y+6*H/24)
  ctx.lineTo(x+24*W/24, y+16*H/24)
  ctx.lineTo(x+3*W/24, y+16*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+11*H/24)
  ctx.lineTo(x+5*W/24, y+14*H/24)
  ctx.lineTo(x+21*W/24, y+14*H/24)
  ctx.lineTo(x+19*W/24, y+8*H/24)
  ctx.lineTo(x+3*W/24, y+8*H/24)
  ctx.lineTo(x+3.6*W/24, y+10*H/24)
  ctx.stroke()

  // diving board
  ctx.beginPath()
  ctx.moveTo(x+2.8*W/24, y+12*H/24)
  cpx = x+3*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+11*H/24)
  cpx = x+9*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+11*H/24)
  ctx.lineTo(x+8.5*W/24, y+10*H/24)
  ctx.lineTo(x+3.5*W/24, y+10*H/24)
  cpx = x+2.5*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2.5*W/24, y+11*H/24)
  ctx.lineTo(x+2.8*W/24, y+12*H/24)
  ctx.stroke()

  x += 0.5 *W/32

//1
  ctx.beginPath()
  ctx.moveTo(x+26.5*W/32, y+13*H/32)
  cpx = x+26.5*W/32
  cpy = y+12*H/32
  ctx.quadraticCurveTo(cpx, cpy, x+25.5*W/32, y+12*H/32)
  cpx = x+24.5*W/32
  cpy = y+12*H/32
  ctx.quadraticCurveTo(cpx, cpy, x+24.5*W/32, y+13*H/32)
  cpx = x+24.5*W/32
  cpy = y+14*H/32
  ctx.quadraticCurveTo(cpx, cpy, x+24.5*W/32, y+15*H/32)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+26*W/32, y+12*H/32)
  cpx = x+26*W/32
  cpy = y+11*H/32
  ctx.quadraticCurveTo(cpx, cpy, x+25*W/32, y+11*H/32)
  cpx = x+24*W/32
  cpy = y+11*H/32
  ctx.quadraticCurveTo(cpx, cpy, x+24*W/32, y+12*H/32)
  cpx = x+24*W/32
  cpy = y+14*H/32
  ctx.quadraticCurveTo(cpx, cpy, x+24*W/32, y+14*H/32)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+24*W/32, y+13.5*H/32)
  ctx.lineTo(x+24.5*W/32, y+14.5*H/32)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+24*W/32, y+12.25*H/32)
  ctx.lineTo(x+24.5*W/32, y+13.25*H/32)
  ctx.stroke()
  x -= 0.5 *W/32

  ctx.globalAlpha /= 3
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+11*H/24)
  ctx.lineTo(x+5*W/24, y+14*H/24)
  ctx.lineTo(x+20.75*W/24, y+14*H/24)
  ctx.lineTo(x+18.75*W/24, y+8.5*H/24)
  ctx.lineTo(x+3*W/24, y+8.5*H/24)
  ctx.lineTo(x+3.6*W/24, y+10*H/24)
  ctx.lineTo(x+8.5*W/24, y+10*H/24)
  ctx.lineTo(x+9*W/24, y+11*H/24)
  ctx.lineTo(x+4*W/24, y+11*H/24)
  ctx.closePath()
  ctx.fill()
  ctx.globalAlpha *= 3
}

function cb3At (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "round"
  ctx.lineJoin = "bevel"
  let text = "Fifty years ago, he was the most bodacious cowpuncher on the Ponderosa, so you may be shocked when you see how he looks today!".split(" ")
  //1
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+13*H/24)
  cpx = x+3*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+14*H/24)
  cpx = x+5*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+12*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+15*H/24)
  cpx = x+7*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+17*H/24)
  cpx = x+9*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+16*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+20*H/24)
  cpx = x+3*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+13*H/24)
  cpx = x+3*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+5*H/24)
  cpx = x+12*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+11*H/24)
  cpx = x+12*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+18*H/24)
  cpx = x+12*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+20*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+12*H/24)
  cpx = x+11*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+14*H/24)
  cpx = x+9*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+13*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+9*H/24)
  cpx = x+7*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+11*H/24)
  cpx = x+9*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+10*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+16*H/24)
  cpx = x+5*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+18*H/24)
  cpx = x+3*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+17*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+9*H/24)
  cpx = x+5*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+9*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+6*H/24)
  cpx = x+10*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+8*H/24)
  cpx = x+8*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+7*H/24)
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+12*H/24)
  cpx = x+7*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+14*H/24)
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+17*H/24)
  cpx = x+10*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+19*H/24)
  cpx = x+11*W/24
  cpy = y+18*H/24
  ctx.stroke()

  //11
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+19*H/24)
  cpx = x+12*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+18*H/24)
  ctx.stroke()

  //12
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+18*H/24)
  cpx = x+6*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+20*H/24)
  cpx = x+8*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+19*H/24)
  ctx.stroke()
  //2
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+8*H/24)
  cpx = x+11*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+10*H/24)
  cpx = x+9*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+9*H/24)
 // ctx.stroke()
  //3
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+20*H/24)
  cpx = x+3*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+19*H/24)
  cpx = x+5*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+20*H/24)
  ctx.stroke()
  //4
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+8*H/24)
  cpx = x+5*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+7*H/24)
  cpx = x+7*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+8*H/24)
  ctx.stroke()
  //13
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+15*H/24)
  cpx = x+10*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+15*H/24)
  ctx.stroke()
  cowboy_hatAt(x+3*W/24, y-1*H/24,W/2.5,color)
  //14
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+4*H/24)
  ctx.stroke()
  let savedfont =  ctx.font
  ctx.font = "800 "+ W/24 +"pt Garamond"
  i = 0
  let w = 0, tw = 0, x2 = x
  for (; i < text.length; i++) {
    w = ctx.measureText(text[i]+" ").width
    tw += w
    if (tw > 10*W/24) {
      y += 2*H/24
      x2 = x
      tw = w
    }
    ctx.fillText(text[i]+" ",x2+13*W/24, y+2*H/24)
    x2 += w
  }
  /*
  text = text.split("")
  let i = 0
  let w = ctx.measureText("i").width*1.6
  let letters = "Lose the weight".split("")
  ctx.globalAlpha /= 2
  for (; i < letters.length; i++) {
    ctx.fillText(letters[i],x+12*W/24+(w*i)+pet(w/10), y+4*H/24+pet(w/2))
    ctx.fillText(letters[i],x+12*W/24+(w*i)+pet(w/10), y+4*H/24+pet(w/5))
    ctx.fillText(letters[i],x+12*W/24+(w*i)+pet(w/10), y+4*H/24+pet(w/2))
  }*/
  ctx.font = savedfont
}

function cb2At (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  x -= 2*W/24
  let savedfont =  ctx.font
  ctx.font = "800 italic "+ 1.2*W/24 +"pt Times new roman"
  let i = 0
  let w = ctx.measureText("i").width*1.6
  let letters = "Lose the weight".split("")
  ctx.globalAlpha /= 3
  for (; i < letters.length; i++) {
    ctx.fillText(letters[i],x+12*W/24+(w*i)+pet(w/10), y+4*H/24+pet(w/2))
    ctx.fillText(letters[i],x+12*W/24+(w*i)+pet(w/10), y+4*H/24+pet(w/5))
    ctx.fillText(letters[i],x+12*W/24+(w*i)+pet(w/10), y+4*H/24+pet(w/2))
  }
  ctx.font = "800 italic "+ 1.2*W/24 +"pt Times new roman"
  letters = "...and keep it off!".split("")
  i = 0, w *= 1.1
  for (; i < letters.length; i++) {
    ctx.fillText(letters[i],x+10.5*W/24+(w*i)+pet(w/10), y+19*H/24+pet(w/2))
    ctx.fillText(letters[i],x+10.5*W/24+(w*i)+pet(w/10), y+19*H/24+pet(w/5))
    ctx.fillText(letters[i],x+10.5*W/24+(w*i)+pet(w/10), y+19*H/24+pet(w/2))
  }
  ctx.globalAlpha *= 3
  ctx.font = savedfont

  //3
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+17*H/24)
  ctx.lineTo(x+8.5*W/24, y+15*H/24)
  ctx.lineTo(x+9*W/24, y+17*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+17*H/24)
  ctx.lineTo(x+8*W/24, y+17*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+17*H/24)
  cpx = x+19*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+12*H/24)
  cpx = x+20*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+10*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+12*H/24)
  cpx = x+6*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+13*H/24)
  cpx = x+20*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+12*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+10*H/24)
  cpx = x+11*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+9*H/24)
  cpx = x+11*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+6*H/24)
  cpx = x+20*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+12*H/24)
  cpx = x+21*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+11*H/24)
  cpx = x+21*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+5*H/24)
  cpx = x+12*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+6*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+11*H/24)
  cpx = x+6*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+9*H/24)
  cpx = x+5*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+17*H/24)
  cpx = x+4*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+16*H/24)
  cpx = x+4*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+6*H/24)
  ctx.stroke()

   //10
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+6*H/24)
  cpx = x+8*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+1*H/24)
  cpx = x+12*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+3*H/24)
  cpx = x+10*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+6*H/24)
  cpx = x+11*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+6*H/24)
  ctx.stroke()
  //9
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+17*H/24)
  ctx.lineTo(x+6*W/24, y+11*H/24)
  ctx.stroke()

//1
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+17*H/24)
  ctx.lineTo(x+6*W/24, y+22*H/24)
  cpx = x+6*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+23*H/24)
  cpx = x+7*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+17*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+17*H/24)
  cpx = x+9*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+23*H/24)
  cpx = x+10*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+22*H/24)
  cpx = x+10*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+17*H/24)
  ctx.stroke()

  //1
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+12.9*H/24)
  cpx = x+11*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+10*H/24)
  ctx.stroke()

  ctx.globalAlpha /= 3
//21
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+13*H/24)
  cpx = x+20*W/24
  cpy = y+13.3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+12*H/24)
  cpx = x+20*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+10*H/24)
  cpx = x+11*W/24
  cpy = y+12.9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+12.9*H/24)
  cpx = x+11*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+13*H/24)
  ctx.fill()
  //16
  ctx.beginPath()
  ctx.arc(x+7*W/24, y+9*H/24, W/140, 0, Math.PI*2)
  ctx.fill()

  //17
  ctx.beginPath()
  ctx.arc(x+10*W/24, y+9*H/24, W/140, 0, Math.PI*2)
  ctx.fill()
  ctx.globalAlpha *= 3

  //15
  ctx.beginPath()
  ctx.arc(x+8.5*W/24, y+12.5*H/24, W/140, 0, Math.PI*2)
  ctx.stroke()
}


function sanewashingAt (x,y,W,color,INVERTED) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  let w1 = "\"Somebody said he looks great in a bathing suit, right? And you know, when he was in the sand and he was having a hard time lifting his feet through the sand, because you know sand is heavy, they figured three solid ounces per foot, but sand is a little heavy, and he’s sitting in a bathing suit. Look, at 81, do you remember Cary Grant? How good was Cary Grant, right? I don’t think Cary Grant, he was good. I don’t know what happened to movie stars today. We used to have Cary Grant and Clark Gable and all these people. Today we have, I won’t say names, because I don’t need enemies. I don’t need enemies. I got enough enemies. But Cary Grant was, like – Michael Jackson once told me, ‘The most handsome man, Trump, in the world.’ ‘Who?’ ‘Cary Grant.’ Well, we don’t have that any more, but Cary Grant at 81 or 82, going on 100. This guy, he’s 81, going on 100. Cary Grant wouldn’t look too good in a bathing suit, either. And he was pretty good-looking, right?\""
  let w2 = "\"It’s a very important issue. But I think when you talk about the kind of numbers that I’m talking about, that – because, look, child care is child care. It’s – couldn’t – you know, it’s something – you have to have it. In this country, you have to have it. But when you talk about those numbers compared to the kind of numbers that I’m talking about by taxing foreign nations at levels that they’re not used to, but they’ll get used to it very quickly – and it’s not going to stop them from doing business with us but they’ll have a very substantial tax when they send product into our country. Those numbers are so much bigger than any numbers that we’re talking about, including child care. That – it’s going to take care – we’re going to have – I – I look forward to having no deficits within a fairly short period of time, coupled with the reductions that I told you about on waste and fraud and all of the other things that are going on in our country.\""
 
 // ctx.strokeRect(0,0,W,H)
  let text = w2.split(" ")
  if (INVERTED) 
    text = w1.split(" ")
  let savedfont =  ctx.font
  ctx.font = "800 "+ 0.8*W/24 +"pt Garamond"
  i = 0
  let w = 0, tw = 0, x2 = x-0.1*W/24
  for (; i < text.length; i++) {
    w = ctx.measureText(text[i]+" ").width
    tw += w
    if (tw > 23*W/24) {
      y += 1*H/24
      x2 = x+0.5*W/24
      tw = w
    }
    ctx.fillText(text[i]+" ",x2+0.6*W/24, y+2*H/24)
    x2 += w
  }
  ctx.font = savedfont
}

function artspeakAt (x,y,W,color,INVERTED) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  let wrds = artspeak()
  //ctx.strokeRect(x,y,W,H) // test location
  y -= 2*H/24
  let text = wrds.split(" ")
  let savedfont =  ctx.font
  ctx.font = "800 "+ 1.4*W/24 +"pt Garamond"
  i = 0
  let w = 0, tw = 0, x2 = x-0.5*W/24
  for (; i < text.length; i++) {
    w = ctx.measureText(text[i]+" ").width
    tw += w
    if (tw > 23*W/24) {
      y += 2*H/24
      x2 = x+0.5*W/24
      tw = w
    }
    ctx.fillText(text[i]+" ",x2+1.5*W/24, y+4*H/24)
    x2 += w
  }
  ctx.font = savedfont
}

function psychicAt (x,y,W,color,INVERTED) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color

  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+14*H/24)
  ctx.lineTo(x+6*W/24, y+14*H/24)
  ctx.lineTo(x+6*W/24, y+16*H/24)
  ctx.lineTo(x+8*W/24, y+14*H/24)
  ctx.lineTo(x+20*W/24, y+14*H/24)
  cpx = x+23*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+11*H/24)
  ctx.lineTo(x+23*W/24, y+4*H/24)
  cpx = x+23*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+1*H/24)
  ctx.lineTo(x+5*W/24, y+1*H/24)
  cpx = x+2*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+4*H/24)
  ctx.lineTo(x+2*W/24, y+11*H/24)
  cpx = x+2*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+14*H/24)
  ctx.stroke()

  //2
  seerAt(x+1*W/24, y+15*H/24, 8*W/24,color)
  let p = randomPrompt(), text = ""
  if (INVERTED)
    text = p[0]
  else
    text = p[1]
  let savedfont =  ctx.font
  ctx.font = "800 "+ 1.6*W/24 +"pt Garamond"

  i = 0
  let w = 0, tw = 0, x2 = x
  for (; i < text.length; i++) {
    w = ctx.measureText(text[i]+" ").width
    tw += w
    if (tw > 19*W/24) {
      y += 2*H/24
      x2 = x
      tw = w
    }
    ctx.fillText(text[i]+" ",x2+3.5*W/24, y+4*H/24)
    x2 += w
  }
  ctx.font = savedfont
}

function parseTitle (t) {
  //t = "homonuculus_has_left_the_buildingAt"
  if (!noThe.includes(t))
  t = "THE "+t
  t = t.replace(/_RE_/gi, "'RE_")
  t = t.replace(/TROPE/gi, "TROPE:")
  t = t.replace(/At/g, "").toUpperCase()
  t = t.replace(/\c/g, ",")
  t = t.replace(/_/g, " ")
  
  console.log(t)
  return t.split(" ")
}

function randomPrompt () {
  let sayings = []
  let letter = randomPick("ABCDEFGHIJKLMNOPQRSTUVWXYZ".split(""))
  let noms = names.join(" ").match(new RegExp("\\b"+letter+"[a-z]+","gmi"))
  noms = shuffle(noms)
  nom = noms[0]
  nom2 = noms[1]
  nom3 = noms[2]
  let gender = (Math.random() > 0.5)? "m": "f";
  let person = "I'm getting the letter '" + letter + "'. "
  person += "Maybe "+ nom
  if (nom2)
    person += "... or "+nom2+"?"
  if (nom3)
    person += " ...or "+nom3+"?"
  let feeling = "You sometimes feel " + randomPick(["uncertain", "timid", "irritated", "down", "scattered"])
  feeling += ". But lately you find yourself more "+ randomPick(["confident", "optimistic", "calm", "encouraged", "capable"])+"."
 // console.log(person)
  //console.log(feeling)
  return ([person.split(" "), feeling.split(" ")])
}

function seerAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
   //4
   //1
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+6*H/24)
  cpx = x+12*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+7*H/24)
  cpx = x+15*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+11*H/24)
  cpx = x+17*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+10*H/24)
  cpx = x+12*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+10*H/24)
  cpx = x+11*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+9*H/24)
  cpx = x+12*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+8*H/24)
  cpx = x+12*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+5.5*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+5.5*H/24)
  cpx = x+10*W/24
  cpy = y+5.5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+5.5*H/24)
  cpx = x+10*W/24
  cpy = y+5.5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+5*H/24)
  cpx = x+14*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+5*H/24)
  cpx = x+16*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+10*H/24)
  cpx = x+21*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+11*H/24)
  cpx = x+21*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+13*H/24)
  cpx = x+16*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+14*H/24)
  cpx = x+13*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+22*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+5*H/24)
  cpx = x+12*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+3*H/24)
  cpx = x+6*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+6*H/24)
  cpx = x+7*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+10*H/24)
  cpx = x+3*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+13*H/24)
  cpx = x+3*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+22*H/24)
  ctx.stroke()
}

function mixtapeAt (x,y,W,color,INVERTED) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+17*H/24)
  ctx.lineTo(x+1*W/24, y+18*H/24)
  ctx.lineTo(x+23*W/24, y+18*H/24)
  ctx.lineTo(x+23*W/24, y+4*H/24)
  ctx.lineTo(x+1*W/24, y+4*H/24)
  ctx.lineTo(x+1*W/24, y+17*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+18*H/24)
  ctx.lineTo(x+7*W/24, y+15*H/24)
  ctx.lineTo(x+17*W/24, y+15*H/24)
  ctx.lineTo(x+18*W/24, y+18*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+15*H/24)
  ctx.lineTo(x+2*W/24, y+17*H/24)
  ctx.lineTo(x+4*W/24, y+17*H/24)
  ctx.lineTo(x+4*W/24, y+15*H/24)
  ctx.lineTo(x+2*W/24, y+15*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+15*H/24)
  ctx.lineTo(x+22*W/24, y+15*H/24)
  ctx.lineTo(x+22*W/24, y+17*H/24)
  ctx.lineTo(x+20*W/24, y+17*H/24)
  ctx.lineTo(x+20*W/24, y+15*H/24)
  ctx.stroke()

  let r = W/90
  //5
  ctx.beginPath()
  ctx.arc(x+2*W/24, y+5*H/24, r, 0, Math.PI*2)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.arc(x+22*W/24, y+5*H/24, r, 0, Math.PI*2)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.arc(x+8*W/24, y+17*H/24, r, 0, Math.PI*2)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.arc(x+9*W/24, y+16*H/24, r, 0, Math.PI*2)
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.arc(x+15*W/24, y+16*H/24, r, 0, Math.PI*2)
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.arc(x+16*W/24, y+17*H/24, r, 0, Math.PI*2)
  ctx.stroke()

  //13
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+12*H/24)
  cpx = x+19*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+10*H/24)
  cpx = x+19*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+8*H/24)
  cpx = x+15*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+10*H/24)
  cpx = x+15*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+12*H/24)
  ctx.stroke()

  //14
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+10*H/24)
  cpx = x+5*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+12*H/24)
  cpx = x+9*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+10*H/24)
  cpx = x+9*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+8*H/24)
  cpx = x+5*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+10*H/24)
  ctx.stroke()

  //15
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+8*H/24)
  ctx.lineTo(x+17*W/24, y+8*H/24)
  ctx.stroke()

  //16
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+12*H/24)
  ctx.lineTo(x+17*W/24, y+12*H/24)
  ctx.stroke()

  let b = randomPick([0,10,12])
//22
  ctx.beginPath()
  ctx.moveTo(x+b*W/24, y+12*H/24)
  cpx = x+(b+1)*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+b*W/24, y+8*H/24)
  ctx.lineTo(x+7*W/24, y+8*H/24)
  cpx = x+9*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+10*H/24)
  cpx = x+9*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+12*H/24)
  ctx.lineTo(x+b*W/24, y+12*H/24)
  if (b > 0)
    ctx.fill()
  
  if (b === 0)
    b = -1.5
  else
  if (b === 10)
    b = 1
 
  // right side
 ctx.beginPath()
  ctx.moveTo(x+(13+b)*W/24, y+12*H/24)
  cpx = x+(12+b)*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+(13+b)*W/24, y+8*H/24)
  ctx.lineTo(x+17*W/24, y+8*H/24)
  cpx = x+15*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+10*H/24)
  cpx = x+15*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+12*H/24)
  ctx.lineTo(x+(13+b)*W/24, y+12*H/24)
  if (b !== 12)
    ctx.fill()

  //21
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+17*H/24)
  ctx.lineTo(x+5*W/24, y+17*H/24)
  ctx.lineTo(x+6*W/24, y+14*H/24)
  ctx.lineTo(x+18*W/24, y+14*H/24)
  ctx.lineTo(x+19*W/24, y+17*H/24)
  ctx.lineTo(x+22*W/24, y+17*H/24)
  ctx.lineTo(x+22*W/24, y+6*H/24)
  ctx.lineTo(x+21*W/24, y+5*H/24)
  ctx.lineTo(x+3*W/24, y+5*H/24)
  ctx.lineTo(x+2*W/24, y+6*H/24)
  ctx.lineTo(x+2*W/24, y+17*H/24)
  ctx.stroke()

  let text = "A"
  if (INVERTED)
    text = "B"

  ctx.font = "800 "+ 1.5*W/24 +"pt Arial"
  ctx.fillText(text,x+2.25*W/24, y+16.7*H/24)
 
  //20
  ctx.beginPath()
  ctx.moveTo(x+20.5*W/24, y+15.5*H/24)
  ctx.lineTo(x+21.5*W/24, y+16*H/24)
  ctx.lineTo(x+20.5*W/24, y+16.5*H/24)
  ctx.fill()

  scriptAt(x+3*W/24, y+6.5*H/24,H/18,color)
  scriptAt(x+10*W/24, y+6.5*H/24,H/18,color)

  ctx.lineWidth *= 2
  ctx.lineCap = "round"
  ctx.save()
  ctx.beginPath() // clip path
  ctx.moveTo(x+7*W/24, y+12*H/24)
  cpx = x+9*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+10*H/24)
  cpx = x+9*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+8*H/24)
  cpx = x+5*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+10*H/24)
  cpx = x+5*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+12*H/24)
  ctx.closePath()
  ctx.clip()
  //1 left spokes
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+8.1*H/24)
  ctx.lineTo(x+7*W/24, y+8.6*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+11.9*H/24)
  ctx.lineTo(x+7*W/24, y+11.4*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+5.3*W/24, y+9.1*H/24)
  ctx.lineTo(x+5.7*W/24, y+9.3*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+5.4*W/24, y+11.1*H/24)
  ctx.lineTo(x+5.8*W/24, y+10.9*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+8.7*W/24, y+11*H/24)
  ctx.lineTo(x+8.3*W/24, y+10.8*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+8.6*W/24, y+8.9*H/24)
  ctx.lineTo(x+8.2*W/24, y+9.2*H/24)
  ctx.stroke()
  ctx.restore()

  ctx.save()
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+12*H/24)
  cpx = x+19*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+10*H/24)
  cpx = x+19*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+8*H/24)
  cpx = x+15*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+10*H/24)
  cpx = x+15*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+12*H/24)
  ctx.closePath()
  ctx.clip()
  //1 right spokes
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+8.1*H/24)
  ctx.lineTo(x+17*W/24, y+8.6*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+11.9*H/24)
  ctx.lineTo(x+17*W/24, y+11.4*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+15.3*W/24, y+9.1*H/24)
  ctx.lineTo(x+15.7*W/24, y+9.3*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+15.4*W/24, y+11.1*H/24)
  ctx.lineTo(x+15.8*W/24, y+10.9*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+18.7*W/24, y+11*H/24)
  ctx.lineTo(x+18.3*W/24, y+10.8*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+18.6*W/24, y+8.9*H/24)
  ctx.lineTo(x+18.2*W/24, y+9.2*H/24)
  ctx.stroke()
  
  ctx.restore()
}

function stay_in_your_laneAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+2*H/24)
  cpx = x+6*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+2*H/24)
  cpx = x+10*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+2*H/24)
  cpx = x+16*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+8*H/24)
  cpx = x+16*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+13.5*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+22*W/24, y+22*H/24)
  cpx = x+14*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+22*H/24)
  cpx = x+8*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+16*H/24)
  cpx = x+8*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+10.5*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+7*H/24)
  cpx = x+6*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+7*H/24)
  cpx = x+7*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+8*H/24)
  cpx = x+7*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+9*H/24)
  cpx = x+3*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+9*H/24)
  cpx = x+3*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+7*H/24)
  //ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+21*W/24, y+15*H/24)
  cpx = x+18*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+15*H/24)
  cpx = x+17*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+16*H/24)
  cpx = x+17*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+17*H/24)
  cpx = x+21*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+17*H/24)
  cpx = x+21*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+15*H/24)
  //ctx.stroke()

  ctx.setLineDash([W/48])
  //3
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+6*H/24)
  cpx = x+6*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+6*H/24)
  cpx = x+12*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+12*H/24)
  cpx = x+12*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+18*H/24)
  cpx = x+22*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+18*H/24)
  ctx.stroke()

  ctx.setLineDash([])

  //1
  ctx.beginPath()
  ctx.moveTo(x+21*W/24, y+17*H/24)
  cpx = x+21*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+16*H/24)
  cpx = x+21*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+15*H/24)
  cpx = x+19*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+15*H/24)
  cpx = x+18*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+16*H/24)
  cpx = x+17*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+17*H/24)
  cpx = x+21*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+17*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.arc(x+20*W/24, y+17*H/24, W/60,0,Math.PI*2)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.arc(x+18*W/24, y+17*H/24, W/60,0,Math.PI*2)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+9*H/24)
  cpx = x+3*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+8*H/24)
  cpx = x+3*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+7*H/24)
  cpx = x+5*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+7*H/24)
  cpx = x+6*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+8*H/24)
  cpx = x+7*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+9*H/24)
  cpx = x+3*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+9*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.arc(x+4*W/24, y+9*H/24, W/60,0,Math.PI*2)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.arc(x+6*W/24, y+9*H/24, W/60,0,Math.PI*2)
  ctx.stroke()
}

function holy_days_of_obligationAt (x,y,W,color,INVERTED) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  defs["holy_days_of_obligationAt"].i = holyday()
  defs["holy_days_of_obligationAt"].u = holyday()
  //1
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+24*H/24)
  cpx = x+2*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+18*H/24)
  cpx = x+2*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+15*H/24)
  cpx = x+9*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+11*H/24)
  cpx = x+9*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+8*H/24)
  cpx = x+9*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+6*H/24)
  cpx = x+15*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+8*H/24)
  cpx = x+15*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+11*H/24)
  cpx = x+15*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+15*H/24)
  cpx = x+22*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+18*H/24)
  cpx = x+22*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+24*H/24)
  ctx.stroke()

  if (INVERTED) {
    ctx.beginPath()
    ctx.moveTo(x+9*W/24, y+10*H/24)
    cpx = x+6*W/24
    cpy = y+10*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+4*H/24)
    cpx = x+7*W/24
    cpy = y+8*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+8*H/24)
    ctx.stroke()
    //3
    ctx.beginPath()
    ctx.moveTo(x+15*W/24, y+10*H/24)
    cpx = x+18*W/24
    cpy = y+10*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+4*H/24)
    cpx = x+17*W/24
    cpy = y+8*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+8*H/24)
    ctx.stroke()
  } else {
    ctx.beginPath()
    ctx.moveTo(x+12*W/24, y+5*H/24)
    cpx = x+16*W/24
    cpy = y+5*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+3*H/24)
    cpx = x+16*W/24
    cpy = y+1*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+1*H/24)
    cpx = x+8*W/24
    cpy = y+1*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+3*H/24)
    cpx = x+8*W/24
    cpy = y+5*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+5*H/24)
    ctx.stroke()
  }
}

function too_far_awayAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+14*H/24)
  cpx = x+7*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+13*H/24)
  cpx = x+11*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+14*H/24)
  cpx = x+17*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+12*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+11*H/24)
  cpx = x+20*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+11*H/24)
  cpx = x+4*W/24
  cpy = y+7*H/24
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+7*H/24)
  cpx = x+11*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+6*H/24)
  cpx = x+11*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+8*H/24)
  cpx = x+20*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+7*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+20*H/24)
  ctx.lineTo(x+20*W/24, y+20*H/24)
  ctx.lineTo(x+20*W/24, y+4*H/24)
  ctx.lineTo(x+4*W/24, y+4*H/24)
  ctx.lineTo(x+4*W/24, y+20*H/24)
  ctx.stroke()

//10
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+10*H/24)
  cpx = x+8*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+10*H/24)
  cpx = x+9*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+11*H/24)
  ctx.stroke()

  //5 ragged
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+22*H/24)
  ragged(ctx,x+22*W/24, y+22*H/24, x+2*W/24, y+22*H/24,60)
  ragged(ctx,x+22*W/24, y+2*H/24, x+22*W/24, y+22*H/24,60)
  ragged(ctx,x+2*W/24, y+2*H/24, x+22*W/24, y+2*H/24,60)
  ragged(ctx,x+2*W/24, y+22*H/24,x+2*W/24, y+2*H/24,60)
  ctx.stroke()

  //6 heronAt
  let e = document.getElementById("featuresize")
  let v = e.value
  e.value /= 5
  heronAt(x+9*W/24, y+12*H/24, W/24, color)
  lighthouseAt(x+8*W/24, y+9*H/24,W/24,color)
  sailboatAt(x+14*W/24, y+11.5*H/24,W/24,color)
   e.value *= 5
} 
 
function homunculus_has_left_the_buildingAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+23*H/24)
  cpx = x+4*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+21*H/24)
  cpx = x+4*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+10*H/24)
  cpx = x+4*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+1*H/24)
  cpx = x+20*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+10*H/24)
  cpx = x+20*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+21*H/24)
  cpx = x+20*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+23*H/24)
  ctx.stroke()
  let r = W/24
  //2
  ctx.beginPath()
  ctx.arc(x+16.5*W/24, y+10*H/24, r,0, Math.PI*2)
  ctx.stroke()

  ctx.beginPath()
  ctx.arc(x+16.5*W/24, y+10*H/24, 2*r,0, Math.PI*2)
  ctx.stroke()
//////
  ctx.beginPath()
  ctx.moveTo(x+16.2*W/24, y+12*H/24)
  ctx.lineTo(x+7.5*W/24, y+10*H/24)
  ctx.lineTo(x+16.2*W/24, y+8*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+15*H/24)
  ctx.lineTo(x+6*W/24, y+12*H/24)
  ctx.lineTo(x+8*W/24, y+14*H/24)
  ctx.lineTo(x+11*W/24, y+14*H/24)
  ctx.lineTo(x+9*W/24, y+12*H/24)
  ctx.lineTo(x+6*W/24, y+12*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+17*H/24)
  ctx.lineTo(x+8*W/24, y+14*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+17*H/24)
  ctx.lineTo(x+11*W/24, y+14*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+12*H/24)
  ctx.lineTo(x+6*W/24, y+9*H/24)
  ctx.lineTo(x+9*W/24, y+9*H/24)
  ctx.lineTo(x+9*W/24, y+12*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+10*H/24)
  ctx.stroke()
//////
  
  //4 nose
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+12*H/24)
  ctx.lineTo(x+15*W/24, y+17*H/24)
  ctx.lineTo(x+12*W/24, y+17*H/24)
  ctx.stroke()

  //8
  ctx.lineCap = "round"
  ctx.lineWidth *= 3
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+19*H/24)
  ctx.lineTo(x+14*W/24, y+19*H/24)
  ctx.stroke()
}

function palimpsestAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+2*H/24)
  cpx = x+6*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+2*H/24)
  cpx = x+18*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+2*H/24)
  cpx = x+22*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+22*H/24)
  cpx = x+18*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+22*H/24)
  cpx = x+6*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+22*H/24)
  cpx = x+2*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+2*H/24)
  ctx.stroke()

  twoColAt(x+3*W/24, y+2*H/24,18*W/24,color)
  //2
  scriptAt(x+(3.5+pet(1))*W/24, y+3.5*H/24,H/32,color,0.005)
  scriptAt(x+(12.5+pet(1))*W/24, y+(4.5+pet(1))*H/24,H/32,color,0.01)
  scriptAt(x+(3.5+pet(1))*W/24, y+6*H/24,H/32,color,0.005)
  scriptAt(x+(14.3+pet(1))*W/24, y+10*H/24,H/32,color,0.01)
  scriptAt(x+(3.5+pet(1))*W/24, y+12*H/24,H/32,color,0.005)
  scriptAt(x+(12.5+pet(1))*W/24, y+12*H/24,H/32,color,0.01)
  scriptAt(x+(7+pet(1))*W/24, y+14*H/24,H/32,color,0.01)
  scriptAt(x+(12.5+pet(1))*W/24, y+14*H/24,H/32,color,0.02)
  scriptAt(x+(3.3+pet(1))*W/24, y+16*H/24,H/34,color,0.005)
  scriptAt(x+(3.3+pet(1))*W/24, y+18*H/24,H/34,color,0.02)
  scriptAt(x+(12.5+pet(1))*W/24, y+19*H/24,H/34,color,0.005)
  ctx.globalAlpha = document.getElementById("opacity").value/100
  ctx.setLineDash([W/24])
  ctx.lineWidth /= 2
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+3*H/24)
  ctx.lineTo(x+12*W/24, y+21*H/24)
  ctx.stroke()
  ctx.lineWidth *= 2
  ctx.setLineDash([])
}

function lazy_evaluationAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+13*H/24)
  cpx = x+13*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+12*H/24)
  cpx = x+13*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+11*H/24)
  cpx = x+11*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+12*H/24)
  cpx = x+11*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+13*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+13*H/24)
  cpx = x+13*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+12*H/24)
  cpx = x+13*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+11*H/24)
  cpx = x+11*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+12*H/24)
  cpx = x+11*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+13*H/24)
  ctx.stroke()
  //3
  ctx.beginPath()
  ctx.moveTo(x+12.5*W/24, y+11.1*H/24)
  cpx = x+23*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+13*H/24)
  cpx = x+23*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+23*H/24)
  cpx = x+11*W/24
  cpy = y+13*H/24
  ctx.lineTo(x+11.2*W/24, y+12.7*H/24)
  ctx.stroke()

  let f = "cubeAt"//randomPick(atList)
  window [f] (x+13*W/24, y+13*H/24, 9*W/24, color)

  ctx.setLineDash([W/48,W/24])
 // f = randomPick(atList)
  window [f] (x+1*W/24, y+13*H/24, 9*W/24, color)
 // f = randomPick(atList)
  window [f] (x+1*W/24, y+1*H/24, 9*W/24, color)
 // f = randomPick(atList)
  window [f] (x+13*W/24, y+1*H/24, 9*W/24, color)

  ctx.setLineDash([])
}

function amazonAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+8*H/24)
  cpx = x+5.5*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5.5*W/24, y+13*H/24)
  cpx = x+5.5*W/24
  cpy = y+17.5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+17.5*H/24)
  cpx = x+14*W/24
  cpy = y+17.5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14.5*W/24, y+15.5*H/24)
  cpx = x+15.5*W/24
  cpy = y+17.5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16.5*W/24, y+17.5*H/24)
  cpx = x+19*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+15*H/24)
  cpx = x+18*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+13*H/24)
  cpx = x+18*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+10*H/24)
  cpx = x+14*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+10*H/24)
  cpx = x+14*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+15*H/24)
  cpx = x+9.5*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9.5*W/24, y+13*H/24)
  cpx = x+9*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+10*H/24)
  cpx = x+18*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+10*H/24)
  cpx = x+18*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+7*H/24)
  cpx = x+18*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+1.7*H/24)
  cpx = x+6*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+6*H/24)
  cpx = x+9.5*W/24
  cpy = y+6.5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9.5*W/24, y+6.5*H/24)
  cpx = x+9.5*W/24
  cpy = y+4.5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+4.5*H/24)
  cpx = x+14*W/24
  cpy = y+4.5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+8*H/24)
  ctx.fill()

  //1 swish
  ctx.beginPath()
  ctx.moveTo(x+3*W/32, y+24*H/32)
  cpx = x+8*W/32
  cpy = y+30*H/32
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/32, y+30*H/32)
  cpx = x+22*W/32
  cpy = y+30*H/32
  ctx.quadraticCurveTo(cpx, cpy, x+27*W/32, y+26*H/32)
  cpx = x+27*W/32
  cpy = y+25.5*H/32
  ctx.quadraticCurveTo(cpx, cpy, x+26*W/32, y+26*H/32)
  cpx = x+22*W/32
  cpy = y+28*H/32
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/32, y+28*H/32)
  cpx = x+10*W/32
  cpy = y+28*H/32
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/32, y+24*H/32)
  cpx = x+3*W/32
  cpy = y+23*H/32
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/32, y+24*H/32)
  ctx.fill()

   //1 arrow point >
  ctx.beginPath()
  ctx.moveTo(x+27*W/32, y+28*H/32)
  cpx = x+28*W/32
  cpy = y+28*H/32
  ctx.quadraticCurveTo(cpx, cpy, x+29*W/32, y+26*H/32)
  cpx = x+30*W/32
  cpy = y+24*H/32
  ctx.quadraticCurveTo(cpx, cpy, x+29*W/32, y+23.5*H/32)
  cpx = x+27*W/32
  cpy = y+23*H/32
  ctx.quadraticCurveTo(cpx, cpy, x+25*W/32, y+24.5*H/32)
  cpx = x+25*W/32
  cpy = y+25*H/32
  ctx.quadraticCurveTo(cpx, cpy, x+26*W/32, y+24.5*H/32)
  cpx = x+28.5*W/32
  cpy = y+24*H/32
  ctx.quadraticCurveTo(cpx, cpy, x+28.5*W/32, y+25*H/32)
  cpx = x+28.5*W/32
  cpy = y+26*H/32
  ctx.quadraticCurveTo(cpx, cpy, x+27*W/32, y+28*H/32)
  ctx.fill()
}

function twitterAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+3*W/32, y+2*H/32)
  ctx.lineTo(x+11*W/32, y+2*H/32)
  ctx.lineTo(x+18.4*W/32, y+12.8*H/32)
  ctx.lineTo(x+27.3*W/32, y+2*H/32)
  ctx.lineTo(x+30*W/32, y+2*H/32)
  ctx.lineTo(x+19.4*W/32, y+14.4*H/32)
  ctx.lineTo(x+30*W/32, y+30*H/32)
  ctx.lineTo(x+22*W/32, y+30*H/32)
  ctx.lineTo(x+14.5*W/32, y+19.5*H/32)
  ctx.lineTo(x+5.5*W/32, y+30*H/32)
  ctx.lineTo(x+3*W/32, y+30*H/32)
  ctx.lineTo(x+13.5*W/32, y+18*H/32)
  ctx.lineTo(x+4*W/32, y+4*H/32)
  ctx.lineTo(x+6*W/32, y+4*H/32)
  ctx.lineTo(x+23*W/32, y+28.5*H/32)
  ctx.lineTo(x+27*W/32, y+28.5*H/32)
  ctx.lineTo(x+10*W/32, y+4*H/32)
  ctx.lineTo(x+4*W/32, y+4*H/32)
  ctx.lineTo(x+2.7*W/32, y+2*H/32)
  ctx.fill()
}

function roll_of_the_diceAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+22*W/24, y+22*H/24)
  ctx.lineTo(x+22*W/24, y+14*H/24)
  ctx.lineTo(x+14*W/24, y+14*H/24)
  ctx.lineTo(x+14*W/24, y+22*H/24)
  ctx.lineTo(x+22*W/24, y+22*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+22*H/24)
  ctx.lineTo(x+10*W/24, y+21*H/24)
  ctx.lineTo(x+10*W/24, y+13*H/24)
  ctx.lineTo(x+14*W/24, y+14*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+22*W/24, y+14*H/24)
  ctx.lineTo(x+17*W/24, y+13*H/24)
  ctx.lineTo(x+10*W/24, y+13*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+3*H/24)
  ctx.lineTo(x+9*W/24, y+2*H/24)
  ctx.lineTo(x+2*W/24, y+2*H/24)
  ctx.lineTo(x+6*W/24, y+3*H/24)
  ctx.lineTo(x+14*W/24, y+3*H/24)
  ctx.lineTo(x+14*W/24, y+11*H/24)
  ctx.lineTo(x+6*W/24, y+11*H/24)
  ctx.lineTo(x+6*W/24, y+3*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+11*H/24)
  ctx.lineTo(x+2*W/24, y+10*H/24)
  ctx.lineTo(x+2*W/24, y+2*H/24)
  ctx.stroke()
}

function ouroborosAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+22*H/24)
  cpx = x+11*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+21*H/24)
  cpx = x+8*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+19*H/24)
  cpx = x+8*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+19*H/24)
  cpx = x+20*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+12*H/24)
  cpx = x+20*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+4*H/24)
  cpx = x+4*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+12*H/24)
  cpx = x+4*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+21*H/24)
  cpx = x+2*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+12*H/24)
  cpx = x+2*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+2*H/24)
  cpx = x+22*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+12*H/24)
  cpx = x+22*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+23*H/24)
  cpx = x+8*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+22*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+22*H/24)
  cpx = x+14*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+21*H/24)
  cpx = x+14*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+20*H/24)
  cpx = x+12*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+21*H/24)
  cpx = x+12*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+22*H/24)
  ctx.stroke()

  ctx.font = "100 "+ 1.5*W/24 +"pt Garamond"
  ctx.fillStyle = color
  let w = ctx.measureText("DON'T").width
 // ctx.fillText("DON'T", x+W/2-w/2, y+7*H/24)
  w = ctx.measureText("TREAD").width
//  ctx.fillText("TREAD", x+W/2-w/2, y+10*H/24)
  w = ctx.measureText("ON MY").width
//  ctx.fillText("ON MY", x+W/2-w/2, y+13*H/24)
  w = ctx.measureText("OUROBOROS").width
  //ctx.fillText("OUROBOROS", x+W/2-w/2, y+16*H/24)

  ctx.beginPath() // pupil
  ctx.arc(x+13*W/24, y+21*H/24, W/48,0, Math.PI*2)
  ctx.fill()

  //3 teeth
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+19*H/24)
  ctx.lineTo(x+8*W/24, y+20*H/24)
  ctx.lineTo(x+8.5*W/24, y+19.4*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+22*H/24)
  ctx.lineTo(x+8*W/24, y+21*H/24)
  ctx.lineTo(x+8.75*W/24, y+21.75*H/24)
  ctx.stroke()

  //1
  ctx.setLineDash([W/48])
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+21*H/24)
  cpx = x+3*W/24
  cpy = y+20.5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+12*H/24)
  cpx = x+3*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+3*H/24)
  cpx = x+21*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+12*H/24)
  cpx = x+20.5*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+20.5*H/24)
  ctx.stroke()

  ctx.setLineDash([])
}

function field_guideAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  
  //4
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+1*H/24)
  ctx.lineTo(x+1*W/24, y+20*H/24)
  ctx.stroke()

   //1
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+2*H/24)
  ctx.lineTo(x+22*W/24, y+2*H/24)
  ctx.lineTo(x+23*W/24, y+4*H/24)
  ctx.lineTo(x+23*W/24, y+23*H/24)
  ctx.lineTo(x+22*W/24, y+21*H/24)
  ctx.lineTo(x+22*W/24, y+2*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+22*W/24, y+21*H/24)
  ctx.lineTo(x+11*W/24, y+21*H/24)
  ctx.lineTo(x+12*W/24, y+23*H/24)
  ctx.lineTo(x+23*W/24, y+23*H/24)
  ctx.stroke()
  //5
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+20*H/24)
  cpx = x+3*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+21*H/24)
  cpx = x+8*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+21*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+1*H/24)
  cpx = x+3*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+2*H/24)
  cpx = x+8*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+2*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+21*H/24)
  cpx = x+8*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+21*H/24)
  cpx = x+3*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+20*H/24)
  cpx = x+1*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+1*H/24)
  cpx = x+3*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+2*H/24)
  cpx = x+8*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+2*H/24)
  cpx = x+11*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+21*H/24)
  ctx.fill()

  let v = document.getElementById("featuresize").value
  document.getElementById("featuresize").value = v/3
  window [randomPick(atList)] (x+12*W/24, y+3.5*H/24, 9*W/24, color)
  document.getElementById("featuresize").value = v

  ctx.font = "900 "+ 1.8*W/24 +"pt Courier"
  //9
  ctx.beginPath()
  ctx.fillText("FIELD",x+13*W/24, y+16*H/24)
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.fillText("GUIDE",x+13*W/24, y+19*H/24)
  ctx.stroke()
}

function empty_signifierAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+23*H/24)
  cpx = x+18*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+23*H/24)
  cpx = x+20*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+21*H/24)
  cpx = x+20*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+3*H/24)
  cpx = x+20*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+1*H/24)
  cpx = x+6*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+1*H/24)
  cpx = x+4*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+3*H/24)
  cpx = x+4*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+21*H/24)
  cpx = x+4*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+23*H/24)
  cpx = x+12*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+23*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+8*H/24)
  ctx.lineTo(x+20*W/24, y+8*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+3*H/24)
  ctx.lineTo(x+4*W/24, y+8*H/24)
  ctx.lineTo(x+10*W/24, y+8*H/24)
  ctx.lineTo(x+10*W/24, y+1*H/24)
  ctx.lineTo(x+6*W/24, y+1*H/24)
  cpx = x+4*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+3*H/24)
  ctx.fill()
}

function empty_signifierAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+1*H/24)
  cpx = x+19*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+3*H/24)
  cpx = x+19*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+21*H/24)
  cpx = x+19*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+23*H/24)
  cpx = x+7*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+23*H/24)
  cpx = x+5*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+21*H/24)
  cpx = x+5*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+3*H/24)
  cpx = x+5*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+1*H/24)
  cpx = x+17*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+1*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+8*H/24)
  ctx.lineTo(x+19*W/24, y+8*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+3*H/24)
  ctx.lineTo(x+5*W/24, y+8*H/24)
  ctx.lineTo(x+11*W/24, y+8*H/24)
  ctx.lineTo(x+11*W/24, y+1*H/24)
  ctx.lineTo(x+7*W/24, y+1*H/24)
  cpx = x+5*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+3*H/24)
  ctx.fill()
}

  function fallen_idolAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
   //1
  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+11*H/24)
  ctx.lineTo(x+15*W/24, y+10*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+7*H/24)
  ctx.lineTo(x+4*W/24, y+7*H/24)
  ctx.lineTo(x+4*W/24, y+19*H/24)
  ctx.lineTo(x+1*W/24, y+19*H/24)
  ctx.lineTo(x+1*W/24, y+7*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+8*H/24)
  ctx.lineTo(x+10*W/24, y+8*H/24)
  ctx.lineTo(x+11*W/24, y+9*H/24)
  ctx.lineTo(x+11*W/24, y+12*H/24)
  ctx.lineTo(x+10*W/24, y+13*H/24)
  ctx.lineTo(x+11*W/24, y+14*H/24)
  ctx.lineTo(x+11*W/24, y+17*H/24)
  ctx.lineTo(x+10*W/24, y+18*H/24)
  ctx.lineTo(x+4*W/24, y+18*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+13*H/24)
  ctx.lineTo(x+6*W/24, y+13*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+8*H/24)
  ctx.lineTo(x+6*W/24, y+18*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+17*H/24)
  ctx.lineTo(x+4*W/24, y+17*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+16*H/24)
  ctx.lineTo(x+4*W/24, y+16*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+15*H/24)
  ctx.lineTo(x+4*W/24, y+15*H/24)
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+14*H/24)
  ctx.lineTo(x+4*W/24, y+14*H/24)
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+12*H/24)
  ctx.lineTo(x+4*W/24, y+12*H/24)
  ctx.stroke()

  //11
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+11*H/24)
  ctx.lineTo(x+4*W/24, y+11*H/24)
  ctx.stroke()

  //12
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+10*H/24)
  ctx.lineTo(x+4*W/24, y+10*H/24)
  ctx.stroke()

  //13
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+9*H/24)
  ctx.lineTo(x+4*W/24, y+9*H/24)
  ctx.stroke()

  //14
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+8*H/24)
  ctx.lineTo(x+11*W/24, y+7*H/24)
  ctx.lineTo(x+16*W/24, y+7*H/24)
  ctx.lineTo(x+17*W/24, y+8*H/24)
  ctx.lineTo(x+17*W/24, y+10*H/24)
  ctx.lineTo(x+18*W/24, y+11*H/24)
  ctx.lineTo(x+18*W/24, y+12*H/24)
  ctx.lineTo(x+17*W/24, y+13*H/24)
  ctx.lineTo(x+17*W/24, y+14*H/24)
  ctx.lineTo(x+18*W/24, y+15*H/24)
  ctx.lineTo(x+18*W/24, y+16*H/24)
  ctx.lineTo(x+17*W/24, y+17*H/24)
  ctx.lineTo(x+17*W/24, y+18*H/24)
  ctx.lineTo(x+16*W/24, y+19*H/24)
  ctx.lineTo(x+13*W/24, y+19*H/24)
  ctx.lineTo(x+11*W/24, y+19*H/24)
  ctx.lineTo(x+10*W/24, y+18*H/24)
  ctx.stroke()

  //15
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+19*H/24)
  ctx.lineTo(x+12*W/24, y+18*H/24)
  ctx.lineTo(x+12*W/24, y+14*H/24)
  ctx.lineTo(x+16*W/24, y+10*H/24)
  ctx.lineTo(x+17*W/24, y+10*H/24)
  ctx.stroke()

  //16
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+13*H/24)
  ctx.lineTo(x+15*W/24, y+15*H/24)
  ctx.lineTo(x+15*W/24, y+16*H/24)
  ctx.lineTo(x+16*W/24, y+17*H/24)
  ctx.lineTo(x+17*W/24, y+17*H/24)
  ctx.stroke()

  //17
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+13*H/24)
  ctx.lineTo(x+12*W/24, y+12*H/24)
  ctx.lineTo(x+12*W/24, y+8*H/24)
  ctx.lineTo(x+13*W/24, y+7*H/24)
  ctx.stroke()

  //18
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+14*H/24)
  ctx.lineTo(x+16.5*W/24, y+13.5*H/24)
  ctx.stroke()

  //19 head
  ctx.beginPath()
  ctx.moveTo(x+18.5*W/24, y+14*H/24)
  ctx.lineTo(x+18.5*W/24, y+18*H/24)
  ctx.lineTo(x+19.5*W/24, y+19*H/24)
  ctx.lineTo(x+22.5*W/24, y+19*H/24)
  ctx.lineTo(x+23.5*W/24, y+18*H/24)
  ctx.lineTo(x+23.5*W/24, y+14*H/24)
  ctx.lineTo(x+22.5*W/24, y+13*H/24)
  ctx.lineTo(x+19.5*W/24, y+13*H/24)
  ctx.lineTo(x+18.5*W/24, y+14*H/24)
  ctx.stroke()

  //20
  ctx.beginPath()
  ctx.moveTo(x+19.5*W/24, y+17*H/24)
  ctx.lineTo(x+20.5*W/24, y+17*H/24)
  ctx.stroke()

  //21
  ctx.beginPath()
  ctx.moveTo(x+21.5*W/24, y+16*H/24)
  ctx.lineTo(x+21.5*W/24, y+17*H/24)
  ctx.lineTo(x+22.5*W/24, y+17*H/24)
  ctx.stroke()

  //22
  ctx.beginPath()
  ctx.moveTo(x+20.5*W/24, y+15*H/24)
  ctx.lineTo(x+21.5*W/24, y+15*H/24)
  ctx.stroke()
}

function fallen_idolfAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+18*H/24)
  ctx.lineTo(x+4*W/24, y+20*H/24)
  ctx.lineTo(x+2*W/24, y+20*H/24)
  ctx.lineTo(x+1*W/24, y+18*H/24)
  ctx.lineTo(x+1*W/24, y+11*H/24)
  ctx.lineTo(x+1*W/24, y+10*H/24)
  ctx.lineTo(x+3*W/24, y+9*H/24)
  ctx.lineTo(x+4*W/24, y+9*H/24)
  ctx.lineTo(x+4*W/24, y+10*H/24)
  ctx.lineTo(x+7*W/24, y+10*H/24)
  cpx = x+10*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+11*H/24)
  cpx = x+11*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+11*H/24)
  cpx = x+15*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+11*H/24)
  cpx = x+18*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+13*H/24)
  cpx = x+18*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+15*H/24)
  cpx = x+18*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+15*H/24)
  cpx = x+23*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+20*H/24)
  cpx = x+20*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+19*H/24)
  cpx = x+19*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+20*H/24)
  ctx.lineTo(x+15*W/24, y+18*H/24)
  ctx.lineTo(x+15*W/24, y+14*H/24)
  ctx.lineTo(x+14.8*W/24, y+18*H/24)
  ctx.lineTo(x+15.7*W/24, y+20*H/24)
  cpx = x+12*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+19*H/24)
  cpx = x+11*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+20*H/24)
  cpx = x+8*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+19*H/24)
  cpx = x+8*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+20*H/24)
  cpx = x+5*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+18*H/24)
  ctx.fill()
  //2
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+8.*H/24)
  ctx.lineTo(x+2*W/24, y+9.3*H/24)
  ctx.lineTo(x+4*W/24, y+8.7*H/24)
  ctx.lineTo(x+2*W/24, y+8.4*H/24)
  ctx.fill()

  //3
  ctx.beginPath()
  ctx.moveTo(x+23*W/24, y+20*H/24)
  ctx.lineTo(x+23*W/24, y+18*H/24)
  ctx.lineTo(x+22*W/24, y+20*H/24)
  ctx.lineTo(x+23*W/24, y+20*H/24)
  ctx.fill()

  //4
  ctx.beginPath()
  ctx.moveTo(x+19*W/24, y+15*H/24)
  ctx.lineTo(x+18*W/24, y+14*H/24)
  ctx.lineTo(x+19*W/24, y+13*H/24)
  ctx.lineTo(x+20*W/24, y+13*H/24)
  ctx.lineTo(x+19*W/24, y+14.5*H/24)
  ctx.fill()

  //6
  ctx.beginPath()
  ctx.moveTo(x+19.2*W/24, y+14*H/24)
  ctx.lineTo(x+20*W/24, y+15.3*H/24)
  ctx.lineTo(x+21*W/24, y+15*H/24)
  ctx.lineTo(x+21*W/24, y+14*H/24)
  ctx.lineTo(x+19.4*W/24, y+14*H/24)
  ctx.fill()
  //10
  ctx.beginPath()
  ctx.moveTo(x+1.8*W/24, y+20*H/24)
  ctx.lineTo(x+0.8*W/24, y+18*H/24)
  ctx.lineTo(x+0.8*W/24, y+20*H/24)
  ctx.fill()
}

function unhingedAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  //1
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+7*H/24)
  ctx.lineTo(x+13*W/24, y+2*H/24)
  cpx = x+13*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+1*H/24)
  cpx = x+17*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+2*H/24)
  cpx = x+17*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+3*H/24)
  cpx = x+13*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+2*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+7*H/24)
  cpx = x+13*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+8*H/24)
  cpx = x+17*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+7*H/24)
  ctx.lineTo(x+18*W/24, y+7*H/24)
  ctx.lineTo(x+18*W/24, y+12*H/24)
  ctx.lineTo(x+17*W/24, y+12*H/24)
  cpx = x+17*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+11*H/24)
  cpx = x+13*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+12*H/24)
  cpx = x+13*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+13*H/24)
  cpx = x+17*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+12*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+12*H/24)
  ctx.lineTo(x+13*W/24, y+17*H/24)
  cpx = x+13*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+18*H/24)
  cpx = x+17*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+17*H/24)
  cpx = x+18*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+17*H/24)
  ctx.lineTo(x+18*W/24, y+22*H/24)
  ctx.lineTo(x+23*W/24, y+22*H/24)
  ctx.lineTo(x+23*W/24, y+2*H/24)
  ctx.lineTo(x+17*W/24, y+2*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+3*H/24)
  ctx.lineTo(x+17*W/24, y+6*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+13*H/24)
  ctx.lineTo(x+17*W/24, y+16*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+22*H/24)
  ctx.lineTo(x+2*W/24, y+22*H/24)
  ctx.lineTo(x+2*W/24, y+2*H/24)
  ctx.lineTo(x+7*W/24, y+2*H/24)
  ctx.lineTo(x+7*W/24, y+7*H/24)
  ctx.lineTo(x+8*W/24, y+7*H/24)
  cpx = x+8*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+6*H/24)
  cpx = x+12*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+7*H/24)
  cpx = x+12*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+8*H/24)
  cpx = x+8*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+7*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+7*H/24)
  ctx.lineTo(x+12*W/24, y+12*H/24)
  cpx = x+12*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+13*H/24)
  cpx = x+8*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+12*H/24)
  ctx.lineTo(x+8*W/24, y+16*H/24)
  ctx.lineTo(x+8*W/24, y+17*H/24)
  cpx = x+8*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+16*H/24)
  cpx = x+12*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+17*H/24)
  cpx = x+12*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+18*H/24)
  cpx = x+8*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+17*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+17*H/24)
  ctx.lineTo(x+12*W/24, y+22*H/24)
  cpx = x+12*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+23*H/24)
  cpx = x+8*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+22*H/24)
  ctx.stroke()
  //9
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+18*H/24)
  ctx.lineTo(x+8*W/24, y+21*H/24)
  ctx.stroke()
  //10
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+8*H/24)
  ctx.lineTo(x+8*W/24, y+11*H/24)
  ctx.stroke()

  let r = W/24
  //20
  ctx.beginPath()
  ctx.arc(x+4.5*W/24, y+5*H/24, r, 0, Math.PI*2)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+5*H/24)
  ctx.lineTo(x+5*W/24, y+5*H/24)
  ctx.stroke()
  ctx.beginPath()
  ctx.moveTo(x+4.5*W/24, y+4.5*H/24)
  ctx.lineTo(x+4.5*W/24, y+5.5*H/24)
  ctx.stroke()

  //21 
  ctx.beginPath()
  ctx.arc(x+4.5*W/24, y+12*H/24, r, 0, Math.PI*2)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+12*H/24)
  ctx.lineTo(x+5*W/24, y+12*H/24)
  ctx.stroke()
  ctx.beginPath()
  ctx.moveTo(x+4.5*W/24, y+11.5*H/24)
  ctx.lineTo(x+4.5*W/24, y+12.5*H/24)
  ctx.stroke()
  //22
  ctx.beginPath()
  ctx.arc(x+4.5*W/24, y+19*H/24, r, 0, Math.PI*2)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+19*H/24)
  ctx.lineTo(x+5*W/24, y+19*H/24)
  ctx.stroke()
  ctx.beginPath()
  ctx.moveTo(x+4.5*W/24, y+18.5*H/24)
  ctx.lineTo(x+4.5*W/24, y+19.5*H/24)
  ctx.stroke()
  //23
  ctx.beginPath()
  ctx.arc(x+20.5*W/24, y+5*H/24, r, 0, Math.PI*2)
  ctx.stroke()
  //24
  ctx.beginPath()
  ctx.arc(x+20.5*W/24, y+12*H/24, r, 0, Math.PI*2)
  ctx.stroke()
  //25
  ctx.beginPath()
  ctx.arc(x+20.5*W/24, y+19*H/24, r, 0, Math.PI*2)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+5*H/24)
  ctx.lineTo(x+21*W/24, y+5*H/24)
  ctx.stroke()
  ctx.beginPath()
  ctx.moveTo(x+20.5*W/24, y+4.5*H/24)
  ctx.lineTo(x+20.5*W/24, y+5.5*H/24)
  ctx.stroke()
  
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+12*H/24)
  ctx.lineTo(x+21*W/24, y+12*H/24)
  ctx.stroke()
  ctx.beginPath()
  ctx.moveTo(x+20.5*W/24, y+11.5*H/24)
  ctx.lineTo(x+20.5*W/24, y+12.5*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+19*H/24)
  ctx.lineTo(x+21*W/24, y+19*H/24)
  ctx.stroke()
  ctx.beginPath()
  ctx.moveTo(x+20.5*W/24, y+18.5*H/24)
  ctx.lineTo(x+20.5*W/24, y+19.5*H/24)
  ctx.stroke()
}

function tankAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+5*W/20, y+8*H/20)
  cpx = x+5*W/20
  cpy = y+6*H/20
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/20, y+6*H/20)
  cpx = x+9*W/20
  cpy = y+6*H/20
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/20, y+8*H/20)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+3*W/20, y+9*H/20)
  cpx = x+3*W/20
  cpy = y+8*H/20
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/20, y+8*H/20)
  cpx = x+10*W/20
  cpy = y+8*H/20
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/20, y+8*H/20)
  cpx = x+11*W/20
  cpy = y+8*H/20
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/20, y+9*H/20)
  cpx = x+11*W/20
  cpy = y+11*H/20
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/20, y+11*H/20)
  cpx = x+11*W/20
  cpy = y+12*H/20
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/20, y+12*H/20)
  cpx = x+4*W/20
  cpy = y+12*H/20
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/20, y+12*H/20)
  cpx = x+3*W/20
  cpy = y+12*H/20
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/20, y+11*H/20)
  cpx = x+3*W/20
  cpy = y+9*H/20
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/20, y+9*H/20)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+2*W/20, y+16*H/20)
  cpx = x+1*W/20
  cpy = y+16*H/20
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/20, y+15*H/20)
  cpx = x+1*W/20
  cpy = y+12*H/20
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/20, y+12*H/20)
  cpx = x+16*W/20
  cpy = y+12*H/20
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/20, y+12*H/20)
  cpx = x+17*W/20
  cpy = y+12*H/20
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/20, y+13*H/20)
  cpx = x+17*W/20
  cpy = y+16*H/20
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/20, y+16*H/20)
  cpx = x+2*W/20
  cpy = y+16*H/20
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/20, y+16*H/20)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+11*W/20, y+9*H/20)
  ctx.lineTo(x+19*W/20, y+9*H/20)
  ctx.lineTo(x+19*W/20, y+10*H/20)
  ctx.lineTo(x+11*W/20, y+10*H/20)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+17*W/20, y+9*H/20)
  ctx.lineTo(x+17*W/20, y+10*H/20)
  ctx.stroke()

  let r = W/20
  //6
  ctx.beginPath()
  ctx.arc(x+2*W/20, y+15*H/20, r, 0, Math.PI*2)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.arc(x+16*W/20, y+13*H/20, r, 0, Math.PI*2)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.arc(x+5*W/20, y+14*H/20, r, 0, Math.PI*2)
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.arc(x+9*W/20, y+14*H/20, r, 0, Math.PI*2)
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.arc(x+13*W/20, y+14*H/20, r, 0, Math.PI*2)
  ctx.stroke()
  r *= 2
  //11
  ctx.beginPath()
  ctx.arc(x+5*W/20, y+14*H/20, r, 0, Math.PI*2)
  ctx.stroke()

  //12
  ctx.beginPath()
  ctx.arc(x+9*W/20, y+14*H/20, r, 0, Math.PI*2)
  ctx.stroke()

  //13
  ctx.beginPath()
  ctx.arc(x+13*W/20, y+14*H/20, r, 0, Math.PI*2)
  ctx.stroke()
}

function idling_black_pickup_with_tinted_windowsAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+16*H/24)
  cpx = x+6*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+19*H/24)
  cpx = x+0*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+0*W/24, y+16*H/24)
  ctx.lineTo(x+0*W/24, y+9*H/24)
  ctx.lineTo(x+10*W/24, y+9*H/24)
  ctx.lineTo(x+10*W/24, y+4*H/24)
  ctx.lineTo(x+18*W/24, y+4*H/24)
  ctx.lineTo(x+21*W/24, y+9*H/24)
  ctx.lineTo(x+24*W/24, y+9*H/24)
  ctx.lineTo(x+24*W/24, y+16*H/24)
  cpx = x+24*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+19*H/24)
  cpx = x+18*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+16*H/24)
  ctx.lineTo(x+6*W/24, y+16*H/24)
  ctx.fill()
}

function empty_tableAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
   //1
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+15*H/24)
  ctx.lineTo(x+8*W/24, y+10*H/24)
  ctx.lineTo(x+16*W/24, y+10*H/24)
  ctx.lineTo(x+23*W/24, y+15*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+10*H/24)
  cpx = x+9*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+6*H/24)
  cpx = x+15*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+10*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+11*H/24)
  cpx = x+18*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+8*H/24)
  cpx = x+22*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+14*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+11*H/24)
  cpx = x+6*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+8*H/24)
  cpx = x+2*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+14*H/24)
  ctx.stroke()
}

function stainAt (x,y,W,color) {
  if (Math.random() < 0.5)
    stain1At (x,y,W,color)
  else 
    stain2At (x,y,W,color)
}
function stain2At (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let myctx = canvas.getContext("2d")

  let off = document.createElement("CANVAS")
  let ctx = off.getContext("2d")
  off.width = canvas.width
  off.height = canvas.height
  ctx.fillStyle = color
  let H = W, cpx, cpy, points = []
  if (!x) {
    x = LASTCLICK[0], y = LASTCLICK[1]
    W = 100 + 2*document.getElementById("featuresize").value
    H = W
    ctx.fillStyle = getselectedcolor()
  }
  ctx.globalAlpha = document.getElementById("opacity").value/100
  ctx.globalAlpha = 0.8
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = [], d = 48
  let cx = x+W/2, cy = y+H/2, angle = pet(180)
  i = 0
  let gco = ctx.globalCompositeOperation
  for (; i < 7; i++) {
    if (i === 4)
      ctx.globalCompositeOperation = 'destination-out'
    else
      ctx.globalCompositeOperation = 'source-over'

    angle = pet(320)
    cx += pet(W/15), cy += pet(W/15)
    W += pet(W/16)
    //1
    ctx.beginPath()
    p = rotatePoint(x+4*W/32, y+16*H/32 ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    cpx = x+4*W/32
    cpy = y+15*H/32
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+3*W/32, y+15*H/32,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0]+pet(W/d),cp[1]+pet(W/d),p[0]+pet(W/d),p[1]+pet(W/d))
    cpx = x+2*W/32
    cpy = y+15*H/32
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+2*W/32, y+16*H/32,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0]+pet(W/d),cp[1]+pet(W/d),p[0]+pet(W/d),p[1]+pet(W/d))
    cpx = x+3*W/32
    cpy = y+29*H/32
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+16*W/32, y+30*H/32,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0]+pet(W/d),cp[1]+pet(W/d),p[0]+pet(W/d),p[1]+pet(W/d))
    cpx = x+29*W/32
    cpy = y+29*H/32
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+30*W/32, y+14*H/32,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0]+pet(W/d),cp[1]+pet(W/d),p[0]+pet(W/d),p[1]+pet(W/d))
    cpx = x+30*W/32
    cpy = y+13*H/32
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+29*W/32, y+13*H/32,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0]+pet(W/d),cp[1]+pet(W/d),p[0]+pet(W/d),p[1]+pet(W/d))
    cpx = x+28*W/32
    cpy = y+13*H/32
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+28*W/32, y+14*H/32,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0]+pet(W/d),cp[1]+pet(W/d),p[0]+pet(W/d),p[1]+pet(W/d))
    cpx = x+27*W/32
    cpy = y+27*H/32
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+16*W/32, y+28*H/32,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0]+pet(W/d),cp[1]+pet(W/d),p[0]+pet(W/d),p[1]+pet(W/d))
    cpx = x+5*W/32
    cpy = y+27*H/32
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+4*W/32, y+16*H/32,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0]+pet(W/d),cp[1]+pet(W/d),p[0]+pet(W/d),p[1]+pet(W/d))
    ctx.fill()
      //2
    ctx.beginPath()
    p = rotatePoint(x+4*W/32, y+17*H/32 ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    cpx = x+4*W/32
    cpy = y+18*H/32
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+5*W/32, y+18*H/32,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0]+pet(W/d),cp[1]+pet(W/d),p[0]+pet(W/d),p[1]+pet(W/d))
    cpx = x+6*W/32
    cpy = y+18*H/32
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+6*W/32, y+17*H/32,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0]+pet(W/d),cp[1]+pet(W/d),p[0]+pet(W/d),p[1]+pet(W/d))
    cpx = x+6*W/32
    cpy = y+5*H/32
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+16*W/32, y+5*H/32,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0]+pet(W/d),cp[1]+pet(W/d),p[0]+pet(W/d),p[1]+pet(W/d))
    cpx = x+17*W/32
    cpy = y+5*H/32
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+17*W/32, y+4*H/32,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0]+pet(W/d),cp[1]+pet(W/d),p[0]+pet(W/d),p[1]+pet(W/d))
    cpx = x+17*W/32
    cpy = y+3*H/32
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+16*W/32, y+3*H/32,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0]+pet(W/d),cp[1]+pet(W/d),p[0]+pet(W/d),p[1]+pet(W/d))
    cpx = x+4*W/32
    cpy = y+4*H/32
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+4*W/32, y+17*H/32,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0]+pet(W/d),cp[1]+pet(W/d),p[0]+pet(W/d),p[1]+pet(W/d))
    ctx.fill()
    //3
    ctx.beginPath()
    p = rotatePoint(x+20*W/32, y+4*H/32 ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    cpx = x+19*W/32
    cpy = y+4*H/32
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+19*W/32, y+3*H/32,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0]+pet(W/d),cp[1]+pet(W/d),p[0]+pet(W/d),p[1]+pet(W/d))
    cpx = x+19*W/32
    cpy = y+2*H/32
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+20*W/32, y+2*H/32,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0]+pet(W/d),cp[1]+pet(W/d),p[0]+pet(W/d),p[1]+pet(W/d))
    cpx = x+28*W/32
    cpy = y+4*H/32
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+29*W/32, y+10*H/32,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0]+pet(W/d),cp[1]+pet(W/d),p[0]+pet(W/d),p[1]+pet(W/d))
    cpx = x+29*W/32
    cpy = y+11*H/32
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+28*W/32, y+11*H/32,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0]+pet(W/d),cp[1]+pet(W/d),p[0]+pet(W/d),p[1]+pet(W/d))
    cpx = x+27*W/32
    cpy = y+11*H/32
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+27*W/32, y+10*H/32,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0]+pet(W/d),cp[1]+pet(W/d),p[0]+pet(W/d),p[1]+pet(W/d))
    cpx = x+26*W/32
    cpy = y+6*H/32
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+20*W/32, y+4*H/32,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0]+pet(W/d),cp[1]+pet(W/d),p[0]+pet(W/d),p[1]+pet(W/d))
    ctx.fill()
    //4 dot
    ctx.beginPath()
    p = rotatePoint(x+5*W/32, y+6*H/32 ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    cpx = x+6*W/32
    cpy = y+6*H/32
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+6*W/32, y+5*H/32,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0]+pet(W/d),cp[1]+pet(W/d),p[0]+pet(W/d),p[1]+pet(W/d))
    cpx = x+6*W/32
    cpy = y+4*H/32
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+5*W/32, y+4*H/32,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0]+pet(W/d),cp[1]+pet(W/d),p[0]+pet(W/d),p[1]+pet(W/d))
    cpx = x+4*W/32
    cpy = y+4*H/32
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+4*W/32, y+5*H/32,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0]+pet(W/d),cp[1]+pet(W/d),p[0]+pet(W/d),p[1]+pet(W/d))
    cpx = x+4*W/32
    cpy = y+6*H/32
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+5*W/32, y+6*H/32,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0]+pet(W/d),cp[1]+pet(W/d),p[0]+pet(W/d),p[1]+pet(W/d))
    if (Math.random() > 0.8)
      ctx.fill()

    //9 alt dot  smallest
    ctx.beginPath()
    p = rotatePoint(x+4*W/48, y+10*H/48 ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    cpx = x+5*W/48
    cpy = y+10*H/48
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+5*W/48, y+9*H/48,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0]+pet(W/d),cp[1]+pet(W/d),p[0]+pet(W/d),p[1]+pet(W/d))
    cpx = x+5*W/48
    cpy = y+8*H/48
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+4*W/48, y+8*H/48,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0]+pet(W/d),cp[1]+pet(W/d),p[0]+pet(W/d),p[1]+pet(W/d))
    cpx = x+3*W/48
    cpy = y+8*H/48
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+3*W/48, y+9*H/48,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0]+pet(W/d),cp[1]+pet(W/d),p[0]+pet(W/d),p[1]+pet(W/d))
    cpx = x+3*W/48
    cpy = y+10*H/48
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+4*W/48, y+10*H/48,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0]+pet(W/d),cp[1]+pet(W/d),p[0]+pet(W/d),p[1]+pet(W/d))
    if (Math.random() > 0.7)
      ctx.fill()
    //5
    ctx.beginPath()
    p = rotatePoint(x+14*W/32, y+27*H/32 ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    cpx = x+16*W/32
    cpy = y+28*H/32
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+18*W/32, y+28*H/32,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0]+pet(W/d),cp[1]+pet(W/d),p[0]+pet(W/d),p[1]+pet(W/d))
    cpx = x+20*W/32
    cpy = y+28*H/32
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+20*W/32, y+30*H/32,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0]+pet(W/d),cp[1]+pet(W/d),p[0]+pet(W/d),p[1]+pet(W/d))
    cpx = x+20*W/32
    cpy = y+31*H/32
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+18*W/32, y+31*H/32,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0]+pet(W/d),cp[1]+pet(W/d),p[0]+pet(W/d),p[1]+pet(W/d))
    cpx = x+15*W/32
    cpy = y+31*H/32
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+13*W/32, y+30*H/32,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0]+pet(W/d),cp[1]+pet(W/d),p[0]+pet(W/d),p[1]+pet(W/d))
    cpx = x+11*W/32
    cpy = y+29*H/32
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+12*W/32, y+27*H/32,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0]+pet(W/d),cp[1]+pet(W/d),p[0]+pet(W/d),p[1]+pet(W/d))
    cpx = x+14*W/32
    cpy = y+27*H/32
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+14*W/32, y+27*H/32,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0]+pet(W/d),cp[1]+pet(W/d),p[0]+pet(W/d),p[1]+pet(W/d))
    if (Math.random() > 0.6)
      ctx.fill()

    //7 lg blob
    ctx.beginPath()
    p = rotatePoint(x+26*W/32, y+17*H/32 ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    cpx = x+26*W/32
    cpy = y+19*H/32
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+28*W/32, y+19*H/32,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0]+pet(W/d),cp[1]+pet(W/d),p[0]+pet(W/d),p[1]+pet(W/d))
    cpx = x+30*W/32
    cpy = y+19*H/32
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+30*W/32, y+17*H/32,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0]+pet(W/d),cp[1]+pet(W/d),p[0]+pet(W/d),p[1]+pet(W/d))
    cpx = x+30*W/32
    cpy = y+12*H/32
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+29*W/32, y+11*H/32,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1]+pet(W/d),p[0]+pet(W/d),p[1]+pet(W/d))
    cpx = x+27*W/32
    cpy = y+11*H/32
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+26*W/32, y+12*H/32,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0]+pet(W/d),cp[1],p[0]+pet(W/d),p[1]+pet(W/d))
    cpx = x+26*W/32
    cpy = y+17*H/32
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+26*W/32, y+17*H/32,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0]+pet(W/d),cp[1]+pet(W/d),p[0]+pet(W/d),p[1]+pet(W/d))
    if (Math.random() > 0.7)
      ctx.fill()
  }
  myctx.drawImage(off,0,0)
  ctx.globalCompositeOperation = gco//
  ctx.globalAlpha = document.getElementById("opacity").value/100
}
 

function stain1At (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let myctx = canvas.getContext("2d")
  let off = document.createElement("CANVAS")
  let ctx = off.getContext("2d")
  off.width = canvas.width
  off.height = canvas.height
  ctx.fillStyle = color
  let H = W, cpx, cpy, points = []
  if (!x) {
    x = LASTCLICK[0], y = LASTCLICK[1]
    W = 100 + 2*document.getElementById("featuresize").value
    H = W
    ctx.fillStyle = getselectedcolor()
  }
  ctx.globalAlpha = document.getElementById("opacity").value/100
  ctx.globalAlpha = 0.8
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = [], d = 32
  let cx = x+W/2, cy = y+H/2, angle = pet(180)
  i = 0
  let gco = ctx.globalCompositeOperation
  for (; i < 7; i++) {
    if (i === 4)
      ctx.globalCompositeOperation = 'destination-out'
    else
      ctx.globalCompositeOperation = 'source-over'

    angle = pet(180)
    cx += pet(W/14), cy += pet(W/14)
    W += pet(W/16)
    //1
    ctx.beginPath()
    p = rotatePoint(x+2*W/24, y+13*H/24 ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    cpx = x+2*W/24
    cpy = y+12*H/24
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+3*W/24, y+12*H/24,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0]+pet(W/d),cp[1]+pet(W/d),p[0]+pet(W/d),p[1]+pet(W/d))
    cpx = x+4*W/24
    cpy = y+12*H/24
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+4*W/24, y+13*H/24,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0]+pet(W/d),cp[1]+pet(W/d),p[0]+pet(W/d),p[1]+pet(W/d))
    cpx = x+4*W/24
    cpy = y+20*H/24
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+12*W/24, y+20*H/24,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0]+pet(W/d),cp[1]+pet(W/d),p[0]+pet(W/d),p[1]+pet(W/d))
    cpx = x+20*W/24
    cpy = y+20*H/24
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+20*W/24, y+12*H/24,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0]+pet(W/d),cp[1]+pet(W/d),p[0]+pet(W/d),p[1]+pet(W/d))
    cpx = x+20*W/24
    cpy = y+4*H/24
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+12*W/24, y+4*H/24,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0]+pet(W/d),cp[1]+pet(W/d),p[0]+pet(W/d),p[1]+pet(W/d))
    cpx = x+4*W/24
    cpy = y+4*H/24
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+4*W/24, y+10*H/24,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0]+pet(W/d),cp[1]+pet(W/d),p[0]+pet(W/d),p[1]+pet(W/d))
    cpx = x+4*W/24
    cpy = y+11*H/24
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+3*W/24, y+11*H/24,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0]+pet(W/d),cp[1]+pet(W/d),p[0]+pet(W/d),p[1]+pet(W/d))
    cpx = x+2*W/24
    cpy = y+11*H/24
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+2*W/24, y+10*H/24,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0]+pet(W/d),cp[1]+pet(W/d),p[0]+pet(W/d),p[1]+pet(W/d))
    cpx = x+2*W/24
    cpy = y+2*H/24
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+12*W/24, y+2*H/24,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0]+pet(W/d),cp[1]+pet(W/d),p[0]+pet(W/d),p[1]+pet(W/d))
    cpx = x+22*W/24
    cpy = y+2*H/24
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+22*W/24, y+12*H/24,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0]+pet(W/d),cp[1]+pet(W/d),p[0]+pet(W/d),p[1]+pet(W/d))
    cpx = x+22*W/24
    cpy = y+22*H/24
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+12*W/24, y+22*H/24,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0]+pet(W/d),cp[1]+pet(W/d),p[0]+pet(W/d),p[1]+pet(W/d))
    cpx = x+2*W/24
    cpy = y+22*H/24
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+2*W/24, y+13*H/24,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0]+pet(W/d),cp[1]+pet(W/d),p[0]+pet(W/d),p[1]+pet(W/d))
    if (Math.random() > 0.6)
      ctx.fill()

    //2 inner blob
    ctx.beginPath()
    p = rotatePoint(x+18*W/24, y+8*H/24 ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    cpx = x+20*W/24
    cpy = y+8*H/24
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+20*W/24, y+6*H/24,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0]+pet(W/d),cp[1]+pet(W/d),p[0]+pet(W/d),p[1]+pet(W/d))
    cpx = x+20*W/24
    cpy = y+4*H/24
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+18*W/24, y+4*H/24,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0]+pet(W/d),cp[1]+pet(W/d),p[0]+pet(W/d),p[1]+pet(W/d))
    cpx = x+16*W/24
    cpy = y+4*H/24
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+16*W/24, y+6*H/24,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0]+pet(W/d),cp[1]+pet(W/d),p[0]+pet(W/d),p[1]+pet(W/d))
    cpx = x+16*W/24
    cpy = y+8*H/24
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+18*W/24, y+8*H/24,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0]+pet(W/d),cp[1]+pet(W/d),p[0]+pet(W/d),p[1]+pet(W/d))
    if (Math.random() > 0.6)
      ctx.fill()

    ctx.beginPath()
    p = rotatePoint(x+3*W/24, y+13*H/24 ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    cpx = x+4*W/24
    cpy = y+13*H/24
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+4*W/24, y+12*H/24,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0]+pet(W/d),cp[1]+pet(W/d),p[0]+pet(W/d),p[1]+pet(W/d))
    cpx = x+4*W/24
    cpy = y+11*H/24
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+3*W/24, y+11*H/24,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0]+pet(W/d),cp[1]+pet(W/d),p[0]+pet(W/d),p[1]+pet(W/d))
    cpx = x+2*W/24
    cpy = y+11*H/24
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+2*W/24, y+12*H/24,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0]+pet(W/d),cp[1]+pet(W/d),p[0]+pet(W/d),p[1]+pet(W/d))
    cpx = x+2*W/24
    cpy = y+13*H/24
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+3*W/24, y+13*H/24,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0]+pet(W/d),cp[1]+pet(W/d),p[0]+pet(W/d),p[1]+pet(W/d))
    ctx.fill()
    
    //3
    ctx.beginPath()
    p = rotatePoint(x+3*W/24, y+10*H/24 ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    cpx = x+3*W/24
    cpy = y+11*H/24
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+4*W/24, y+11*H/24,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0]+pet(W/d),cp[1]+pet(W/d),p[0]+pet(W/d),p[1]+pet(W/d))
    cpx = x+5*W/24
    cpy = y+11*H/24
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+5*W/24, y+10*H/24,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0]+pet(W/d),cp[1]+pet(W/d),p[0]+pet(W/d),p[1]+pet(W/d))
    cpx = x+5*W/24
    cpy = y+4*H/24
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+13*W/24, y+4*H/24,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0]+pet(W/d),cp[1]+pet(W/d),p[0]+pet(W/d),p[1]+pet(W/d))
    cpx = x+20*W/24
    cpy = y+6*H/24
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+20*W/24, y+12*H/24,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0]+pet(W/d),cp[1]+pet(W/d),p[0]+pet(W/d),p[1]+pet(W/d))
    cpx = x+20*W/24
    cpy = y+20*H/24
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+12*W/24, y+20*H/24,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0]+pet(W/d),cp[1]+pet(W/d),p[0]+pet(W/d),p[1]+pet(W/d))
    cpx = x+6*W/24
    cpy = y+20*H/24
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+5*W/24, y+14*H/24,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0]+pet(W/d),cp[1]+pet(W/d),p[0]+pet(W/d),p[1]+pet(W/d))
    cpx = x+5*W/24
    cpy = y+13*H/24
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+4*W/24, y+13*H/24,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0]+pet(W/d),cp[1]+pet(W/d),p[0]+pet(W/d),p[1]+pet(W/d))
    cpx = x+3*W/24
    cpy = y+13*H/24
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+3*W/24, y+14*H/24,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0]+pet(W/d),cp[1]+pet(W/d),p[0]+pet(W/d),p[1]+pet(W/d))
    cpx = x+4*W/24
    cpy = y+22*H/24
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+12*W/24, y+22*H/24,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0]+pet(W/d),cp[1]+pet(W/d),p[0]+pet(W/d),p[1]+pet(W/d))
    cpx = x+22*W/24
    cpy = y+22*H/24
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+22*W/24, y+12*H/24,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0]+pet(W/d),cp[1]+pet(W/d),p[0]+pet(W/d),p[1]+pet(W/d))
    cpx = x+22*W/24
    cpy = y+4*H/24
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+13*W/24, y+2*H/24,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0]+pet(W/d),cp[1]+pet(W/d),p[0]+pet(W/d),p[1]+pet(W/d))
    cpx = x+3*W/24
    cpy = y+2*H/24
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+3*W/24, y+10*H/24,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0]+pet(W/d),cp[1]+pet(W/d),p[0]+pet(W/d),p[1]+pet(W/d))
    cpx = x+3*W/24
    cpy = y+11*H/24
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+4*W/24, y+11*H/24,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0]+pet(W/d),cp[1]+pet(W/d),p[0]+pet(W/d),p[1]+pet(W/d))
    cpx = x+5*W/24
    cpy = y+11*H/24
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+5*W/24, y+10*H/24,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0]+pet(W/d),cp[1]+pet(W/d),p[0]+pet(W/d),p[1]+pet(W/d))
    ctx.fill()

    // outerblob +pet(W/d)
    ctx.beginPath()
    p = rotatePoint(x+8*W/24, y+21*H/24 ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    cpx = x+8*W/24
    cpy = y+23*H/24
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+10*W/24, y+23*H/24,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0]+pet(W/d),cp[1]+pet(W/d),p[0]+pet(W/d),p[1]+pet(W/d))
    cpx = x+11*W/24
    cpy = y+23*H/24
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+11*W/24, y+21*H/24,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0]+pet(W/d),cp[1]+pet(W/d),p[0]+pet(W/d),p[1]+pet(W/d))
    cpx = x+10*W/24
    cpy = y+20*H/24
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+8*W/24, y+20*H/24,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0]+pet(W/d),cp[1]+pet(W/d),p[0]+pet(W/d),p[1]+pet(W/d))
    cpx = x+8*W/24
    cpy = y+21*H/24
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+8*W/24, y+21*H/24,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0+pet(W/d)],cp[1]+pet(W/d),p[0]+pet(W/d),p[1]+pet(W/d))
    if (Math.random() > 0.6)
      ctx.fill()
  }
  myctx.drawImage(off,0,0)
  ctx.globalCompositeOperation =gco//
  ctx.globalAlpha = document.getElementById("opacity").value/100
}

function pooAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/25
  ctx.strokeStyle = color
  ctx.lineCap = "miter"
  ctx.lineJoin = "miter"
  //1
  ctx.fillStyle = color
  y += 2*H/24
  let px = (Math.random()-0.5) * W/18
  let py = (Math.random()-0.5) * W/18
  x += px
  y += py
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+20*H/24)
  cpx = x+24*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+24*W/24, y+16*H/24)
  cpx = x+24*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+12*H/24)
  cpx = x+21*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+6*H/24)
  cpx = x+17*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+3*H/24)
  cpx = x+14*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+2*H/24)
  cpx = x+11*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+0*H/24)
  cpx = x+9*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+3*H/24)
  cpx = x+6*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+6*H/24)
  cpx = x+2*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+12*H/24)
  cpx = x+0*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+0*W/24, y+16*H/24)
  cpx = x+0*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+20*H/24)
  cpx = x+20*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+20*H/24)
  ctx.globalAlpha /= 3
  ctx.fill()
  ctx.globalAlpha *= 3
  x -= px
  y -= py
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+20*H/24)
  cpx = x+24*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+24*W/24, y+16*H/24)
  cpx = x+24*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+12*H/24)
  cpx = x+21*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+6*H/24)
  cpx = x+17*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+3*H/24)
  cpx = x+14*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+2*H/24)
  cpx = x+11*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+0*H/24)
  cpx = x+9*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+3*H/24)
  cpx = x+6*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+6*H/24)
  cpx = x+2*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+12*H/24)
  cpx = x+0*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+0*W/24, y+16*H/24)
  cpx = x+0*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+20*H/24)
  cpx = x+20*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+20*H/24)
  ctx.stroke()
}

function king_turdAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/25
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  pooAt(x+5.3*W/24, y+10.3*H/24, 13.5*W/24,color)
  la_coronaAt(x+5*W/24,y+0.8*H/24,14*W/24,color)
}

function figleafAt (x,y,W,color,angle) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/30
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "round"
  ctx.lineJoin = "round"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2//, angle = pet(180)

  //1
  ctx.beginPath()
  p = rotatePoint(x+4*W/24, y+4*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+4*W/24
  cpy = y+4*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+4*W/24, y+4*H/24,cx,cy,angle)
  //ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+0*W/24
  cpy = y+8*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+4*W/24, y+12*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+0*W/24
  cpy = y+16*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+4*W/24, y+20*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+8*W/24
  cpy = y+24*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24, y+20*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+16*W/24
  cpy = y+24*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+20*W/24, y+20*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+24*W/24
  cpy = y+16*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+20*W/24, y+12*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+24*W/24
  cpy = y+8*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+20*W/24, y+4*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+16*W/24
  cpy = y+0*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24, y+4*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+8*W/24
  cpy = y+0*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+4*W/24, y+4*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.globalAlpha /= 4
  ctx.fill()
  ctx.globalAlpha *= 4
  ctx.stroke()

  //9
  ctx.beginPath()
  p = rotatePoint(x+4*W/24, y+4*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+3*W/24
  cpy = y+3*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+3*W/24, y+2*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()
  //1
  ctx.beginPath()
  p = rotatePoint(x+4*W/24, y+4*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+19*W/24, y+19*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()
ctx.lineWidth /= 2
  //2
  ctx.beginPath()
  p = rotatePoint(x+10*W/24, y+10*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+12*W/24
  cpy = y+12*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+5*W/24, y+19*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()

  //3
  ctx.beginPath()
  p = rotatePoint(x+10*W/24, y+10*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+12*W/24
  cpy = y+12*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+18*W/24, y+5*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()

  //4
  ctx.beginPath()
  p = rotatePoint(x+16*W/24, y+20*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+16*W/24
  cpy = y+16*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+14*W/24, y+14*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+16*W/24
  cpy = y+16*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+20*W/24, y+15*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()

  //5
  ctx.beginPath()
  p = rotatePoint(x+3*W/24, y+15*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+8*W/24
  cpy = y+16*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+9.9*W/24, y+13*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+8*W/24
  cpy = y+16*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+9*W/24, y+20*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()

  //6
  ctx.beginPath()
  p = rotatePoint(x+15*W/24, y+3*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+16*W/24
  cpy = y+7*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+14.1*W/24, y+9*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+16*W/24
  cpy = y+7*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+20*W/24, y+9*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()
}

function graterAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+6*H/24)
  cpx = x+4*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+4*H/24)
  cpx = x+4*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+2*H/24)
  cpx = x+4*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+1*H/24)
  cpx = x+17*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+1*H/24)
  cpx = x+19*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+4*H/24)
  cpx = x+19*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+6*H/24)
  ctx.lineTo(x+6*W/24, y+6*H/24)
  ctx.lineTo(x+5*W/24, y+23*H/24)
  ctx.lineTo(x+20*W/24, y+23*H/24)
  ctx.lineTo(x+19*W/24, y+6*H/24)
  ctx.lineTo(x+17*W/24, y+4*H/24)
  ctx.lineTo(x+6*W/24, y+4*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+4*H/24)
  ctx.lineTo(x+2*W/24, y+20*H/24)
  ctx.lineTo(x+5*W/24, y+23*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+4*H/24)
  ctx.lineTo(x+17*W/24, y+6*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+4*H/24)
  ctx.lineTo(x+17*W/24, y+3*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+4*H/24)
  cpx = x+6*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+3*H/24)
  cpx = x+18*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+3*H/24)
  cpx = x+19*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+4*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+6*H/24)
  ctx.lineTo(x+6*W/24, y+4*H/24)
  ctx.stroke()
  let xoff = -W/48
  let i = 0, j = 0 // 6X8
  for (; j < 16; j+=2) {
    i = 0
    for (; i < 12; i+=2) {
      ctx.beginPath()
      ctx.moveTo(x+7*W/24+i*W/24+xoff, y+8*H/24+j*H/24)
      ctx.lineTo(x+8*W/24+i*W/24+xoff, y+7*H/24+j*H/24)
      ctx.lineTo(x+8*W/24+i*W/24+xoff, y+8*H/24+j*H/24)
      ctx.stroke()
    }
    xoff *= -1
  }
}

function stageAt (x,y,W,color,inverted) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
   //1
  ctx.globalAlpha /= 3
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+10*H/24)
  cpx = x+16*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+14*H/24)
  cpx = x+16*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+18*H/24)
  cpx = x+12*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+20*H/24)
  cpx = x+20*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+20*H/24)
  cpx = x+20*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+23*H/24)
  cpx = x+20*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+14*H/24)
  cpx = x+19*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+1*H/24)
  cpx = x+19*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+2*H/24)
  cpx = x+17*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+1*H/24)
  cpx = x+17*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+2*H/24)
  cpx = x+15*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+1*H/24)
  cpx = x+15*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+2*H/24)
  cpx = x+13*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+1*H/24)
  cpx = x+13*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+2*H/24)
  cpx = x+11*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+1*H/24)
  cpx = x+11*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+2*H/24)
  cpx = x+9*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+1*H/24)
  cpx = x+9*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+2*H/24)
  cpx = x+7*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+1*H/24)
  cpx = x+7*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+2*H/24)
  cpx = x+5*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+1*H/24)
  cpx = x+5*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+14*H/24)
  cpx = x+4*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+23*H/24)
  cpx = x+4*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+20*H/24)
  cpx = x+12*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+20*H/24)
  cpx = x+12*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+18*H/24)
  cpx = x+8*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+14*H/24)
  cpx = x+8*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+10*H/24)
  ctx.fill()
  ctx.globalAlpha *= 3
  //1
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+1*H/24)
  cpx = x+5*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+14*H/24)
  cpx = x+4*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+23*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+19*W/24, y+1*H/24)
  cpx = x+19*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+14*H/24)
  cpx = x+20*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+23*H/24)
  ctx.stroke()

//11 top line
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+1*H/24)
  ctx.lineTo(x+23*W/24, y+1*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+1*H/24)
  cpx = x+5*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+2*H/24)
  cpx = x+7*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+1*H/24)
  cpx = x+7*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+2*H/24)
  cpx = x+9*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+1*H/24)
  cpx = x+9*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+2*H/24)
  cpx = x+11*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+1*H/24)
  cpx = x+11*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+2*H/24)
  cpx = x+13*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+1*H/24)
  cpx = x+13*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+2*H/24)
  cpx = x+15*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+1*H/24)
  cpx = x+15*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+2*H/24)
  cpx = x+17*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+1*H/24)
  cpx = x+17*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+2*H/24)
  cpx = x+19*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+1*H/24)
  ctx.stroke()

   //1
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+14*H/24)
  ctx.lineTo(x+1*W/24, y+1*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+14*H/24)
  cpx = x+2*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+1*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+14*H/24)
  cpx = x+3*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+1*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+14*H/24)
  cpx = x+4*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+1*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+14*H/24)
  cpx = x+5*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+1*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+23*W/24, y+14*H/24)
  cpx = x+22*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+1*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+23*W/24, y+14*H/24)
  cpx = x+21*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+1*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+23*W/24, y+14*H/24)
  cpx = x+20*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+1*H/24)
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+23*W/24, y+14*H/24)
  cpx = x+19*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+1*H/24)
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+23*W/24, y+14*H/24)
  ctx.lineTo(x+23*W/24, y+1*H/24)
  ctx.stroke()

 //12
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+15*H/24)
  ctx.lineTo(x+11*W/24, y+15*H/24)
  ctx.stroke()

  if (inverted) {
    ctx.beginPath()
    ctx.moveTo(x+11*W/24, y+15*H/24)
    ctx.lineTo(x+13*W/24, y+15*H/24)
    ctx.stroke()
  }
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+15*H/24)
  ctx.lineTo(x+21*W/24, y+15*H/24)
  ctx.stroke()

  //13
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+20*H/24)
  ctx.lineTo(x+20*W/24, y+20*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+14*H/24)
  cpx = x+3*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+23*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+14*H/24)
  cpx = x+2*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+23*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+14*H/24)
  cpx = x+1*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+23*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+23*W/24, y+14*H/24)
  cpx = x+21*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+23*H/24)
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+23*W/24, y+14*H/24)
  cpx = x+22*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+23*H/24)
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+23*W/24, y+14*H/24)
  cpx = x+23*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+23*H/24)
  ctx.stroke()

  if (inverted)
    return
  // figure
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+16*H/24)
  ctx.lineTo(x+13*W/24, y+16*H/24)
  ctx.lineTo(x+13*W/24, y+14*H/24)
  cpx = x+13*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+13*H/24)
  cpx = x+11*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+14*H/24)
  cpx = x+11*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+16*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+16*H/24)
  ctx.lineTo(x+11*W/24, y+17*H/24)
  ctx.lineTo(x+10*W/24, y+17*H/24)
  ctx.lineTo(x+10*W/24, y+18*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+16*H/24)
  ctx.lineTo(x+13*W/24, y+18*H/24)
  ctx.lineTo(x+14*W/24, y+18*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+14*H/24)
  ctx.lineTo(x+15*W/24, y+14*H/24)
  ctx.lineTo(x+15*W/24, y+13.5*H/24)
  ctx.stroke()
   //2
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+14*H/24)
  ctx.lineTo(x+9*W/24, y+14*H/24)
  ctx.lineTo(x+9*W/24, y+14.5*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+13*H/24)
  cpx = x+12.5*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12.5*W/24, y+12*H/24)
  cpx = x+12.5*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+11*H/24)
  cpx = x+11.5*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11.5*W/24, y+12*H/24)
  cpx = x+11.5*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+13*H/24)
  ctx.stroke()
}

function splashdownAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+14*H/24)
  cpx = x+1*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+8*H/24)
  cpx = x+1*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+1*H/24)
  cpx = x+14*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+6*H/24)
  cpx = x+10*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+10*H/24)
  cpx = x+4*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+14*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+23*H/24)
  ctx.lineTo(x+23*W/24, y+18*H/24)
  ctx.stroke()
  //5
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+17*H/24)
  ctx.lineTo(x+17*W/24, y+16*H/24)
  ctx.lineTo(x+16*W/24, y+17*H/24)
  ctx.lineTo(x+17*W/24, y+18*H/24)
  ctx.stroke()
  //3
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+6*H/24)
  ctx.lineTo(x+16.5*W/24, y+16.5*H/24)
  ctx.lineTo(x+10*W/24, y+10*H/24)
  ctx.lineTo(x+16.5*W/24, y+16.5*H/24)
  ctx.lineTo(x+6*W/24, y+14*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+18*H/24)
  ctx.lineTo(x+18*W/24, y+23*H/24)
  cpx = x+22*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+18*H/24)
  cpx = x+18*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+17*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+16*H/24)
  ctx.stroke()
}

function jailAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "miter"
  ctx.lineWidth *= 2
  //1
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+21*H/24)
  ctx.lineTo(x+23*W/24, y+21*H/24)
  ctx.stroke()
  //2
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+22*H/24)
  ctx.lineTo(x+2*W/24, y+2*H/24)
  ctx.lineTo(x+22*W/24, y+2*H/24)
  ctx.lineTo(x+22*W/24, y+22*H/24)
  ctx.stroke()
  ctx.lineWidth /= 2
  //3
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+2*H/24)
  ctx.lineTo(x+7*W/24, y+22*H/24)
  ctx.stroke()
  //4
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+2*H/24)
  ctx.lineTo(x+12*W/24, y+22*H/24)
  ctx.stroke()
  //5
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+2*H/24)
  ctx.lineTo(x+17*W/24, y+22*H/24)
  ctx.stroke()
}

function fox_and_hareAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+1*W/32, y+31*H/32)
  ctx.lineTo(x+31*W/32, y+31*H/32)
  ctx.lineTo(x+31*W/32, y+1*H/32)
  ctx.lineTo(x+1*W/32, y+1*H/32)
  ctx.lineTo(x+1*W/32, y+31*H/32)
  ctx.lineTo(x+2*W/32, y+31*H/32)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+11*W/32, y+1*H/32)
  ctx.lineTo(x+11*W/32, y+31*H/32)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+21*W/32, y+1*H/32)
  ctx.lineTo(x+21*W/32, y+31*H/32)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+1*W/32, y+11*H/32)
  ctx.lineTo(x+31*W/32, y+11*H/32)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+1*W/32, y+21*H/32)
  ctx.lineTo(x+31*W/32, y+21*H/32)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+12*W/32, y+21*H/32)
  ctx.lineTo(x+11*W/32, y+21*H/32)
  ctx.lineTo(x+21*W/32, y+11*H/32)
  ctx.lineTo(x+21*W/32, y+12*H/32)
  ctx.stroke()
  let x0 = x + randomPick([0,10,20,30]) * H/32
  let y0 = y + randomPick([0,10,20,30]) * H/32
  //7
  ctx.beginPath()
  ctx.arc(x0+1*W/32, y0+1*H/32, H/32, 0, Math.PI*2)
  ctx.fill()
  x0 = x + randomPick([0,10,20,30]) * H/32
  y0 = y + randomPick([0,10,20,30]) * H/32
  //8
  ctx.beginPath()
  ctx.arc(x0+1*W/32, y0+1*H/32, H/32, 0, Math.PI*2)
  ctx.fill()
}

function eye_contactAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, WAVEY = true
  let cs = W/24, d = 0, i = 0, maxi = 1
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  if (WAVEY) {
    d = cs/2, maxi = 23
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/150
  }
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  for (; i < maxi; i++) { // WAVEY
 //1
  ctx.beginPath()
  ctx.moveTo(x+0*cs+pet(d/2), y+5*cs+pet(d/2))
  cpx = x+8*cs
  cpy = y+5*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*cs+pet(d), y+10*cs+pet(d))
  cpx = x+8*cs
  cpy = y+12*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*cs+pet(d), y+12*cs+pet(d))
  cpx = x+11*cs
  cpy = y+16*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*cs+pet(d), y+16*cs+pet(d))
  cpx = x+8*cs
  cpy = y+22*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*cs+pet(d), y+22*cs+pet(d))
  cpx = x+8*cs
  cpy = y+24*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+0*cs+pet(d/2), y+24*cs+pet(d/2))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+24*cs+pet(d/2), y+19*cs+pet(d/2))
  cpx = x+16*cs
  cpy = y+19*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*cs+pet(d), y+14*cs+pet(d))
  cpx = x+16*cs
  cpy = y+12*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*cs+pet(d), y+12*cs+pet(d))
  cpx = x+13*cs
  cpy = y+8*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*cs+pet(d), y+8*cs+pet(d))
  cpx = x+16*cs
  cpy = y+2*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*cs+pet(d), y+2*cs+pet(d))
  cpx = x+16*cs
  cpy = y+0*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+24*cs+pet(d/2), y+0*cs+pet(d/2))
  ctx.stroke()
  //6
  ctx.beginPath()
  ctx.moveTo(x+7*cs+pet(d/2), y+11*cs+pet(d/2))
  ctx.lineTo(x+4*cs+pet(d/2), y+12*cs+pet(d/2))
  ctx.lineTo(x+7*cs+pet(d/2), y+13*cs+pet(d/2))
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+17*cs+pet(d/2), y+11*cs+pet(d/2))
  ctx.lineTo(x+20*cs+pet(d/2), y+12*cs+pet(d/2))
  ctx.lineTo(x+17*cs+pet(d/2), y+13*cs+pet(d/2))
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+7*cs+pet(d/2), y+12*cs+pet(d/2))
  ctx.lineTo(x+17*cs+pet(d/2), y+12*cs+pet(d/2))
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+6*cs+pet(d/2), y+19*cs+pet(d/2))
  ctx.lineTo(x+8*cs+pet(d/2), y+19*cs+pet(d/2))
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+16*cs+pet(d/2), y+5*cs+pet(d/2))
  ctx.lineTo(x+18*cs+pet(d/2), y+5*cs+pet(d/2))
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+7*cs+pet(d/2), y+11*cs+pet(d/2))
  cpx = x+6*cs
  cpy = y+12*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+7*cs+pet(d), y+13*cs+pet(d))
  cpx = x+8*cs
  cpy = y+12*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+7*cs+pet(d/2), y+11*cs+pet(d/2))
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+17*cs+pet(d/2), y+11*cs+pet(d/2))
  cpx = x+16*cs
  cpy = y+12*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+17*cs+pet(d), y+13*cs+pet(d))
  cpx = x+18*cs
  cpy = y+12*cs
  ctx.quadraticCurveTo(cpx+pet(d/2), cpy+pet(d/2), x+17*cs+pet(d/2), y+11*cs+pet(d/2))
  ctx.stroke()
  //8
  ctx.beginPath()
  ctx.moveTo(x+16*cs+pet(d/2), y+5*cs+pet(d/2))
  ctx.lineTo(x+18*cs+pet(d/2), y+5*cs+pet(d/2))
  ctx.stroke()

  } //WAVEY
  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function black_boxAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+3*H/24)
  ctx.lineTo(x+2*W/24, y+15*H/24)
  ctx.lineTo(x+10*W/24, y+21*H/24)
  ctx.lineTo(x+22*W/24, y+21*H/24)
  ctx.lineTo(x+22*W/24, y+9*H/24)
  ctx.lineTo(x+14*W/24, y+3*H/24)
  ctx.lineTo(x+2*W/24, y+3*H/24)
  ctx.fill()
}

function bedAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+20*H/24)
  ctx.lineTo(x+9*W/24, y+6*H/24)
  ctx.lineTo(x+21*W/24, y+6*H/24)
  ctx.lineTo(x+15*W/24, y+20*H/24)
  ctx.lineTo(x+3*W/24, y+20*H/24)
  ctx.lineTo(x+3*W/24, y+22*H/24)
  ctx.lineTo(x+15*W/24, y+22*H/24)
  ctx.lineTo(x+21*W/24, y+8*H/24)
  ctx.lineTo(x+21*W/24, y+6*H/24)
  ctx.lineTo(x+21*W/24, y+1*H/24)
  ctx.lineTo(x+20*W/24, y+1*H/24)
  ctx.lineTo(x+20*W/24, y+2*H/24)
  cpx = x+15*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+2*H/24)
  ctx.lineTo(x+10*W/24, y+1*H/24)
  ctx.lineTo(x+9*W/24, y+1*H/24)
  ctx.lineTo(x+9*W/24, y+6*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+22*H/24)
  ctx.lineTo(x+3*W/24, y+23*H/24)
  ctx.lineTo(x+4*W/24, y+23*H/24)
  ctx.lineTo(x+4*W/24, y+22*H/24)
  ctx.stroke()
  //3
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+22*H/24)
  ctx.lineTo(x+14*W/24, y+23*H/24)
  ctx.lineTo(x+15*W/24, y+23*H/24)
  ctx.lineTo(x+15*W/24, y+20*H/24)
  ctx.stroke()
  //4
  ctx.beginPath()
  ctx.moveTo(x+21*W/24, y+8*H/24)
  ctx.lineTo(x+21*W/24, y+9*H/24)
  ctx.stroke()
  //5
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+9*H/24)
  ctx.lineTo(x+19.6*W/24, y+9*H/24)
  ctx.stroke()
  //6
  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+6*H/24)
  ctx.lineTo(x+13.5*W/24, y+9*H/24)
  ctx.stroke()
 //13
  ctx.beginPath()
  ctx.moveTo(x+19.8*W/24, y+9*H/24)
  ctx.lineTo(x+19.8*W/24, y+11*H/24)
  ctx.stroke()
  //7
  ctx.beginPath()
  ctx.moveTo(x+7.5*W/24, y+10*H/24)
  ctx.lineTo(x+19.3*W/24, y+10*H/24)
  ctx.stroke()
  //8
  ctx.beginPath()
  ctx.moveTo(x+19.3*W/24, y+10*H/24)
  ctx.lineTo(x+19.3*W/24, y+12*H/24)
  ctx.stroke()
  //14
  ctx.beginPath()
  ctx.moveTo(x+21*W/24, y+9*H/24)
  ctx.lineTo(x+20.6*W/24, y+9*H/24)
  ctx.stroke()
}

function kilroyAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "round"
  ctx.lineJoin = "bevel"
//5
  ctx.beginPath()
  ctx.moveTo(x+14*W/48, y+24*H/48)
  cpx = x+15*W/48
  cpy = y+12*H/48
  ctx.quadraticCurveTo(cpx, cpy, x+24*W/48, y+12*H/48)
  cpx = x+33*W/48
  cpy = y+12*H/48
  ctx.quadraticCurveTo(cpx, cpy, x+34*W/48, y+24*H/48)
  ctx.stroke()
  //2 nose
  ctx.beginPath()
  ctx.moveTo(x+22*W/48, y+22*H/48)
  cpx = x+21*W/48
  cpy = y+30*H/48
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/48, y+31*H/48)
  cpx = x+21*W/48
  cpy = y+34*H/48
  ctx.quadraticCurveTo(cpx, cpy, x+24*W/48, y+34*H/48)
  cpx = x+27*W/48
  cpy = y+34*H/48
  ctx.quadraticCurveTo(cpx, cpy, x+27*W/48, y+31*H/48)
  cpx = x+27*W/48
  cpy = y+29*H/48
  ctx.quadraticCurveTo(cpx, cpy, x+26*W/48, y+22*H/48)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+12*W/48, y+24*H/48)
  ctx.lineTo(x+21.8*W/48, y+24*H/48)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+26.2*W/48, y+24*H/48)
  ctx.lineTo(x+36*W/48, y+24*H/48)
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+47*W/48, y+24*H/48)
  ctx.lineTo(x+44*W/48, y+24*H/48)
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+4*W/48, y+24*H/48)
  ctx.lineTo(x+1*W/48, y+24*H/48)
  ctx.stroke()
  //3
  ctx.beginPath()
  ctx.arc(x+10.8*W/24, y+10*H/24, W/120, 0, Math.PI*2)
  ctx.fill()
  //4
  ctx.beginPath()
  ctx.arc(x+13.2*W/24, y+10*H/24, W/120, 0, Math.PI*2)
  ctx.fill()


  // leftmost
  ctx.beginPath()
  ctx.moveTo(x+4*W/48, y+24*H/48)
  cpx = x+4*W/48
  cpy = y+23*H/48
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/48, y+23*H/48)
  cpx = x+6*W/48
  cpy = y+23*H/48
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/48, y+24*H/48)
  cpx = x+6*W/48
  cpy = y+26*H/48
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/48, y+26*H/48)
  cpx = x+6*W/48
  cpy = y+27*H/48
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/48, y+27*H/48)
  cpx = x+4*W/48
  cpy = y+27*H/48
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/48, y+26*H/48)
  cpx = x+4*W/48
  cpy = y+24*H/48
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/48, y+24*H/48)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+6*W/48, y+24*H/48)
  cpx = x+6*W/48
  cpy = y+23*H/48
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/48, y+23*H/48)
  cpx = x+8*W/48
  cpy = y+23*H/48
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/48, y+24*H/48)
  cpx = x+8*W/48
  cpy = y+27*H/48
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/48, y+27*H/48)
  cpx = x+8*W/48
  cpy = y+28*H/48
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/48, y+28*H/48)
  cpx = x+6*W/48
  cpy = y+28*H/48
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/48, y+27*H/48)
  cpx = x+6*W/48
  cpy = y+26*H/48
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/48, y+26*H/48)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+8*W/48, y+24*H/48)
  cpx = x+8*W/48
  cpy = y+23*H/48
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/48, y+23*H/48)
  cpx = x+10*W/48
  cpy = y+23*H/48
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/48, y+24*H/48)
  cpx = x+10*W/48
  cpy = y+27*H/48
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/48, y+27*H/48)
  cpx = x+10*W/48
  cpy = y+28*H/48
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/48, y+28*H/48)
  cpx = x+8*W/48
  cpy = y+28*H/48
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/48, y+27*H/48)
  ctx.stroke()

  //4 left hand
  ctx.beginPath()
  ctx.moveTo(x+10*W/48, y+24*H/48)
  cpx = x+10*W/48
  cpy = y+23*H/48
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/48, y+23*H/48)
  cpx = x+12*W/48
  cpy = y+23*H/48
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/48, y+24*H/48)
  cpx = x+12*W/48
  cpy = y+24*H/48
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/48, y+26*H/48)
  cpx = x+12*W/48
  cpy = y+27*H/48
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/48, y+27*H/48)
  cpx = x+12*W/48
  cpy = y+28*H/48
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/48, y+28*H/48)
  cpx = x+10*W/48
  cpy = y+28*H/48
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/48, y+27*H/48)
  ctx.stroke()
  ctx.beginPath()
  ctx.moveTo(x+44*W/48, y+24*H/48)
  cpx = x+44*W/48
  cpy = y+23*H/48
  ctx.quadraticCurveTo(cpx, cpy, x+43*W/48, y+23*H/48)
  cpx = x+42*W/48
  cpy = y+23*H/48
  ctx.quadraticCurveTo(cpx, cpy, x+42*W/48, y+24*H/48)
  cpx = x+42*W/48
  cpy = y+23*H/48
  ctx.quadraticCurveTo(cpx, cpy, x+41*W/48, y+23*H/48)
  cpx = x+40*W/48
  cpy = y+23*H/48
  ctx.quadraticCurveTo(cpx, cpy, x+40*W/48, y+24*H/48)
  cpx = x+40*W/48
  cpy = y+23*H/48
  ctx.quadraticCurveTo(cpx, cpy, x+39*W/48, y+23*H/48)
  cpx = x+38*W/48
  cpy = y+23*H/48
  ctx.quadraticCurveTo(cpx, cpy, x+38*W/48, y+24*H/48)
  cpx = x+38*W/48
  cpy = y+23*H/48
  ctx.quadraticCurveTo(cpx, cpy, x+37*W/48, y+23*H/48)
  cpx = x+36*W/48
  cpy = y+23*H/48
  ctx.quadraticCurveTo(cpx, cpy, x+36*W/48, y+24*H/48)
  cpx = x+36*W/48
  cpy = y+27*H/48
  ctx.quadraticCurveTo(cpx, cpy, x+36*W/48, y+27*H/48)
  cpx = x+36*W/48
  cpy = y+28*H/48
  ctx.quadraticCurveTo(cpx, cpy, x+37*W/48, y+28*H/48)
  cpx = x+38*W/48
  cpy = y+28*H/48
  ctx.quadraticCurveTo(cpx, cpy, x+38*W/48, y+27*H/48)
  cpx = x+38*W/48
  cpy = y+24*H/48
  ctx.quadraticCurveTo(cpx, cpy, x+38*W/48, y+24*H/48)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+38*W/48, y+27*H/48)
  cpx = x+38*W/48
  cpy = y+28*H/48
  ctx.quadraticCurveTo(cpx, cpy, x+39*W/48, y+28*H/48)
  cpx = x+40*W/48
  cpy = y+28*H/48
  ctx.quadraticCurveTo(cpx, cpy, x+40*W/48, y+27*H/48)
  cpx = x+40*W/48
  cpy = y+24*H/48
  ctx.quadraticCurveTo(cpx, cpy, x+40*W/48, y+24*H/48)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+40*W/48, y+27*H/48)
  cpx = x+40*W/48
  cpy = y+28*H/48
  ctx.quadraticCurveTo(cpx, cpy, x+41*W/48, y+28*H/48)
  cpx = x+42*W/48
  cpy = y+28*H/48
  ctx.quadraticCurveTo(cpx, cpy, x+42*W/48, y+27*H/48)
  cpx = x+42*W/48
  cpy = y+24*H/48
  ctx.quadraticCurveTo(cpx, cpy, x+42*W/48, y+24*H/48)
  ctx.stroke()

  //4 right
  ctx.beginPath()
  ctx.moveTo(x+42*W/48, y+26*H/48)
  cpx = x+42*W/48
  cpy = y+27*H/48
  ctx.quadraticCurveTo(cpx, cpy, x+43*W/48, y+27*H/48)
  cpx = x+44*W/48
  cpy = y+27*H/48
  ctx.quadraticCurveTo(cpx, cpy, x+44*W/48, y+26*H/48)
  cpx = x+44*W/48
  cpy = y+24*H/48
  ctx.quadraticCurveTo(cpx, cpy, x+44*W/48, y+24*H/48)
  ctx.stroke()
}

function dungeonAt (x,y,W,color,INVERTED) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let G = 12, D = W/G
  let N = G*G
  let i = 0, dx = 0, dy = 0
  let s = document.getElementById("featuresize").value
  funcs = ["heartAt", "flaskAt", "spiderAt", "ghostAt", "filledAt", "filledAt", "filledAt","filledAt", "coinAt"]
  document.getElementById("featuresize").value /= 8
  ctx.lineWidth /=5
  let things = ["keyAt", "treasureAt", "monsterAt", "stairsAt"]
  i = 0
  for (; i < N-5; i++) {
    
      if (Math.random() > 0.76) 
        things.push(randomPick(funcs))
      else
        things.push("dotAt")
    
  }
  things = shuffle(things)
  
  things.splice(Math.floor(N/2+G/2)-1, 0,"userAt")
    
  i = 0, dy = 0, dx = 0
  for (; i < N; i++) {
    if (i > 0 && i % G === 0) {
      dx = 0
      dy += D
    }
    let f = things[i]//randomPick(funcs)
    if (f === "userAt") {
      if (!INVERTED)
        filledAt(x+dx,y+dy,D,"white")
      else
        filledAt(x+dx,y+dy,D,"red")
    }
    window [f] (x+dx,y+dy,D,color)
    dx += D
  }
  document.getElementById("featuresize").value *= 8
}

function maskAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
   //1
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+16*H/24)
  cpx = x+8*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+19*H/24)
  cpx = x+16*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+16*H/24)
  cpx = x+23*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+12*H/24)
  cpx = x+23*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+8*H/24)
  cpx = x+16*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+5*H/24)
  cpx = x+8*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+8*H/24)
  cpx = x+1*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+12*H/24)
  cpx = x+1*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+16*H/24)
  ctx.stroke()
  ctx.globalAlpha /= 3

  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+16*H/24)
  cpx = x+8*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+19*H/24)
  cpx = x+16*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+16*H/24)
  
  ctx.lineTo(x+20*W/24, y+8*H/24)
  cpx = x+16*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+5*H/24)
  cpx = x+8*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+8*H/24)
  ctx.lineTo(x+4*W/24, y+16*H/24)
  ctx.fill()
  ctx.globalAlpha *= 3
  //2
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+10*H/24)
  cpx = x+12*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+10*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+12*H/24)
  cpx = x+12*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+12*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+14*H/24)
  cpx = x+12*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+14*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+8*H/24)
  ctx.lineTo(x+4*W/24, y+16*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+8*H/24)
  ctx.lineTo(x+20*W/24, y+16*H/24)
  ctx.stroke()
}

function overhead_projectorAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+22*H/24)
  ctx.lineTo(x+14*W/24, y+22*H/24)
  ctx.lineTo(x+22*W/24, y+18*H/24)
  ctx.lineTo(x+22*W/24, y+14*H/24)
  ctx.lineTo(x+14*W/24, y+18*H/24)
  ctx.lineTo(x+2*W/24, y+18*H/24)
  ctx.lineTo(x+2*W/24, y+22*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+18*H/24)
  ctx.lineTo(x+10*W/24, y+14*H/24)
  ctx.lineTo(x+22*W/24, y+14*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+18*H/24)
  ctx.lineTo(x+14*W/24, y+22*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+21*W/24, y+14*H/24)
  ctx.lineTo(x+21*W/24, y+7*H/24)
  ctx.lineTo(x+21*W/24, y+6*H/24)
  ctx.lineTo(x+17*W/24, y+6*H/24)
  ctx.lineTo(x+17*W/24, y+7*H/24)
  ctx.lineTo(x+20*W/24, y+7*H/24)
  ctx.lineTo(x+20*W/24, y+14*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+8*H/24)
  ctx.lineTo(x+11*W/24, y+8*H/24)
  ctx.lineTo(x+11*W/24, y+2*H/24)
  ctx.lineTo(x+17*W/24, y+2*H/24)
  ctx.lineTo(x+17*W/24, y+8*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+2*H/24)
  ctx.lineTo(x+18*W/24, y+2*H/24)
  ctx.lineTo(x+21*W/24, y+6*H/24)
  ctx.lineTo(x+17*W/24, y+6*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+8*H/24)
  cpx = x+17*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+5*H/24)
  cpx = x+17*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+2*H/24)
  cpx = x+11*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+5*H/24)
  cpx = x+11*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+8*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+22*H/24)
  ctx.lineTo(x+2*W/24, y+23*H/24)
  ctx.lineTo(x+3*W/24, y+23*H/24)
  ctx.lineTo(x+3*W/24, y+22*H/24)
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+22*H/24)
  ctx.lineTo(x+13*W/24, y+23*H/24)
  ctx.lineTo(x+14*W/24, y+23*H/24)
  ctx.lineTo(x+14*W/24, y+22*H/24)
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+21*W/24, y+18*H/24)
  ctx.lineTo(x+21*W/24, y+19*H/24)
  ctx.lineTo(x+22*W/24, y+19*H/24)
  ctx.lineTo(x+22*W/24, y+18*H/24)
  ctx.stroke()

  //11
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+8*H/24)
  ctx.lineTo(x+20*W/24, y+7*H/24)
  ctx.stroke()
}

function treasureAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  //1
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+10*H/24)
  ctx.lineTo(x+2*W/24, y+6*H/24)
  ctx.lineTo(x+2*W/24, y+19*H/24)
  ctx.lineTo(x+6*W/24, y+23*H/24)
  ctx.lineTo(x+6*W/24, y+10*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+23*H/24)
  ctx.lineTo(x+23*W/24, y+23*H/24)
  ctx.lineTo(x+23*W/24, y+10*H/24)
  ctx.lineTo(x+6*W/24, y+10*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+10*H/24)
  cpx = x+6*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+1*H/24)
  cpx = x+2*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+6*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+23*W/24, y+10*H/24)
  cpx = x+23*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+1*H/24)
  cpx = x+4*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+1*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+1*H/24)
  cpx = x+9*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+10*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+1*H/24)
  cpx = x+10*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+10*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+1*H/24)
  cpx = x+20*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+10*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+1*H/24)
  cpx = x+19*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+10*H/24)
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+16*H/24)
  cpx = x+13*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+14*H/24)
  cpx = x+13*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+12*H/24)
  cpx = x+17*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+14*H/24)
  cpx = x+17*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+16*H/24)
  ctx.fill()

  //10
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+15*H/24)
  ctx.lineTo(x+14*W/24, y+19*H/24)
  ctx.lineTo(x+16*W/24, y+19*H/24)
  ctx.lineTo(x+16*W/24, y+15*H/24)
  ctx.lineTo(x+14*W/24, y+15*H/24)
  ctx.fill()
}

function ghostAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+20*H/24)
  cpx = x+2*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+22*H/24)
  cpx = x+6*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+20*H/24)
  cpx = x+6*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+18*H/24)
  cpx = x+10*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+20*H/24)
  cpx = x+10*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+22*H/24)
  cpx = x+14*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+20*H/24)
  cpx = x+14*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+18*H/24)
  cpx = x+18*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+20*H/24)
  cpx = x+18*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+22*H/24)
  cpx = x+22*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+20*H/24)
  cpx = x+22*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+10*H/24)
  cpx = x+22*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+1*H/24)
  cpx = x+2*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+10*H/24)
  cpx = x+2*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+20*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+22*W/24, y+20*H/24)
  cpx = x+22*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+10*H/24)
  cpx = x+22*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+1*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+10*H/24)
  cpx = x+6*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+8*H/24)
  cpx = x+6*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+6*H/24)
  cpx = x+10*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+8*H/24)
  cpx = x+10*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+10*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+10*H/24)
  cpx = x+14*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+8*H/24)
  cpx = x+14*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+6*H/24)
  cpx = x+18*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+8*H/24)
  cpx = x+18*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+10*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+17*H/24)
  cpx = x+10*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+15*H/24)
  cpx = x+10*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+11*H/24)
  cpx = x+14*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+15*H/24)
  cpx = x+14*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+17*H/24)
  ctx.stroke()
}

function filledAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.fillStyle = color
  ctx.globalAlpha /=3
  //1
  ctx.beginPath()
  ctx.moveTo(x,y)
  ctx.lineTo(x+W,y)
  ctx.lineTo(x+W,y+H)
  ctx.lineTo(x,y+H)
  ctx.closePath()
  ctx.fill()
  ctx.globalAlpha *=3
}

function dotAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.fillStyle = color
  ctx.globalAlpha /=3
  //1
  ctx.beginPath()
  ctx.arc(x+W/2-1,y+H/2-1, W/10, 0, Math.PI*2)
  ctx.fill()
  ctx.globalAlpha *=3
}

function coinAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+20*H/24)
  cpx = x+22*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+10*H/24)
  cpx = x+22*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+0*H/24)
  cpx = x+2*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+10*H/24)
  cpx = x+2*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+20*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+22*W/24, y+12*H/24)
  cpx = x+22*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+22*H/24)
  cpx = x+2*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+12*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+6*H/24)
  cpx = x+16*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+4*H/24)
  cpx = x+8*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+10*H/24)
  cpx = x+8*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+16*H/24)
  cpx = x+16*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+14*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+2*H/24)
  ctx.lineTo(x+12*W/24, y+18*H/24)
  ctx.stroke()
}

function bombAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+12*H/24)
  cpx = x+2*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+10*H/24)
  cpx = x+2*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+8*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+12*H/24)
  cpx = x+4*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+14*H/24)
  cpx = x+8*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+12*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+8*H/24)
  cpx = x+2*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+6*H/24)
  cpx = x+2*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+4*H/24)
  cpx = x+4*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+2*H/24)
  cpx = x+8*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+4*H/24)
  cpx = x+8*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+2*H/24)
  cpx = x+12*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+4*H/24)
  cpx = x+12*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+2*H/24)
  cpx = x+16*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+4*H/24)
  cpx = x+16*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+2*H/24)
  cpx = x+20*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+4*H/24)
  cpx = x+22*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+6*H/24)
  cpx = x+22*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+8*H/24)
  cpx = x+22*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+10*H/24)
  cpx = x+22*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+12*H/24)
  cpx = x+20*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+14*H/24)
  cpx = x+16*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+12*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+6*H/24)
  cpx = x+4*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+4*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+4*H/24)
  cpx = x+20*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+6*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+12*H/24)
  cpx = x+8*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+13*H/24)
  cpx = x+10*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+12*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+12*H/24)
  cpx = x+14*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+13*H/24)
  cpx = x+16*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+12*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+12*H/24)
  cpx = x+10*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+20*H/24)
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+12*H/24)
  cpx = x+14*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+20*H/24)
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+10*H/24)
  cpx = x+4*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+12*H/24)
  ctx.stroke()

  //11
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+12*H/24)
  cpx = x+20*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+10*H/24)
  ctx.stroke()

  //12
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+9*H/24)
  cpx = x+4*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+8*H/24)
  cpx = x+4*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+7*H/24)
  ctx.stroke()

  //13
  ctx.beginPath()
  ctx.moveTo(x+19*W/24, y+9*H/24)
  cpx = x+20*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+8*H/24)
  cpx = x+20*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+7*H/24)
  ctx.stroke()

  //14
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+6*H/24)
  cpx = x+10*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+4*H/24)
  cpx = x+14*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+6*H/24)
  ctx.stroke()

  //15
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+5*H/24)
  cpx = x+7*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+4*H/24)
  cpx = x+9*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+5*H/24)
  ctx.stroke()

  //16
  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+5*H/24)
  cpx = x+15*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+4*H/24)
  cpx = x+17*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+5*H/24)
  ctx.stroke()

  //17
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+12*H/24)
  cpx = x+11*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+13*H/24)
  cpx = x+13*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+12*H/24)
  ctx.stroke()

  //18
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+21*H/24)
  cpx = x+9*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+19*H/24)
  cpx = x+5*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+21*H/24)
  cpx = x+5*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+20*H/24)
  cpx = x+3*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+21*H/24)
  ctx.stroke()

  //19
  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+21*H/24)
  cpx = x+15*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+19*H/24)
  cpx = x+19*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+21*H/24)
  cpx = x+19*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+20*H/24)
  cpx = x+21*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+21*H/24)
  ctx.stroke()

  //20
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+2*H/24)
  cpx = x+11*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+1*H/24)
  cpx = x+13*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+2*H/24)
  ctx.stroke()

  //21
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+21*H/24)
  cpx = x+11*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+14*H/24)
  ctx.stroke()

  //22
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+21*H/24)
  cpx = x+13*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+14*H/24)
  ctx.stroke()

  //23
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+15*H/24)
  cpx = x+7*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+16*H/24)
  cpx = x+7*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+17*H/24)
  cpx = x+17*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+16*H/24)
  cpx = x+17*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+15*H/24)
  ctx.stroke()

  //24
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+9*H/24)
  cpx = x+7*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+11*H/24)
  ctx.stroke()

  //25
  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+11*H/24)
  cpx = x+17*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+9*H/24)
  ctx.stroke()

  //26
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+8*H/24)
  cpx = x+7*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+6*H/24)
  ctx.stroke()

  //27
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+8*H/24)
  cpx = x+17*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+6*H/24)
  ctx.stroke()

  //28
  ctx.beginPath()
  ctx.moveTo(x+22*W/24, y+7*H/24)
  cpx = x+23*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+8*H/24)
  cpx = x+23*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+9*H/24)
  ctx.stroke()

  //29
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+9*H/24)
  cpx = x+1*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+8*H/24)
  cpx = x+1*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+7*H/24)
  ctx.stroke()

  //30
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+21*H/24)
  cpx = x+2*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+20*H/24)
  ctx.stroke()

  //31
  ctx.beginPath()
  ctx.moveTo(x+21*W/24, y+21*H/24)
  cpx = x+22*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+20*H/24)
  ctx.stroke()
  //32
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+7*H/24)
  cpx = x+9*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+8*H/24)
  cpx = x+9*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+9*H/24)
  ctx.stroke()

  //33
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+7*H/24)
  cpx = x+15*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+8*H/24)
  cpx = x+15*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+9*H/24)
  ctx.stroke()
  //34
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+13*H/24)
  ctx.lineTo(x+1*W/24, y+15*H/24)
  ctx.stroke()

  //35
  ctx.beginPath()
  ctx.moveTo(x+21*W/24, y+13*H/24)
  ctx.lineTo(x+23*W/24, y+15*H/24)
  ctx.stroke()

  //36
  ctx.beginPath()
  ctx.moveTo(x+21*W/24, y+3*H/24)
  ctx.lineTo(x+23*W/24, y+1*H/24)
  ctx.stroke()

  //37
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+3*H/24)
  ctx.lineTo(x+1*W/24, y+1*H/24)
  ctx.stroke()
  //38
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+20*H/24)
  ctx.lineTo(x+12*W/24, y+15*H/24)
  ctx.stroke()
}

function kbAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+23*H/24)
  cpx = x+6*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+18*H/24)
  cpx = x+6*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+12*H/24)
  cpx = x+10*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+6*H/24)
  cpx = x+10*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+1*H/24)
  cpx = x+20*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+8*H/24)
  cpx = x+20*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+14*H/24)
  cpx = x+13*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+18*H/24)
  cpx = x+13*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+23*H/24)
  cpx = x+17*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+18*H/24)
  cpx = x+17*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+12*H/24)
  cpx = x+12*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+6*H/24)
  cpx = x+12*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+3*H/24)
  cpx = x+18*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+8*H/24)
  cpx = x+18*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+12*H/24)
  cpx = x+10*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+17*H/24)
  cpx = x+10*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+23*H/24)
  ctx.stroke()
  // hole
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+12.4*H/24)
  cpx = x+12.7*W/24
  cpy = y+13.7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14.2*W/24, y+14.2*H/24)
  cpx = x+15*W/24
  cpy = y+12.3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13.05*W/24, y+12.3*H/24)
  ctx.stroke()
  //2
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+23*H/24)
  cpx = x+12*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+23*H/24)
  ctx.stroke()
}

function watering_canAt (x,y,W,color,INVERTED) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  if (INVERTED) {
    kbAt(x,y,W,color)
    return
  }
  //1
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+14*H/24)
  cpx = x+2*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+22*H/24)
  cpx = x+10*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+22*H/24)
  ctx.lineTo(x+23*W/24, y+6*H/24)
  ctx.lineTo(x+23*W/24, y+5*H/24)
  ctx.lineTo(x+10*W/24, y+20*H/24)
  ctx.lineTo(x+10*W/24, y+14*H/24)
  ctx.moveTo(x+9*W/24, y+14*H/24)
  ctx.lineTo(x+2*W/24, y+14*H/24)
  cpx = x+2*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+10*H/24)
  cpx = x+10*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+14*H/24)
  ctx.stroke()
  //4
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+14*H/24)
  cpx = x+3*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+10*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+10*H/24)
  cpx = x+9*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+14*H/24)
  ctx.stroke()
}

function securityAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+21*H/24)
  cpx = x+3*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+22*H/24)
  cpx = x+12*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+22*H/24)
  cpx = x+13*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+21*H/24)
  ctx.stroke()
  //2
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+21*H/24)
  ctx.lineTo(x+1*W/24, y+12*H/24)
  ctx.lineTo(x+11*W/24, y+12*H/24)
  ctx.lineTo(x+13*W/24, y+21*H/24)
  ctx.stroke()
  //3
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+12*H/24)
  ctx.lineTo(x+21*W/24, y+2*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+21*H/24)
  ctx.lineTo(x+3*W/24, y+12*H/24)
  ctx.stroke()
  //5
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+22*H/24)
  ctx.lineTo(x+21*W/24, y+13*H/24)
  ctx.stroke()
  //6
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+12*H/24)
  ctx.lineTo(x+11*W/24, y+2*H/24)
  ctx.stroke()
  //7
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+6*H/24)
  ctx.lineTo(x+7*W/24, y+1*H/24)
 // ctx.stroke()
  //20
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+7*H/24)
  ctx.lineTo(x+6*W/24, y+1*H/24)
  ctx.stroke()
  //9
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+17*H/24)
  cpx = x+4*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+21*H/24)
  cpx = x+12*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+17*H/24)
  cpx = x+12*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+13*H/24)
  cpx = x+4*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+17*H/24)
  ctx.stroke()
  //15
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+2*H/24)
  ctx.lineTo(x+21*W/24, y+2*H/24)
  ctx.lineTo(x+21*W/24, y+13*H/24)
  ctx.stroke()
  //16
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+1*H/24)
  ctx.lineTo(x+17*W/24, y+12*H/24)
  ctx.stroke()

  //17
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+13*H/24)
  cpx = x+18*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+12*H/24)
  cpx = x+18*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+11*H/24)
  cpx = x+16*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+12*H/24)
  cpx = x+16*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+13*H/24)
  ctx.stroke()

  //11
  ctx.fillStyle = "#ff0000"
  ctx.beginPath()
  ctx.arc(x+11.5*W/24, y+21*H/24, W/50, 0, Math.PI*2)
  ctx.fill()
}

function dropsandfans () {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let W = canvas.width
  let color = getselectedcolor()
  let n = 8
  let i = 0, x = 0, y = 0, w = W/n
  for (; i < n*n; i++) {
    if (i > 0 && i%n === 0) {
      x = 0
      y += w
    }
    color = getselectedcolor()
    /*
    if (Math.random() > 0.66) {
      if (Math.random() > 0.0)
      fanAt(x,y,w,color)
    } else {
      if (Math.random() > 0.5) {
        if (Math.random() > 0.0)
          teardropAt(x,y,w,color)
      } else {
        if (Math.random() > 0.0)
          moundAt(x,y,w,color)
      }
    }*/
    thingsAt(x,y,w,color)
    x += w
  }
}
function thingsAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, angle = Math.random()*360//randomPick([0,90,180,270])
  let t = 1+Math.floor(Math.random() * 6)

  //1
  ctx.beginPath()
  p = rotatePoint(x+18*W/24, y+0*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+0*W/24, y+18*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+0*W/24, y+24*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+6*W/24, y+24*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+24*W/24, y+6*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+24*W/24, y+0*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+18*W/24, y+0*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  if (t === 1)
  ctx.fill()

  //2
  ctx.beginPath()
  p = rotatePoint(x+8*W/24, y+0*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+15*W/24, y+2*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+15*W/24, y+24*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+8*W/24, y+22*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+8*W/24, y+0*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  if (t === 2)
  ctx.fill()

  //3
  ctx.beginPath()
  p = rotatePoint(x+0*W/24, y+7*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+24*W/24, y+7*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+24*W/24, y+14*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+0*W/24, y+14*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  if (t === 3)
  ctx.fill()

  //4
  ctx.beginPath()
  p = rotatePoint(x+15*W/24, y+7*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+15*W/24
  cpy = y+2*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+8*W/24, y+0*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+2*W/24
  cpy = y+0*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+2*W/24, y+12*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+2*W/24
  cpy = y+24*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+8*W/24, y+24*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+15*W/24
  cpy = y+22*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+15*W/24, y+17*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  p = rotatePoint(x+17*W/24, y+18*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+17*W/24, y+6*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+15*W/24, y+7*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  if (t === 4)
  ctx.fill()

  //5
  ctx.beginPath()
  p = rotatePoint(x+12*W/24, y+1*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+4*W/24, y+12*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+12*W/24, y+23*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+20*W/24, y+12*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+12*W/24, y+1*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  if (t === 5)
  ctx.fill()

  //6
  ctx.beginPath()
  p = rotatePoint(x+10*W/24, y+10*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+6*W/24, y+1*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+18*W/24, y+1*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+14*W/24, y+10*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  cpx = x+17*W/24
  cpy = y+12*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+17*W/24, y+16*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+14*W/24
  cpy = y+22*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24, y+23*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+9*W/24
  cpy = y+22*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+7*W/24, y+16*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+6*W/24
  cpy = y+12*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+10*W/24, y+10*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  if (t === 6)
  ctx.fill()
}

function moundAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, angle = randomPick([0,90,180,270])

  //1
  ctx.beginPath()
  p = rotatePoint(x+0*W/24, y+24*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+0*W/24
  cpy = y+0*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24, y+0*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+24*W/24
  cpy = y+0*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+24*W/24, y+24*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()
}

function fanAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, angle = randomPick([0,90,180,270])

  //1
  ctx.beginPath()
  p = rotatePoint(x+0*W/24, y+24*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+24*W/24
  cpy = y+24*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+24*W/24, y+0*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+0*W/24
  cpy = y+0*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+0*W/24, y+0*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+0*W/24
  cpy = y+24*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+0*W/24, y+24*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()
}

function teardropAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, angle = randomPick([0,90,180,270])

  //1
  ctx.beginPath()
  p = rotatePoint(x+0*W/24, y+24*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+0*W/24
  cpy = y+0*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24, y+0*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+24*W/24
  cpy = y+0*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+24*W/24, y+12*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+24*W/24
  cpy = y+24*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+0*W/24, y+24*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()
}

function usflagAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+5*H/24)
  ctx.lineTo(x+24*W/24, y+5*H/24)
  ctx.lineTo(x+24*W/24, y+18*H/24)
  ctx.lineTo(x+0*W/24, y+18*H/24)
  ctx.lineTo(x+0*W/24, y+5*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+12*H/24)
  ctx.lineTo(x+10*W/24, y+12*H/24)
  ctx.lineTo(x+10*W/24, y+5*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+6*H/24)
  ctx.lineTo(x+24*W/24, y+6*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+7*H/24)
  ctx.lineTo(x+24*W/24, y+7*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+8*H/24)
  ctx.lineTo(x+24*W/24, y+8*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+9*H/24)
  ctx.lineTo(x+24*W/24, y+9*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+10*H/24)
  ctx.lineTo(x+24*W/24, y+10*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+11*H/24)
  ctx.lineTo(x+24*W/24, y+11*H/24)
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+12*H/24)
  ctx.lineTo(x+24*W/24, y+12*H/24)
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+13*H/24)
  ctx.lineTo(x+24*W/24, y+13*H/24)
  ctx.stroke()

  //11
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+14*H/24)
  ctx.lineTo(x+24*W/24, y+14*H/24)
  ctx.stroke()

  //12
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+15*H/24)
  ctx.lineTo(x+24*W/24, y+15*H/24)
  ctx.stroke()

  //13
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+16*H/24)
  ctx.lineTo(x+24*W/24, y+16*H/24)
  ctx.stroke()

  //14
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+17*H/24)
  ctx.lineTo(x+24*W/24, y+17*H/24)
  ctx.stroke()
}

function routerAt (x,y,W,color,INVERTED) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let i = 0, dx, dy
  let endx = 0, endy = 0, cx = W/2, cy = 3*H/4
  ctx.lineWidth /= 2
  for (; i < 17; i++) {
    dx = Math.random() * W, dy = Math.random() * W
    ctx.beginPath()
    cx = W/4 +Math.random() * W/2
    ctx.moveTo(x+cx, y+cy)
    cpx = x+Math.random() * W
    cpy = y+Math.random() * W
    dx = Math.random() * W, dy = Math.random() * W
    if (Math.random() > 0.5) {
      endx = (Math.random() > 0.5)? 0: W;
      endy = Math.random() * H
    } else {
      endy = (Math.random() > 0.5)? 0: W;
      endx = Math.random() * H
    }
    ctx.quadraticCurveTo(cpx, cpy, x+endx, y+endy)
    ctx.stroke()
  }
   ctx.lineWidth *= 2
  //1
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+20*H/24)
  cpx = x+6*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+18*H/24)
  cpx = x+6*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+15*H/24)
  cpx = x+16*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+15*H/24)
  cpx = x+18*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+18*H/24)
  cpx = x+18*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+20*H/24)
  cpx = x+6*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+20*H/24)
  ctx.fill()
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+18*H/24)
  ctx.lineTo(x+18*W/24, y+18*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+17*H/24)
  ctx.lineTo(x+19*W/24, y+17*H/24)
  ctx.lineTo(x+22*W/24, y+10*H/24)
  ctx.lineTo(x+21*W/24, y+10*H/24)
  ctx.lineTo(x+18*W/24, y+17*H/24)
  ctx.fill()
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+17*H/24)
  ctx.lineTo(x+5*W/24, y+17*H/24)
  ctx.lineTo(x+2*W/24, y+10*H/24)
  ctx.lineTo(x+3*W/24, y+10*H/24)
  ctx.lineTo(x+6*W/24, y+17*H/24)
  ctx.fill()
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+15*H/24)
  ctx.lineTo(x+8*W/24, y+15*H/24)
  ctx.lineTo(x+7*W/24, y+8*H/24)
  ctx.lineTo(x+6*W/24, y+8*H/24)
  ctx.lineTo(x+7*W/24, y+15*H/24)
  ctx.fill()
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+15*H/24)
  ctx.lineTo(x+17*W/24, y+15*H/24)
  ctx.lineTo(x+18*W/24, y+8*H/24)
  ctx.lineTo(x+17*W/24, y+8*H/24)
  ctx.lineTo(x+16*W/24, y+15*H/24)
  ctx.fill()
  ctx.stroke()

  //7
  ctx.lineWidth /= 2
  ctx.fillStyle = "#ff0000"
  let r = W/92
  ctx.beginPath()
  ctx.arc(x+11*W/24, y+19*H/24,r,0,Math.PI*2)
  ctx.fill()
  
  ctx.fillStyle = "#45cc33"
  ctx.beginPath()
  ctx.arc(x+11*W/24, y+19*H/24,r,0,Math.PI*2)
  if (!INVERTED)
    ctx.fill()
  ctx.stroke()
  //8
  ctx.beginPath()
  ctx.arc(x+10*W/24, y+19*H/24,r,0,Math.PI*2)
  ctx.fill()
  ctx.stroke()
  //9
  ctx.beginPath()
  ctx.arc(x+9*W/24, y+19*H/24,r,0,Math.PI*2)
  ctx.fill()
  ctx.stroke()
  //10
  ctx.beginPath()
  ctx.arc(x+8*W/24, y+19*H/24,r,0,Math.PI*2)
  ctx.fill()
  ctx.stroke()
  ctx.lineWidth *= 2
}

function beansAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  let s = +document.getElementById("featuresize").value
  document.getElementById("featuresize").value = s/3
  ctx.strokeStyle = color
  //ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let i = 0, W1=W/6
  for (; i < 34; i++) {
    beanAt (x+(Math.random()*(W -W1)),y+(Math.random()*(H -W1)) ,W1 ,color, i)
  }
  document.getElementById("featuresize").value = s
}

function beanAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  //ctx.fillStyle = color
  ctx.lineCap = "round"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, angle = pet(360)

  //1
  ctx.beginPath()
  p = rotatePoint(x+12*W/24, y+22*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+20*W/24
  cpy = y+22*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+19*W/24, y+15*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+17*W/24
  cpy = y+12*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+18*W/24, y+7*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+20*W/24
  cpy = y+2*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24, y+2*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+4*W/24
  cpy = y+2*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+4*W/24, y+11*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+5*W/24
  cpy = y+22*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24, y+22*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()
  ctx.stroke()

  //2
  ctx.beginPath()
  p = rotatePoint(x+18*W/24, y+13*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+19*W/24
  cpy = y+10*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+18*W/24, y+7*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()

  ctx.lineWidth += 4
  ctx.globalAlpha /= 2
  let d = W/24
  //1 spots
  ctx.beginPath()
  p = rotatePoint(x+16*W/24+pet(d), y+7*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+15*W/24+pet(d)
  cpy = y+5*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+13*W/24+pet(d), y+5*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()

  //2
  ctx.beginPath()
  p = rotatePoint(x+15*W/24+pet(d), y+8*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+13*W/24+pet(d)
  cpy = y+8*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24+pet(d), y+7*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()

  //3
  ctx.beginPath()
  p = rotatePoint(x+15*W/24+pet(d), y+9*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+13*W/24+pet(d)
  cpy = y+9*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+11*W/24+pet(d), y+10*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()

  //4
  ctx.beginPath()
  p = rotatePoint(x+18*W/24+pet(d), y+16*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+17*W/24+pet(d)
  cpy = y+18*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+16*W/24+pet(d), y+19*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()

  //5
  ctx.beginPath()
  p = rotatePoint(x+17*W/24+pet(d), y+15*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+15*W/24+pet(d)
  cpy = y+17*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+13*W/24+pet(d), y+17*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()

  //6
  ctx.beginPath()
  p = rotatePoint(x+16*W/24+pet(d), y+13*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+13*W/24+pet(d)
  cpy = y+14*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24+pet(d), y+15*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()

  //7
  ctx.beginPath()
  p = rotatePoint(x+15*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+13*W/24+pet(d)
  cpy = y+12*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24+pet(d), y+11*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()

  //8
  ctx.beginPath()
  p = rotatePoint(x+13*W/24+pet(d), y+13*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+12*W/24+pet(d)
  cpy = y+13*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+11*W/24+pet(d), y+12*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()

  //9
  ctx.beginPath()
  p = rotatePoint(x+16*W/24+pet(d), y+10*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+15*W/24+pet(d)
  cpy = y+10*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+14*W/24+pet(d), y+11*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()

  //10
  ctx.beginPath()
  p = rotatePoint(x+15*W/24+pet(d), y+14*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+15*W/24+pet(d)
  cpy = y+15*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+14*W/24+pet(d), y+15*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()

  //11
  ctx.beginPath()
  p = rotatePoint(x+15*W/24+pet(d), y+18*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+14*W/24+pet(d)
  cpy = y+19*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+13*W/24+pet(d), y+19*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()

  //12
  ctx.beginPath()
  p = rotatePoint(x+16*W/24+pet(d), y+5*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+15*W/24+pet(d)
  cpy = y+4*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+13*W/24+pet(d), y+3*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()

  //13
  ctx.beginPath()
  p = rotatePoint(x+14*W/24+pet(d), y+7*H/24+pet(d) ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+14*W/24+pet(d)
  cpy = y+6*H/24+pet(d)
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+13*W/24+pet(d), y+6*H/24+pet(d),cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()
  ctx.globalAlpha *= 2
}

function redactedAt (x,y,W,color,INVERTED) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let d = Math.floor(Math.random() * atList.length)//(Date.now()/2000)
  let f = atList[d % atList.length]
  ctx.save()
  ctx.beginPath()
  ctx.moveTo(x, y)
  ctx.lineTo(x+W, y)
  ctx.lineTo(x+W, y+H)
  ctx.lineTo(x, y+H)
  ctx.closePath()

  ctx.clip()
  if (!INVERTED) {
    window [f] (x,y,W,color)
    pixelate(x,y,x+W,y+W)
  } else {
    window [f] (x,y,W,color)
    pixelate(x,y,x+W,y+W)
  }
  ctx.restore()
}

function viewfinderAt (x,y,W,color,INVERTED) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let a = document.getElementById("opacity").value
  document.getElementById("opacity").value = 20
  let alpha = ctx.globalAlpha
  ctx.globalAlpha = 0.2
  let d = Math.floor(Date.now()/2000)
  let f = atList[d % atList.length]
  if (f === "viewfinderAt") {
    d = (d+1)%atList.length
    f = atList[d]
  }
  if (!INVERTED) {
    window [f] (x+2*W/24+pet(W/24),y+2*W/24+pet(W/12),W-4*W/24,color)
    window [f] (x+2*W/24+pet(W/12),y+2*W/24+pet(W/24),W-4*W/24,color)
    window [f] (x+2*W/24+pet(W/24),y+2*W/24+pet(W/12),W-4*W/24,color)
    window [f] (x+2*W/24+pet(W/12),y+2*W/24+pet(W/24),W-4*W/24,color)
    window [f] (x+2*W/24+pet(W/24),y+2*W/24+pet(W/24),W-4*W/24,color)
  } else {
    ctx.globalAlpha = 0.75
    window [f] (x+2*W/24,y+2*W/24,W-4*W/24,color)
  }
  ctx.globalAlpha = alpha
  document.getElementById("opacity").value = a
  //1
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+6*H/24)
  ctx.lineTo(x+2*W/24, y+2*H/24)
  ctx.lineTo(x+8*W/24, y+2*H/24)
  ctx.stroke()
  //2
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+2*H/24)
  ctx.lineTo(x+22*W/24, y+2*H/24)
  ctx.lineTo(x+22*W/24, y+6*H/24)
  ctx.stroke()
  //3
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+22*H/24)
  ctx.lineTo(x+22*W/24, y+22*H/24)
  ctx.lineTo(x+22*W/24, y+18*H/24)
  ctx.stroke()
  //4
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+22*H/24)
  ctx.lineTo(x+2*W/24, y+22*H/24)
  ctx.lineTo(x+2*W/24, y+18*H/24)
  ctx.stroke()
  //5
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+12*H/24)
  ctx.lineTo(x+16*W/24, y+12*H/24)
  ctx.stroke()
  //6
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+14*H/24)
  cpx = x+14*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+12*H/24)
  cpx = x+14*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+10*H/24)
  cpx = x+10*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+12*H/24)
  cpx = x+10*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+14*H/24)
  ctx.stroke()
}

function jackknifeAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  //10
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+19*H/24)
  ctx.lineTo(x+7*W/24, y+17*H/24)
  ctx.lineTo(x+18*W/24, y+17*H/24)
  ctx.lineTo(x+17*W/24, y+19*H/24)
  ctx.lineTo(x+6*W/24, y+19*H/24)
  ctx.stroke()
  let word = capitalize(randomWord())
  ctx.font = "700 italic "+W/21+"pt Garamond"
  let width = ctx.measureText(word).width
  ctx.fillText(word, x + W/2-width/2, y + 18.4*H/24)
  //1
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+18*H/24)
  cpx = x+2*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+20*H/24)
  cpx = x+20*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+20*H/24)
  cpx = x+22*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+18*H/24)
  cpx = x+22*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+16*H/24)
  cpx = x+4*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+16*H/24)
  cpx = x+2*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+18*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+2.2*W/24, y+17*H/24)
  cpx = x+1*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+4*H/24)
  cpx = x+3*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+16.2*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+16*H/24)
  cpx = x+3*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+2*H/24)
  cpx = x+6*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+16*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+16*H/24)
  cpx = x+5*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+2*H/24)
  ctx.stroke()
  //11
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+16*H/24)
  cpx = x+12*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+9*H/24)
  cpx = x+10*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+9*H/24)
  cpx = x+15*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+16*H/24)
  ctx.stroke()
  //12
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+16*H/24)
  ctx.lineTo(x+9*W/24, y+9*H/24)
  ctx.stroke()
  //6
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+16*H/24)
  cpx = x+21*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+15*H/24)
  cpx = x+21*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+14*H/24)
  cpx = x+19*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+13*H/24)
  cpx = x+19*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+12*H/24)
  cpx = x+21*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+11*H/24)
  cpx = x+21*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+10*H/24)
  cpx = x+19*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+9*H/24)
  cpx = x+19*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+8*H/24)
  cpx = x+21*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+7*H/24)
  cpx = x+21*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+6*H/24)
  cpx = x+19*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+5*H/24)
  cpx = x+19*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+4*H/24)
  cpx = x+21*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+3*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+19*W/24, y+16*H/24)
  ctx.lineTo(x+19*W/24, y+20*H/24)
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+16*H/24)
  ctx.lineTo(x+5*W/24, y+20*H/24)
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+18*H/24)
  ctx.stroke()
}

function snakeAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+3*H/24)
  cpx = x+20*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+2*H/24)
  cpx = x+12*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+2*H/24)
  cpx = x+2*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+12*H/24)
  cpx = x+2*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+22*H/24)
  cpx = x+22*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+12*H/24)
  cpx = x+22*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+4*H/24)
  cpx = x+4*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+12*H/24)
  cpx = x+4*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+20*H/24)
  cpx = x+20*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+12*H/24)
  cpx = x+20*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+6*H/24)
  cpx = x+6*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+12*H/24)
  cpx = x+6*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+18*H/24)
  cpx = x+18*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+12*H/24)
  cpx = x+18*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+8*H/24)
  cpx = x+8*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+12*H/24)
  cpx = x+8*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+16*H/24)
  cpx = x+16*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+12*H/24)
  cpx = x+16*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+10*H/24)
  cpx = x+10*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+12*H/24)
  cpx = x+10*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+14*H/24)
  cpx = x+14*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+12*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+4*H/24)
  cpx = x+19*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+4*H/24)
  cpx = x+20*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+3*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.arc(x+18*W/24, y+2.5*H/24, W/98, 0, Math.PI*2)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.arc(x+18*W/24, y+3.5*H/24, W/98, 0, Math.PI*2)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+3*H/24)
  cpx = x+21*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+3*H/24)
  cpx = x+22*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+2.5*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+22*W/24, y+3.5*H/24)
  cpx = x+22*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+3*H/24)
  ctx.stroke()
}

function cometAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.arc(x+17*W/24, y+12*H/24, W/24, 0, Math.PI*2)
  ctx.fill()

  //2
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+20*H/24)
  cpx = x+20*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+12*H/24)
  cpx = x+20*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+0*W/24, y+4*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.arc(x+12*W/24, y+7*H/24, W/72, 0, Math.PI*2)
  ctx.fill()

  //4
  ctx.beginPath()
  ctx.arc(x+12*W/24, y+17*H/24, W/72, 0, Math.PI*2)
  ctx.fill()

  ctx.beginPath()
  ctx.arc(x+20*W/24, y+12*H/24, W/72, 0, Math.PI*2)
  ctx.fill()
  //5
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+8*H/24)
  cpx = x+14*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+4*H/24)
  cpx = x+11*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+8*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+16*H/24)
  cpx = x+14*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+20*H/24)
  cpx = x+11*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+16*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+19*W/24, y+12*H/24)
  cpx = x+19*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+24*W/24, y+12*H/24)
  cpx = x+19*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+12*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.arc(x+17*W/24, y+15*H/24, W/72, 0, Math.PI*2)
  ctx.fill()

  //7
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+14*H/24)
  cpx = x+19*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+19*H/24)
  cpx = x+15*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+14*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.arc(x+17*W/24, y+9*H/24, W/72, 0, Math.PI*2)
  ctx.fill()

  //9
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+10*H/24)
  cpx = x+19*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+5*H/24)
  cpx = x+15*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+10*H/24)
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.arc(x+5*W/24, y+5*H/24, W/72, 0, Math.PI*2)
  ctx.fill()


  //12
  ctx.beginPath()
  ctx.arc(x+5*W/24, y+19*H/24, W/72, 0, Math.PI*2)
  ctx.fill()

  //1
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+6*H/24)
  cpx = x+7*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+3*H/24)
  cpx = x+4*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+6*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+18*H/24)
  cpx = x+4*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+21*H/24)
  cpx = x+7*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+18*H/24)
  ctx.stroke()
}

function anchorAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+4*H/24)
  cpx = x+13*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+3*H/24)
  cpx = x+13*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+2*H/24)
  cpx = x+11*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+3*H/24)
  cpx = x+11*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+4*H/24)
  ctx.lineTo(x+12*W/24, y+23*H/24)
  ctx.stroke()
  //6
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+5*H/24)
  ctx.lineTo(x+14*W/24, y+5*H/24)
  ctx.stroke()
  //3
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+12*H/24)
  cpx = x+3*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+21*H/24)
  cpx = x+21*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+12*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+12*H/24)
  cpx = x+3*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+15*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+21*W/24, y+12*H/24)
  cpx = x+21*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+15*H/24)
  ctx.stroke()
}

function tapeAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.globalAlpha /= 3
  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+17*H/24)
  ctx.lineTo(x+18*W/24, y+13*H/24)
  ctx.lineTo(x+18*W/24, y+17*H/24)
  cpx = x+18*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+16*H/24)
  cpx = x+16*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+17*H/24)
  ctx.fill()

  //2
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+12*H/24)
  cpx = x+6*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+10*H/24)
  cpx = x+9*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+11*H/24)
  cpx = x+9*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+6*H/24)
  ctx.fill()
  ctx.globalAlpha *= 3
  //1
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+18*H/24)
  cpx = x+17*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+18*H/24)
  cpx = x+18*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+17*H/24)
  cpx = x+18*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+16*H/24)
  cpx = x+16*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+17*H/24)
  cpx = x+18*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+13*H/24)
  cpx = x+18*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+17*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+13*H/24)
  ragged(ctx, x+20*W/24, y+13*H/24, x+18*W/24, y+13*H/24, 90)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+13*H/24)
  ragged(ctx, x+23*W/24, y+6*H/24, x+20*W/24, y+13*H/24, 230)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+23*W/24, y+6*H/24)
  ctx.lineTo(x+8*W/24, y+6*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+12*H/24)
  ragged(ctx,x+1*W/24, y+18*H/24,x+3*W/24, y+12*H/24, 200)
  ctx.stroke()

  //1
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+6*H/24)
  ctx.lineTo(x+5*W/24, y+12*H/24)
  ragged(ctx, x+3*W/24, y+12*H/24, x+5*W/24, y+12*H/24, 100)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+12*H/24)
  cpx = x+6*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+10*H/24)
  cpx = x+9*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+11*H/24)
  cpx = x+9*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+6*H/24)
  ctx.stroke()
}

function selectionAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let i = 0, p = W/89
  ctx.setLineDash([2*W/24])
  ctx.lineWidth *= 2
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+5*H/24)
  ctx.lineTo(x+20*W/24, y+5*H/24)
  ctx.lineTo(x+20*W/24, y+17*H/24)
  ctx.lineTo(x+4*W/24, y+17*H/24)
  ctx.lineTo(x+4*W/24, y+5*H/24)
  ctx.stroke()
  ctx.setLineDash([])
  return
  //1
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+6*H/24)
  ctx.lineTo(x+4*W/24, y+8*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+10*H/24)
  ctx.lineTo(x+4*W/24, y+12*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+14*H/24)
  ctx.lineTo(x+4*W/24, y+16*H/24)
  ctx.stroke()

  //16
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+17*H/24)
  ctx.lineTo(x+8*W/24, y+17*H/24)
  ctx.stroke()

  //17
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+17*H/24)
  ctx.lineTo(x+12*W/24, y+17*H/24)
  ctx.stroke()

  //18
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+17*H/24)
  ctx.lineTo(x+16*W/24, y+17*H/24)
  ctx.stroke()

  //19
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+17*H/24)
  ctx.lineTo(x+20*W/24, y+17*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+15*H/24)
  ctx.lineTo(x+20*W/24, y+13*H/24)
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+11*H/24)
  ctx.lineTo(x+20*W/24, y+9*H/24)
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+7*H/24)
  ctx.lineTo(x+20*W/24, y+5*H/24)
  ctx.stroke()

  //11
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+4*H/24)
  ctx.lineTo(x+6*W/24, y+4*H/24)
  ctx.stroke()

  //12
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+4*H/24)
  ctx.lineTo(x+10*W/24, y+4*H/24)
  ctx.stroke()

  //13
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+4*H/24)
  ctx.lineTo(x+14*W/24, y+4*H/24)
  ctx.stroke()

  //14
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+4*H/24)
  ctx.lineTo(x+18*W/24, y+4*H/24)
  ctx.stroke()
  ctx.setLineDash([])
}

function la_coronaAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 0.5 //+ document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  ctx.font = "800 italic "+W/16+"pt Garamond"
  let width = ctx.measureText("47").width
  ctx.fillText("47", x + W/2-width/2, y + H/32)
  let i = 0, p = W/16
  for (; i < 21; i++) {
    if (i > 18)
      ctx.lineWidth = 4
    //1
    ctx.beginPath()
    ctx.moveTo(x+pet(p)+2*W/24, y+pet(p)+19*H/24)
    ctx.lineTo(x+pet(p)+22*W/24, y+pet(p)+19*H/24)
    ctx.stroke()

    //2
    ctx.beginPath()
    ctx.moveTo(x+pet(p)+22*W/24, y+pet(p)+19*H/24)
    ctx.lineTo(x+pet(p)+22*W/24, y+pet(p)+3*H/24)
    ctx.stroke()

    //3
    ctx.beginPath()
    ctx.moveTo(x+pet(p)+2*W/24, y+pet(p)+19*H/24)
    ctx.lineTo(x+pet(p)+2*W/24, y+pet(p)+3*H/24)
    ctx.stroke()

    //4
    ctx.beginPath()
    ctx.moveTo(x+pet(p)+2*W/24, y+pet(p)+3*H/24)
    ctx.lineTo(x+pet(p)+8*W/24, y+pet(p)+12*H/24)
    ctx.stroke()

    //5
    ctx.beginPath()
    ctx.moveTo(x+pet(p)+8*W/24, y+pet(p)+12*H/24)
    ctx.lineTo(x+pet(p)+12*W/24, y+pet(p)+2*H/24)
    ctx.stroke()

    //6
    ctx.beginPath()
    ctx.moveTo(x+pet(p)+12*W/24, y+pet(p)+2*H/24)
    ctx.lineTo(x+pet(p)+16*W/24, y+pet(p)+12*H/24)
    ctx.stroke()

    //7
    ctx.beginPath()
    ctx.moveTo(x+pet(p)+16*W/24, y+pet(p)+12*H/24)
    ctx.lineTo(x+pet(p)+22*W/24, y+pet(p)+3*H/24)
    ctx.stroke()
  }
}

function ames_windowAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+19*H/24)
  ctx.lineTo(x+22*W/24, y+16*H/24)
  ctx.lineTo(x+22*W/24, y+7*H/24)
  ctx.lineTo(x+2*W/24, y+4*H/24)
  ctx.lineTo(x+2*W/24, y+19*H/24)
  ctx.lineTo(x+1*W/24, y+18*H/24)
  ctx.lineTo(x+1*W/24, y+5*H/24)
  ctx.lineTo(x+2*W/24, y+4*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+11*H/24)
  ctx.lineTo(x+21*W/24, y+11*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+12*H/24)
  ctx.lineTo(x+21*W/24, y+12*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+5*H/24)
  ctx.lineTo(x+3*W/24, y+11*H/24)
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+12*H/24)
  ctx.lineTo(x+3*W/24, y+18*H/24)
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+11*H/24)
  ctx.lineTo(x+10*W/24, y+6*H/24)
  ctx.stroke()

  //11
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+12*H/24)
  ctx.lineTo(x+10*W/24, y+17*H/24)
  ctx.stroke()

  //12
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+7*H/24)
  ctx.lineTo(x+16*W/24, y+11*H/24)
  ctx.stroke()

  //13
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+12*H/24)
  ctx.lineTo(x+16*W/24, y+16*H/24)
  ctx.stroke()

  //14
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+5*H/24)
  ctx.lineTo(x+10*W/24, y+6*H/24)
  ctx.stroke()

  //15
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+18*H/24)
  ctx.lineTo(x+10*W/24, y+17*H/24)
  ctx.stroke()

  //16
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+16*H/24)
  ctx.lineTo(x+11*W/24, y+17*H/24)
  ctx.lineTo(x+11*W/24, y+12*H/24)
  ctx.stroke()

  //17
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+11*H/24)
  ctx.lineTo(x+11*W/24, y+6*H/24)
  ctx.lineTo(x+16*W/24, y+7*H/24)
  ctx.stroke()

  //18
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+16*H/24)
  ctx.lineTo(x+17*W/24, y+12*H/24)
  ctx.stroke()

  //19
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+12*H/24)
  ctx.lineTo(x+17*W/24, y+16*H/24)
  ctx.lineTo(x+21*W/24, y+15*H/24)
  ctx.lineTo(x+21*W/24, y+12*H/24)
  ctx.stroke()

  //20
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+11*H/24)
  ctx.lineTo(x+17*W/24, y+7*H/24)
  ctx.lineTo(x+21*W/24, y+8*H/24)
  ctx.lineTo(x+21*W/24, y+11*H/24)
  ctx.stroke()
}

function ice_creamAt (x,y,W,color, INVERTED) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  if (INVERTED) {
    //1
    ctx.beginPath()
    ctx.moveTo(x+7*W/24, y+3*H/24)
    cpx = x+7*W/24
    cpy = y+2*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+2*H/24)
    cpx = x+5*W/24
    cpy = y+2*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+3*H/24)
    cpx = x+5*W/24
    cpy = y+4*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+4*H/24)
    cpx = x+6*W/24
    cpy = y+11*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+11*H/24)
    cpx = x+18*W/24
    cpy = y+11*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+4*H/24)
    cpx = x+19*W/24
    cpy = y+4*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+3*H/24)
    cpx = x+19*W/24
    cpy = y+2*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+2*H/24)
    cpx = x+17*W/24
    cpy = y+2*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+3*H/24)
    cpx = x+16*W/24
    cpy = y+3*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+3*H/24)
    cpx = x+16*W/24
    cpy = y+2*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+2*H/24)
    cpx = x+14*W/24
    cpy = y+2*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+3*H/24)
    cpx = x+13*W/24
    cpy = y+3*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+3*H/24)
    cpx = x+13*W/24
    cpy = y+2*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+2*H/24)
    cpx = x+11*W/24
    cpy = y+2*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+3*H/24)
    cpx = x+10*W/24
    cpy = y+3*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+3*H/24)
    cpx = x+10*W/24
    cpy = y+2*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+2*H/24)
    cpx = x+8*W/24
    cpy = y+2*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+3*H/24)
    cpx = x+7*W/24
    cpy = y+3*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+3*H/24)
    ctx.stroke()
    ctx.globalAlpha /= 3
    ctx.fill()
    ctx.globalAlpha *= 3
    //2
    ctx.beginPath()
    ctx.moveTo(x+9*W/24, y+16*H/24)
    ctx.lineTo(x+18*W/24, y+10*H/24)
    ctx.lineTo(x+20*W/24, y+22*H/24)
    ctx.lineTo(x+9*W/24, y+16*H/24)
    ctx.stroke()
  } else {
    ctx.beginPath()
    ctx.moveTo(x+7*W/24, y+11*H/24)
    ctx.lineTo(x+12*W/24, y+22*H/24)
    ctx.lineTo(x+17*W/24, y+11*H/24)
    ctx.stroke()
    //2
    ctx.beginPath()
    ctx.moveTo(x+7*W/24, y+11*H/24)
    cpx = x+8*W/24
    cpy = y+11*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+11*H/24)
    cpx = x+8*W/24
    cpy = y+12*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+12*H/24)
    cpx = x+10*W/24
    cpy = y+12*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+11*H/24)
    cpx = x+11*W/24
    cpy = y+11*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+11*H/24)
    cpx = x+11*W/24
    cpy = y+12*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+12*H/24)
    cpx = x+13*W/24
    cpy = y+12*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+11*H/24)
    cpx = x+14*W/24
    cpy = y+11*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+11*H/24)
    cpx = x+14*W/24
    cpy = y+12*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+12*H/24)
    cpx = x+16*W/24
    cpy = y+12*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+11*H/24)
    cpx = x+17*W/24
    cpy = y+11*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+11*H/24)
    cpx = x+17*W/24
    cpy = y+12*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+12*H/24)
    cpx = x+19*W/24
    cpy = y+12*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+11*H/24)
    cpx = x+19*W/24
    cpy = y+10*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+10*H/24)
    cpx = x+18*W/24
    cpy = y+3*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+3*H/24)
    cpx = x+6*W/24
    cpy = y+3*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+10*H/24)
    cpx = x+5*W/24
    cpy = y+10*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+11*H/24)
    cpx = x+5*W/24
    cpy = y+12*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+12*H/24)
    cpx = x+7*W/24
    cpy = y+12*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+11*H/24)
    ctx.stroke()
    ctx.globalAlpha /= 3
    ctx.fill()
    ctx.globalAlpha *= 3
  }
}

function la_peraAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  ctx.fillStyle = color
  ctx.font = "800 italic "+W/16+"pt Garamond"
  let width = ctx.measureText("15").width
  ctx.fillText("15", x + W/2-width/2, y + H/24)
   //1
   ctx.beginPath()
   ctx.moveTo(x+12*W/24, y+22*H/24)
   cpx = x+12*W/24
   cpy = y+23*H/24
   ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+23*H/24)
   cpx = x+20*W/24
   cpy = y+23*H/24
   ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+17*H/24)
   cpx = x+19*W/24
   cpy = y+12*H/24 //
   ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+9*H/24)
   cpx = x+14*W/24
   cpy = y+8*H/24
   ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+5*H/24)
   cpx = x+13*W/24
   cpy = y+4*H/24
   ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+4*H/24)
   cpx = x+9*W/24
   cpy = y+4*H/24
   ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+7*H/24)
   cpx = x+8*W/24
   cpy = y+9*H/24
   ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+11*H/24)
   cpx = x+4*W/24
   cpy = y+14*H/24
   ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+17*H/24)
   cpx = x+4*W/24
   cpy = y+23*H/24
   ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+23*H/24)
   cpx = x+12*W/24
   cpy = y+23*H/24
   ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+22*H/24)
   ctx.stroke()
 
   //2
   ctx.beginPath()
   ctx.moveTo(x+12*W/24, y+4*H/24)
   cpx = x+12*W/24
   cpy = y+2*H/24
   ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+2*H/24)
   cpx = x+18*W/24
   cpy = y+2*H/24
   ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+3*H/24)
   cpx = x+19*W/24
   cpy = y+2*H/24
   ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+2.2*H/24)
   cpx = x+17*W/24
   cpy = y+1.4*H/24
   ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+1.5*H/24)
   cpx = x+12*W/24
   cpy = y+1.4*H/24
   ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+4*H/24)
   ctx.stroke()
 
   //3
   ctx.beginPath()
   ctx.moveTo(x+15*W/24, y+2*H/24)
   cpx = x+14*W/24
   cpy = y+6*H/24
   ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+7*H/24)
   cpx = x+18*W/24
   cpy = y+5*H/24
   ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+3*H/24)
   cpx = x+16*W/24
   cpy = y+2*H/24
   ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+2*H/24)
   ctx.stroke()
 
   //4
   ctx.beginPath()
   ctx.moveTo(x+15*W/24, y+2*H/24)
   cpx = x+17*W/24
   cpy = y+4*H/24
   ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+7*H/24)
   ctx.stroke()
}

function la_campanaAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.fillStyle = color
  ctx.font = "800 italic "+W/16+"pt Garamond"
  let width = ctx.measureText("43").width
  ctx.fillText("43", x + W/2-width/2, y + H/24)
  //1
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+20*H/24)
  cpx = x+12*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+20*H/24)
  cpx = x+12*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+20*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+19*H/24)
  cpx = x+11*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+21*H/24)
  cpx = x+13*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+19*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+20*H/24)
  cpx = x+3*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+13*H/24)
  cpx = x+6*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+7*H/24)
  cpx = x+8*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+4*H/24)
  cpx = x+16*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+7*H/24)
  cpx = x+18*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+13*H/24)
  cpx = x+21*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+20*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+4*H/24)
  cpx = x+13*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+3*H/24)
  cpx = x+13*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+2*H/24)
  cpx = x+11*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+2.5*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+4*H/24)
  cpx = x+11*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+3.5*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+3*H/24)
  ctx.lineTo(x+12.5*W/24, y+3*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+13.5*W/24, y+3*H/24)
  ctx.lineTo(x+22*W/24, y+3*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+14*H/24)
  cpx = x+12*W/24
  cpy = y+12.5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+14*H/24)
  ctx.stroke()
}

function la_sandíaAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.globalAlpha /= 3
  //1
  ctx.beginPath()
  ctx.moveTo(x+9.2*W/24, y+15.6*H/24)
  cpx = x+8.2*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+2*H/24)
  cpx = x+4*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+10*H/24)
  cpx = x+3*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3.1*W/24, y+11.4*H/24)
  cpx = x+4*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+10*H/24)
  cpx = x+9*W/24
  cpy = y+16*H/24
  ctx.lineTo(x+9.15*W/24, y+15.6*H/24)
  //ctx.quadraticCurveTo(cpx, cpy, x+9.2*W/24, y+15.6*H/24)
  ctx.fill()

  //2
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+18.7*H/24)
  cpx = x+21*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+10*H/24)
  cpx = x+21*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+2*H/24)
  cpx = x+18*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+10*H/24)
  cpx = x+18*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+18.7*H/24)
  ctx.fill()
  ctx.globalAlpha *= 3
  //1
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+10*H/24)
  cpx = x+0*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+19*H/24)
  cpx = x+6*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+22*H/24)
  cpx = x+13*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+21*H/24)
  cpx = x+4*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+10*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+11*H/24)
  cpx = x+2*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+18*H/24)
  cpx = x+6*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+21*H/24)
  cpx = x+12*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+20*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+18.7*H/24)
  cpx = x+21*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+10*H/24)
  cpx = x+21*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+2*H/24)
  cpx = x+4*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+10*H/24)
  cpx = x+3*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3.1*W/24, y+11.4*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+18.7*H/24)
  cpx = x+18*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+10*H/24)
  cpx = x+18*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+2*H/24)
  cpx = x+17*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+10*H/24)
  cpx = x+17*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+18.7*H/24)
  ctx.stroke()
  //8 center line
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+2*H/24)
  ctx.lineTo(x+12*W/24, y+18.7*H/24)
  ctx.stroke()
  //5
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+2*H/24)
  cpx = x+10*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+10*H/24)
  cpx = x+10*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+16.4*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+2*H/24)
  cpx = x+9*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+10*H/24)
  cpx = x+9*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9.2*W/24, y+15.6*H/24)
  ctx.stroke()

  ctx.fillStyle = color
  ctx.font = "800 italic "+W/16+"pt Garamond"
  let width = ctx.measureText("28").width
  ctx.fillText("28", x + W/2-width/2, y + H/24)
  let r = W/80
  //9
  ctx.beginPath()
  ctx.arc(x+13*W/24, y+18*H/24, r, 0, Math.PI *2)
  ctx.fill()

  //10
  ctx.beginPath()
  ctx.arc(x+14.5*W/24, y+16.5*H/24, r, 0, Math.PI *2)
  ctx.fill()

  //11
  ctx.beginPath()
  ctx.arc(x+15*W/24, y+14*H/24, r, 0, Math.PI *2)
  ctx.fill()

  //12
  ctx.beginPath()
  ctx.arc(x+16*W/24, y+13*H/24, r, 0, Math.PI *2)
  ctx.fill()

  //13
  ctx.beginPath()
  ctx.arc(x+15*W/24, y+12*H/24, r, 0, Math.PI *2)
  ctx.fill()

  //14
  ctx.beginPath()
  ctx.arc(x+16*W/24, y+11*H/24, r, 0, Math.PI *2)
  ctx.fill()

  //15
  ctx.beginPath()
  ctx.arc(x+15*W/24, y+10*H/24, r, 0, Math.PI *2)
  ctx.fill()

  //16
  ctx.beginPath()
  ctx.arc(x+16*W/24, y+9*H/24, r, 0, Math.PI *2)
  ctx.fill()

  //17
  ctx.beginPath()
  ctx.arc(x+15*W/24, y+8*H/24, r, 0, Math.PI *2)
  ctx.fill()

  //18
  ctx.beginPath()
  ctx.arc(x+16*W/24, y+7*H/24, r, 0, Math.PI *2)
  ctx.fill()

  //19
  ctx.beginPath()
  ctx.arc(x+15*W/24, y+6*H/24, r, 0, Math.PI *2)
  ctx.fill()

  //20
  ctx.beginPath()
  ctx.arc(x+14.5*W/24, y+4*H/24, r, 0, Math.PI *2)
  ctx.fill()

  //21
  ctx.beginPath()
  ctx.arc(x+13*W/24, y+3*H/24, r, 0, Math.PI *2)
  ctx.fill()

  //22
  ctx.beginPath()
  ctx.arc(x+10.5*W/24, y+16*H/24, r, 0, Math.PI *2)
  ctx.fill()

  //23
  ctx.beginPath()
  ctx.arc(x+11*W/24, y+14*H/24, r, 0, Math.PI *2)
  ctx.fill()

  //24
  ctx.beginPath()
  ctx.arc(x+10.5*W/24, y+11*H/24, r, 0, Math.PI *2)
  ctx.fill()

  //25
  ctx.beginPath()
  ctx.arc(x+11*W/24, y+6*H/24, r, 0, Math.PI *2)
  ctx.fill()

  //26
  ctx.beginPath()
  ctx.arc(x+11.5*W/24, y+4*H/24, r, 0, Math.PI *2)
  ctx.fill()

  //27
  ctx.beginPath()
  ctx.arc(x+11*W/24, y+9*H/24, r, 0, Math.PI *2)
  ctx.fill()
  //28
  ctx.beginPath()
  ctx.arc(x+5*W/24, y+13*H/24, r, 0, Math.PI*2)
  ctx.fill()

  //29
  ctx.beginPath()
  ctx.arc(x+7*W/24, y+15*H/24, r, 0, Math.PI*2)
  ctx.fill()

  //30
  ctx.beginPath()
  ctx.arc(x+9*W/24, y+17*H/24, r, 0, Math.PI*2)
  ctx.fill()

  //31
  ctx.beginPath()
  ctx.arc(x+11*W/24, y+19*H/24, r, 0, Math.PI*2)
  ctx.fill()

  //32
  ctx.beginPath()
  ctx.arc(x+9*W/24, y+19*H/24, r, 0, Math.PI*2)
  ctx.fill()

  //33
  ctx.beginPath()
  ctx.arc(x+7*W/24, y+17*H/24, r, 0, Math.PI*2)
  ctx.fill()

  //34
  ctx.beginPath()
  ctx.arc(x+5*W/24, y+15*H/24, r, 0, Math.PI*2)
  ctx.fill()
}

function snailAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
   //1
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+16*H/24)
  cpx = x+17*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+15*H/24)
  cpx = x+17*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+3*H/24)
  cpx = x+2*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+10*H/24)
  cpx = x+2*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+16*H/24)
  cpx = x+10*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+13*H/24)
  cpx = x+10*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+11*H/24)
  cpx = x+7*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+12*H/24)
  cpx = x+7*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+13*H/24)
  ctx.stroke()
  //2
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+16*H/24)
  cpx = x+14*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+16*H/24)
  cpx = x+3*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+20*H/24)
  cpx = x+18*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+20*H/24)
  cpx = x+22*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+8*H/24)
  cpx = x+22*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+6*H/24)
  cpx = x+18*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+8*H/24)
  cpx = x+18*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+15*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+19*W/24, y+6*H/24)
  cpx = x+19*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+3*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+21*W/24, y+6*H/24)
  cpx = x+21*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+3*H/24)
  ctx.stroke()

  let r = W/48
  ctx.fillStyle = color
  //6
  ctx.beginPath()
  ctx.arc(x+20*W/24, y+3*H/24,r,0,Math.PI*2)
  ctx.fill()

  //7
  ctx.beginPath()
  ctx.arc(x+22*W/24, y+3*H/24,r,0,Math.PI*2)
  ctx.fill()
}

function i_chingAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/25
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let order = [111111, 0, 10001, 100010, 10111, 111010, 10, 10000, 110111, 111011, 111, 111000, 111101, 101111, 100, 1000, 11001, 100110, 11, 110000, 101001, 100101, 100000, 1, 111001, 100111, 100001, 11110, 10010, 101101, 11100, 1110, 111100, 1111, 101000, 101, 110101, 101011, 10100, 1010, 100011, 110001, 11111, 111110, 11000, 110, 11010, 10110, 11101, 101110, 1001, 100100, 110100, 1011, 1101, 101100, 110110, 11011, 110010, 10011, 110011, 1100, 10101, 101010]
  let meanings = ["Initiating", "Responding", "Beginning", "Childhood", "Needing", "Contention", "Multitude", "Union", "Little Accumulation", "Fulfillment", "Advance", "Hindrance", "Seeking Harmony", "Great Harvest", "Humbleness", "Delight", "Following", "Remedying", "Approaching", "Watching", "Eradicating", "Adorning", "Falling Away", "Turning Back", "Without Falsehood", "Great Accumulation", "Nourishing", "Great Exceeding", "Darkness", "Brightness", "Mutual Influence", "Long Lasting", "Retreat", "Great Strength", "Proceeding Forward", "Brilliance Injured", "Household", "Diversity", "Hardship", "Relief", "Decreasing", "Increasing", "Eliminating", "Encountering", "Bringing Together", "Growing Upward", "Exhausting", "Replenishing", "Abolishing The Old", "Establishing The New", "Taking Action", "Keeping Still", "Developing Gradually", "Marrying Maiden", "Abundance", "Travelling", "Proceeding Humbly", "Joyful", "Dispersing", "Restricting", "Innermost Sincerity", "Little Exceeding", "Already Fulfilled", "Not Yet Fulfilled"]
  let hex = Math.floor(Math.random() * 64)
  let bin_raw = (hex.toString(2).split("")).reverse()
  let bin = "000000".split("")
  let i = 0
  for (; i < bin_raw.length; i++) {
    bin[i] = bin_raw[i]
  }
  let binint = parseInt(bin.join(""))
  let NUMBER = order.indexOf(binint) + 1
  ctx.font = "800 italic "+W/12+"pt Garamond"
  let width = ctx.measureText(NUMBER).width
  ctx.fillText(NUMBER, x + W/2 - (width/2), y + 2*H/16)
  ctx.font = "800 italic "+W/14+"pt Garamond"
  let MEANING = meanings[order.indexOf(binint)]
  width = ctx.measureText(MEANING).width
  ctx.fillText(MEANING, x + W/2 - (width/2), y + 15*H/16)

  defs["i_chingAt"] = {"u":MEANING,"i":MEANING},

  bin.reverse()
  i = 0, dy = 2
  for (; i < 6; i++) {
    ctx.beginPath()
    ctx.moveTo(x+2*W/16, y+13*H/16 - (i*dy)*H/16)
    if (bin[i] === undefined || bin[i] === "0") {
      ctx.lineTo(x+6*W/16, y+13*H/16 - (i*dy)*H/16)
      ctx.moveTo(x+10*W/16, y+13*H/16 - (i*dy)*H/16)
    }
    ctx.lineTo(x+14*W/16, y+13*H/16 - (i*dy)*H/16)
    ctx.stroke()
  }
}

function heads_or_tailsAt (x,y,W,color,INVERTED) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.arc(x+12*W/24, y+12*H/24, 11*W/24,0,Math.PI*2)
  ctx.stroke()
  ctx.lineWidth /= 2
  ctx.beginPath()
  ctx.arc(x+12*W/24, y+12*H/24, 10*W/24,0,Math.PI*2)
  ctx.stroke()
  ctx.lineWidth *= 2
  if(INVERTED) {
    ctx.beginPath()
    ctx.moveTo(x+16*W/24, y+4*H/24)
    cpx = x+16*W/24
    cpy = y+8*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+10*H/24)
    cpx = x+15*W/24
    cpy = y+11*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+20*H/24)
    ctx.stroke()

    //2
    ctx.beginPath()
    ctx.moveTo(x+16*W/24, y+4*H/24)
    cpx = x+12*W/24
    cpy = y+5*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+8*H/24)
    cpx = x+12*W/24
    cpy = y+5*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+4*H/24)
    cpx = x+8*W/24
    cpy = y+8*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+10*H/24)
    cpx = x+9*W/24
    cpy = y+11*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+20*H/24)
    ctx.stroke()
    //3
    ctx.beginPath()
    ctx.moveTo(x+17*W/24, y+18*H/24)
    cpx = x+19*W/24
    cpy = y+16*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+11*H/24)
    cpx = x+16*W/24
    cpy = y+12*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+12*H/24)
    ctx.stroke()

    //4
    ctx.beginPath()
    ctx.moveTo(x+7*W/24, y+18*H/24)
    cpx = x+5*W/24
    cpy = y+16*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+11*H/24)
    cpx = x+8*W/24
    cpy = y+12*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+12*H/24)
    ctx.stroke()

    ctx.setLineDash([W/32])
    //3
    ctx.beginPath()
    ctx.moveTo(x+12*W/24, y+21*H/24)
    cpx = x+12*W/24
    cpy = y+12*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+11*H/24)
    ctx.stroke()
    ctx.setLineDash([])

  } else {
    ctx.beginPath()
    ctx.moveTo(x+6*W/24, y+19*H/24)
    cpx = x+6*W/24
    cpy = y+10*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+6*H/24)
    cpx = x+18*W/24
    cpy = y+10*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+19*H/24)
    ctx.stroke()

    //3
    ctx.beginPath()
    ctx.moveTo(x+11*W/24, y+14*H/24)
    cpx = x+12*W/24
    cpy = y+14*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+13*H/24)
    cpx = x+12*W/24
    cpy = y+12*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+12*H/24)
    cpx = x+10*W/24
    cpy = y+12*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+13*H/24)
    cpx = x+10*W/24
    cpy = y+14*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+14*H/24)
    ctx.stroke()

    //4
    ctx.beginPath()
    ctx.moveTo(x+11*W/24, y+15*H/24)
    cpx = x+13*W/24
    cpy = y+15*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+13*H/24)
    cpx = x+13*W/24
    cpy = y+11*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+11*H/24)
    cpx = x+9*W/24
    cpy = y+11*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+13*H/24)
    cpx = x+9*W/24
    cpy = y+15*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+15*H/24)
    ctx.stroke()
    // mouth
    ctx.beginPath()
    ctx.moveTo(x+11.5*W/24, y+6.5*H/24)
    cpx = x+13*W/24
    cpy = y+8*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+9*H/24)
    ctx.stroke()
    //gill
    ctx.beginPath()
    ctx.moveTo(x+15*W/24, y+16*H/24)
    cpx = x+15*W/24
    cpy = y+19*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+20*H/24)
    ctx.stroke()
  }
}

function copy_and_pasteAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+5*H/24)
  cpx = x+9*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+5*H/24)
  cpx = x+11*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+3*H/24)
  cpx = x+11*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+1*H/24)
  cpx = x+7*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+3*H/24)
  cpx = x+7*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+8*H/24)
  cpx = x+7*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+10*H/24)
  cpx = x+11*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+8*H/24)
  cpx = x+11*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+6*H/24)
  cpx = x+4*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+6*H/24)
  cpx = x+2*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+8*H/24)
  cpx = x+2*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+10*H/24)
  cpx = x+6*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+8*H/24)
  cpx = x+6*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+3*H/24)
  cpx = x+6*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+1*H/24)
  cpx = x+2*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+3*H/24)
  cpx = x+2*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+5*H/24)
  ctx.stroke()
  //4
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+21*H/24)
  cpx = x+2*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+23*H/24)
  cpx = x+6*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+21*H/24)
  cpx = x+6*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+19*H/24)
  cpx = x+6*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+16*H/24)
  cpx = x+6*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+14*H/24)
  cpx = x+2*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+16*H/24)
  cpx = x+2*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+18*H/24)
  cpx = x+9*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+18*H/24)
  cpx = x+11*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+16*H/24)
  cpx = x+11*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+14*H/24)
  cpx = x+7*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+16*H/24)
  cpx = x+7*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+21*H/24)
  cpx = x+7*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+23*H/24)
  cpx = x+11*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+21*H/24)
  cpx = x+11*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+19*H/24)
  cpx = x+4*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+19*H/24)
  cpx = x+2*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+21*H/24)
  ctx.stroke()
  //5
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+14*H/24)
  ctx.lineTo(x+18*W/24, y+23*H/24)
  ctx.lineTo(x+22*W/24, y+14*H/24)
  ctx.stroke()
  //6
  ctx.beginPath()
  ctx.moveTo(x+22*W/24, y+4*H/24)
  cpx = x+22*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+1*H/24)
  cpx = x+17*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+1*H/24)
  cpx = x+14*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+4*H/24)
  cpx = x+14*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+7*H/24)
  cpx = x+14*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+10*H/24)
  cpx = x+19*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+10*H/24)
  cpx = x+22*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+7*H/24)
  ctx.stroke()
  //7
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+5.5*H/24)
  ctx.lineTo(x+13*W/24, y+5.5*H/24)
  ctx.stroke()
  //8
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+18.5*H/24)
  ctx.lineTo(x+13*W/24, y+18.5*H/24)
  ctx.stroke()
}

function mobile_appAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+23*H/24)
  cpx = x+4*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+16*H/24)
  cpx = x+4*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+11*H/24)
  cpx = x+5*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+8*H/24)
  cpx = x+7*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+11*H/24)
  cpx = x+7*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+13*H/24)
  cpx = x+7*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+14*H/24)
  cpx = x+7*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+15*H/24)
  cpx = x+7*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+19*H/24)
  cpx = x+7*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+20*H/24)
  cpx = x+16*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+20*H/24)
  cpx = x+17*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+19*H/24)
  cpx = x+17*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+18*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+23*H/24)
  cpx = x+16*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+20*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+23*H/24)
  cpx = x+11*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+20*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+18*H/24)
  cpx = x+15*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+17*H/24)
  cpx = x+15*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+16*H/24)
  cpx = x+18*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+16*H/24)
  cpx = x+19*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+17*H/24)
  cpx = x+19*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+18*H/24)
  cpx = x+16*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+18*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+16*H/24)
  cpx = x+15*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+18*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+18*H/24)
  cpx = x+18*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+16*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+15*H/24)
  cpx = x+18*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+15*H/24)
  cpx = x+19*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+14*H/24)
  cpx = x+19*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+13*H/24)
  cpx = x+17*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+13*H/24)
  cpx = x+16*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+14*H/24)
  cpx = x+16*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+15*H/24)
  cpx = x+16*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+13*H/24)
  cpx = x+18*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+15*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+12*H/24)
  cpx = x+19*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+10*H/24)
  cpx = x+17*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+11*H/24)
  cpx = x+17*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+12*H/24)
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+9*H/24)
  cpx = x+18*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+8*H/24)
  cpx = x+18*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+7*H/24)
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+11*H/24)
  cpx = x+7*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+3*H/24)
  cpx = x+7*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+2*H/24)
  cpx = x+16*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+2*H/24)
  cpx = x+17*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+3*H/24)
  cpx = x+17*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+7*H/24)
  ctx.stroke()

  //11
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+16*H/24)
  ctx.lineTo(x+17*W/24, y+15*H/24)
  ctx.stroke()

  //12
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+13*H/24)
  ctx.lineTo(x+17*W/24, y+7*H/24)
  ctx.stroke()

  //13
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+10*H/24)
  ctx.lineTo(x+6*W/24, y+10*H/24)
  ctx.lineTo(x+6*W/24, y+8.5*H/24)
  ctx.stroke()

  //let funcs = shuffle(atList)
  let s = +document.getElementById("featuresize").value
  document.getElementById("featuresize").value = s/2
 // window [atList[0]] (x+7.8*W/24, y+4*W/24, 8.5*W/24, color)
  window [randomPick(atList)] (x+7.8*W/24, y+4*W/24, 8.5*W/24, color)
  document.getElementById("featuresize").value = s
}

function groupthinkAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "round"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+14*H/24)
  cpx = x+14*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+12*H/24)
  cpx = x+14*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+10*H/24)
  cpx = x+10*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+12*H/24)
  cpx = x+10*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+14*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+14*H/24)
  ctx.lineTo(x+12*W/24, y+19*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+23*H/24)
  ctx.lineTo(x+12*W/24, y+19*H/24)
  ctx.lineTo(x+14*W/24, y+23*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+18*H/24)
  ctx.lineTo(x+11*W/24, y+15*H/24)
  ctx.lineTo(x+13*W/24, y+15*H/24)
  ctx.lineTo(x+15*W/24, y+18*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+12*H/24)
  ctx.lineTo(x+19*W/24, y+12*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+23*W/24, y+14*H/24)
  ctx.lineTo(x+19*W/24, y+12*H/24)
  ctx.lineTo(x+23*W/24, y+10*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+9*H/24)
  ctx.lineTo(x+15*W/24, y+11*H/24)
  ctx.lineTo(x+15*W/24, y+13*H/24)
  ctx.lineTo(x+18*W/24, y+15*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+10*H/24)
  ctx.lineTo(x+12*W/24, y+5*H/24)
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+1*H/24)
  ctx.lineTo(x+12*W/24, y+5*H/24)
  ctx.lineTo(x+14*W/24, y+1*H/24)
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+6*H/24)
  ctx.lineTo(x+11*W/24, y+9*H/24)
  ctx.lineTo(x+13*W/24, y+9*H/24)
  ctx.lineTo(x+15*W/24, y+6*H/24)
  ctx.stroke()

  //11
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+12*H/24)
  ctx.lineTo(x+5*W/24, y+12*H/24)
  ctx.stroke()

  //12
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+10*H/24)
  ctx.lineTo(x+5*W/24, y+12*H/24)
  ctx.lineTo(x+1*W/24, y+14*H/24)
  ctx.stroke()

  //13
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+15*H/24)
  ctx.lineTo(x+9*W/24, y+13*H/24)
  ctx.lineTo(x+9*W/24, y+11*H/24)
  ctx.lineTo(x+6*W/24, y+9*H/24)
  ctx.stroke()
}

function combAt (x,y,W,color,INVERTED) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "round"
  ctx.lineJoin = "bevel"
 
  let i = 0, dy = W/24, dx = 0
  let picks = []
  if (INVERTED)
    for (; i < 3; i++)
      picks.push(1 + Math.floor(Math.random() * 18))
  i = 0
  for (; i < 21; i++) {
    if (picks.includes(i)) {
      ctx.lineCap = "square"
      dx += (2+Math.floor(Math.random() * 5))*W/24
    }
    ctx.beginPath()
    ctx.moveTo(x+8*W/24+dx, y+2*H/24+(dy*i))
    ctx.lineTo(x+17.8*W/24, y+2*H/24+(dy*i))
   
    ctx.stroke()
    if (picks.includes(i)) {
      ctx.lineCap = "round"
      dx = 0
    }
    ctx.lineWidth *= 1.05
  }
   //1
   ctx.beginPath()
   ctx.moveTo(x+8*W/24, y+23*H/24)
   ctx.lineTo(x+17*W/24, y+23*H/24)
   cpx = x+18*W/24
   cpy = y+23*H/24
   ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+21*H/24)
   cpx = x+18*W/24
   cpy = y+3*H/24
   ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+3*H/24)
   cpx = x+18*W/24
   cpy = y+1*H/24
   ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+1*H/24)
   cpx = x+8*W/24
   cpy = y+1*H/24
   ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+1*H/24)
   ctx.stroke()
}

function doomscrollingAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  let saved = ctx.fillStyle
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let letters = ["D", "O", "O", "M", " "]
  ctx.font = "800 "+W/24+"pt Arial", i = 0
  let dx = 0, dy = 0
  ctx.globalAlpha = 0.25
  for (; i < 300; i++) {
    ctx.fillText(letters[i%5], x+4.8*W/24+dx, y+3*W/24+dy)
    dx += W/26
    if (dx > W/2) {
      dx = 0
      dy += W/20
      if (dy < H/2)
        ctx.globalAlpha *= 1.25
      else
        ctx.globalAlpha *= 0.75
    }
    if (dy > 20 * W/24)
      break
    
  }
  ctx.globalAlpha = 1
//3
ctx.beginPath()
ctx.moveTo(x+18*W/24, y+4*H/24)
ctx.lineTo(x+19*W/24, y+2*H/24)
ctx.lineTo(x+20*W/24, y+4*H/24)
ctx.lineTo(x+18*W/24, y+4*H/24)
ctx.stroke()

//4
ctx.beginPath()
ctx.moveTo(x+20*W/24, y+11*H/24)
ctx.lineTo(x+18*W/24, y+11*H/24)
ctx.lineTo(x+18*W/24, y+13*H/24)
ctx.lineTo(x+20*W/24, y+13*H/24)
ctx.lineTo(x+20*W/24, y+11*H/24)
ctx.stroke()

//5
ctx.beginPath()
ctx.moveTo(x+18*W/24, y+20*H/24)
ctx.lineTo(x+19*W/24, y+22*H/24)
ctx.lineTo(x+20*W/24, y+20*H/24)
ctx.lineTo(x+18*W/24, y+20*H/24)
ctx.stroke()

  //1
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+2*H/24)
  ctx.lineTo(x+4*W/24, y+22*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+20.2*W/24, y+2*H/24)
  ctx.lineTo(x+20.2*W/24, y+22*H/24)
  ctx.stroke()
  //6
  ctx.beginPath()
  ctx.moveTo(x+17.8*W/24, y+2*H/24)
  ctx.lineTo(x+17.8*W/24, y+22*H/24)
  ctx.stroke()
  ctx.fillStyle = saved
}

function sketchbookAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  let saved = ctx.fillStyle
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let i = 0, yspace = W/20
  //5
  for (; i < 17; i++) {
    ctx.beginPath()
    ctx.moveTo(x+11*W/24, y+21.4*H/24-yspace*i)
    cpx = x+11*W/24
    cpy = y+20.4*H/24-yspace*i
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+20.4*H/24-yspace*i)
    cpx = x+13*W/24
    cpy = y+20.4*H/24-yspace*i
    ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+21.4*H/24-yspace*i)
    ctx.stroke()
  }
  //21
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+2*H/24)
  ctx.lineTo(x+2*W/24, y+1*H/24)
  ctx.lineTo(x+2*W/24, y+22*H/24)
  ctx.lineTo(x+22*W/24, y+22*H/24)
  ctx.lineTo(x+22*W/24, y+1*H/24)
  ctx.lineTo(x+12*W/24, y+2*H/24)
  ctx.stroke()
  //20
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+2*H/24)
  ctx.lineTo(x+1*W/24, y+2*H/24)
  ctx.lineTo(x+1*W/24, y+23*H/24)
  ctx.lineTo(x+12*W/24, y+22*H/24)
  ctx.lineTo(x+23*W/24, y+23*H/24)
  ctx.lineTo(x+23*W/24, y+2*H/24)
  ctx.lineTo(x+22*W/24, y+2*H/24)
  ctx.stroke()
  //18
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+22*H/24)
  ctx.lineTo(x+12*W/24, y+2*H/24)
  ctx.stroke()

  let s = +document.getElementById("featuresize").value
  document.getElementById("featuresize").value = s/3
  ctx.lineWidth /=2

   //7
   ctx.beginPath()
   ctx.moveTo(x+15*W/24, y+14*H/24)
   ctx.lineTo(x+15*W/24, y+18*H/24)
   ctx.lineTo(x+19*W/24, y+18*H/24)
   ctx.lineTo(x+19*W/24, y+14*H/24)
   ctx.lineTo(x+15*W/24, y+14*H/24)
   ctx.stroke()
 
   //8
   ctx.beginPath()
   ctx.moveTo(x+17*W/24, y+16*H/24)
   ctx.lineTo(x+17*W/24, y+20*H/24)
   ctx.lineTo(x+21*W/24, y+20*H/24)
   ctx.lineTo(x+21*W/24, y+16*H/24)
   ctx.lineTo(x+17*W/24, y+16*H/24)
   ctx.lineTo(x+15*W/24, y+14*H/24)
   ctx.stroke()
 
   //9
   ctx.beginPath()
   ctx.moveTo(x+15*W/24, y+18*H/24)
   ctx.lineTo(x+17*W/24, y+20*H/24)
   ctx.stroke()
 
   //10
   ctx.beginPath()
   ctx.moveTo(x+19*W/24, y+14*H/24)
   ctx.lineTo(x+21*W/24, y+16*H/24)
   ctx.stroke()
 
   //11
   ctx.beginPath()
   ctx.moveTo(x+19*W/24, y+18*H/24)
   ctx.lineTo(x+21*W/24, y+20*H/24)
   ctx.stroke()

  //22
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+18*H/24)
  ctx.lineTo(x+8*W/24, y+15*H/24)
  ctx.lineTo(x+6*W/24, y+15*H/24)
  ctx.lineTo(x+7*W/24, y+18*H/24)
  ctx.stroke()

  //23
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+15*H/24)
  ctx.lineTo(x+6*W/24, y+6*H/24)
  ctx.lineTo(x+8*W/24, y+6*H/24)
  ctx.lineTo(x+8*W/24, y+15*H/24)
  ctx.stroke()

  //24
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+6*H/24)
  ctx.lineTo(x+7*W/24, y+15*H/24)
  ctx.stroke()
  //6
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+5*H/24)
  ctx.lineTo(x+8*W/24, y+5*H/24)
  ctx.stroke()
  
  //25
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+6*H/24)
  cpx = x+6*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+5*H/24)
  cpx = x+6*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+4*H/24)
  cpx = x+8*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+5*H/24)
  cpx = x+8*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+6*H/24)
  ctx.stroke()

  //16
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+18*H/24)
  cpx = x+7*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+21*H/24)
  cpx = x+14*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+9*H/24)
  cpx = x+14*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+5*H/24)
  cpx = x+20*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+9*H/24)
  cpx = x+20*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+12*H/24)
  cpx = x+15*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+9*H/24)
  cpx = x+15*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+6*H/24)
  cpx = x+19*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+9*H/24)
  cpx = x+19*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+11*H/24)
  cpx = x+16*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+9*H/24)
  cpx = x+16*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+7*H/24)
  cpx = x+18*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+9*H/24)
  cpx = x+18*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+10*H/24)
  ctx.stroke()

  //27
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+18*H/24)
  ctx.lineTo(x+7.3*W/24, y+17*H/24)
  ctx.lineTo(x+6.7*W/24, y+17*H/24)
  ctx.stroke()
  ctx.fillStyle = color
  ctx.fill()
  document.getElementById("featuresize").value = s
  ctx.fillStyle = saved
}

function UIAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  let saved = ctx.fillStyle
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+22*H/24)
  ctx.lineTo(x+22*W/24, y+22*H/24)
  ctx.lineTo(x+22*W/24, y+4*H/24)
  ctx.lineTo(x+2*W/24, y+4*H/24)
  ctx.lineTo(x+2*W/24, y+22*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+4*H/24)
  ctx.lineTo(x+2*W/24, y+2*H/24)
  ctx.lineTo(x+22*W/24, y+2*H/24)
  ctx.lineTo(x+22*W/24, y+4*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+4*H/24)
  ctx.lineTo(x+4*W/24, y+22*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+21*W/24, y+4*H/24)
  ctx.lineTo(x+21*W/24, y+22*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+22*W/24, y+21*H/24)
  ctx.lineTo(x+4*W/24, y+21*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+21*W/24, y+5*H/24)
  ctx.lineTo(x+22*W/24, y+5*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+21*H/24)
  ctx.lineTo(x+5*W/24, y+22*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+21*W/24, y+5*H/24)
  ctx.lineTo(x+21.5*W/24, y+4*H/24)
  ctx.lineTo(x+22*W/24, y+5*H/24)
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+22*H/24)
  ctx.lineTo(x+4*W/24, y+21.5*H/24)
  ctx.lineTo(x+5*W/24, y+21*H/24)
  ctx.stroke()

  /11
  ctx.beginPath()
  ctx.moveTo(x+22*W/24, y+20*H/24)
  ctx.lineTo(x+21*W/24, y+20*H/24)
  ctx.lineTo(x+21.5*W/24, y+21*H/24)
  ctx.lineTo(x+22*W/24, y+20*H/24)
  ctx.stroke()

  //12
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+21*H/24)
  ctx.lineTo(x+20*W/24, y+22*H/24)
  ctx.lineTo(x+21*W/24, y+21.5*H/24)
  ctx.lineTo(x+20*W/24, y+21*H/24)
  ctx.stroke()
  //15
  ctx.beginPath()
  ctx.moveTo(x+21*W/24, y+8*H/24)
  ctx.lineTo(x+22*W/24, y+8*H/24)
  ctx.stroke()
  //16
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+21*H/24)
  ctx.lineTo(x+8*W/24, y+22*H/24)
  ctx.stroke()
  ctx.lineWidth /= 2
  //12 close box
  ctx.beginPath()
  ctx.moveTo(x+20.5*W/24, y+2.5*H/24)
  ctx.lineTo(x+20.5*W/24, y+3.5*H/24)
  ctx.lineTo(x+21.5*W/24, y+3.5*H/24)
  ctx.lineTo(x+21.5*W/24, y+2.5*H/24)
  ctx.lineTo(x+20.5*W/24, y+2.5*H/24)
  ctx.lineTo(x+21.5*W/24, y+3.5*H/24)
  ctx.stroke()
  //14
  ctx.beginPath()
  ctx.moveTo(x+20.5*W/24, y+3.5*H/24)
  ctx.lineTo(x+21.5*W/24, y+2.5*H/24)
  ctx.stroke()
  ctx.lineWidth *= 2

  divsAt (x+4*W/24,y+4*W/24,17*W/24,color)

  ctx.font = "500 "+W/36+"pt Arial"
  ctx.fillText("File\u25BC Edit\u25BC View\u25BC", x+3*W/25, y+3.3*W/24)
  let s = +document.getElementById("featuresize").value
  document.getElementById("featuresize").value = s/7
  let i = 0, y1 = 4.3*W/24
  for (; i < 9; i++) {
    window [randomPick(atList)] (x+2*W/24 + W/80, y+y1, 2*W/34,color)
    y1 += 2*W/24
  }
  
  let pal = getCurrentPalette()
  i = 0
  for (; i < 7; i++) {
    ctx.fillStyle = pal[i%pal.length]
    ctx.fillRect(x+13*W/24 + (i*W/24), y+2.5*W/24, W/24, W/24)
    ctx.strokeRect(x+13*W/24 + (i*W/24), y+2.5*W/24, W/24, W/24)
  }
  document.getElementById("featuresize").value = s
  ctx.fillStyle = saved
}

// A simple Lorenz Attractor renderer
// Change the parameters for different results!
// by @liabru - http://brm.io
function butterfly_effectAt (x,y,W,color) {
  let canvas = document.getElementById('myCanvas')
  let ctx = canvas.getContext('2d'),
  c = 28, 
  h = 0.015,
  t = -6,
  x0 = Math.random() * 1, 
  y0 = Math.random() * 1, 
  z0 = 10,
  x1,
  y1,
  z1,
  cx = x+W/2,
  cy = y+W/2,
  scale = W/50,
  n = 200,
  i = 0;
  ctx.strokeStyle = color
  ctx.lineWidth = 1

 //ctx.fillStyle = "white"
 //ctx.fillRect(x,y,W,W)
 //console.log(W, scale)

  while (i < n) {
    for (var k = 0; k < 20; k += 1) {
      x1 = x0 + h * t * (x0 - y0);
      y1 = y0 + h * (-x0 * z0 + c * x0 - y0);
      z1 = z0 + h * (x0 * y0 - z0);
      ctx.beginPath();
      ctx.moveTo(cx + x0 * scale, cy + y0 * scale);
      ctx.lineTo(cx + x1 * scale, cy + y1 * scale);
      ctx.stroke();
      x0 = x1;
      y0 = y1;
      z0 = z1;
    }
    i += 1;
  }
}

function cVol (h, r) {
  return Math.PI * r * r * h
}

function cSA (h, r) {
  return 2 * Math.PI * r * h + (2 * Math.PI * r * r) 
}

function divsAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+18*H/24)
  cpx = x+8*W/24
  cpy = y+22*H/24
  ctx.lineTo(x+8*W/24, y+22*H/24)
  ctx.lineTo(x+8*W/24, y+6*H/24)
  ctx.lineTo(x+4*W/24, y+2*H/24)
  ctx.lineTo(x+4*W/24, y+18*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+22*H/24)
  ctx.lineTo(x+20*W/24, y+22*H/24)
  ctx.lineTo(x+20*W/24, y+6*H/24)
  ctx.lineTo(x+16*W/24, y+2*H/24)
  ctx.lineTo(x+4*W/24, y+2*H/24)
  ctx.stroke()
//3
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+6*H/24)
  ctx.lineTo(x+20*W/24, y+6*H/24)
  ctx.stroke()
  ctx.lineWidth /=4
  //4
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+14*H/24)
  ctx.lineTo(x+8*W/24, y+14*H/24)
  ctx.lineTo(x+4*W/24, y+10*H/24)
  ctx.lineTo(x+16*W/24, y+10*H/24)
  ctx.lineTo(x+20*W/24, y+14*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+2*H/24)
  ctx.lineTo(x+14*W/24, y+6*H/24)
  ctx.lineTo(x+14*W/24, y+22*H/24)
  ctx.lineTo(x+10*W/24, y+18*H/24)
  ctx.lineTo(x+10*W/24, y+2*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+22*H/24)
  ctx.lineTo(x+16*W/24, y+18*H/24)
  ctx.lineTo(x+4*W/24, y+18*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+18*H/24)
  ctx.lineTo(x+16*W/24, y+2*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+14*H/24)
  ctx.lineTo(x+10*W/24, y+10*H/24)
  ctx.stroke()
}

function cube_slicedAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+22*H/24)
  ctx.lineTo(x+22*W/24, y+22*H/24)
  ctx.lineTo(x+22*W/24, y+10*H/24)
  ctx.lineTo(x+10*W/24, y+10*H/24)
  ctx.lineTo(x+10*W/24, y+22*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+10*H/24)
  ctx.lineTo(x+4*W/24, y+4*H/24)
  ctx.lineTo(x+16*W/24, y+4*H/24)
  ctx.lineTo(x+22*W/24, y+10*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+22*H/24)
  ctx.lineTo(x+4*W/24, y+16*H/24)
  ctx.lineTo(x+4*W/24, y+4*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+16*H/24)
  ctx.lineTo(x+16*W/24, y+16*H/24)
  ctx.lineTo(x+16*W/24, y+4*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+16*H/24)
  ctx.lineTo(x+22*W/24, y+22*H/24)
  ctx.stroke()
ctx.lineWidth /= 2
ctx.setLineDash([W/48])
  //6
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+10*H/24)
  ctx.lineTo(x+10*W/24, y+16*H/24)
  ctx.lineTo(x+22*W/24, y+16*H/24)
  ctx.lineTo(x+16*W/24, y+10*H/24)
  ctx.lineTo(x+4*W/24, y+10*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+4*H/24)
  ctx.lineTo(x+16*W/24, y+10*H/24)
  ctx.lineTo(x+16*W/24, y+22*H/24)
  ctx.lineTo(x+10*W/24, y+16*H/24)
  ctx.lineTo(x+10*W/24, y+4*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+19*H/24)
  ctx.lineTo(x+7*W/24, y+7*H/24)
  ctx.lineTo(x+19*W/24, y+7*H/24)
  ctx.lineTo(x+19*W/24, y+19*H/24)
  ctx.lineTo(x+7*W/24, y+19*H/24)
  ctx.stroke()
  //9
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+10*H/24)
  ctx.lineTo(x+16*W/24, y+16*H/24)
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+13*H/24)
  ctx.lineTo(x+19*W/24, y+13*H/24)
  ctx.stroke()

  //11
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+7*H/24)
  ctx.lineTo(x+13*W/24, y+19*H/24)
  ctx.stroke()
  ctx.setLineDash([])
}

function traffic_lightAt (x,y,W,color,INVERTED) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let Y = false, R = false
  if (INVERTED) {
    Y = (Math.random() > 0.5)? true: false;
    R = !Y
  }
  //7
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+3*H/24)
  cpx = x+11*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+2*H/24)
  cpx = x+13*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+3*H/24)
  ctx.stroke()
  //1
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+8*H/24)
  cpx = x+14*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+6*H/24)
  cpx = x+14*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+4*H/24)
  cpx = x+10*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+6*H/24)
  cpx = x+10*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+8*H/24)
  ctx.fillStyle = "red"
  if (R)
    ctx.fill()
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+14*H/24)
  cpx = x+14*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+12*H/24)
  cpx = x+14*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+10*H/24)
  cpx = x+10*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+12*H/24)
  cpx = x+10*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+14*H/24)
  ctx.fillStyle = "yellow"
  if (Y)
    ctx.fill()
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+20*H/24)
  cpx = x+14*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+18*H/24)
  cpx = x+14*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+16*H/24)
  cpx = x+10*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+18*H/24)
  cpx = x+10*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+20*H/24)
  ctx.fillStyle = "green"
  if (!INVERTED)
    ctx.fill()
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+21*H/24)
  ctx.lineTo(x+15*W/24, y+21*H/24)
  ctx.lineTo(x+15*W/24, y+19*H/24)
  ctx.lineTo(x+18*W/24, y+16*H/24)
  ctx.lineTo(x+15*W/24, y+16*H/24)
  ctx.lineTo(x+15*W/24, y+13*H/24)
  ctx.lineTo(x+18*W/24, y+10*H/24)
  ctx.lineTo(x+15*W/24, y+10*H/24)
  ctx.lineTo(x+15*W/24, y+7*H/24)
  ctx.lineTo(x+18*W/24, y+4*H/24)
  ctx.lineTo(x+15*W/24, y+4*H/24)
  ctx.lineTo(x+15*W/24, y+3*H/24)
  ctx.lineTo(x+9*W/24, y+3*H/24)
  ctx.lineTo(x+9*W/24, y+4*H/24)
  ctx.lineTo(x+6*W/24, y+4*H/24)
  ctx.lineTo(x+9*W/24, y+7*H/24)
  ctx.lineTo(x+9*W/24, y+10*H/24)
  ctx.lineTo(x+6*W/24, y+10*H/24)
  ctx.lineTo(x+9*W/24, y+13*H/24)
  ctx.lineTo(x+9*W/24, y+16*H/24)
  ctx.lineTo(x+6*W/24, y+16*H/24)
  ctx.lineTo(x+9*W/24, y+19*H/24)
  ctx.lineTo(x+9*W/24, y+21*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+21*H/24)
  ctx.lineTo(x+11*W/24, y+23*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+21*H/24)
  ctx.lineTo(x+13*W/24, y+22*H/24)
  ctx.lineTo(x+13*W/24, y+23*H/24)
  ctx.stroke()
}

function surface_areaAt(x,y,W,color,INVERTED) {
  if (!INVERTED)
    bottleAt (x,y,W,color,INVERTED) 
  else
    bottlesAt (x,y,W,color,INVERTED) 
}

function bottlesAt (x,y,W,color,INVERTED) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let i = 0, w = W/2, x2 = x, y2 = y
  for (; i < 4; i++) {
    if (i > 0 && i % 2 === 0) {
      y2 += w
      x2 = x
    }
    bottleAt (x2,y2,w,color,INVERTED) 
    x2 += w
  }
}

function bottleAt (x,y,W,color, INVERTED) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  ctx.font = "800 italic "+1*W/17 +"pt times"
  ctx.fillText("FIREBIRD", x+8*W/24, y+9*W/24)
  ctx.font = "800 "+1*W/26 +"pt times"
  ctx.fillText("Red", x+7.5*W/24, y+14*W/24)
  ctx.fillText("Hot", x+15.3*W/24, y+14*W/24)

  let vol = "200 ml"
  if (INVERTED)
    vol = "50 ml"
  ctx.font = "800 italic "+1*W/48 +"pt times"
  ctx.fillText("ALC 33% by volume. "+vol, x+8.5*W/24, y+20.5*W/24)
  let s = +document.getElementById("featuresize").value
  document.getElementById("featuresize").value = s/5
  firebirdAt(x+10*W/24,y+11*H/24, W/4, "#ff0000")
  ctx.strokeStyle = color
  document.getElementById("featuresize").value = s
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  //1
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+1*H/24)
  ctx.lineTo(x+15*W/24, y+1*H/24)
  ctx.lineTo(x+15*W/24, y+4*H/24)
  ctx.lineTo(x+10*W/24, y+4*H/24)
  ctx.lineTo(x+10*W/24, y+1*H/24)
  ctx.fillStyle = "#ff0000"
  ctx.fill()
  ctx.stroke()
  //2
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+22*H/24)
  cpx = x+18*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+22*H/24)
  cpx = x+19*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+21*H/24)
  cpx = x+19*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+8*H/24)
  cpx = x+19*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+6*H/24)
  cpx = x+15*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+4*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+4*H/24)
  cpx = x+10*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+6*H/24)
  cpx = x+6*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+8*H/24)
  cpx = x+6*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+21*H/24)
  cpx = x+6*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+22*H/24)
  cpx = x+8*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+22*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+22*H/24)
  cpx = x+5*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+20*H/24)
  cpx = x+5*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+8*H/24)
  cpx = x+5*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+6*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+7*H/24)
  ctx.lineTo(x+18*W/24, y+7*H/24)
  ctx.lineTo(x+18*W/24, y+21*H/24)
  ctx.lineTo(x+7*W/24, y+21*H/24)
  ctx.lineTo(x+7*W/24, y+7*H/24)
  ctx.stroke()
}

function ingredientsAt (x,y,W,color,INVERTED) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let saved = ctx.lineWidth
  let space = 1, i = 0, x2 = 9*W/32
  // barcode lines
  for (; i < 100; i++) {
    let lw = 0.5  + (Math.random() * 3)
    ctx.lineWidth = lw
    ctx.beginPath()
    ctx.moveTo(x+x2, y+23*H/32+lw/2)
    ctx.lineTo(x+x2, y+25.5*H/32-lw/2)
    ctx.stroke()
    x2 += 0.5+(Math.random() * W/39)
    if (x2 > 26.6*W/32) 
      break;
  }
  ctx.fillStyle = ctx.strokeStyle
  ctx.font = "800 "+W/38+ "pt courier"
  i = 0, x2 = 14.5*W/32
  for (; i < 9; i++) {
    ctx.fillText(Math.floor(Math.random()*10) ,x+x2, y+26.5*W/32)
    x2 += W/52
  }
  ctx.font = "800 "+W/32+ "pt courier"
  let width = ctx.measureText("Product of USA").width
  ctx.fillText("Product of USA" ,x+16*W/32-(width/2)+W/32, y+29*W/32)
  ctx.font = "200 italic "+W/10+"pt Garamond"
  let prod = "Wellness Bits"
  if (INVERTED)
    prod = "Lard Bites"
  width = ctx.measureText(prod).width
  ctx.fillText(prod,x+16*W/32-(width/2)+W/32, y+10*W/32)
  ctx.font = "200 italic "+W/22+"pt Garamond"
  ctx.fillText("\u00A9" ,x+17.2*W/32+width/2, y+8.7*W/32)

  ctx.font = "200 italic "+W/36+"pt Garamond"
  prod = "Universal Foods Company"
  width = ctx.measureText(prod).width
  ctx.fillText(prod,x+16*W/32-(width/2)+W/32, y+11.3*W/32)
  ctx.lineWidth = saved
  //19
  ctx.beginPath()
  ctx.moveTo(x+6*W/32, y+6*H/32)
  ctx.lineTo(x+6*W/32, y+30*H/32)
  ctx.lineTo(x+29*W/32, y+30*H/32)
  ctx.lineTo(x+29*W/32, y+6*H/32)
  ctx.lineTo(x+6*W/32, y+6*H/32)
  ctx.stroke()

  //20
  ctx.beginPath()
  ctx.moveTo(x+6*W/32, y+6*H/32)
  ctx.lineTo(x+2*W/32, y+2*H/32)
  ctx.lineTo(x+2*W/32, y+26*H/32)
  ctx.lineTo(x+6*W/32, y+30*H/32)
  ctx.stroke()

  //21
  ctx.beginPath()
  ctx.moveTo(x+2*W/32, y+2*H/32)
  ctx.lineTo(x+25*W/32, y+2*H/32)
  ctx.lineTo(x+29*W/32, y+6*H/32)
  ctx.stroke()
  ctx.lineWidth /=2
  //1 lid
  //1
  ctx.beginPath()
  ctx.moveTo(x+24.5*W/32, y+2.4*H/32)
  ctx.lineTo(x+24*W/32, y+4*H/32)
  ctx.lineTo(x+28*W/32, y+5.5*H/32)
  ctx.stroke()
  //2
  ctx.beginPath()
  ctx.moveTo(x+3*W/32, y+2.5*H/32)
  ctx.lineTo(x+7*W/32, y+4*H/32)
  ctx.lineTo(x+6.5*W/32, y+5.5*H/32)
  ctx.stroke()
  //3
  ctx.beginPath()
  ctx.moveTo(x+7*W/32, y+4*H/32)
  ctx.lineTo(x+24*W/32, y+4*H/32)
  ctx.stroke()
  //1 side
  ctx.beginPath()
  ctx.moveTo(x+4*W/32, y+7*H/32)
  ctx.lineTo(x+4*W/32, y+25*H/32)
  ctx.stroke()
  //2
  ctx.beginPath()
  ctx.moveTo(x+2.5*W/32, y+3.5*H/32)
  ctx.lineTo(x+4*W/32, y+7*H/32)
  ctx.lineTo(x+5.5*W/32, y+6.5*H/32)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+2.5*W/32, y+25.5*H/32)
  ctx.lineTo(x+4*W/32, y+25*H/32)
  ctx.lineTo(x+5.5*W/32, y+28.5*H/32)
  ctx.stroke()

  let ingredients = "Ingredients: organic cane sugar, organic sea salt, filtered, distilled spring water, non-GMO, free-range, kelp, organic avocado oil, organic, gluten-free, whole grain spelt kernels, organic expeller pressed sunflower seed oil, organic, conflict-free fair-trade, kombucha and organic spices.".split("")
  if (INVERTED)
    ingredients = "Ingredients: high fructose corn syrup, lard, salt, soy protein isolate, MSG, BHT, BHA, RBGH, olestra, hydrogenated palm oil, sodium phosphates, sodium diacetate, sodium acorbate, sodium nitrate, soy lecithin, calcium propionate, monoglycerides, mono- and digdlycerides, distilled monoglycerides.".split("")
  ctx.font = "100 "+W/44+ "pt courier"
  i = 0, x2 = 8.5*W/32, y2 = 11.9*W/32
  for (; i < ingredients.length; i++) {
    if (i % 30 === 0) {
      y2 += W/32
      x2 = 8.5*W/32
    }
    ctx.fillText(ingredients[i] ,x+x2, y+y2)
    x2 += W/52
    
  }
}

function boxheadAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+23*H/24)
  cpx = x+4*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+15*H/24)
  cpx = x+10*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+13*H/24)
  cpx = x+14*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+13*H/24)
  cpx = x+14*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+15*H/24)
  cpx = x+20*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+24*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+13*H/24)
  ctx.lineTo(x+16*W/24, y+13*H/24)
  ctx.lineTo(x+16*W/24, y+6*H/24)
  ctx.lineTo(x+8*W/24, y+6*H/24)
  ctx.lineTo(x+8*W/24, y+13*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+13*H/24)
  ctx.lineTo(x+6*W/24, y+11*H/24)
  ctx.lineTo(x+6*W/24, y+4*H/24)
  ctx.lineTo(x+8*W/24, y+6*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+4*H/24)
  ctx.lineTo(x+13*W/24, y+4*H/24)
  ctx.lineTo(x+16*W/24, y+6*H/24)
  ctx.stroke()
}

function razor_wireAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+20*H/24)
  cpx = x+7*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+20*H/24)
  cpx = x+18*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+24*W/24, y+20*H/24)
  ctx.stroke()

  razorwAt(x+2*W/24, y+17*H/24, W/12, color, -25)
  razorwAt(x+8*W/24, y+16.6*H/24, W/12, color, 26)
  razorwAt(x+12*W/24, y+19.6*H/24, W/12, color, 25)
  razorwAt(x+17*W/24, y+21*H/24, W/12, color, 0)
  razorwAt(x+21.1*W/24, y+20*H/24, W/12, color, -30)

  ctx.moveTo(x+22*W/24, y+21*H/24)
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+10*H/24)
  cpx = x+6*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+10*H/24)
  cpx = x+18*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+24*W/24, y+8*H/24)
  ctx.stroke()
  //7
  razorwAt(x+1*W/24, y+11*H/24, W/12, color, 36)
  razorwAt(x+7*W/24, y+12.2*H/24, W/12, color, -20)
  razorwAt(x+12*W/24, y+9*H/24, W/12, color, -29)
  razorwAt(x+17*W/24, y+7*H/24, W/12, color, -14)
  razorwAt(x+21.3*W/24, y+6.9*H/24, W/12, color, 1)
  //12
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+2*H/24)
  cpx = x+7*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+6*H/24)
  cpx = x+15*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+24*W/24, y+14*H/24)
  ctx.stroke()
  //13
  razorwAt(x+2*W/24, y+1.3*H/24, W/12, color, 10)
  razorwAt(x+6.3*W/24, y+2.7*H/24, W/12, color, 30)
  razorwAt(x+10.2*W/24, y+6.8*H/24, W/12, color, 56)
  razorwAt(x+15*W/24, y+11.0*H/24, W/12, color, 24)
  razorwAt(x+19.5*W/24, y+12.6*H/24, W/12, color, 10)
}

function razorwAt (x,y,W,color, angle) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "miter"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2
  //1
  ctx.beginPath()
  p = rotatePoint(x+12*W/24, y+18*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+24*W/24
  cpy = y+18*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+24*W/24, y+18*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+15*W/24
  cpy = y+12*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+24*W/24, y+6*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+0*W/24
  cpy = y+6*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+0*W/24, y+6*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+9*W/24
  cpy = y+12*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+0*W/24, y+18*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+12*W/24
  cpy = y+18*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24, y+18*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()
}

function covid_testAt (x,y,W,color, INVERTED) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color

  //ctx.lineCap = "square"
 // ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+10*H/24)
  cpx = x+2*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+9*H/24)
  ctx.lineTo(x+21*W/24, y+9*H/24)
  cpx = x+22*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+10*H/24)
  ctx.lineTo(x+22*W/24, y+15*H/24)
  cpx = x+22*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+16*H/24)
  ctx.lineTo(x+3*W/24, y+16*H/24)
  cpx = x+2*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+15*H/24)
  ctx.lineTo(x+2*W/24, y+10*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+13*H/24)
  cpx = x+15*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+13*H/24)
  cpx = x+15*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+12*H/24)
  cpx = x+10*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+12*H/24)
  cpx = x+10*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+13*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+14*H/24)
  cpx = x+9*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+13*H/24)
  cpx = x+9*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+12*H/24)
  cpx = x+9*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+11*H/24)
  cpx = x+15*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+11*H/24)
  cpx = x+16*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+12*H/24)
  cpx = x+16*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+13*H/24)
  cpx = x+16*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+14*H/24)
  cpx = x+10*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+14*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+11*H/24)
  cpx = x+21*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+12*H/24)
  cpx = x+21*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+13*H/24)
  cpx = x+21*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+14*H/24)
  cpx = x+19*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+14*H/24)
  cpx = x+18*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+13*H/24)
  cpx = x+18*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+12*H/24)
  cpx = x+18*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+11*H/24)
  cpx = x+20*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+11*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+19*W/24, y+13*H/24)
  cpx = x+20*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+13*H/24)
  cpx = x+20*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+12*H/24)
  cpx = x+19*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+12*H/24)
  cpx = x+19*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+13*H/24)
  ctx.stroke()
  ctx.font = "800 "+W/24+"pt Verdana"
  //6 control (C)
  ctx.lineWidth *= 0.85
  ctx.beginPath()
  ctx.moveTo(x+11.5*W/24, y+12*H/24)
  ctx.lineTo(x+11.5*W/24, y+13*H/24)
  ctx.stroke()
  ctx.fillText("C", x+11*W/24, y+10.5*H/24)

  //7 result (T)
  if (INVERTED) {
    ctx.beginPath()
    ctx.moveTo(x+13.5*W/24, y+12*H/24)
    ctx.lineTo(x+13.5*W/24, y+13*H/24)
    ctx.stroke()
  }
  ctx.lineWidth /= 0.8
  ctx.fillText("T", x+13*W/24, y+10.5*H/24)

  ctx.font = "700 "+W/36+"pt Verdana"  
  ctx.fillText("15 mins", x+10.5*W/24, y+15.2*H/24)
  ctx.fillText("3 Drops", x+17.5*W/24, y+15.2*H/24)
  ctx.font = "800 italic "+W/24+"pt Verdana"
  ctx.fillText("Rapid", x+3.3*W/24, y+10.5*H/24)
  ctx.font = "800 italic "+W/38+"pt Verdana"
  ctx.fillText("Covid-19", x+3.3*W/24, y+12*H/24)
  ctx.fillText("Test", x+3.3*W/24, y+13.5*H/24)
  //8
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+11*H/24)
  cpx = x+3*W/24
  cpy = y+14*H/24
  ctx.lineTo(x+3*W/24, y+14*H/24)
  ctx.lineTo(x+8.5*W/24, y+14*H/24)
  ctx.lineTo(x+7.5*W/24, y+12.5*H/24)
  ctx.lineTo(x+8.5*W/24, y+11*H/24)
  ctx.lineTo(x+3*W/24, y+11*H/24)
  ctx.stroke()
  //11 3d
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+15.7*H/24)
  cpx = x+4*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+17*H/24)
  cpx = x+22*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+17*H/24)
  cpx = x+23*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+16*H/24)
  cpx = x+23*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+11*H/24)
  cpx = x+23*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21.2*W/24, y+9*H/24)
  ctx.stroke()
}

function end_of_the_worldAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  //1 earth
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+24*H/24)
  cpx = x+3*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+16.3*H/24)
  cpx = x+21*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+24*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+24*H/24)
  cpx = x+5*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+21*H/24)
  cpx = x+3*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+21*H/24)
  cpx = x+3*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+19*H/24)
  cpx = x+7*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+18*H/24)
  cpx = x+8*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+18*H/24)
  cpx = x+8*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+18*H/24)
  cpx = x+10*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+19*H/24)
  cpx = x+12*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+18*H/24)
  cpx = x+14*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+18*H/24)
  cpx = x+16*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+19*H/24)
  cpx = x+14*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+19*H/24)
  cpx = x+11*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+20*H/24)
  cpx = x+13*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+21*H/24)
  cpx = x+14*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+19*H/24)
  cpx = x+15*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+20*H/24)
  cpx = x+17*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+21*H/24)
  cpx = x+18*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+21*H/24)
  cpx = x+16*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+22*H/24)
  cpx = x+17*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+23*H/24)
  cpx = x+15*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+24*H/24)
  ctx.stroke()

  //6 iceland
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+17.4*H/24)
  cpx = x+15.5*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16.*W/24, y+18*H/24)
  cpx = x+18*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+19*H/24)
  cpx = x+19*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20.6*W/24, y+19.8*H/24)
  ctx.stroke()

  //8 polar
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+16.8*H/24)
  cpx = x+11*W/24
  cpy = y+17.4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+16.4*H/24)
  cpx = x+13*W/24
  cpy = y+17.4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+17.3*H/24)
  cpx = x+15*W/24
  cpy = y+17.4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+17.3*H/24)
  cpx = x+14*W/24
  cpy = y+16.8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+16.8*H/24)
  ctx.stroke()

  //1
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+13.2*H/24)
  cpx = x+14*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+6*H/24)
  cpx = x+15*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+9*H/24)
  cpx = x+15*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+3*H/24)
  cpx = x+14*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+8*H/24)
  cpx = x+13*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+2*H/24)
  cpx = x+11*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+8*H/24)
  cpx = x+10*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+3*H/24)
  cpx = x+9*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+9*H/24)
  cpx = x+9*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+6*H/24)
  cpx = x+10*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+13.2*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+13*H/24)
  cpx = x+13*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+12*H/24)
  cpx = x+13*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+11*H/24)
  cpx = x+11*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+12*H/24)
  cpx = x+11*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+13*H/24)
  ctx.stroke()
}

function platformAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  
  //1
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+24*H/24)
  ctx.lineTo(x+11*W/24, y+14*H/24)
  ctx.lineTo(x+13*W/24, y+14*H/24)
  ctx.lineTo(x+13*W/24, y+24*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+14*H/24)
  ctx.lineTo(x+20*W/24, y+14*H/24)
  ctx.lineTo(x+20*W/24, y+13*H/24)
  ctx.lineTo(x+4*W/24, y+13*H/24)
  ctx.lineTo(x+4*W/24, y+14*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+14*H/24)
  ctx.lineTo(x+11*W/24, y+21*H/24)
  ctx.lineTo(x+11*W/24, y+20*H/24)
  ctx.lineTo(x+6*W/24, y+14*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+20*H/24)
  ctx.lineTo(x+18*W/24, y+14*H/24)
  ctx.lineTo(x+19*W/24, y+14*H/24)
  ctx.lineTo(x+13*W/24, y+21*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+13*H/24)
  ctx.lineTo(x+18*W/24, y+5*H/24)
  ctx.lineTo(x+16*W/24, y+5*H/24)
  ctx.lineTo(x+16*W/24, y+4*H/24)
  ctx.lineTo(x+21*W/24, y+4*H/24)
  ctx.lineTo(x+21*W/24, y+5*H/24)
  ctx.lineTo(x+19*W/24, y+5*H/24)
  ctx.lineTo(x+19*W/24, y+13*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+5*H/24)
  ctx.lineTo(x+19*W/24, y+5*H/24)
  ctx.stroke()

  let i = 0, x1, y1
  let n = W/4
  for (; i < n; i++) {
    ctx.lineWidth = i%5+2
    ctx.beginPath()
    x1 = 2 + Math.random() * 20
    y1 = 6 + Math.random() * 7
    ctx.moveTo(x+x1*W/24, y+y1*H/24)
    x1 = 2 + Math.random() * 20
    y1 = 6 + Math.random() * 8
    ctx.lineTo(x+x1*W/24, y+y1*H/24)
    ctx.stroke()
  }
}

function wrack_lineAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //2
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+10*H/24)
  cpx = x+13*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+12*H/24)
  cpx = x+13*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+13*H/24)
  cpx = x+10*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+12*H/24)
  cpx = x+10*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+10*H/24)
  cpx = x+10*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+9*H/24)
  cpx = x+12*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+10*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+9*H/24)
  cpx = x+12*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+12*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+15*H/24)
  cpx = x+9*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+14*H/24)
  cpx = x+10*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+15*H/24)
  cpx = x+9*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+15*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+9*H/24)
  cpx = x+18*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+8*H/24)
  cpx = x+17*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+8*H/24)
  cpx = x+16*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+7*H/24)
  cpx = x+17*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+8*H/24)
  cpx = x+17*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+9*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+8*H/24)
  cpx = x+13*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+7*H/24)
  cpx = x+14*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+8*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+13*H/24)
  cpx = x+9*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+12*H/24)
  cpx = x+8*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+13*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+19*H/24)
  cpx = x+7*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+16*H/24)
  cpx = x+7*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+17*H/24)
  cpx = x+8*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+17*H/24)
  cpx = x+8*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+17*H/24)
  cpx = x+8*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+19*H/24)
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+18*H/24)
  cpx = x+3*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+19*H/24)
  cpx = x+5*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+18*H/24)
  cpx = x+4*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+17*H/24)
  cpx = x+3*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+18*H/24)
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+5*H/24)
  cpx = x+19*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+6*H/24)
  cpx = x+20*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+5*H/24)
  cpx = x+20*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+4*H/24)
  cpx = x+19*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+5*H/24)
  cpx = x+18*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+5*H/24)
  ctx.stroke()
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+3*H/24)
  ctx.lineTo(x+17*W/24, y+3*H/24)
  ctx.lineTo(x+17*W/24, y+2*H/24)
  cpx = x+16*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+3*H/24)
  ctx.stroke()
  //11
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+20*H/24)
  cpx = x+5*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+21*H/24)
  cpx = x+6*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+20*H/24)
  cpx = x+5*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+20*H/24)
  ctx.stroke()

  //12
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+21*H/24)
  cpx = x+3*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+22*H/24)
  cpx = x+2*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+21*H/24)
  cpx = x+2*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+22*H/24)
  cpx = x+2*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+20*H/24)
  cpx = x+3*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+21*H/24)
  ctx.stroke()

  //13
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+15*H/24)
  cpx = x+6*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+13*H/24)
  cpx = x+5*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+15*H/24)
  cpx = x+4*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+13*H/24)
  ctx.stroke()

  //14
  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+10*H/24)
  cpx = x+14*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+11*H/24)
  cpx = x+15*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+11*H/24)
  cpx = x+15*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+10*H/24)
  ctx.stroke()

  //15
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+13*H/24)
  cpx = x+7*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+11*H/24)
  ctx.stroke()

  //16
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+19*H/24)
  cpx = x+1*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+16*H/24)
  cpx = x+2*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+14*H/24)
  ctx.stroke()

  //17
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+9*H/24)
  cpx = x+12*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+7*H/24)
  cpx = x+12*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+6*H/24)
  ctx.stroke()

  //18
  ctx.beginPath()
  ctx.moveTo(x+19*W/24, y+7*H/24)
  cpx = x+20*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+7*H/24)
  cpx = x+22*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+4*H/24)
  ctx.stroke()

  //19
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+7*H/24)
  cpx = x+12*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+5*H/24)
  ctx.stroke()

  //20
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+15*H/24)
  cpx = x+9*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+16*H/24)
  cpx = x+12*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+14*H/24)
  ctx.stroke()

  //21
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+12*H/24)
  cpx = x+16*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+10*H/24)
  cpx = x+19*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+9*H/24)
  ctx.stroke()

  //22
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+11*H/24)
  cpx = x+6*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+11*H/24)
  ctx.stroke()

  //23
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+16*H/24)
  cpx = x+3*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+15*H/24)
  ctx.stroke()

  //24
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+16*H/24)
  cpx = x+9*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+17*H/24)
  ctx.stroke()

  //25
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+10*H/24)
  cpx = x+17*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+11*H/24)
  ctx.stroke()

  //26
  ctx.beginPath()
  ctx.moveTo(x+21*W/24, y+7*H/24)
  cpx = x+22*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+5*H/24)
  ctx.stroke()
  ctx.lineWidth *= 2
  //27
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+9.7*H/24)
  ctx.lineTo(x+9*W/24, y+10*H/24)
  ctx.stroke()

  //28
  ctx.beginPath()
  ctx.moveTo(x+14.2*W/24, y+12*H/24)
  ctx.lineTo(x+15*W/24, y+13.2*H/24)
  ctx.stroke()

  //29
  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+7*H/24)
  ctx.lineTo(x+15*W/24, y+6*H/24)
  ctx.stroke()

  //30
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+4*H/24)
  ctx.lineTo(x+16*W/24, y+5*H/24)
  ctx.stroke()

  //31
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+16.8*H/24)
  ctx.lineTo(x+3*W/24, y+17*H/24)
  ctx.stroke()

  //32
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+21.2*H/24)
  ctx.lineTo(x+5*W/24, y+22*H/24)
  ctx.stroke()

  //33
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+13.5*H/24)
  ctx.lineTo(x+13.5*W/24, y+13*H/24)
  ctx.stroke()

  //34
  ctx.beginPath()
  ctx.moveTo(x+10.3*W/24, y+8*H/24)
  ctx.lineTo(x+9*W/24, y+7.2*H/24)
  ctx.stroke()

  //35
  ctx.beginPath()
  ctx.moveTo(x+3.2*W/24, y+13*H/24)
  ctx.lineTo(x+3*W/24, y+11.7*H/24)
  ctx.stroke()

  //36
  ctx.beginPath()
  ctx.moveTo(x+6.7*W/24, y+14*H/24)
  ctx.lineTo(x+8*W/24, y+14.2*H/24)
  ctx.stroke()

  //37
  ctx.beginPath()
  ctx.moveTo(x+18.7*W/24, y+2*H/24)
  ctx.lineTo(x+20*W/24, y+3.4*H/24)
  ctx.stroke()

  //38
  ctx.beginPath()
  ctx.moveTo(x+20.3*W/24, y+8*H/24)
  ctx.lineTo(x+21*W/24, y+7.6*H/24)
  ctx.stroke()

  //39
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+12*H/24)
  ctx.lineTo(x+6.2*W/24, y+12.3*H/24)
  ctx.stroke()

  //40
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+16.3*H/24)
  ctx.lineTo(x+5.3*W/24, y+17.2*H/24)
  ctx.stroke()

  //41
  ctx.beginPath()
  ctx.moveTo(x+10.7*W/24, y+13*H/24)
  ctx.lineTo(x+11*W/24, y+14*H/24)
  ctx.stroke()
  ctx.lineWidth /= 2
  //1 water
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+22*H/24)
  cpx = x+15*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+10*H/24)
  ctx.stroke()
  ctx.lineWidth /=2

  //2
  ctx.beginPath()
  ctx.moveTo(x+11.5*W/24, y+22*H/24)
  cpx = x+16*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+12*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+22*H/24)
  cpx = x+19*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+17*H/24)
  ctx.stroke()
  ctx.lineWidth *=2

// dots
//42
let r = W/60
ctx.beginPath()
ctx.arc(x+21*W/24, y+3*H/24, r+pet(W/90), 0, Math.PI*2)
ctx.fill()

//43
ctx.beginPath()
ctx.arc(x+17*W/24, y+5*H/24, r+pet(W/90), 0, Math.PI*2)
ctx.fill()

//44
ctx.beginPath()
ctx.arc(x+18*W/24, y+8*H/24, r+pet(W/90), 0, Math.PI*2)
ctx.fill()

//45
ctx.beginPath()
ctx.arc(x+15*W/24, y+9*H/24, r+pet(W/90), 0, Math.PI*2)
ctx.fill()

//46
ctx.beginPath()
ctx.arc(x+15*W/24, y+12*H/24, r+pet(W/90), 0, Math.PI*2)
ctx.fill()

//47
ctx.beginPath()
ctx.arc(x+14*W/24, y+6*H/24, r+pet(W/90), 0, Math.PI*2)
ctx.fill()

//48
ctx.beginPath()
ctx.arc(x+9*W/24, y+9*H/24, r+pet(W/90), 0, Math.PI*2)
ctx.fill()

//49
ctx.beginPath()
ctx.arc(x+11*W/24, y+7*H/24, r+pet(W/90), 0, Math.PI*2)
ctx.fill()

//50
ctx.beginPath()
ctx.arc(x+13*W/24, y+10*H/24, r+pet(W/90), 0, Math.PI*2)
ctx.fill()

//51
ctx.beginPath()
ctx.arc(x+9*W/24, y+18*H/24, r+pet(W/90), 0, Math.PI*2)
ctx.fill()

//52
ctx.beginPath()
ctx.arc(x+11*W/24, y+15*H/24, r+pet(W/90), 0, Math.PI*2)
ctx.fill()

//53
ctx.beginPath()
ctx.arc(x+7*W/24, y+10*H/24, r+pet(W/90), 0, Math.PI*2)
ctx.fill()

//54
ctx.beginPath()
ctx.arc(x+6*W/24, y+13*H/24, r+pet(W/90), 0, Math.PI*2)
ctx.fill()

//55
ctx.beginPath()
ctx.arc(x+7*W/24, y+20*H/24, r+pet(W/90), 0, Math.PI*2)
ctx.fill()

//56
ctx.beginPath()
ctx.arc(x+1*W/24, y+20*H/24, r+pet(W/90), 0, Math.PI*2)
ctx.fill()

//57
ctx.beginPath()
ctx.arc(x+4*W/24, y+16*H/24, r+pet(W/90), 0, Math.PI*2)
ctx.fill()

//58
ctx.beginPath()
ctx.arc(x+4*W/24, y+12*H/24, r+pet(W/90), 0, Math.PI*2)
ctx.fill()

//59
ctx.beginPath()
ctx.arc(x+1*W/24, y+14*H/24, r+pet(W/90), 0, Math.PI*2)
ctx.fill()

//60
ctx.beginPath()
ctx.arc(x+9*W/24, y+8*H/24, r+pet(W/90), 0, Math.PI*2)
ctx.fill()

//61
ctx.beginPath()
ctx.arc(x+15*W/24, y+5*H/24, r+pet(W/90), 0, Math.PI*2)
ctx.fill()

//62
ctx.beginPath()
ctx.arc(x+6*W/24, y+19*H/24, r+pet(W/90), 0, Math.PI*2)
ctx.fill()

//63
ctx.beginPath()
ctx.arc(x+4*W/24, y+20*H/24, r+pet(W/90), 0, Math.PI*2)
ctx.fill()

//64
ctx.beginPath()
ctx.arc(x+18*W/24, y+3*H/24, r+pet(W/90), 0, Math.PI*2)
ctx.fill()

//65
ctx.beginPath()
ctx.arc(x+3*W/24, y+15*H/24, r+pet(W/90), 0, Math.PI*2)
ctx.fill()

//66
ctx.beginPath()
ctx.arc(x+10*W/24, y+13*H/24, r+pet(W/90), 0, Math.PI*2)
ctx.fill()

//67
ctx.beginPath()
ctx.arc(x+19*W/24, y+6*H/24, r+pet(W/90), 0, Math.PI*2)
ctx.fill()

}

function red_flagAt (x,y,W,color,INVERTED) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  let saved = ctx.fillStyle
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+22*H/24)
  cpx = x+4*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+4*H/24)
  cpx = x+5*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+3*H/24)
  cpx = x+5*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+2*H/24)
  cpx = x+3*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+3*H/24)
  cpx = x+3*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+4*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+5*H/24)
  cpx = x+13*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+7*H/24)
  cpx = x+13*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+9*H/24)
  cpx = x+22*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+20*H/24)
  cpx = x+13*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+18*H/24)
  cpx = x+13*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+16*H/24)
  cpx = x+5*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+5*H/24)
  
  if (INVERTED)
    ctx.fillStyle = 'white'
  else
    ctx.fillStyle = 'red'
  ctx.fill()
  ctx.stroke()
  ctx.fillStyle = saved
}

function fortAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+12*H/24)
  ctx.lineTo(x+4*W/24, y+8*H/24)
  ctx.lineTo(x+6*W/24, y+12*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+12*H/24)
  ctx.lineTo(x+20*W/24, y+8*H/24)
  ctx.lineTo(x+22*W/24, y+12*H/24)
  ctx.lineTo(x+22*W/24, y+22*H/24)
  ctx.lineTo(x+14*W/24, y+22*H/24)
  ctx.lineTo(x+14*W/24, y+17*H/24)
  cpx = x+14*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+15*H/24)
  cpx = x+10*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+16*H/24)
  ctx.lineTo(x+10*W/24, y+22*H/24)
  ctx.lineTo(x+2*W/24, y+22*H/24)
  ctx.lineTo(x+2*W/24, y+12*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+12*H/24)
  ctx.lineTo(x+6*W/24, y+11*H/24)
  ctx.lineTo(x+7*W/24, y+11*H/24)
  ctx.lineTo(x+7*W/24, y+12*H/24)
  ctx.lineTo(x+8*W/24, y+12*H/24)
  ctx.lineTo(x+8*W/24, y+11*H/24)
  ctx.lineTo(x+9*W/24, y+11*H/24)
  ctx.lineTo(x+9*W/24, y+12*H/24)
  ctx.lineTo(x+10*W/24, y+12*H/24)
  ctx.lineTo(x+10*W/24, y+11*H/24)
  ctx.lineTo(x+11*W/24, y+11*H/24)
  ctx.lineTo(x+11*W/24, y+12*H/24)
  ctx.lineTo(x+12*W/24, y+12*H/24)
  ctx.lineTo(x+12*W/24, y+11*H/24)
  ctx.lineTo(x+13*W/24, y+11*H/24)
  ctx.lineTo(x+13*W/24, y+12*H/24)
  ctx.lineTo(x+14*W/24, y+12*H/24)
  ctx.lineTo(x+14*W/24, y+11*H/24)
  ctx.lineTo(x+15*W/24, y+11*H/24)
  ctx.lineTo(x+15*W/24, y+12*H/24)
  ctx.lineTo(x+16*W/24, y+12*H/24)
  ctx.lineTo(x+16*W/24, y+11*H/24)
  ctx.lineTo(x+17*W/24, y+11*H/24)
  ctx.lineTo(x+17*W/24, y+12*H/24)
  ctx.lineTo(x+18*W/24, y+12*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+22*H/24)
  ctx.lineTo(x+14*W/24, y+22*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+10*H/24)
  ctx.lineTo(x+5*W/24, y+6*H/24)
  ctx.lineTo(x+4*W/24, y+5*H/24)
  ctx.lineTo(x+4*W/24, y+4*H/24)
  ctx.lineTo(x+5*W/24, y+4*H/24)
  ctx.lineTo(x+5*W/24, y+5*H/24)
  ctx.lineTo(x+6*W/24, y+5*H/24)
  ctx.lineTo(x+6*W/24, y+4*H/24)
  ctx.lineTo(x+7*W/24, y+4*H/24)
  ctx.lineTo(x+7*W/24, y+5*H/24)
  ctx.lineTo(x+8*W/24, y+5*H/24)
  ctx.lineTo(x+8*W/24, y+4*H/24)
  ctx.lineTo(x+9*W/24, y+4*H/24)
  ctx.lineTo(x+9*W/24, y+5*H/24)
  ctx.lineTo(x+8*W/24, y+6*H/24)
  ctx.lineTo(x+8*W/24, y+11*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+12*H/24)
  ctx.lineTo(x+4*W/24, y+13*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+12*H/24)
  ctx.lineTo(x+20*W/24, y+13*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+19*W/24, y+10*H/24)
  ctx.lineTo(x+19*W/24, y+6*H/24)
  ctx.lineTo(x+20*W/24, y+5*H/24)
  ctx.lineTo(x+20*W/24, y+4*H/24)
  ctx.lineTo(x+19*W/24, y+4*H/24)
  ctx.lineTo(x+19*W/24, y+5*H/24)
  ctx.lineTo(x+18*W/24, y+5*H/24)
  ctx.lineTo(x+18*W/24, y+4*H/24)
  ctx.lineTo(x+17*W/24, y+4*H/24)
  ctx.lineTo(x+17*W/24, y+5*H/24)
  ctx.lineTo(x+16*W/24, y+5*H/24)
  ctx.lineTo(x+16*W/24, y+4*H/24)
  ctx.lineTo(x+15*W/24, y+4*H/24)
  ctx.lineTo(x+15*W/24, y+5*H/24)
  ctx.lineTo(x+16*W/24, y+6*H/24)
  ctx.lineTo(x+16*W/24, y+11*H/24)
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+6*H/24)
  ctx.lineTo(x+7*W/24, y+7*H/24)
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+8*H/24)
  ctx.lineTo(x+6*W/24, y+9*H/24)
  ctx.stroke()

  //11
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+6*H/24)
  ctx.lineTo(x+18*W/24, y+7*H/24)
  ctx.stroke()

  //12
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+8*H/24)
  ctx.lineTo(x+17*W/24, y+9*H/24)
  ctx.stroke()

  //13
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+13*H/24)
  ctx.lineTo(x+18*W/24, y+22*H/24)
  ctx.stroke()

  //14
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+13*H/24)
  ctx.lineTo(x+6*W/24, y+22*H/24)
  ctx.stroke()

  //15
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+20*H/24)
  ctx.lineTo(x+11*W/24, y+19*H/24)
  ctx.stroke()

  //16
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+14*H/24)
  ctx.lineTo(x+3*W/24, y+15*H/24)
  ctx.stroke()

  //17
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+16*H/24)
  ctx.lineTo(x+5*W/24, y+17*H/24)
  ctx.stroke()

  //18
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+18*H/24)
  ctx.lineTo(x+4*W/24, y+19*H/24)
  ctx.stroke()

  //19
  ctx.beginPath()
  ctx.moveTo(x+19*W/24, y+14*H/24)
  ctx.lineTo(x+19*W/24, y+15*H/24)
  ctx.stroke()

  //20
  ctx.beginPath()
  ctx.moveTo(x+21*W/24, y+16*H/24)
  ctx.lineTo(x+21*W/24, y+17*H/24)
  ctx.stroke()

  //21
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+18*H/24)
  ctx.lineTo(x+20*W/24, y+19*H/24)
  ctx.stroke()

  //22
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+13*H/24)
  ctx.lineTo(x+16*W/24, y+14*H/24)
  ctx.stroke()

  //23
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+13*H/24)
  ctx.lineTo(x+14*W/24, y+14*H/24)
  ctx.stroke()

  //24
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+13*H/24)
  ctx.lineTo(x+12*W/24, y+14*H/24)
  ctx.stroke()

  //25
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+13*H/24)
  ctx.lineTo(x+10*W/24, y+14*H/24)
  ctx.stroke()

  //26
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+13*H/24)
  ctx.lineTo(x+8*W/24, y+14*H/24)
  ctx.stroke()

  //27
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+9*H/24)
  ctx.lineTo(x+9*W/24, y+7*H/24)
  ctx.lineTo(x+10*W/24, y+9*H/24)
  ctx.lineTo(x+10*W/24, y+10*H/24)
  ctx.lineTo(x+11*W/24, y+10*H/24)
  ctx.lineTo(x+11*W/24, y+9*H/24)
  ctx.lineTo(x+12*W/24, y+9*H/24)
  ctx.lineTo(x+12*W/24, y+10*H/24)
  ctx.lineTo(x+13*W/24, y+10*H/24)
  ctx.lineTo(x+13*W/24, y+9*H/24)
  ctx.lineTo(x+14*W/24, y+9*H/24)
  ctx.lineTo(x+15*W/24, y+7*H/24)
  ctx.lineTo(x+16*W/24, y+9*H/24)
  ctx.stroke()

  //28
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+10*H/24)
  ctx.lineTo(x+15*W/24, y+10*H/24)
  ctx.lineTo(x+15*W/24, y+9*H/24)
  ctx.lineTo(x+16*W/24, y+9*H/24)
  ctx.stroke()

  //29
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+9*H/24)
  ctx.lineTo(x+9*W/24, y+10*H/24)
  ctx.lineTo(x+8*W/24, y+10*H/24)
  ctx.stroke()
  //30
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+9*H/24)
  ctx.lineTo(x+10*W/24, y+9*H/24)
  ctx.stroke()

  //31
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+9*H/24)
  ctx.lineTo(x+14*W/24, y+10*H/24)
  ctx.stroke()

  //32
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+16*H/24)
  ctx.lineTo(x+9*W/24, y+17*H/24)
  ctx.stroke()

  //33
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+18*H/24)
  ctx.lineTo(x+7*W/24, y+19*H/24)
  ctx.stroke()

  //34
  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+16*H/24)
  ctx.lineTo(x+15*W/24, y+17*H/24)
  ctx.stroke()

  //35
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+18*H/24)
  ctx.lineTo(x+17*W/24, y+19*H/24)
  ctx.stroke()
}

function figure_headAt (x,y,W,color, INVERTED) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+20*H/24)
  ctx.lineTo(x+16*W/24, y+20*H/24)
  ctx.lineTo(x+16*W/24, y+18*H/24)
  ctx.lineTo(x+7*W/24, y+18*H/24)
  ctx.lineTo(x+7*W/24, y+20*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+18*H/24)
  cpx = x+19*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+15*H/24)
  cpx = x+19*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+8*H/24)
  cpx = x+19*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+5*H/24)
  cpx = x+8*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+5*H/24)
  cpx = x+7*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+5*H/24)
  cpx = x+4*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+8*H/24)
  cpx = x+4*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+15*H/24)
  cpx = x+4*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+18*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+5*H/24)
  ctx.lineTo(x+15*W/24, y+2*H/24)
  ctx.lineTo(x+8*W/24, y+2*H/24)
  ctx.lineTo(x+8*W/24, y+5*H/24)
  ctx.stroke()

  let r = ctx.lineWidth * 1.8
  //4
  ctx.beginPath()
  ctx.arc(x+9*W/24, y+11*H/24, r, 0, Math.PI*2)
  ctx.fill()

  //5
  ctx.beginPath()
  ctx.arc(x+13*W/24, y+11*H/24, r ,0, Math.PI*2)
  ctx.fill()

  {
  // frown
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+16*H/24)
  cpx = x+12*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+14.5*H/24)
  cpx = x+12*W/24
  cpy = y+13.5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+13.5*H/24)
  cpx = x+10*W/24
  cpy = y+13.3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+15*H/24)
  cpx = x+10*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+16*H/24)
 // ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+15*H/24)
  ctx.lineTo(x+11.9*W/24, y+15*H/24)
  //ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+15*H/24)
  ctx.lineTo(x+11*W/24, y+16*H/24)
 // ctx.stroke()

  //1
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+11*H/24)
  ctx.lineTo(x+7*W/24, y+11*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+10.6*H/24)
  ctx.lineTo(x+8*W/24, y+10*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+10*H/24)
  ctx.lineTo(x+13*W/24, y+10.6*H/24)
  ctx.lineTo(x+13*W/24, y+11.4*H/24)
  ctx.lineTo(x+15*W/24, y+12*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+11*H/24)
  ctx.lineTo(x+15*W/24, y+11*H/24)
  ctx.stroke()

  /5
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+11.4*H/24)
  ctx.lineTo(x+8*W/24, y+12*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+8*H/24)
  ctx.lineTo(x+10*W/24, y+10*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+10*H/24)
  ctx.lineTo(x+14*W/24, y+9*H/24)
  ctx.stroke()
  

   //1
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+14*H/24)
  ctx.lineTo(x+12*W/24, y+14*H/24)
  cpx = x+12.5*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11.5*W/24, y+13*H/24)
  cpx = x+10.5*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+14*H/24)
  ctx.fill()

  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+14*H/24)
  cpx = x+9.5*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10.5*W/24, y+15*H/24)
  cpx = x+11.5*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+14*H/24)
  cpx = x+12.5*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11.5*W/24, y+13*H/24)
  cpx = x+10.5*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+14*H/24)
  ctx.stroke()

  }
  //1 flab lines

  
  ctx.beginPath()
  ctx.moveTo(x+9.5*W/24, y+14*H/24)
  cpx = x+9*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+16*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+13*H/24)
  cpx = x+17*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+16*H/24)
  ctx.stroke()
//3
ctx.beginPath()
ctx.moveTo(x+9*W/24, y+13*H/24)
cpx = x+9*W/24
cpy = y+15*H/24
ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+16*H/24)
//ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+13*H/24)
  cpx = x+6*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+16*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+12.5*W/24, y+14*H/24)
  cpx = x+13*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+12.5*H/24)
  ctx.stroke()
  //4
  ctx.fillStyle = '#e1cb60'
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+8*H/24)
  cpx = x+6*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+6*H/24)
  cpx = x+6*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+8*H/24)
  cpx = x+17*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+8*H/24)
  cpx = x+16*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+6*H/24)
  cpx = x+17*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+8*H/24)
  cpx = x+19*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+5*H/24)
  cpx = x+7*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+5*H/24)
  cpx = x+4*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+8*H/24)
  ctx.fill()
  ctx.stroke()
}

function bag_clipAt (x,y,W,color,INVERTED) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let fs = W/32
  ctx.font = "400 "+fs+"pt AmericanTypewriter,Courier"
  let nums = [0,1,2,3,4,5,6,7,8,9]
  let date = new Date() // today
  if (INVERTED)
    date.setDate(date.getDate()-14)
  else
    date.setDate(date.getDate()+60)
  let plus2weeks, minus2weeks
  let fresh = "BEST BY "+leadingzero(date.getMonth()+1)+"\\"+ leadingzero(date.getDate())
  let letters = fresh.split("")
  let product = ("PRODUCT OF USA").split("")
  let payletters = ("YOU PAY $3.99").split("")
  let alpha = ctx.globalAlpha, i = 0, d = fs/1.6
  ctx.globalAlpha /= 1.2
  for ( ;i < letters.length; i++) {
    ctx.fillText(letters[i], x+3*W/24+(i*d)+pet(1.5), y+18*H/24+pet(1.5))
    ctx.fillText(letters[i], x+3*W/24+(i*d), y+18*H/24)
    ctx.fillText(payletters[i], x+3*W/24+(i*d)+pet(1.5), y+19*H/24+pet(1.5))
    ctx.fillText(payletters[i], x+3*W/24+(i*d), y+19*H/24)
  } 
  i = 0
  for ( ;i < product.length; i++) {
    ctx.fillText(product[i], x+3*W/24+(i*d)+pet(1.5), y+20*H/24+pet(1.5))
    ctx.fillText(product[i], x+3*W/24+(i*d), y+20*H/24)
  }
  fs *= 1.9, d *= 2
  ctx.font = "400 "+fs+"pt AmericanTypewriter,Courier"
  let ID = ['A']
  i = 0
  for ( ;i < 7; i++)
    ID.push(randomPick(nums))
  i = 0
  for ( ;i < 6; i++) {
    ctx.fillText(ID[i], x+3*W/24+(i*d)+pet(1.5), y+16.8*H/24+pet(1.5))
    ctx.fillText(ID[i], x+3*W/24+(i*d), y+16.8*H/24)
  }
  ctx.globalAlpha = alpha
  //1
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+20*H/24)
  ctx.lineTo(x+4*W/24, y+22*H/24)
  ctx.lineTo(x+10*W/24, y+22*H/24)
  ctx.lineTo(x+11*W/24, y+21*H/24)
  ctx.lineTo(x+13*W/24, y+21*H/24)
  ctx.lineTo(x+14*W/24, y+22*H/24)
  ctx.lineTo(x+20*W/24, y+22*H/24)
  ctx.lineTo(x+22*W/24, y+20*H/24)
  ctx.lineTo(x+22*W/24, y+18*H/24)
  ctx.lineTo(x+23*W/24, y+18*H/24)
  cpx = x+23*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+16*H/24)
  ctx.lineTo(x+22*W/24, y+13*H/24)
  cpx = x+23*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+11*H/24)
  ctx.lineTo(x+22*W/24, y+6*H/24)
  cpx = x+23*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+4*H/24)
  ctx.lineTo(x+22*W/24, y+4*H/24)
  ctx.lineTo(x+20*W/24, y+3*H/24)
  ctx.lineTo(x+15*W/24, y+3*H/24)
  ctx.lineTo(x+12*W/24, y+6*H/24)
  ctx.lineTo(x+12*W/24, y+7*H/24)
  cpx = x+16*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+7*H/24)
  cpx = x+17*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+10*H/24)
  cpx = x+16*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+11*H/24)
  cpx = x+17*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+11*H/24)
  cpx = x+17*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+15*H/24)
  cpx = x+13*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+14*H/24)
  cpx = x+11*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+14*H/24)
  cpx = x+11*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+15*H/24)
  cpx = x+7*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+11*H/24)
  cpx = x+8*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+11*H/24)
  cpx = x+8*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+10*H/24)
  cpx = x+7*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+7*H/24)
  cpx = x+8*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+7*H/24)
  ctx.lineTo(x+12*W/24, y+6*H/24)
  ctx.lineTo(x+9*W/24, y+3*H/24)
  ctx.lineTo(x+4*W/24, y+3*H/24)
  ctx.lineTo(x+2*W/24, y+4*H/24)

  cpx = x+1*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+6*H/24)
  ctx.lineTo(x+2*W/24, y+6*H/24)
  ctx.lineTo(x+2*W/24, y+11*H/24)
  cpx = x+3*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+13*H/24)
  ctx.lineTo(x+2*W/24, y+16*H/24)
  /*cpx = x+1*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+18*H/24)
  ctx.lineTo(x+2*W/24, y+18*H/24)
  ctx.lineTo(x+2*W/24, y+20*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()*/
  ctx.moveTo(x+2*W/24, y+16*H/24)
  ctx.lineTo(x+1*W/24, y+16*H/24)
  cpx = x+1*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+18*H/24)
  ctx.lineTo(x+2*W/24, y+20*H/24)
  ctx.stroke()
}

function person_man_woman_camera_tvAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, angle = 0

  // person
  ctx.beginPath()
  p = rotatePoint(x+16*W/32, y+4*H/32 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+17*W/32
  cpy = y+4*H/32
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+17*W/32, y+3*H/32,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+17*W/32
  cpy = y+2*H/32
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+16*W/32, y+2*H/32,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+15*W/32
  cpy = y+2*H/32
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+15*W/32, y+3*H/32,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+15*W/32
  cpy = y+4*H/32
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+16*W/32, y+4*H/32,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()

  //2
  ctx.beginPath()
  p = rotatePoint(x+14*W/32, y+8*H/32 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+14*W/32
  cpy = y+6*H/32
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+14*W/32, y+6*H/32,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+14*W/32
  cpy = y+5*H/32
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+16*W/32, y+5*H/32,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+18*W/32
  cpy = y+5*H/32
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+18*W/32, y+6*H/32,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+18*W/32
  cpy = y+8*H/32
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+18*W/32, y+8*H/32,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+14*W/32
  cpy = y+8*H/32
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+14*W/32, y+8*H/32,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()

  //3
  ctx.beginPath()
  p = rotatePoint(x+14*W/32, y+8*H/32 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+18*W/32, y+8*H/32 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  angle = 72
  // man
  ctx.beginPath()
  p = rotatePoint(x+16*W/32, y+2*H/32 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+17*W/32
  cpy = y+2*H/32
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+17*W/32, y+3*H/32,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+17*W/32
  cpy = y+4*H/32
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+16*W/32, y+4*H/32,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+15*W/32
  cpy = y+4*H/32
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+15*W/32, y+3*H/32,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+15*W/32
  cpy = y+2*H/32
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+16*W/32, y+2*H/32,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()

  //2
  ctx.beginPath()
  p = rotatePoint(x+16*W/32, y+4*H/32 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+16*W/32, y+5*H/32 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+16*W/32, y+7*H/32 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //3
  ctx.beginPath()
  p = rotatePoint(x+14*W/32, y+6*H/32 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+16*W/32, y+5*H/32 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+18*W/32, y+6*H/32 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //4
  ctx.beginPath()
  p = rotatePoint(x+15*W/32, y+9*H/32 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+15*W/32, y+10*H/32 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+14*W/32, y+10*H/32 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //5
  ctx.beginPath()
  p = rotatePoint(x+17*W/32, y+9*H/32 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+17*W/32, y+10*H/32 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+18*W/32, y+10*H/32 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //6
  ctx.beginPath()
  p = rotatePoint(x+15*W/32, y+9*H/32 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+16*W/32, y+7*H/32 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+17*W/32, y+9*H/32 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()
  //1 woman

  angle = 72 *2
  ctx.beginPath()
  p = rotatePoint(x+16*W/32, y+2*H/32 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+17*W/32
  cpy = y+2*H/32
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+17*W/32, y+3*H/32,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+17*W/32
  cpy = y+4*H/32
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+16*W/32, y+4*H/32,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+15*W/32
  cpy = y+4*H/32
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+15*W/32, y+3*H/32,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+15*W/32
  cpy = y+2*H/32
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+16*W/32, y+2*H/32,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()

  //2
  ctx.beginPath()
  p = rotatePoint(x+16*W/32, y+4*H/32 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+16*W/32, y+5*H/32 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+14*W/32, y+9*H/32 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+18*W/32, y+9*H/32 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+16*W/32, y+5*H/32 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+18*W/32, y+6*H/32 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //3
  ctx.beginPath()
  p = rotatePoint(x+16*W/32, y+5*H/32 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+14*W/32, y+6*H/32 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //4
  ctx.beginPath()
  p = rotatePoint(x+15*W/32, y+9*H/32 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+15*W/32, y+10*H/32 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+14*W/32, y+10*H/32 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //5
  ctx.beginPath()
  p = rotatePoint(x+17*W/32, y+9*H/32 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+17*W/32, y+10*H/32 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+18*W/32, y+10*H/32 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()
  //camera
  angle += 72
  ctx.beginPath()
  p = rotatePoint(x+12*W/32, y+8*H/32 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+19*W/32, y+8*H/32 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+19*W/32, y+3*H/32 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+12*W/32, y+3*H/32 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+12*W/32, y+8*H/32 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //2
  ctx.beginPath()
  p = rotatePoint(x+13*W/32, y+3*H/32 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+13*W/32, y+2*H/32 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+15*W/32, y+2*H/32 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+15*W/32, y+2*H/32 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+15*W/32, y+3*H/32 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //3
  ctx.beginPath()
  p = rotatePoint(x+17*W/32, y+3*H/32 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+17*W/32, y+2*H/32 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+18*W/32, y+2*H/32 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+18*W/32, y+3*H/32 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //4
  ctx.beginPath()
  p = rotatePoint(x+18*W/32, y+4*H/32 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+18*W/32, y+5*H/32 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //5
  ctx.beginPath()
  p = rotatePoint(x+15*W/32, y+5*H/32 ,cx,cy,angle)
  ctx.arc(p[0],p[1], 1.9*W/32, 0, Math.PI*2)
  ctx.stroke()

  //6
  ctx.beginPath()
  p = rotatePoint(x+12*W/32, y+7*H/32 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+19*W/32, y+7*H/32 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()
  //tv
  angle += 72
  ctx.beginPath()
  p = rotatePoint(x+12*W/32, y+8*H/32 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+19*W/32, y+8*H/32 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+19*W/32, y+3*H/32 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+12*W/32, y+3*H/32 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+12*W/32, y+8*H/32 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //2
  ctx.beginPath()
  p = rotatePoint(x+12*W/32, y+1*H/32 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+15*W/32, y+3*H/32 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+18*W/32, y+1*H/32 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //3
  ctx.beginPath()
  p = rotatePoint(x+14*W/32, y+7*H/32 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+13*W/32
  cpy = y+7*H/32
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+13*W/32, y+6*H/32,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+13*W/32
  cpy = y+5*H/32
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+13*W/32, y+5*H/32,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+13*W/32
  cpy = y+4*H/32
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+14*W/32, y+4*H/32,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+17*W/32
  cpy = y+4*H/32
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+17*W/32, y+4*H/32,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+18*W/32
  cpy = y+4*H/32
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+18*W/32, y+5*H/32,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+18*W/32
  cpy = y+6*H/32
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+18*W/32, y+6*H/32,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+18*W/32
  cpy = y+7*H/32
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+17*W/32, y+7*H/32,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+14*W/32
  cpy = y+7*H/32
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+14*W/32, y+7*H/32,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()
}

function chiralityAt (x,y,W,color,INVERTED) {
  if (INVERTED)
    chiralityRAt(x,y,W,color)
  else
    chiralityLAt(x,y,W,color)
}

function chiralityRAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+12*H/24)
  cpx = x+6*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+12*H/24)
  cpx = x+13*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+8*H/24)
  cpx = x+16*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+5*H/24)
  cpx = x+14*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+4*H/24)
  cpx = x+9*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+6*H/24)
  cpx = x+4*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+11*H/24)
  cpx = x+3*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+12*H/24)
  cpx = x+1*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+14*H/24)
  cpx = x+4*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+14*H/24)
  cpx = x+10*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+17*H/24)
  cpx = x+14*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+19*H/24)
  cpx = x+18*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+18*H/24)
  cpx = x+19*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+12*H/24)
  cpx = x+20*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+9*H/24)
  cpx = x+18*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+9*H/24)
  cpx = x+18*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+5*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+18*H/24)
  ctx.lineTo(x+20*W/24, y+16*H/24)
  ctx.lineTo(x+21*W/24, y+10*H/24)
  ctx.lineTo(x+20*W/24, y+10*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+20.3*W/24, y+15*H/24)
  ctx.lineTo(x+21*W/24, y+15*H/24)
  ctx.lineTo(x+22*W/24, y+11*H/24)
  ctx.lineTo(x+21*W/24, y+11*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+21.3*W/24, y+14*H/24)
  ctx.lineTo(x+22*W/24, y+14*H/24)
  ctx.lineTo(x+23*W/24, y+12*H/24)
  ctx.lineTo(x+22*W/24, y+12*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+23*W/24, y+13*H/24)
  ctx.stroke()
}

function chiralityLAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+8*H/24)
  cpx = x+8*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+5*H/24)
  cpx = x+10*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+4*H/24)
  cpx = x+15*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+6*H/24)
  cpx = x+20*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+11*H/24)
  cpx = x+21*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+12*H/24)
  cpx = x+23*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+14*H/24)
  cpx = x+20*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+14*H/24)
  cpx = x+14*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+17*H/24)
  cpx = x+10*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+19*H/24)
  cpx = x+6*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+18*H/24)
  cpx = x+5*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+12*H/24)
  cpx = x+4*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+9*H/24)
  cpx = x+6*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+9*H/24)
  cpx = x+6*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+5*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+8*H/24)
  cpx = x+11*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+12*H/24)
  cpx = x+18*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+12*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+18*H/24)
  ctx.lineTo(x+4*W/24, y+16*H/24)
  ctx.lineTo(x+3*W/24, y+10*H/24)
  ctx.lineTo(x+4*W/24, y+10*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+3.7*W/24, y+15*H/24)
  ctx.lineTo(x+3*W/24, y+15*H/24)
  ctx.lineTo(x+2*W/24, y+11*H/24)
  ctx.lineTo(x+3*W/24, y+11*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+2.7*W/24, y+14*H/24)
  ctx.lineTo(x+2*W/24, y+14*H/24)
  ctx.lineTo(x+1*W/24, y+12*H/24)
  ctx.lineTo(x+2*W/24, y+12*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+13*H/24)
  ctx.stroke()
}

function spiralAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+19*H/24)
  cpx = x+1*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+6*H/24)
  cpx = x+22*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+14*H/24)
  cpx = x+22*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+19*H/24)
  cpx = x+14*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+16*H/24)
  cpx = x+14*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+14*H/24)
  cpx = x+17*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+15*H/24)
  ctx.stroke()
  ctx.lineWidth /= 2
  //2
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+19*H/24)
  ctx.lineTo(x+22*W/24, y+19*H/24)
  ctx.lineTo(x+22*W/24, y+6*H/24)
  ctx.lineTo(x+1*W/24, y+6*H/24)
  ctx.lineTo(x+1*W/24, y+19*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+6*H/24)
  ctx.lineTo(x+14*W/24, y+19*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+14*H/24)
  ctx.lineTo(x+22*W/24, y+14*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+14*H/24)
  ctx.lineTo(x+17*W/24, y+19*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+16*H/24)
  ctx.lineTo(x+17*W/24, y+16*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+16*H/24)
  ctx.lineTo(x+16*W/24, y+14*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+15*H/24)
  ctx.lineTo(x+17*W/24, y+15*H/24)
  ctx.stroke()
}

function radiate (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let cx = x + W/2, cy = y+H/2
  let i = 0, N = 121, x2, y2
  let dx = W/24, dy = W/24
  for (; i < N; i++) {
    x2 = x+Math.floor(Math.random() * W)
    y2 = y+Math.floor(Math.random() * W)
    ctx.beginPath()
    ctx.moveTo(x2, y2)
    dx = W/24, dy = W/24
    if (x2 < cx)
      dx *= -1
    if (y2 < cy)
      dy *= -1
    /*
    x2 = cx + r * Math.cos(a)
    y2 = cy + r * Math.sin(a) asin

    (y2-cy)/r = Math.sin(a)
    Math.asin((y2-cy)/r) = a
    */
    ctx.lineTo(x2+dx, y2+dy)
    ctx.stroke()
  }
}

function stone_ofAt (x,y,W,color,invert) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  if (invert) {
    ctx.globalAlpha /= 3
    ctx.beginPath()
    ctx.moveTo(x+12*W/24, y+5*H/24)
    cpx = x+14*W/24
    cpy = y+5*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+4*H/24)
    cpx = x+14*W/24
    cpy = y+3*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+3*H/24)
    cpx = x+10*W/24
    cpy = y+3*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+4*H/24)
    cpx = x+10*W/24
    cpy = y+5*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+5*H/24)
    ctx.fill()
    ctx.globalAlpha *= 3
  }
  //1 head
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+10*H/24)
  cpx = x+5*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+1*H/24)
  cpx = x+19*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+10*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+19*H/24)
  cpx = x+18*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+10*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+19*H/24)
  cpx = x+6*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+10*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+18.5*H/24)
  cpx = x+8*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+23*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+18.5*H/24)
  cpx = x+16*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+23*H/24)
  ctx.stroke()

  if (!invert) {
  //1 stone
    ctx.beginPath()
    ctx.moveTo(x+11*W/24, y+2*H/24)
    ctx.lineTo(x+10*W/24, y+4*H/24)
    ctx.lineTo(x+12*W/24, y+4*H/24)
    ctx.lineTo(x+13*W/24, y+2*H/24)
    ctx.lineTo(x+11*W/24, y+2*H/24)
    ctx.stroke()

    //2
    ctx.beginPath()
    ctx.moveTo(x+10*W/24, y+4*H/24)
    ctx.lineTo(x+11*W/24, y+6*H/24)
    ctx.lineTo(x+13*W/24, y+6*H/24)
    ctx.lineTo(x+12*W/24, y+4*H/24)
    ctx.stroke()

    //3
    ctx.beginPath()
    ctx.moveTo(x+13*W/24, y+2*H/24)
    ctx.lineTo(x+14*W/24, y+4*H/24)
    ctx.lineTo(x+13*W/24, y+6*H/24)
    ctx.stroke()
  } else {
  //3 trapanation
    ctx.beginPath()
    ctx.moveTo(x+10*W/24, y+4*H/24)
    cpx = x+10*W/24
    cpy = y+3*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+3*H/24)
    cpx = x+10*W/24
    cpy = y+2*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+2*H/24)
    cpx = x+14*W/24
    cpy = y+2*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+3*H/24)
    cpx = x+14*W/24
    cpy = y+4*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+4*H/24)
    cpx = x+14*W/24
    cpy = y+5*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+5*H/24)
    cpx = x+10*W/24
    cpy = y+5*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+4*H/24)
    cpx = x+10*W/24
    cpy = y+3*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+3*H/24)
    cpx = x+14*W/24
    cpy = y+3*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+4*H/24)
    ctx.stroke()
  }
}

function paint_rollerAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+6*H/24)
  cpx = x+4*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+4*H/24)
  cpx = x+4*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+2*H/24)
  cpx = x+2*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+4*H/24)
  cpx = x+2*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+6*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+2*H/24)
  cpx = x+21*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+4*H/24)
  cpx = x+21*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+6*H/24)
  cpx = x+3*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+6*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+2*H/24)
  cpx = x+20*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+2*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+21*W/24, y+4*H/24)
  cpx = x+22*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+5*H/24)
  cpx = x+22*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+7*H/24)
  cpx = x+22*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+8*H/24)
  cpx = x+12*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+11*H/24)
  cpx = x+11*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+12*H/24)
  cpx = x+11*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+14*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+14*H/24)
  ctx.lineTo(x+12*W/24, y+14*H/24)
  ctx.lineTo(x+12*W/24, y+22*H/24)
  ctx.lineTo(x+10*W/24, y+22*H/24)
  ctx.lineTo(x+10*W/24, y+14*H/24)
  ctx.stroke()
}

function standing_on_a_soapboxAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+14*H/24)
  ctx.lineTo(x+1*W/24, y+22*H/24)
  ctx.lineTo(x+21*W/24, y+22*H/24)
  ctx.lineTo(x+21*W/24, y+14*H/24)
  ctx.lineTo(x+23*W/24, y+10*H/24)
  ctx.lineTo(x+23*W/24, y+18*H/24)
  ctx.lineTo(x+21*W/24, y+22*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+14*H/24)
  ctx.lineTo(x+21*W/24, y+14*H/24)
  cpx = x+15*W/24
  cpy = y+19*H/24
  ctx.stroke()

  //3 s
  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+20*H/24)
  cpx = x+16*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+20*H/24)
  cpx = x+17*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+19*H/24)
  cpx = x+17*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+18*H/24)
  cpx = x+15*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+17*H/24)
  cpx = x+15*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+16*H/24)
  cpx = x+17*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+16*H/24)
  ctx.stroke()

  //4 o
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+17*H/24)
  cpx = x+14*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+19*H/24)
  cpx = x+14*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+20*H/24)
  cpx = x+12*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+19*H/24)
  cpx = x+12*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+17*H/24)
  cpx = x+12*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+16*H/24)
  cpx = x+14*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+17*H/24)
  ctx.stroke()

  //5 A
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+16*H/24)
  ctx.lineTo(x+10*W/24, y+20*H/24)
  ctx.lineTo(x+9*W/24, y+16*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+9.5*W/24, y+18*H/24)
  ctx.lineTo(x+10.5*W/24, y+18*H/24)
  ctx.stroke()

  //7 P
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+16*H/24)
  ctx.lineTo(x+8*W/24, y+20*H/24)
  cpx = x+7*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+20*H/24)
  cpx = x+6*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+19*H/24)
  cpx = x+6*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+18*H/24)
  cpx = x+8*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+18*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+2*H/24)
  cpx = x+13*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+12*H/24)
  cpx = x+21*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+12*H/24)
  cpx = x+21*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+9*H/24)
  cpx = x+16*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+7*H/24)
  cpx = x+17*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+2*H/24)
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+2*H/24)
  cpx = x+12*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+12*H/24)
  cpx = x+4*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+12*H/24)
  cpx = x+4*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+9*H/24)
  cpx = x+9*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+7*H/24)
  cpx = x+8*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+2*H/24)
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+23*W/24, y+10*H/24)
  ctx.lineTo(x+21*W/24, y+10*H/24)
  ctx.stroke()

  //11
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+14*H/24)
  ctx.lineTo(x+4*W/24, y+11*H/24)
  ctx.stroke()
   //12
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+10*H/24)
  ctx.lineTo(x+12*W/24, y+10*H/24)
  ctx.stroke()
}

function endless_shrimpAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
   //1
   ctx.beginPath()
   ctx.moveTo(x+22*W/24, y+14*H/24)
   cpx = x+22*W/24
   cpy = y+22*H/24
   ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+22*H/24)
   cpx = x+3*W/24
   cpy = y+21*H/24
   ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+12*H/24)
   cpx = x+2*W/24
   cpy = y+2*H/24
   ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+2*H/24)
   ctx.stroke()
 
   //2
   ctx.beginPath()
   ctx.moveTo(x+22*W/24, y+14*H/24)
   cpx = x+22*W/24
   cpy = y+5*H/24
   ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+4*H/24)
   cpx = x+19*W/24
   cpy = y+4*H/24
   ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+6*H/24)
   cpx = x+18*W/24
   cpy = y+10*H/24
   ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+14*H/24)
   ctx.stroke()
 
   //3
   ctx.beginPath()
   ctx.moveTo(x+12*W/24, y+2*H/24)
   cpx = x+17*W/24
   cpy = y+2*H/24
   ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+6*H/24)
   cpx = x+16*W/24
   cpy = y+10*H/24
   ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+11*H/24)
   cpx = x+10*W/24
   cpy = y+11*H/24
   ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+10*H/24)
   cpx = x+10*W/24
   cpy = y+12*H/24
   ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+13*H/24)
   cpx = x+10*W/24
   cpy = y+14*H/24
   ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+15*H/24)
   cpx = x+10*W/24
   cpy = y+14*H/24
   ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+15*H/24)
   cpx = x+13*W/24
   cpy = y+16*H/24
   ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+17*H/24)
   cpx = x+13*W/24
   cpy = y+16*H/24
   ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+16*H/24)
   cpx = x+16*W/24
   cpy = y+16*H/24
   ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+17*H/24)
   cpx = x+16*W/24
   cpy = y+16*H/24
   ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+16*H/24)
   cpx = x+19*W/24
   cpy = y+17*H/24
   ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+16*H/24)
   cpx = x+19*W/24
   cpy = y+15*H/24
   ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+14*H/24)
   ctx.stroke()
 
   //4
   ctx.beginPath()
   ctx.moveTo(x+20*W/24, y+5*H/24)
   cpx = x+22*W/24
   cpy = y+9*H/24
   ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+13*H/24)
   ctx.stroke()
 
   //5
   ctx.beginPath()
   ctx.moveTo(x+19*W/24, y+6*H/24)
   cpx = x+20*W/24
   cpy = y+8*H/24
   ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+12*H/24)
   //ctx.stroke()

    //11
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+12*H/24)
  cpx = x+19*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+6*H/24)
  ctx.stroke()
  //6
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+9*H/24)
  ctx.lineTo(x+7*W/24, y+8*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+16*H/24)
  ctx.lineTo(x+7*W/24, y+17*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+18*H/24)
  ctx.lineTo(x+13*W/24, y+19*H/24)
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+19*W/24, y+17*H/24)
  ctx.lineTo(x+20*W/24, y+18*H/24)
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+18*H/24)
  ctx.lineTo(x+16.2*W/24, y+19*H/24)
  ctx.stroke()
}

function tracesAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  let saved = ctx.lineWidth
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.lineWidth *= 2
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+2*H/24)
  ctx.lineTo(x+16*W/24, y+9*H/24)
  ctx.lineTo(x+20.6*W/24, y+9*H/24)
  ctx.lineTo(x+20.6*W/24, y+2*H/24)
  ctx.lineTo(x+16*W/24, y+2*H/24)
  ctx.fill()
  //2
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+8.5*H/24)
  cpx = x+18*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18.5*W/24, y+14*H/24)
  cpx = x+18*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+8*H/24)
  cpx = x+2*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+8*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+8.5*H/24)
  cpx = x+18*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+20*H/24)
  cpx = x+17*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+8*H/24)
  cpx = x+2*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+8*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+8.5*H/24)
  cpx = x+12*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+16*H/24)
  cpx = x+12*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+12*H/24)
  cpx = x+2*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+12*H/24)
  cpx = x+16*W/24
  cpy = y+9*H/24
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+8.5*H/24)
  cpx = x+13*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+22*H/24)
  cpx = x+10*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+12*H/24)
  cpx = x+2*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+12*H/24)
  ctx.stroke()

  ctx.lineCap = "round"
  ctx.lineWidth = saved
  //6
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+3.8*H/24)
  ctx.lineTo(x+2.5*W/24, y+4*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+5*H/24)
  ctx.lineTo(x+4.5*W/24, y+5*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+4*H/24)
  ctx.lineTo(x+6.5*W/24, y+4*H/24)
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+5*H/24)
  ctx.lineTo(x+8.5*W/24, y+5*H/24)
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+4*H/24)
  ctx.lineTo(x+10.5*W/24, y+4*H/24)
  ctx.stroke()

  //11
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+5*H/24)
  ctx.lineTo(x+12.5*W/24, y+5*H/24)
  ctx.stroke()

  //12
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+4*H/24)
  ctx.lineTo(x+14.5*W/24, y+4.2*H/24)
  ctx.stroke()
}

function topologyAt (x,y,W,color, INVERTED) {
  if (INVERTED)
    topology2At(x,y,W*1.25,color)
  else
    topology1At(x,y,W*1.24,color)
}

function topology2At  (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "round"
  ctx.lineJoin = "bevel"
  x -= 2*W/24
  y -= 2*W/24
  //1
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+20*H/24)
  cpx = x+20*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+12*H/24)
  cpx = x+20*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+4*H/24)
  cpx = x+4*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+13*H/24)
  cpx = x+5*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+20*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+15*H/24)
  cpx = x+12*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+14*H/24)
  cpx = x+13*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+12*H/24)
  cpx = x+13*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+10*H/24)
  cpx = x+12*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+10*H/24)
  cpx = x+11*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+12*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+12*H/24)
  cpx = x+10*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+14*H/24)
  cpx = x+11*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+15*H/24)
  ctx.stroke()
 //7 sprinkles
 ctx.beginPath()
 ctx.moveTo(x+9*W/24, y+17*H/24)
 ctx.lineTo(x+10*W/24, y+16*H/24)
 ctx.stroke()

 //8
 ctx.beginPath()
 ctx.moveTo(x+11*W/24, y+17*H/24)
 ctx.lineTo(x+12*W/24, y+18*H/24)
 ctx.stroke()

 //9
 ctx.beginPath()
 ctx.moveTo(x+12*W/24, y+16*H/24)
 ctx.lineTo(x+13*W/24, y+16*H/24)
 ctx.stroke()

 //10
 ctx.beginPath()
 ctx.moveTo(x+14*W/24, y+17*H/24)
 ctx.lineTo(x+14*W/24, y+18*H/24)
 ctx.stroke()

 //11
 ctx.beginPath()
 ctx.moveTo(x+15*W/24, y+16*H/24)
 ctx.lineTo(x+16*W/24, y+17*H/24)
 ctx.stroke()

 //12
 ctx.beginPath()
 ctx.moveTo(x+16*W/24, y+15*H/24)
 ctx.lineTo(x+16*W/24, y+14*H/24)
 ctx.stroke()

 //13
 ctx.beginPath()
 ctx.moveTo(x+17*W/24, y+15*H/24)
 ctx.lineTo(x+18*W/24, y+14*H/24)
 ctx.stroke()

 //14
 ctx.beginPath()
 ctx.moveTo(x+8*W/24, y+16*H/24)
 ctx.lineTo(x+7*W/24, y+16*H/24)
 ctx.stroke()

 //15
 ctx.beginPath()
 ctx.moveTo(x+8*W/24, y+15*H/24)
 ctx.lineTo(x+9*W/24, y+14*H/24)
 ctx.stroke()

 //16
 ctx.beginPath()
 ctx.moveTo(x+7*W/24, y+13*H/24)
 ctx.lineTo(x+6*W/24, y+12*H/24)
 ctx.stroke()

 //17
 ctx.beginPath()
 ctx.moveTo(x+17*W/24, y+13*H/24)
 ctx.lineTo(x+16*W/24, y+12*H/24)
 ctx.stroke()

 //18
 ctx.beginPath()
 ctx.moveTo(x+18*W/24, y+12*H/24)
 ctx.lineTo(x+19*W/24, y+12*H/24)
 ctx.stroke()

 //19
 ctx.beginPath()
 ctx.moveTo(x+17*W/24, y+11*H/24)
 ctx.lineTo(x+17*W/24, y+10*H/24)
 ctx.stroke()

 //20
 ctx.beginPath()
 ctx.moveTo(x+15*W/24, y+10*H/24)
 ctx.lineTo(x+16*W/24, y+9*H/24)
 ctx.stroke()

 //21
 ctx.beginPath()
 ctx.moveTo(x+6*W/24, y+14*H/24)
 ctx.lineTo(x+6*W/24, y+15*H/24)
 ctx.stroke()

 //22
 ctx.beginPath()
 ctx.moveTo(x+8*W/24, y+12*H/24)
 ctx.lineTo(x+8*W/24, y+11*H/24)
 ctx.stroke()

 //23
 ctx.beginPath()
 ctx.moveTo(x+6*W/24, y+10*H/24)
 ctx.lineTo(x+7*W/24, y+9*H/24)
 ctx.stroke()

 //24
 ctx.beginPath()
 ctx.moveTo(x+7*W/24, y+7*H/24)
 ctx.lineTo(x+8*W/24, y+8*H/24)
 ctx.stroke()

 //25
 ctx.beginPath()
 ctx.moveTo(x+9*W/24, y+9*H/24)
 ctx.lineTo(x+10*W/24, y+8*H/24)
 ctx.stroke()

 //26
 ctx.beginPath()
 ctx.moveTo(x+12*W/24, y+5*H/24)
 ctx.lineTo(x+13*W/24, y+6*H/24)
 ctx.stroke()

 //27
 ctx.beginPath()
 ctx.moveTo(x+18*W/24, y+9*H/24)
 ctx.lineTo(x+17*W/24, y+8*H/24)
 ctx.stroke()

 //28
 ctx.beginPath()
 ctx.moveTo(x+15*W/24, y+7*H/24)
 ctx.lineTo(x+16*W/24, y+6*H/24)
 ctx.stroke()

 //29
 ctx.beginPath()
 ctx.moveTo(x+13*W/24, y+7*H/24)
 ctx.lineTo(x+14*W/24, y+7*H/24)
 ctx.stroke()

 //30
 ctx.beginPath()
 ctx.moveTo(x+13*W/24, y+9*H/24)
 ctx.lineTo(x+12*W/24, y+8*H/24)
 ctx.stroke()

 //31
 ctx.beginPath()
 ctx.moveTo(x+11*W/24, y+5*H/24)
 ctx.lineTo(x+11*W/24, y+6*H/24)
 ctx.stroke()

 //32
 ctx.beginPath()
 ctx.moveTo(x+9*W/24, y+7*H/24)
 ctx.lineTo(x+10*W/24, y+7*H/24)
 ctx.stroke()

}

function topology1At (x,y,W,color) { // don
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  x -= 2*W/24
  y -= 2*W/24
  //1
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+14*H/24)
  cpx = x+20*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+11*H/24)
  cpx = x+20*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+8*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+9*H/24)
  cpx = x+19*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+11*H/24)
  cpx = x+19*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+13*H/24)
  cpx = x+16*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+9*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+14*H/24)
  cpx = x+16*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+18*H/24)
  cpx = x+6*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+14*H/24)
  cpx = x+6*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+8*H/24)
  cpx = x+6*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+4*H/24)
  cpx = x+16*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+8*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+7*H/24)
  cpx = x+7*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+9*H/24)
  cpx = x+15*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+7*H/24)
  ctx.stroke()
}

function soldAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+16*H/24)
  cpx = x+14*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+16*H/24)
  cpx = x+14*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+1*H/24)
  ctx.stroke()

  ctx.globalAlpha /= 3
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+14*H/24)
  ctx.lineTo(x+12*W/24, y+14*H/24)
  ctx.lineTo(x+12*W/24, y+1*H/24)
  ctx.lineTo(x+1*W/24, y+1*H/24)
  ctx.fill()
  ctx.globalAlpha *= 3
  //2
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+1*H/24)
  ctx.lineTo(x+12*W/24, y+14*H/24)
  ctx.lineTo(x+14*W/24, y+16*H/24)
  ctx.lineTo(x+12*W/24, y+14*H/24)
  ctx.lineTo(x+1*W/24, y+14*H/24)
  ctx.stroke()

  ctx.fillStyle = "#ff0000"
  //3
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+16*H/24)
  cpx = x+19*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+15*H/24)
  cpx = x+19*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+14*H/24)
  cpx = x+17*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+15*H/24)
  cpx = x+17*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+16*H/24)
  ctx.fill()
}

function geminiAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, angle =  45 + pet(20)
//1
ctx.beginPath()
p = rotatePoint(x+17*W/24, y+21*H/24 ,cx,cy,angle)
ctx.moveTo(p[0],p[1])
cpx = x+22*W/24
cpy = y+21*H/24
cp = rotatePoint(cpx,cpy,cx,cy,angle)
p = rotatePoint(x+22*W/24, y+12*H/24,cx,cy,angle)
ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
cpx = x+22*W/24
cpy = y+3*H/24
cp = rotatePoint(cpx,cpy,cx,cy,angle)
p = rotatePoint(x+17*W/24, y+3*H/24,cx,cy,angle)
ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
cpx = x+12*W/24
cpy = y+3*H/24
cp = rotatePoint(cpx,cpy,cx,cy,angle)
p = rotatePoint(x+12*W/24, y+12*H/24,cx,cy,angle)
ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
cpx = x+12*W/24
cpy = y+21*H/24
cp = rotatePoint(cpx,cpy,cx,cy,angle)
p = rotatePoint(x+17*W/24, y+21*H/24,cx,cy,angle)
ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
ctx.stroke()

//2
ctx.beginPath()
p = rotatePoint(x+16*W/24, y+21*H/24 ,cx,cy,angle)
ctx.moveTo(p[0],p[1])
p = rotatePoint(x+4*W/24, y+14*H/24 ,cx,cy,angle)
ctx.lineTo(p[0],p[1])
ctx.stroke()

//3
ctx.beginPath()
p = rotatePoint(x+16*W/24, y+3*H/24 ,cx,cy,angle)
ctx.moveTo(p[0],p[1])
p = rotatePoint(x+4*W/24, y+8*H/24 ,cx,cy,angle)
ctx.lineTo(p[0],p[1])
ctx.stroke()

//4
ctx.beginPath()
p = rotatePoint(x+2*W/24, y+14*H/24 ,cx,cy,angle)
ctx.moveTo(p[0],p[1])
p = rotatePoint(x+4*W/24, y+14*H/24 ,cx,cy,angle)
ctx.lineTo(p[0],p[1])
ctx.stroke()

//5
ctx.beginPath()
p = rotatePoint(x+2*W/24, y+8*H/24 ,cx,cy,angle)
ctx.moveTo(p[0],p[1])
p = rotatePoint(x+4*W/24, y+8*H/24 ,cx,cy,angle)
ctx.lineTo(p[0],p[1])
ctx.stroke()

//6
ctx.beginPath()
p = rotatePoint(x+2*W/24, y+14*H/24 ,cx,cy,angle)
ctx.moveTo(p[0],p[1])
cpx = x+1*W/24
cpy = y+11*H/24
cp = rotatePoint(cpx,cpy,cx,cy,angle)
p = rotatePoint(x+2*W/24, y+8*H/24,cx,cy,angle)
ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
ctx.stroke()

//7
ctx.beginPath()
p = rotatePoint(x+4*W/24, y+14*H/24 ,cx,cy,angle)
ctx.moveTo(p[0],p[1])
cpx = x+3*W/24
cpy = y+11*H/24
cp = rotatePoint(cpx,cpy,cx,cy,angle)
p = rotatePoint(x+4*W/24, y+8*H/24,cx,cy,angle)
ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
ctx.stroke()

ctx.lineWidth /= 2
//8
ctx.beginPath()
p = rotatePoint(x+17*W/24, y+6*H/24 ,cx,cy,angle)
ctx.moveTo(p[0],p[1])
cpx = x+17*W/24
cpy = y+2*H/24
cp = rotatePoint(cpx,cpy,cx,cy,angle)
p = rotatePoint(x+3*W/24, y+2*H/24,cx,cy,angle)
ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
ctx.stroke()

//9
ctx.beginPath()
p = rotatePoint(x+17*W/24, y+18*H/24 ,cx,cy,angle)
ctx.moveTo(p[0],p[1])
cpx = x+17*W/24
cpy = y+22*H/24
cp = rotatePoint(cpx,cpy,cx,cy,angle)
p = rotatePoint(x+3*W/24, y+22*H/24,cx,cy,angle)
ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
ctx.stroke()

//10
ctx.beginPath()
p = rotatePoint(x+21*W/24, y+9*H/24 ,cx,cy,angle)
ctx.moveTo(p[0],p[1])
cpx = x+23*W/24
cpy = y+9*H/24
cp = rotatePoint(cpx,cpy,cx,cy,angle)
p = rotatePoint(x+23*W/24, y+7*H/24,cx,cy,angle)
ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
cpx = x+23*W/24
cpy = y+6*H/24
cp = rotatePoint(cpx,cpy,cx,cy,angle)
p = rotatePoint(x+22*W/24, y+6*H/24,cx,cy,angle)
ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
ctx.stroke()

//11
ctx.beginPath()
p = rotatePoint(x+21*W/24, y+15*H/24 ,cx,cy,angle)
ctx.moveTo(p[0],p[1])
cpx = x+23*W/24
cpy = y+15*H/24
cp = rotatePoint(cpx,cpy,cx,cy,angle)
p = rotatePoint(x+23*W/24, y+17*H/24,cx,cy,angle)
ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
cpx = x+23*W/24
cpy = y+18*H/24
cp = rotatePoint(cpx,cpy,cx,cy,angle)
p = rotatePoint(x+22*W/24, y+18*H/24,cx,cy,angle)
ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
ctx.stroke()

//12
ctx.beginPath()
p = rotatePoint(x+20*W/24, y+21*H/24 ,cx,cy,angle)
ctx.moveTo(p[0],p[1])
cpx = x+21*W/24
cpy = y+21*H/24
cp = rotatePoint(cpx,cpy,cx,cy,angle)
p = rotatePoint(x+21*W/24, y+20*H/24,cx,cy,angle)
ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
cpx = x+21*W/24
cpy = y+18*H/24
cp = rotatePoint(cpx,cpy,cx,cy,angle)
p = rotatePoint(x+19*W/24, y+18*H/24,cx,cy,angle)
ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
ctx.stroke()

//13
ctx.beginPath()
p = rotatePoint(x+20*W/24, y+3*H/24 ,cx,cy,angle)
ctx.moveTo(p[0],p[1])
cpx = x+21*W/24
cpy = y+3*H/24
cp = rotatePoint(cpx,cpy,cx,cy,angle)
p = rotatePoint(x+21*W/24, y+4*H/24,cx,cy,angle)
ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
cpx = x+21*W/24
cpy = y+6*H/24
cp = rotatePoint(cpx,cpy,cx,cy,angle)
p = rotatePoint(x+19*W/24, y+6*H/24,cx,cy,angle)
ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
ctx.stroke()

//14
ctx.beginPath()
p = rotatePoint(x+15*W/24, y+8*H/24 ,cx,cy,angle)
ctx.moveTo(p[0],p[1])
cpx = x+15*W/24
cpy = y+6*H/24
cp = rotatePoint(cpx,cpy,cx,cy,angle)
p = rotatePoint(x+3*W/24, y+6*H/24,cx,cy,angle)
ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
ctx.stroke()

//15
ctx.beginPath()
p = rotatePoint(x+15*W/24, y+16*H/24 ,cx,cy,angle)
ctx.moveTo(p[0],p[1])
cpx = x+15*W/24
cpy = y+18*H/24
cp = rotatePoint(cpx,cpy,cx,cy,angle)
p = rotatePoint(x+3*W/24, y+18*H/24,cx,cy,angle)
ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
ctx.stroke()

//16
ctx.beginPath()
p = rotatePoint(x+15*W/24, y+11*H/24 ,cx,cy,angle)
ctx.moveTo(p[0],p[1])
cpx = x+15*W/24
cpy = y+10*H/24
cp = rotatePoint(cpx,cpy,cx,cy,angle)
p = rotatePoint(x+1*W/24, y+10*H/24,cx,cy,angle)
ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
ctx.stroke()

//17
ctx.beginPath()
p = rotatePoint(x+15*W/24, y+13*H/24 ,cx,cy,angle)
ctx.moveTo(p[0],p[1])
cpx = x+15*W/24
cpy = y+14*H/24
cp = rotatePoint(cpx,cpy,cx,cy,angle)
p = rotatePoint(x+1*W/24, y+14*H/24,cx,cy,angle)
ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
ctx.stroke()

//18
ctx.beginPath()
p = rotatePoint(x+18*W/24, y+4*H/24 ,cx,cy,angle)
ctx.moveTo(p[0],p[1])
cpx = x+18*W/24
cpy = y+1*H/24
cp = rotatePoint(cpx,cpy,cx,cy,angle)
p = rotatePoint(x+12*W/24, y+1*H/24,cx,cy,angle)
ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
cpx = x+18*W/24
cpy = y+20*H/24
cp = rotatePoint(cpx,cpy,cx,cy,angle)
ctx.stroke()

//19
ctx.beginPath()
p = rotatePoint(x+18*W/24, y+20*H/24 ,cx,cy,angle)
ctx.moveTo(p[0],p[1])
cpx = x+18*W/24
cpy = y+23*H/24
cp = rotatePoint(cpx,cpy,cx,cy,angle)
p = rotatePoint(x+12*W/24, y+23*H/24,cx,cy,angle)
ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
ctx.stroke()

//20
ctx.beginPath()
p = rotatePoint(x+21*W/24, y+11*H/24 ,cx,cy,angle)
ctx.moveTo(p[0],p[1])
cpx = x+23*W/24
cpy = y+11*H/24
cp = rotatePoint(cpx,cpy,cx,cy,angle)
p = rotatePoint(x+23*W/24, y+10*H/24,cx,cy,angle)
ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
ctx.stroke()

//21
ctx.beginPath()
p = rotatePoint(x+21*W/24, y+13*H/24 ,cx,cy,angle)
ctx.moveTo(p[0],p[1])
cpx = x+23*W/24
cpy = y+13*H/24
cp = rotatePoint(cpx,cpy,cx,cy,angle)
p = rotatePoint(x+23*W/24, y+14*H/24,cx,cy,angle)
ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
ctx.stroke()

//22
ctx.beginPath()
p = rotatePoint(x+19*W/24, y+3*H/24 ,cx,cy,angle)
ctx.moveTo(p[0],p[1])
p = rotatePoint(x+20*W/24, y+3*H/24 ,cx,cy,angle)
ctx.lineTo(p[0],p[1])
ctx.stroke()

//23
ctx.beginPath()
p = rotatePoint(x+19*W/24, y+21*H/24 ,cx,cy,angle)
ctx.moveTo(p[0],p[1])
p = rotatePoint(x+20*W/24, y+21*H/24 ,cx,cy,angle)
ctx.lineTo(p[0],p[1])
ctx.stroke()
}

function  P_versus_NPAt (x,y,W,color,inverted) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, w = 1
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let fs = W/4
    ctx.font = "400 "+fs+"pt AmericanTypewriter,Courier"
  w = ctx.measureText("P=NP").width
  if (!inverted) {
    ctx.fillText("P=NP",x+(W/2-w/2), y+H/2+fs/2)
  } else {
    w = ctx.fillText("P\u2260NP",x+(W/2-w/2), y+H/2+fs/2)
  }
}

function  foundationalismAt (x,y,W,color,inverted) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, w = 1
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let fs = W/4
    if (!inverted) {
    ctx.font = "400 "+fs+"pt AmericanTypewriter,Courier"
    w = ctx.measureText("1+1=2").width
    ctx.fillText("1+1=2",x+(W/2-w/2), y+H/2+fs/2)
    //def = "The above proposition is occasionally useful."
  } else {
    fs *= 0.4
    ctx.font = "900 "+fs+"pt AmericanTypewriter,Courier"
    w = ctx.measureText("G\u27f7\uffe2Prov(\u231cG\u231d)").width
    ctx.fillText("G\u27f7\uffe2Prov(\u231cG\u231d)",x+(W/2-w/2), y+H/2+fs/2)
  }
}

function no_longer_supportedAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+22*H/24)
  cpx = x+18*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+20*H/24)
  cpx = x+18*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+4*H/24)
  cpx = x+18*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+2*H/24)
  cpx = x+8*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+2*H/24)
  cpx = x+6*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+4*H/24)
  cpx = x+6*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+20*H/24)
  cpx = x+6*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+22*H/24)
  cpx = x+16*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+22*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+5*H/24)
  ctx.lineTo(x+9*W/24, y+10*H/24)
  ctx.lineTo(x+15*W/24, y+10*H/24)
  ctx.lineTo(x+15*W/24, y+5*H/24)
  ctx.lineTo(x+9*W/24, y+5*H/24)
 // ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+4*H/24)
  ctx.lineTo(x+8*W/24, y+11*H/24)
  ctx.lineTo(x+16*W/24, y+11*H/24)
  ctx.lineTo(x+16*W/24, y+4*H/24)
  ctx.lineTo(x+8*W/24, y+4*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+2*H/24)
  ctx.lineTo(x+14*W/24, y+1.5*H/24)
  ctx.lineTo(x+16*W/24, y+1.5*H/24)
  ctx.lineTo(x+16*W/24, y+2*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+4*H/24)
  ctx.lineTo(x+5.5*W/24, y+4*H/24)
  ctx.lineTo(x+5.5*W/24, y+6*H/24)
  ctx.lineTo(x+6*W/24, y+6*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+7*H/24)
  ctx.lineTo(x+5.5*W/24, y+7*H/24)
  ctx.lineTo(x+5.5*W/24, y+9*H/24)
  ctx.lineTo(x+6*W/24, y+9*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.arc(x+12*W/24, y+3.0*H/24, W/96,0,Math.PI*2)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+10.5*W/24, y+15*H/24)
  ctx.lineTo(x+9*W/24, y+13.5*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+10.5*W/24, y+18*H/24)
  ctx.lineTo(x+9*W/24, y+19.5*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+13.5*W/24, y+18*H/24)
  ctx.lineTo(x+15*W/24, y+19.5*H/24)
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+13.4*W/24, y+15*H/24)
  ctx.lineTo(x+15*W/24, y+13.5*H/24)
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.arc(x+12*W/24, y+16.5*H/24, 2*W/24,0,Math.PI*2)
  ctx.stroke()

  //11
  ctx.beginPath()
  ctx.arc(x+12*W/24, y+16.5*H/24, 3*1.41*W/24,0,Math.PI*2)
  ctx.stroke()

  //12
  ctx.fillStyle = color
  ctx.font = "400 "+(3*W/24)+"pt AmericanTypewriter,Courier"
  ctx.beginPath()
  ctx.fillText("\u266A",x+10.7*W/24, y+8.7*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+11.65*W/24, y+16*H/24)
  ctx.lineTo(x+12.65*W/24, y+16.5*H/24)
  ctx.lineTo(x+11.65*W/24, y+17*H/24)
  ctx.fill()
}

function punch_cardAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+24*W/24, y+23*H/24)
  ctx.lineTo(x+1*W/24, y+23*H/24)
  ctx.lineTo(x+1*W/24, y+4*H/24)
  ctx.lineTo(x+4*W/24, y+1*H/24)
  ctx.lineTo(x+24*W/24, y+1*H/24)
  ctx.stroke()
  let cols =(new Array(16))
  let fs = W/24
  ctx.font = "400 "+(W/24)+"pt AmericanTypewriter,Courier"
  //2
  let i = 0, j = 0, dy = 0, dx = 0
  for (; i < 16; i++) {
    cols[i] = i
  }
  cols = shuffle(cols)
  i = 0
  for (; i < 10; i++) {
    j = 0, dx = 0
    for (; j < 16; j++) {
      ctx.fillText(i,x+3*W/24 + dx, y+6*H/24+dy)
      if (j === cols[i]) {
        ctx.fillRect(x+3*W/24 + dx, y+6*H/24 +dy-W/27, W/36, W/28)
      }
      dx += W/18
    }
    dy += W/32
    if (i < 9)
    ctx.fillText("--------------------------",x+3*W/24, y+6*H/24 +dy)
    dy += W/28
  }
  ctx.font = "800 "+(W/48)+"pt AmericanTypewriter,Courier"
  j = 0, dx = 0, dy -= W/48
  for (; j < 16; j++) {
    ctx.fillText(j,x+3*W/24 + dx, y+6*H/24+dy)
    dx += W/18
  }
  ctx.font = "100 "+(W/40)+"pt AmericanTypewriter,Courier"
  dy += W/27
  ctx.fillText(randomWord(true) +" "+randomNumber()+randomNumber()+randomNumber(),x+8*W/24, y+6*H/24+dy)
}

function dormerAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+19*H/24)
  ctx.lineTo(x+22*W/24, y+19*H/24)
  ctx.lineTo(x+21*W/24, y+20*H/24)
  ctx.lineTo(x+2*W/24, y+20*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+16*H/24)
  ctx.lineTo(x+15*W/24, y+16*H/24)
  ctx.lineTo(x+15*W/24, y+11*H/24)
  ctx.lineTo(x+12*W/24, y+8*H/24)
  ctx.lineTo(x+9*W/24, y+11*H/24)
  ctx.lineTo(x+9*W/24, y+16*H/24)
  ctx.lineTo(x+6*W/24, y+13*H/24)
  ctx.lineTo(x+6*W/24, y+10*H/24)
  ctx.lineTo(x+8*W/24, y+8*H/24)
  ctx.lineTo(x+12*W/24, y+8*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+10*H/24)
  ctx.lineTo(x+9*W/24, y+11*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+12*H/24)
  ctx.lineTo(x+22*W/24, y+19*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+8*H/24)
  ctx.lineTo(x+5*W/24, y+2*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+15*H/24)
  ctx.lineTo(x+14*W/24, y+15*H/24)
  ctx.lineTo(x+14*W/24, y+11*H/24)
  ctx.lineTo(x+10*W/24, y+11*H/24)
  ctx.lineTo(x+10*W/24, y+15*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+13*H/24)
  ctx.lineTo(x+14*W/24, y+13*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+13*H/24)
  ctx.lineTo(x+12*W/24, y+13.5*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.arc(x+12*W/24, y+13.75*H/24, W/96, 0, Math.PI*2)
  ctx.stroke()
  //9
  ctx.beginPath()
  ctx.moveTo(x+19*W/24, y+20*H/24)
  ctx.lineTo(x+19*W/24, y+21*H/24)
  cpx = x+19*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+22*H/24)
  cpx = x+17*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17.3*W/24, y+23*H/24)
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+23*H/24)
  cpx = x+16*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+22*H/24)
  cpx = x+16*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+21*H/24)
  cpx = x+18*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17.75*W/24, y+20*H/24)
  ctx.stroke()
  //13
  ctx.beginPath()
  ctx.moveTo(x+21*W/24, y+20*H/24)
  ctx.lineTo(x+21*W/24, y+23*H/24)
  ctx.stroke()
}

function unknown_birdAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  ctx.setLineDash([W/32])
  //1
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+19*H/24)
  ctx.lineTo(x+4*W/24, y+22*H/24)
  ctx.lineTo(x+10*W/24, y+16*H/24)
  cpx = x+14*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+16*H/24)
  cpx = x+22*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+7*H/24)
  cpx = x+23*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+6*H/24)
  cpx = x+21*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+5*H/24)
  cpx = x+21*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+2*H/24)
  cpx = x+13*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+14*H/24)
  cpx = x+1*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+19*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+7*H/24)
  cpx = x+19*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+6*H/24)
  cpx = x+19*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+5*H/24)
  cpx = x+17*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+6*H/24)
  cpx = x+17*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+7*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+17.4*H/24)
  cpx = x+15*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15.5*W/24, y+21*H/24)
  ctx.lineTo(x+15*W/24, y+18*H/24)
  ctx.lineTo(x+17*W/24, y+21*H/24)
  ctx.lineTo(x+17*W/24, y+17*H/24)
  //ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+18*H/24)
  ctx.lineTo(x+15*W/24, y+21*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+18*H/24)
  ctx.lineTo(x+17*W/24, y+21*H/24)
  ctx.stroke()
  ctx.setLineDash([])
}

function invisible_handAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "round"
  ctx.lineJoin = "bevel"
  ctx.setLineDash([W/32])
 
  //6
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+22*H/24)
  cpx = x+6*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+19*H/24)
  cpx = x+4*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+9*H/24)
  cpx = x+3*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+8*H/24)
  cpx = x+6*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+10*H/24)
  cpx = x+8*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+14*H/24)
  cpx = x+8*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+5*H/24)
  cpx = x+8*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+3*H/24)
  cpx = x+10*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+3*H/24)
  cpx = x+11*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+4*H/24)
  cpx = x+11*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+10*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+4*H/24)
  cpx = x+11*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+3*H/24)
  cpx = x+11*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+2*H/24)
  cpx = x+13*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+2*H/24)
  cpx = x+14*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+3*H/24)
  cpx = x+14*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+10*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+4*H/24)
  cpx = x+14*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+3*H/24)
  cpx = x+16*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+3*H/24)
  cpx = x+17*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+4*H/24)
  cpx = x+17*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+11*H/24)
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+6*H/24)
  cpx = x+17*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+5*H/24)
  cpx = x+19*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+5*H/24)
  cpx = x+20*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+6*H/24)
  cpx = x+20*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+18*H/24)
  cpx = x+20*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+22*H/24)
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+11*H/24)
  cpx = x+14*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+14*H/24)
  cpx = x+19*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+14*H/24)
  ctx.stroke()

  //11
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+12*H/24)
  cpx = x+13*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+20*H/24)
  ctx.stroke()

  //12
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+12*H/24)
  cpx = x+14*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+20*H/24)
  ctx.stroke()

 ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+12*H/24)
  cpx = x+9*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+11*H/24)
  cpx = x+13*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+11*H/24)
  cpx = x+16*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+12*H/24)
  cpx = x+18*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+12*H/24)
  ctx.stroke()

  ctx.setLineDash([])
}

function skates_purseAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+16*H/24)
  cpx = x+12*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+16*H/24)
  cpx = x+18*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+17*H/24)
  cpx = x+22*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+15*H/24)
  cpx = x+22*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+14*H/24)
  cpx = x+20*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+15*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+16*H/24)
  cpx = x+6*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+17*H/24)
  cpx = x+2*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+15*H/24)
  cpx = x+2*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+14*H/24)
  cpx = x+4*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+15*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+7*H/24)
  cpx = x+4*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+6*H/24)
  cpx = x+2*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+7*H/24)
  cpx = x+2*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+9*H/24)
  cpx = x+6*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+8*H/24)
  cpx = x+12*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+8*H/24)
  cpx = x+18*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+9*H/24)
  cpx = x+22*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+7*H/24)
  cpx = x+22*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+6*H/24)
  cpx = x+20*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+7*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+9*H/24)
  cpx = x+18*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+10*H/24)
  cpx = x+22*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+7*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+9*H/24)
  cpx = x+6*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+10*H/24)
  cpx = x+2*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+7*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+9*H/24)
  cpx = x+7*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+15*H/24)
  cpx = x+6*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+16*H/24)
  cpx = x+2*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+15*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+9*H/24)
  cpx = x+17*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+15*H/24)
  cpx = x+18*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+16*H/24)
  cpx = x+22*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+15*H/24)
  ctx.stroke()
}

function eclipseAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy//, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let points = 17
  let incs = (Math.PI* 1)/(points*2)
  let r1 = 7*W/24, r2 = 12*W/24
  let a = 0, cx = x+W/2, cy = y-6*W/24
  let i = 1, maxp = points*2 +1
  ctx.beginPath()
  let x2 = cx + r2 * Math.cos(a),
      y2 = cy + r1 * Math.sin(a)
  ctx.moveTo(x2,y2)
  for (; i < maxp; i++) {
    let r = (i % 2 === 0)? r2: r1;
    a += incs
    x2 = cx + r * Math.cos(a)
    y2 = cy + r * Math.sin(a)
    ctx.lineTo(x2,y2)
  }
  //ctx.closePath()
  ctx.stroke()
  //1
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+24*H/24)
  cpx = x+6*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+18*H/24)
  cpx = x+18*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+24*H/24)
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+6*H/24)
  cpx = x+4*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+0*H/24)
  //ctx.stroke()
  //3
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+6*H/24)
  cpx = x+20*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+0*H/24)
  //ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+22*H/24)
  cpx = x+13*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+21*H/24)
  cpx = x+13*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+20*H/24)
  cpx = x+11*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+21*H/24)
  cpx = x+11*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+22*H/24)
  ctx.fill() 
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+12*H/24)
  cpx = x+14*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+10*H/24)
  cpx = x+14*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+8*H/24)
  cpx = x+10*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+10*H/24)
  cpx = x+10*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+12*H/24)
  ctx.stroke()
  //6
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+10*H/24)
  cpx = x+10*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+12*H/24)
  cpx = x+14*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+10*H/24)
  ctx.lineTo(x+10*W/24, y+10*H/24)
  ctx.fill()
  //7
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+10*H/24)
  ctx.lineTo(x+11*W/24, y+21*H/24)
  ctx.stroke()
  //8
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+21*H/24)
  ctx.lineTo(x+14*W/24, y+10*H/24)
  ctx.stroke()
}

function tidesAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  //2 fish
  ctx.lineWidth /= 2
  ctx.beginPath()
  ctx.moveTo(x+22*W/48, y+28*H/48)
  cpx = x+23*W/48
  cpy = y+27*H/48
  ctx.quadraticCurveTo(cpx, cpy, x+24*W/48, y+27*H/48)
  cpx = x+25*W/48
  cpy = y+27*H/48
  ctx.quadraticCurveTo(cpx, cpy, x+26*W/48, y+28*H/48)
  cpx = x+26*W/48
  cpy = y+29*H/48
  ctx.quadraticCurveTo(cpx, cpy, x+27*W/48, y+29*H/48)
  cpx = x+27*W/48
  cpy = y+27*H/48
  ctx.quadraticCurveTo(cpx, cpy, x+27*W/48, y+27*H/48)
  cpx = x+26*W/48
  cpy = y+27*H/48
  ctx.quadraticCurveTo(cpx, cpy, x+26*W/48, y+28*H/48)
  cpx = x+25*W/48
  cpy = y+29*H/48
  ctx.quadraticCurveTo(cpx, cpy, x+24*W/48, y+29*H/48)
  cpx = x+23*W/48
  cpy = y+29*H/48
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/48, y+28*H/48)
  ctx.stroke()
  // eye
  ctx.beginPath()
  ctx.arc(x+23*W/48, y+28*H/48, W/120, 0, Math.PI*2)
  ctx.stroke()
  ctx.lineWidth *= 2
  //1
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+24*H/24)
  cpx = x+3*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+12*H/24)
  cpx = x+21*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+24*H/24)
  ctx.stroke()
    
  //3
  ctx.beginPath()
  ctx.arc(x+12*W/24, y+24*H/24, 8.2*W/24, Math.PI, Math.PI*2)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.arc(x+12*W/24, y+2.5*H/24, 2*W/24, 0, Math.PI*2)
  ctx.stroke()

}

function shopping_cartAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+6*H/24)
  cpx = x+2*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+6*H/24)
  cpx = x+3*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+15*H/24)
  cpx = x+20*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+16*H/24)
  cpx = x+20*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+6*H/24)
  cpx = x+20*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+5*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+16*H/24)
  cpx = x+20*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+19*H/24)
  cpx = x+5*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+19*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+20*H/24)
  cpx = x+7*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+21*H/24)
  cpx = x+7*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+22*H/24)
  cpx = x+5*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+21*H/24)
  cpx = x+5*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+20*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+20*H/24)
  cpx = x+19*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+21*H/24)
  cpx = x+19*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+22*H/24)
  cpx = x+17*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+21*H/24)
  cpx = x+17*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+20*H/24)
  ctx.stroke()

  //5 horizontals
  ctx.beginPath()
  ctx.moveTo(x+2.2*W/24, y+8*H/24)
  ctx.lineTo(x+20*W/24, y+8*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+2.4*W/24, y+10*H/24)
  ctx.lineTo(x+20*W/24, y+10*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+2.8*W/24, y+12*H/24)
  ctx.lineTo(x+20*W/24, y+12*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+2.9*W/24, y+14*H/24)
  ctx.lineTo(x+20*W/24, y+14*H/24)
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+6*H/24)
  ctx.lineTo(x+4*W/24, y+15*H/24)
  ctx.stroke()

  //10 verticals
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+6*H/24)
  ctx.lineTo(x+6*W/24, y+15*H/24)
  ctx.stroke()

  //11
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+6*H/24)
  ctx.lineTo(x+8*W/24, y+15.2*H/24)
  ctx.stroke()

  //12
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+6*H/24)
  ctx.lineTo(x+10*W/24, y+15.4*H/24)
  ctx.stroke()

  //13
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+6*H/24)
  ctx.lineTo(x+12*W/24, y+15.6*H/24)
  ctx.stroke()

  //14
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+6*H/24)
  ctx.lineTo(x+14*W/24, y+15.7*H/24)
  ctx.stroke()

  //15
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+6*H/24)
  ctx.lineTo(x+16*W/24, y+15.8*H/24)
  ctx.stroke()

  //16
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+6*H/24)
  ctx.lineTo(x+18*W/24, y+15.9*H/24)
  ctx.stroke()
}

function tickAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
 //1
 ctx.beginPath()
 ctx.moveTo(x+24*W/48, y+23*H/48)
 cpx = x+25*W/48
 cpy = y+24*H/48
 ctx.quadraticCurveTo(cpx, cpy, x+25*W/48, y+26*H/48)
 cpx = x+25*W/48
 cpy = y+27*H/48
 ctx.quadraticCurveTo(cpx, cpy, x+24*W/48, y+27*H/48)
 cpx = x+23*W/48
 cpy = y+27*H/48
 ctx.quadraticCurveTo(cpx, cpy, x+23*W/48, y+26*H/48)
 cpx = x+23*W/48
 cpy = y+24*H/48
 ctx.quadraticCurveTo(cpx, cpy, x+24*W/48, y+23*H/48)
 ctx.stroke()

 //2
 ctx.beginPath()
 ctx.moveTo(x+25*W/48, y+24*H/48)
 cpx = x+27*W/48
 cpy = y+24*H/48
 ctx.quadraticCurveTo(cpx, cpy, x+28*W/48, y+22*H/48)
 ctx.stroke()

 //3
 ctx.beginPath()
 ctx.moveTo(x+23*W/48, y+24*H/48)
 cpx = x+21*W/48
 cpy = y+24*H/48
 ctx.quadraticCurveTo(cpx, cpy, x+20*W/48, y+22*H/48)
 ctx.stroke()

 //4
 ctx.beginPath()
 ctx.moveTo(x+25*W/48, y+26*H/48)
 cpx = x+26*W/48
 cpy = y+26*H/48
 ctx.quadraticCurveTo(cpx, cpy, x+26*W/48, y+29*H/48)
 ctx.stroke()

 //5
 ctx.beginPath()
 ctx.moveTo(x+23*W/48, y+26*H/48)
 cpx = x+22*W/48
 cpy = y+26*H/48
 ctx.quadraticCurveTo(cpx, cpy, x+22*W/48, y+29*H/48)
 ctx.stroke()

 //6
 ctx.beginPath()
 ctx.moveTo(x+25*W/48, y+24.5*H/48)
 cpx = x+29*W/48
 cpy = y+24*H/48
 ctx.quadraticCurveTo(cpx, cpy, x+29*W/48, y+23*H/48)
 ctx.stroke()

 //7
 ctx.beginPath()
 ctx.moveTo(x+23*W/48, y+24.5*H/48)
 cpx = x+19*W/48
 cpy = y+24*H/48
 ctx.quadraticCurveTo(cpx, cpy, x+19*W/48, y+23*H/48)
 ctx.stroke()

 //8
 ctx.beginPath()
 ctx.moveTo(x+23*W/48, y+25*H/48)
 cpx = x+21*W/48
 cpy = y+25*H/48
 ctx.quadraticCurveTo(cpx, cpy, x+19*W/48, y+27*H/48)
 ctx.stroke()

 //9
 ctx.beginPath()
 ctx.moveTo(x+25*W/48, y+25*H/48)
 cpx = x+27*W/48
 cpy = y+25*H/48
 ctx.quadraticCurveTo(cpx, cpy, x+29*W/48, y+27*H/48)
 ctx.stroke()
}

function incomingAt (x,y,W,color,INVERTED) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, angle = -135
  if (INVERTED)
    angle = 0
  //1
  ctx.beginPath()
  p = rotatePoint(x+16*W/24, y+14*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+16*W/24
  cpy = y+15*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+17*W/24, y+15*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+21*W/24
  cpy = y+15*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+21*W/24, y+15*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+22*W/24
  cpy = y+15*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+22*W/24, y+14*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+22*W/24
  cpy = y+11*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+22*W/24, y+11*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+22*W/24
  cpy = y+9*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+19*W/24, y+9*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+5*W/24
  cpy = y+9*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+5*W/24, y+9*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+2*W/24
  cpy = y+9*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+2*W/24, y+11*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+2*W/24
  cpy = y+14*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+2*W/24, y+14*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+2*W/24
  cpy = y+15*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+3*W/24, y+15*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+7*W/24
  cpy = y+15*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+7*W/24, y+15*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+8*W/24
  cpy = y+15*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+8*W/24, y+14*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+8*W/24
  cpy = y+13*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+8*W/24, y+13*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+8*W/24
  cpy = y+12*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+9*W/24, y+12*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+15*W/24
  cpy = y+12*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+15*W/24, y+12*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+16*W/24
  cpy = y+12*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+16*W/24, y+13*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+16*W/24
  cpy = y+14*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+16*W/24, y+14*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()
  //2
  ctx.beginPath()
  p = rotatePoint(x+12*W/24, y+12*H/24 ,cx,cy,angle)
  ctx.arc(p[0],p[1], 11*W/24, 0, Math.PI*2)
  ctx.stroke()
}

function password () {
  let result = [], i = 0, str = ""
  const found6 = words.match(/\b\w{6}\b/gm)
  const found5 = words.match(/\b\w{5}\b/gm)
  const found4 = words.match(/\b\w{4}\b/gm)
  str += randomPick(found6)
  str += randomPick(found5)
  str += randomPick(found4)
  str += randomPick(found4)
  str += randomPick(found5)
  str += randomPick(found6)
  result = str.split('')
  return result
}

function passwordAt (x,y,W,color,INVERTED) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.fillStyle = color
  //1
  ctx.beginPath()
  ctx.moveTo(x+5.5*W/24, y+20*H/24)
  ctx.lineTo(x+19*W/24, y+20*H/24)
  ctx.stroke()
  let pw = password()
  if (INVERTED) {
    pw = (new Array(30)).fill("\u2022")
  }
  let fs = W/12
  ctx.font = "800 "+(W/12)+"pt AmericanTypewriter,Courier"
  let x2 = 5.5*W/24, y2 = H/3
  let i = 0
  for (; i < pw.length; i++) {
    if (i > 0 && i % 6 === 0) {
      y2 += fs*1.4
      x2 = 5.5*W/24
    }
    ctx.fillText(pw[i], x+x2, y+y2)
    x2 += fs*1.2
  }
  ctx.font = "100 "+(W/14)+"pt AmericanTypewriter,Courier"
  ctx.fillText("|", x+x2-fs*0.6, y+y2-fs*0.15)

 // let x2 = 5.5*W/24, y2 = H/3

  ctx.font = "100 "+(W/22)+"pt AmericanTypewriter,Courier"
  ctx.fillText("Show password", x+8*W/24, y+21.7*H/24)
  let saved = ctx.lineWidth
  ctx.lineWidth /= 2
  //1 show
  ctx.beginPath()
  ctx.moveTo(x+5.5*W/24, y+20.5*H/24)
  ctx.lineTo(x+5.5*W/24, y+22*H/24)
  ctx.lineTo(x+7*W/24, y+22*H/24)
  ctx.lineTo(x+7*W/24, y+20.5*H/24)
  ctx.lineTo(x+5.5*W/24, y+20.5*H/24)
  ctx.stroke()
  
  if (!INVERTED) {
    //2
    ctx.beginPath()
    ctx.moveTo(x+5.5*W/24, y+20.5*H/24)
    ctx.lineTo(x+7*W/24, y+22*H/24)
    ctx.stroke()
  
    //3
    ctx.beginPath()
    ctx.moveTo(x+5.5*W/24, y+22*H/24)
    ctx.lineTo(x+7*W/24, y+20.5*H/24)
    ctx.stroke()
  }
  ctx.lineWidth = saved
}


function gliderAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.fillStyle = color
  //1
  ctx.beginPath()
  ctx.moveTo(x+11*W/16, y+13*H/16)
  ctx.rect(x+11*W/16, y+13*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //2
  ctx.beginPath()
  ctx.moveTo(x+12*W/16, y+13*H/16)
  ctx.rect(x+12*W/16, y+13*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //3
  ctx.beginPath()
  ctx.moveTo(x+13*W/16, y+13*H/16)
  ctx.rect(x+13*W/16, y+13*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //4
  ctx.beginPath()
  ctx.moveTo(x+13*W/16, y+12*H/16)
  ctx.rect(x+13*W/16, y+12*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //5
  ctx.beginPath()
  ctx.moveTo(x+12*W/16, y+11*H/16)
  ctx.rect(x+12*W/16, y+11*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //6
  ctx.beginPath()
  ctx.moveTo(x+8*W/16, y+7*H/16)
  ctx.rect(x+8*W/16, y+7*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //7
  ctx.beginPath()
  ctx.moveTo(x+8*W/16, y+8*H/16)
  ctx.rect(x+8*W/16, y+8*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //8
  ctx.beginPath()
  ctx.moveTo(x+7*W/16, y+8*H/16)
  ctx.rect(x+7*W/16, y+8*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //9
  ctx.beginPath()
  ctx.moveTo(x+7*W/16, y+9*H/16)
  ctx.rect(x+7*W/16, y+9*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //10
  ctx.beginPath()
  ctx.moveTo(x+6*W/16, y+7*H/16)
  ctx.rect(x+6*W/16, y+7*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //11
  ctx.beginPath()
  ctx.moveTo(x+4*W/16, y+2*H/16)
  ctx.rect(x+4*W/16, y+2*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //12
  ctx.beginPath()
  ctx.moveTo(x+4*W/16, y+3*H/16)
  ctx.rect(x+4*W/16, y+3*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //13
  ctx.beginPath()
  ctx.moveTo(x+4*W/16, y+4*H/16)
  ctx.rect(x+4*W/16, y+4*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //14
  ctx.beginPath()
  ctx.moveTo(x+3*W/16, y+4*H/16)
  ctx.rect(x+3*W/16, y+4*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //15
  ctx.beginPath()
  ctx.moveTo(x+2*W/16, y+3*H/16)
  ctx.rect(x+2*W/16, y+3*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
}

function calendarAt(x,y,W,color,I) {
  calAt (x,y,W,color,I)
}

function day_dayAt (x,y,W,color, INVERTED) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W
  let days = ["DAY"]
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.fillStyle = color
  let date = (new Date()).getDate()
  let day = days[0], d = 0
  //1
  ctx.beginPath()
  ctx.moveTo(x+10*W/32+pet(d), y+12*H/32+pet(d))
  ctx.lineTo(x+22*W/32+pet(d), y+12*H/32+pet(d))
  ctx.lineTo(x+22*W/32+pet(d), y+24*H/32+pet(d))
  ctx.lineTo(x+10*W/32+pet(d), y+24*H/32+pet(d))
  ctx.lineTo(x+10*W/32+pet(d), y+12*H/32+pet(d))
  ctx.lineTo(x+8*W/32+pet(d), y+12*H/32+pet(d))
  ctx.lineTo(x+8*W/32+pet(d), y+26*H/32+pet(d))
  ctx.lineTo(x+24*W/32+pet(d), y+26*H/32+pet(d))
  ctx.lineTo(x+24*W/32+pet(d), y+10*H/32+pet(d))
  ctx.lineTo(x+8*W/32+pet(d), y+10*H/32+pet(d))
  ctx.lineTo(x+8*W/32+pet(d), y+12*H/32+pet(d))
  ctx.fill()

  //2
  ctx.beginPath()
  ctx.moveTo(x+6*W/32+pet(d), y+6*H/32+pet(d))
  ctx.lineTo(x+6*W/32+pet(d), y+28*H/32+pet(d))
  ctx.lineTo(x+26*W/32+pet(d), y+28*H/32+pet(d))
  ctx.lineTo(x+26*W/32+pet(d), y+6*H/32+pet(d))
  ctx.lineTo(x+20*W/32+pet(d), y+6*H/32+pet(d))
  ctx.lineTo(x+20*W/32+pet(d), y+8*H/32+pet(d))
  ctx.lineTo(x+18*W/32+pet(d), y+8*H/32+pet(d))
  ctx.lineTo(x+18*W/32+pet(d), y+6*H/32+pet(d))
  ctx.lineTo(x+14*W/32+pet(d), y+6*H/32+pet(d))
  ctx.lineTo(x+14*W/32+pet(d), y+8*H/32+pet(d))
  ctx.lineTo(x+12*W/32+pet(d), y+8*H/32+pet(d))
  ctx.lineTo(x+12*W/32+pet(d), y+6*H/32+pet(d))
  ctx.lineTo(x+6*W/32+pet(d), y+6*H/32+pet(d))
  ctx.lineTo(x+6*W/32+pet(d), y+4*H/32+pet(d))
  ctx.lineTo(x+12*W/32+pet(d), y+4*H/32+pet(d))
  ctx.lineTo(x+12*W/32+pet(d), y+2*H/32+pet(d))
  ctx.lineTo(x+14*W/32+pet(d), y+2*H/32+pet(d))
  ctx.lineTo(x+14*W/32+pet(d), y+4*H/32+pet(d))
  ctx.lineTo(x+18*W/32+pet(d), y+4*H/32+pet(d))
  ctx.lineTo(x+18*W/32+pet(d), y+2*H/32+pet(d))
  ctx.lineTo(x+20*W/32+pet(d), y+2*H/32+pet(d))
  ctx.lineTo(x+20*W/32+pet(d), y+4*H/32+pet(d))
  ctx.lineTo(x+28*W/32+pet(d), y+4*H/32+pet(d))
  ctx.lineTo(x+28*W/32+pet(d), y+30*H/32+pet(d))
  ctx.lineTo(x+4*W/32+pet(d), y+30*H/32+pet(d))
  ctx.lineTo(x+4*W/32+pet(d), y+4*H/32+pet(d))
  ctx.lineTo(x+6*W/32+pet(d), y+4*H/32+pet(d))
  ctx.lineTo(x+6*W/32+pet(d), y+6*H/32+pet(d))
  ctx.fill()
  ctx.font = "800 "+(W/5)+"pt AmericanTypewriter,Courier"
  let width = ctx.measureText(date).width
  ctx.fillText(date, x+W/2-width/2, y+11.5*H/16)

  ctx.font = "800 "+(W/9)+"pt AmericanTypewriter,Courier"
  width = ctx.measureText(day).width
  ctx.fillText(day, x+W/2-width/2, y+8*H/16)

}
function calAt (x,y,W,color, INVERTED) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W
  let days = ["SUN","MON","TUE","WED","THU","FRI","SAT"]
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.fillStyle = color
  let date = (new Date()).getDate()
  let day = days[(new Date()).getDay()]
  if (INVERTED) {
    let a = new Date()
    a.setDate(a.getDate()+1)
    date = a.getDate()
    day = days[a.getDay()]
  }
  ctx.font = "800 "+(W/5)+"pt AmericanTypewriter,Courier"
  let width = ctx.measureText(date).width
  ctx.fillText(date, x+W/2-width/2, y+11.5*H/16)

  ctx.font = "800 "+(W/9)+"pt AmericanTypewriter,Courier"
  width = ctx.measureText(day).width
  ctx.fillText(day, x+W/2-width/2, y+8*H/16)
    //1
  ctx.beginPath()
  ctx.moveTo(x+2*W/16, y+14*H/16)
  ctx.rect(x+2*W/16, y+14*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //2
  ctx.beginPath()
  ctx.moveTo(x+3*W/16, y+14*H/16)
  ctx.rect(x+3*W/16, y+14*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //3
  ctx.beginPath()
  ctx.moveTo(x+4*W/16, y+14*H/16)
  ctx.rect(x+4*W/16, y+14*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //4
  ctx.beginPath()
  ctx.moveTo(x+5*W/16, y+14*H/16)
  ctx.rect(x+5*W/16, y+14*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //5
  ctx.beginPath()
  ctx.moveTo(x+6*W/16, y+14*H/16)
  ctx.rect(x+6*W/16, y+14*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //6
  ctx.beginPath()
  ctx.moveTo(x+7*W/16, y+14*H/16)
  ctx.rect(x+7*W/16, y+14*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //7
  ctx.beginPath()
  ctx.moveTo(x+8*W/16, y+14*H/16)
  ctx.rect(x+8*W/16, y+14*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //8
  ctx.beginPath()
  ctx.moveTo(x+9*W/16, y+14*H/16)
  ctx.rect(x+9*W/16, y+14*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //9
  ctx.beginPath()
  ctx.moveTo(x+10*W/16, y+14*H/16)
  ctx.rect(x+10*W/16, y+14*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //10
  ctx.beginPath()
  ctx.moveTo(x+11*W/16, y+14*H/16)
  ctx.rect(x+11*W/16, y+14*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //11
  ctx.beginPath()
  ctx.moveTo(x+12*W/16, y+14*H/16)
  ctx.rect(x+12*W/16, y+14*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //12
  ctx.beginPath()
  ctx.moveTo(x+13*W/16, y+14*H/16)
  ctx.rect(x+13*W/16, y+14*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //13
  ctx.beginPath()
  ctx.moveTo(x+13*W/16, y+13*H/16)
  ctx.rect(x+13*W/16, y+13*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //14
  ctx.beginPath()
  ctx.moveTo(x+13*W/16, y+12*H/16)
  ctx.rect(x+13*W/16, y+12*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //15
  ctx.beginPath()
  ctx.moveTo(x+13*W/16, y+7*H/16)
  ctx.rect(x+13*W/16, y+7*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //16
  ctx.beginPath()
  ctx.moveTo(x+13*W/16, y+8*H/16)
  ctx.rect(x+13*W/16, y+8*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //17
  ctx.beginPath()
  ctx.moveTo(x+13*W/16, y+9*H/16)
  ctx.rect(x+13*W/16, y+9*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //18
  ctx.beginPath()
  ctx.moveTo(x+13*W/16, y+10*H/16)
  ctx.rect(x+13*W/16, y+10*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //19
  ctx.beginPath()
  ctx.moveTo(x+13*W/16, y+11*H/16)
  ctx.rect(x+13*W/16, y+11*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //20
  ctx.beginPath()
  ctx.moveTo(x+2*W/16, y+8*H/16)
  ctx.rect(x+2*W/16, y+8*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //21
  ctx.beginPath()
  ctx.moveTo(x+2*W/16, y+9*H/16)
  ctx.rect(x+2*W/16, y+9*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //22
  ctx.beginPath()
  ctx.moveTo(x+2*W/16, y+10*H/16)
  ctx.rect(x+2*W/16, y+10*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //23
  ctx.beginPath()
  ctx.moveTo(x+2*W/16, y+11*H/16)
  ctx.rect(x+2*W/16, y+11*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //24
  ctx.beginPath()
  ctx.moveTo(x+2*W/16, y+12*H/16)
  ctx.rect(x+2*W/16, y+12*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //25
  ctx.beginPath()
  ctx.moveTo(x+2*W/16, y+13*H/16)
  ctx.rect(x+2*W/16, y+13*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //26
  ctx.beginPath()
  ctx.moveTo(x+2*W/16, y+4*H/16)
  ctx.rect(x+2*W/16, y+4*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //27
  ctx.beginPath()
  ctx.moveTo(x+2*W/16, y+5*H/16)
  ctx.rect(x+2*W/16, y+5*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //28
  ctx.beginPath()
  ctx.moveTo(x+2*W/16, y+6*H/16)
  ctx.rect(x+2*W/16, y+6*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //29
  ctx.beginPath()
  ctx.moveTo(x+2*W/16, y+7*H/16)
  ctx.rect(x+2*W/16, y+7*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //30
  ctx.beginPath()
  ctx.moveTo(x+2*W/16, y+3*H/16)
  ctx.rect(x+2*W/16, y+3*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //31
  ctx.beginPath()
  ctx.moveTo(x+2*W/16, y+2*H/16)
  ctx.rect(x+2*W/16, y+2*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //32
  ctx.beginPath()
  ctx.moveTo(x+3*W/16, y+2*H/16)
  ctx.rect(x+3*W/16, y+2*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //33
  ctx.beginPath()
  ctx.moveTo(x+4*W/16, y+2*H/16)
  ctx.rect(x+4*W/16, y+2*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //34
  ctx.beginPath()
  ctx.moveTo(x+5*W/16, y+2*H/16)
  ctx.rect(x+5*W/16, y+2*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //35
  ctx.beginPath()
  ctx.moveTo(x+6*W/16, y+2*H/16)
  ctx.rect(x+6*W/16, y+2*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //36
  ctx.beginPath()
  ctx.moveTo(x+7*W/16, y+2*H/16)
  ctx.rect(x+7*W/16, y+2*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //37
  ctx.beginPath()
  ctx.moveTo(x+8*W/16, y+2*H/16)
  ctx.rect(x+8*W/16, y+2*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //38
  ctx.beginPath()
  ctx.moveTo(x+9*W/16, y+2*H/16)
  ctx.rect(x+9*W/16, y+2*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //39
  ctx.beginPath()
  ctx.moveTo(x+10*W/16, y+2*H/16)
  ctx.rect(x+10*W/16, y+2*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //40
  ctx.beginPath()
  ctx.moveTo(x+11*W/16, y+2*H/16)
  ctx.rect(x+11*W/16, y+2*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //41
  ctx.beginPath()
  ctx.moveTo(x+12*W/16, y+2*H/16)
  ctx.rect(x+12*W/16, y+2*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //42
  ctx.beginPath()
  ctx.moveTo(x+13*W/16, y+2*H/16)
  ctx.rect(x+13*W/16, y+2*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //43
  ctx.beginPath()
  ctx.moveTo(x+13*W/16, y+3*H/16)
  ctx.rect(x+13*W/16, y+3*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //44
  ctx.beginPath()
  ctx.moveTo(x+13*W/16, y+4*H/16)
  ctx.rect(x+13*W/16, y+4*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //45
  ctx.beginPath()
  ctx.moveTo(x+13*W/16, y+5*H/16)
  ctx.rect(x+13*W/16, y+5*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //46
  ctx.beginPath()
  ctx.moveTo(x+13*W/16, y+6*H/16)
  ctx.rect(x+13*W/16, y+6*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //47
  ctx.beginPath()
  ctx.moveTo(x+6*W/16, y+1*H/16)
  ctx.rect(x+6*W/16, y+1*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //48
  ctx.beginPath()
  ctx.moveTo(x+6*W/16, y+3*H/16)
  ctx.rect(x+6*W/16, y+3*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //49
  ctx.beginPath()
  ctx.moveTo(x+9*W/16, y+1*H/16)
  ctx.rect(x+9*W/16, y+1*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //50
  ctx.beginPath()
  ctx.moveTo(x+9*W/16, y+3*H/16)
  ctx.rect(x+9*W/16, y+3*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //51
  ctx.beginPath()
  ctx.moveTo(x+4*W/16, y+12*H/16)
  ctx.rect(x+4*W/16, y+12*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //52
  ctx.beginPath()
  ctx.moveTo(x+5*W/16, y+12*H/16)
  ctx.rect(x+5*W/16, y+12*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //53
  ctx.beginPath()
  ctx.moveTo(x+6*W/16, y+12*H/16)
  ctx.rect(x+6*W/16, y+12*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //54
  ctx.beginPath()
  ctx.moveTo(x+7*W/16, y+12*H/16)
  ctx.rect(x+7*W/16, y+12*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //55
  ctx.beginPath()
  ctx.moveTo(x+8*W/16, y+12*H/16)
  ctx.rect(x+8*W/16, y+12*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //56
  ctx.beginPath()
  ctx.moveTo(x+9*W/16, y+12*H/16)
  ctx.rect(x+9*W/16, y+12*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //57
  ctx.beginPath()
  ctx.moveTo(x+10*W/16, y+12*H/16)
  ctx.rect(x+10*W/16, y+12*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //58
  ctx.beginPath()
  ctx.moveTo(x+11*W/16, y+12*H/16)
  ctx.rect(x+11*W/16, y+12*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //59
  ctx.beginPath()
  ctx.moveTo(x+11*W/16, y+11*H/16)
  ctx.rect(x+11*W/16, y+11*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //60
  ctx.beginPath()
  ctx.moveTo(x+11*W/16, y+10*H/16)
  ctx.rect(x+11*W/16, y+10*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //61
  ctx.beginPath()
  ctx.moveTo(x+11*W/16, y+9*H/16)
  ctx.rect(x+11*W/16, y+9*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //62
  ctx.beginPath()
  ctx.moveTo(x+11*W/16, y+8*H/16)
  ctx.rect(x+11*W/16, y+8*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //63
  ctx.beginPath()
  ctx.moveTo(x+11*W/16, y+7*H/16)
  ctx.rect(x+11*W/16, y+7*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //64
  ctx.beginPath()
  ctx.moveTo(x+11*W/16, y+6*H/16)
  ctx.rect(x+11*W/16, y+6*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //65
  ctx.beginPath()
  ctx.moveTo(x+11*W/16, y+5*H/16)
  ctx.rect(x+11*W/16, y+5*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //66
  ctx.beginPath()
  ctx.moveTo(x+10*W/16, y+5*H/16)
  ctx.rect(x+10*W/16, y+5*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //67
  ctx.beginPath()
  ctx.moveTo(x+9*W/16, y+5*H/16)
  ctx.rect(x+9*W/16, y+5*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //68
  ctx.beginPath()
  ctx.moveTo(x+8*W/16, y+5*H/16)
  ctx.rect(x+8*W/16, y+5*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //69
  ctx.beginPath()
  ctx.moveTo(x+7*W/16, y+5*H/16)
  ctx.rect(x+7*W/16, y+5*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //70
  ctx.beginPath()
  ctx.moveTo(x+6*W/16, y+5*H/16)
  ctx.rect(x+6*W/16, y+5*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //71
  ctx.beginPath()
  ctx.moveTo(x+5*W/16, y+5*H/16)
  ctx.rect(x+5*W/16, y+5*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //72
  ctx.beginPath()
  ctx.moveTo(x+4*W/16, y+5*H/16)
  ctx.rect(x+4*W/16, y+5*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //73
  ctx.beginPath()
  ctx.moveTo(x+4*W/16, y+6*H/16)
  ctx.rect(x+4*W/16, y+6*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //74
  ctx.beginPath()
  ctx.moveTo(x+4*W/16, y+7*H/16)
  ctx.rect(x+4*W/16, y+7*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //75
  ctx.beginPath()
  ctx.moveTo(x+4*W/16, y+8*H/16)
  ctx.rect(x+4*W/16, y+8*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //76
  ctx.beginPath()
  ctx.moveTo(x+4*W/16, y+9*H/16)
  ctx.rect(x+4*W/16, y+9*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //77
  ctx.beginPath()
  ctx.moveTo(x+4*W/16, y+10*H/16)
  ctx.rect(x+4*W/16, y+10*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
  //78
  ctx.beginPath()
  ctx.moveTo(x+4*W/16, y+11*H/16)
  ctx.rect(x+4*W/16, y+11*H/16,W/16,W/16)
  ctx.closePath()
  ctx.fill()
}

function dogcowAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, p = 1
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.fillStyle = color
  //1
  ctx.beginPath()
  ctx.moveTo(x+1*W/42, y+13*H/42)
  ctx.rect(x+1*W/42, y+13*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //2
  ctx.beginPath()
  ctx.moveTo(x+1*W/42, y+14*H/42)
  ctx.rect(x+1*W/42, y+14*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //3
  ctx.beginPath()
  ctx.moveTo(x+1*W/42, y+15*H/42)
  ctx.rect(x+1*W/42, y+15*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //4
  ctx.beginPath()
  ctx.moveTo(x+2*W/42, y+16*H/42)
  ctx.rect(x+2*W/42, y+16*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //5
  ctx.beginPath()
  ctx.moveTo(x+3*W/42, y+16*H/42)
  ctx.rect(x+3*W/42, y+16*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //6
  ctx.beginPath()
  ctx.moveTo(x+4*W/42, y+16*H/42)
  ctx.rect(x+4*W/42, y+16*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //7
  ctx.beginPath()
  ctx.moveTo(x+5*W/42, y+16*H/42)
  ctx.rect(x+5*W/42, y+16*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //8
  ctx.beginPath()
  ctx.moveTo(x+6*W/42, y+16*H/42)
  ctx.rect(x+6*W/42, y+16*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //9
  ctx.beginPath()
  ctx.moveTo(x+7*W/42, y+16*H/42)
  ctx.rect(x+7*W/42, y+16*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //10
  ctx.beginPath()
  ctx.moveTo(x+8*W/42, y+16*H/42)
  ctx.rect(x+8*W/42, y+16*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //11
  ctx.beginPath()
  ctx.moveTo(x+9*W/42, y+16*H/42)
  ctx.rect(x+9*W/42, y+16*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //12
  ctx.beginPath()
  ctx.moveTo(x+10*W/42, y+17*H/42)
  ctx.rect(x+10*W/42, y+17*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //13
  ctx.beginPath()
  ctx.moveTo(x+10*W/42, y+18*H/42)
  ctx.rect(x+10*W/42, y+18*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //14
  ctx.beginPath()
  ctx.moveTo(x+10*W/42, y+19*H/42)
  ctx.rect(x+10*W/42, y+19*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //15
  ctx.beginPath()
  ctx.moveTo(x+11*W/42, y+20*H/42)
  ctx.rect(x+11*W/42, y+20*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //16
  ctx.beginPath()
  ctx.moveTo(x+11*W/42, y+21*H/42)
  ctx.rect(x+11*W/42, y+21*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //17
  ctx.beginPath()
  ctx.moveTo(x+11*W/42, y+22*H/42)
  ctx.rect(x+11*W/42, y+22*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //18
  ctx.beginPath()
  ctx.moveTo(x+11*W/42, y+23*H/42)
  ctx.rect(x+11*W/42, y+23*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //19
  ctx.beginPath()
  ctx.moveTo(x+11*W/42, y+24*H/42)
  ctx.rect(x+11*W/42, y+24*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //20
  ctx.beginPath()
  ctx.moveTo(x+11*W/42, y+25*H/42)
  ctx.rect(x+11*W/42, y+25*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //21
  ctx.beginPath()
  ctx.moveTo(x+11*W/42, y+26*H/42)
  ctx.rect(x+11*W/42, y+26*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //22
  ctx.beginPath()
  ctx.moveTo(x+11*W/42, y+27*H/42)
  ctx.rect(x+11*W/42, y+27*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //23
  ctx.beginPath()
  ctx.moveTo(x+11*W/42, y+28*H/42)
  ctx.rect(x+11*W/42, y+28*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //24
  ctx.beginPath()
  ctx.moveTo(x+11*W/42, y+29*H/42)
  ctx.rect(x+11*W/42, y+29*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //25
  ctx.beginPath()
  ctx.moveTo(x+11*W/42, y+30*H/42)
  ctx.rect(x+11*W/42, y+30*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //26
  ctx.beginPath()
  ctx.moveTo(x+11*W/42, y+31*H/42)
  ctx.rect(x+11*W/42, y+31*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //27
  ctx.beginPath()
  ctx.moveTo(x+11*W/42, y+32*H/42)
  ctx.rect(x+11*W/42, y+32*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //28
  ctx.beginPath()
  ctx.moveTo(x+10*W/42, y+33*H/42)
  ctx.rect(x+10*W/42, y+33*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //29
  ctx.beginPath()
  ctx.moveTo(x+10*W/42, y+34*H/42)
  ctx.rect(x+10*W/42, y+34*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //30
  ctx.beginPath()
  ctx.moveTo(x+9*W/42, y+35*H/42)
  ctx.rect(x+9*W/42, y+35*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //31
  ctx.beginPath()
  ctx.moveTo(x+10*W/42, y+36*H/42)
  ctx.rect(x+10*W/42, y+36*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //32
  ctx.beginPath()
  ctx.moveTo(x+11*W/42, y+36*H/42)
  ctx.rect(x+11*W/42, y+36*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //33
  ctx.beginPath()
  ctx.moveTo(x+12*W/42, y+36*H/42)
  ctx.rect(x+12*W/42, y+36*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //34
  ctx.beginPath()
  ctx.moveTo(x+13*W/42, y+35*H/42)
  ctx.rect(x+13*W/42, y+35*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //35
  ctx.beginPath()
  ctx.moveTo(x+14*W/42, y+35*H/42)
  ctx.rect(x+14*W/42, y+35*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //36
  ctx.beginPath()
  ctx.moveTo(x+15*W/42, y+34*H/42)
  ctx.rect(x+15*W/42, y+34*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //37
  ctx.beginPath()
  ctx.moveTo(x+15*W/42, y+33*H/42)
  ctx.rect(x+15*W/42, y+33*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //38
  ctx.beginPath()
  ctx.moveTo(x+16*W/42, y+32*H/42)
  ctx.rect(x+16*W/42, y+32*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //39
  ctx.beginPath()
  ctx.moveTo(x+16*W/42, y+31*H/42)
  ctx.rect(x+16*W/42, y+31*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //40
  ctx.beginPath()
  ctx.moveTo(x+16*W/42, y+30*H/42)
  ctx.rect(x+16*W/42, y+30*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //41
  ctx.beginPath()
  ctx.moveTo(x+16*W/42, y+29*H/42)
  ctx.rect(x+16*W/42, y+29*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //42
  ctx.beginPath()
  ctx.moveTo(x+16*W/42, y+28*H/42)
  ctx.rect(x+16*W/42, y+28*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //43
  ctx.beginPath()
  ctx.moveTo(x+16*W/42, y+27*H/42)
  ctx.rect(x+16*W/42, y+27*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //44
  ctx.beginPath()
  ctx.moveTo(x+17*W/42, y+26*H/42)
  ctx.rect(x+17*W/42, y+26*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //45
  ctx.beginPath()
  ctx.moveTo(x+29*W/42, y+26*H/42)
  ctx.rect(x+29*W/42, y+26*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //46
  ctx.beginPath()
  ctx.moveTo(x+30*W/42, y+27*H/42)
  ctx.rect(x+30*W/42, y+27*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //47
  ctx.beginPath()
  ctx.moveTo(x+31*W/42, y+27*H/42)
  ctx.rect(x+31*W/42, y+27*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //48
  ctx.beginPath()
  ctx.moveTo(x+23*W/42, y+26*H/42)
  ctx.rect(x+23*W/42, y+26*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //49
  ctx.beginPath()
  ctx.moveTo(x+24*W/42, y+26*H/42)
  ctx.rect(x+24*W/42, y+26*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //50
  ctx.beginPath()
  ctx.moveTo(x+25*W/42, y+26*H/42)
  ctx.rect(x+25*W/42, y+26*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //51
  ctx.beginPath()
  ctx.moveTo(x+26*W/42, y+26*H/42)
  ctx.rect(x+26*W/42, y+26*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //52
  ctx.beginPath()
  ctx.moveTo(x+27*W/42, y+26*H/42)
  ctx.rect(x+27*W/42, y+26*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //53
  ctx.beginPath()
  ctx.moveTo(x+28*W/42, y+26*H/42)
  ctx.rect(x+28*W/42, y+26*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //54
  ctx.beginPath()
  ctx.moveTo(x+18*W/42, y+26*H/42)
  ctx.rect(x+18*W/42, y+26*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //55
  ctx.beginPath()
  ctx.moveTo(x+12*W/42, y+25*H/42)
  ctx.rect(x+12*W/42, y+25*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //56
  ctx.beginPath()
  ctx.moveTo(x+12*W/42, y+24*H/42)
  ctx.rect(x+12*W/42, y+24*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //57
  ctx.beginPath()
  ctx.moveTo(x+12*W/42, y+23*H/42)
  ctx.rect(x+12*W/42, y+23*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //58
  ctx.beginPath()
  ctx.moveTo(x+12*W/42, y+22*H/42)
  ctx.rect(x+12*W/42, y+22*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //59
  ctx.beginPath()
  ctx.moveTo(x+12*W/42, y+21*H/42)
  ctx.rect(x+12*W/42, y+21*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //60
  ctx.beginPath()
  ctx.moveTo(x+13*W/42, y+21*H/42)
  ctx.rect(x+13*W/42, y+21*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //61
  ctx.beginPath()
  ctx.moveTo(x+13*W/42, y+22*H/42)
  ctx.rect(x+13*W/42, y+22*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //62
  ctx.beginPath()
  ctx.moveTo(x+13*W/42, y+23*H/42)
  ctx.rect(x+13*W/42, y+23*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //63
  ctx.beginPath()
  ctx.moveTo(x+13*W/42, y+24*H/42)
  ctx.rect(x+13*W/42, y+24*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //64
  ctx.beginPath()
  ctx.moveTo(x+19*W/42, y+26*H/42)
  ctx.rect(x+19*W/42, y+26*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //65
  ctx.beginPath()
  ctx.moveTo(x+20*W/42, y+26*H/42)
  ctx.rect(x+20*W/42, y+26*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //66
  ctx.beginPath()
  ctx.moveTo(x+21*W/42, y+26*H/42)
  ctx.rect(x+21*W/42, y+26*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //67
  ctx.beginPath()
  ctx.moveTo(x+22*W/42, y+26*H/42)
  ctx.rect(x+22*W/42, y+26*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //68
  ctx.beginPath()
  ctx.moveTo(x+16*W/42, y+13*H/42)
  ctx.rect(x+16*W/42, y+13*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //69
  ctx.beginPath()
  ctx.moveTo(x+16*W/42, y+14*H/42)
  ctx.rect(x+16*W/42, y+14*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //70
  ctx.beginPath()
  ctx.moveTo(x+17*W/42, y+14*H/42)
  ctx.rect(x+17*W/42, y+14*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //71
  ctx.beginPath()
  ctx.moveTo(x+17*W/42, y+13*H/42)
  ctx.rect(x+17*W/42, y+13*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //72
  ctx.beginPath()
  ctx.moveTo(x+18*W/42, y+15*H/42)
  ctx.rect(x+18*W/42, y+15*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //73
  ctx.beginPath()
  ctx.moveTo(x+19*W/42, y+15*H/42)
  ctx.rect(x+19*W/42, y+15*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //74
  ctx.beginPath()
  ctx.moveTo(x+20*W/42, y+15*H/42)
  ctx.rect(x+20*W/42, y+15*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //75
  ctx.beginPath()
  ctx.moveTo(x+21*W/42, y+15*H/42)
  ctx.rect(x+21*W/42, y+15*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //76
  ctx.beginPath()
  ctx.moveTo(x+22*W/42, y+15*H/42)
  ctx.rect(x+22*W/42, y+15*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //77
  ctx.beginPath()
  ctx.moveTo(x+23*W/42, y+15*H/42)
  ctx.rect(x+23*W/42, y+15*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //78
  ctx.beginPath()
  ctx.moveTo(x+24*W/42, y+15*H/42)
  ctx.rect(x+24*W/42, y+15*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //79
  ctx.beginPath()
  ctx.moveTo(x+25*W/42, y+15*H/42)
  ctx.rect(x+25*W/42, y+15*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //80
  ctx.beginPath()
  ctx.moveTo(x+15*W/42, y+12*H/42)
  ctx.rect(x+15*W/42, y+12*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //81
  ctx.beginPath()
  ctx.moveTo(x+14*W/42, y+11*H/42)
  ctx.rect(x+14*W/42, y+11*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //82
  ctx.beginPath()
  ctx.moveTo(x+13*W/42, y+11*H/42)
  ctx.rect(x+13*W/42, y+11*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //83
  ctx.beginPath()
  ctx.moveTo(x+14*W/42, y+10*H/42)
  ctx.rect(x+14*W/42, y+10*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //84
  ctx.beginPath()
  ctx.moveTo(x+13*W/42, y+10*H/42)
  ctx.rect(x+13*W/42, y+10*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //85
  ctx.beginPath()
  ctx.moveTo(x+14*W/42, y+9*H/42)
  ctx.rect(x+14*W/42, y+9*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //86
  ctx.beginPath()
  ctx.moveTo(x+13*W/42, y+9*H/42)
  ctx.rect(x+13*W/42, y+9*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //87
  ctx.beginPath()
  ctx.moveTo(x+14*W/42, y+8*H/42)
  ctx.rect(x+14*W/42, y+8*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //88
  ctx.beginPath()
  ctx.moveTo(x+13*W/42, y+8*H/42)
  ctx.rect(x+13*W/42, y+8*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //89
  ctx.beginPath()
  ctx.moveTo(x+15*W/42, y+7*H/42)
  ctx.rect(x+15*W/42, y+7*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //90
  ctx.beginPath()
  ctx.moveTo(x+15*W/42, y+6*H/42)
  ctx.rect(x+15*W/42, y+6*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //91
  ctx.beginPath()
  ctx.moveTo(x+15*W/42, y+5*H/42)
  ctx.rect(x+15*W/42, y+5*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //92
  ctx.beginPath()
  ctx.moveTo(x+14*W/42, y+5*H/42)
  ctx.rect(x+14*W/42, y+5*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //93
  ctx.beginPath()
  ctx.moveTo(x+13*W/42, y+5*H/42)
  ctx.rect(x+13*W/42, y+5*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //94
  ctx.beginPath()
  ctx.moveTo(x+12*W/42, y+6*H/42)
  ctx.rect(x+12*W/42, y+6*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //95
  ctx.beginPath()
  ctx.moveTo(x+11*W/42, y+7*H/42)
  ctx.rect(x+11*W/42, y+7*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //96
  ctx.beginPath()
  ctx.moveTo(x+10*W/42, y+7*H/42)
  ctx.rect(x+10*W/42, y+7*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //97
  ctx.beginPath()
  ctx.moveTo(x+9*W/42, y+7*H/42)
  ctx.rect(x+9*W/42, y+7*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //98
  ctx.beginPath()
  ctx.moveTo(x+9*W/42, y+6*H/42)
  ctx.rect(x+9*W/42, y+6*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //99
  ctx.beginPath()
  ctx.moveTo(x+8*W/42, y+5*H/42)
  ctx.rect(x+8*W/42, y+5*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //100
  ctx.beginPath()
  ctx.moveTo(x+7*W/42, y+5*H/42)
  ctx.rect(x+7*W/42, y+5*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //101
  ctx.beginPath()
  ctx.moveTo(x+6*W/42, y+6*H/42)
  ctx.rect(x+6*W/42, y+6*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //102
  ctx.beginPath()
  ctx.moveTo(x+6*W/42, y+7*H/42)
  ctx.rect(x+6*W/42, y+7*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //103
  ctx.beginPath()
  ctx.moveTo(x+6*W/42, y+8*H/42)
  ctx.rect(x+6*W/42, y+8*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //104
  ctx.beginPath()
  ctx.moveTo(x+6*W/42, y+9*H/42)
  ctx.rect(x+6*W/42, y+9*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //105
  ctx.beginPath()
  ctx.moveTo(x+5*W/42, y+10*H/42)
  ctx.rect(x+5*W/42, y+10*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //106
  ctx.beginPath()
  ctx.moveTo(x+4*W/42, y+11*H/42)
  ctx.rect(x+4*W/42, y+11*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //107
  ctx.beginPath()
  ctx.moveTo(x+3*W/42, y+12*H/42)
  ctx.rect(x+3*W/42, y+12*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //108
  ctx.beginPath()
  ctx.moveTo(x+2*W/42, y+12*H/42)
  ctx.rect(x+2*W/42, y+12*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //109
  ctx.beginPath()
  ctx.moveTo(x+9*W/42, y+10*H/42)
  ctx.rect(x+9*W/42, y+10*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //110
  ctx.beginPath()
  ctx.moveTo(x+26*W/42, y+15*H/42)
  ctx.rect(x+26*W/42, y+15*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //111
  ctx.beginPath()
  ctx.moveTo(x+27*W/42, y+15*H/42)
  ctx.rect(x+27*W/42, y+15*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //112
  ctx.beginPath()
  ctx.moveTo(x+28*W/42, y+15*H/42)
  ctx.rect(x+28*W/42, y+15*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //113
  ctx.beginPath()
  ctx.moveTo(x+29*W/42, y+15*H/42)
  ctx.rect(x+29*W/42, y+15*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //114
  ctx.beginPath()
  ctx.moveTo(x+30*W/42, y+15*H/42)
  ctx.rect(x+30*W/42, y+15*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //115
  ctx.beginPath()
  ctx.moveTo(x+31*W/42, y+15*H/42)
  ctx.rect(x+31*W/42, y+15*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //116
  ctx.beginPath()
  ctx.moveTo(x+32*W/42, y+15*H/42)
  ctx.rect(x+32*W/42, y+15*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //117
  ctx.beginPath()
  ctx.moveTo(x+33*W/42, y+15*H/42)
  ctx.rect(x+33*W/42, y+15*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //118
  ctx.beginPath()
  ctx.moveTo(x+37*W/42, y+18*H/42)
  ctx.rect(x+37*W/42, y+18*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //119
  ctx.beginPath()
  ctx.moveTo(x+37*W/42, y+19*H/42)
  ctx.rect(x+37*W/42, y+19*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //120
  ctx.beginPath()
  ctx.moveTo(x+38*W/42, y+16*H/42)
  ctx.rect(x+38*W/42, y+16*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //121
  ctx.beginPath()
  ctx.moveTo(x+38*W/42, y+17*H/42)
  ctx.rect(x+38*W/42, y+17*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //122
  ctx.beginPath()
  ctx.moveTo(x+39*W/42, y+15*H/42)
  ctx.rect(x+39*W/42, y+15*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //123
  ctx.beginPath()
  ctx.moveTo(x+37*W/42, y+24*H/42)
  ctx.rect(x+37*W/42, y+24*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //124
  ctx.beginPath()
  ctx.moveTo(x+37*W/42, y+23*H/42)
  ctx.rect(x+37*W/42, y+23*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //125
  ctx.beginPath()
  ctx.moveTo(x+37*W/42, y+22*H/42)
  ctx.rect(x+37*W/42, y+22*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //126
  ctx.beginPath()
  ctx.moveTo(x+37*W/42, y+21*H/42)
  ctx.rect(x+37*W/42, y+21*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //127
  ctx.beginPath()
  ctx.moveTo(x+37*W/42, y+20*H/42)
  ctx.rect(x+37*W/42, y+20*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //128
  ctx.beginPath()
  ctx.moveTo(x+32*W/42, y+28*H/42)
  ctx.rect(x+32*W/42, y+28*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //129
  ctx.beginPath()
  ctx.moveTo(x+32*W/42, y+29*H/42)
  ctx.rect(x+32*W/42, y+29*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //130
  ctx.beginPath()
  ctx.moveTo(x+33*W/42, y+30*H/42)
  ctx.rect(x+33*W/42, y+30*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //131
  ctx.beginPath()
  ctx.moveTo(x+33*W/42, y+31*H/42)
  ctx.rect(x+33*W/42, y+31*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //132
  ctx.beginPath()
  ctx.moveTo(x+33*W/42, y+32*H/42)
  ctx.rect(x+33*W/42, y+32*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //133
  ctx.beginPath()
  ctx.moveTo(x+32*W/42, y+33*H/42)
  ctx.rect(x+32*W/42, y+33*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //134
  ctx.beginPath()
  ctx.moveTo(x+32*W/42, y+34*H/42)
  ctx.rect(x+32*W/42, y+34*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //135
  ctx.beginPath()
  ctx.moveTo(x+30*W/42, y+35*H/42)
  ctx.rect(x+30*W/42, y+35*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //136
  ctx.beginPath()
  ctx.moveTo(x+31*W/42, y+35*H/42)
  ctx.rect(x+31*W/42, y+35*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //137
  ctx.beginPath()
  ctx.moveTo(x+32*W/42, y+36*H/42)
  ctx.rect(x+32*W/42, y+36*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //138
  ctx.beginPath()
  ctx.moveTo(x+33*W/42, y+36*H/42)
  ctx.rect(x+33*W/42, y+36*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //139
  ctx.beginPath()
  ctx.moveTo(x+34*W/42, y+36*H/42)
  ctx.rect(x+34*W/42, y+36*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //140
  ctx.beginPath()
  ctx.moveTo(x+35*W/42, y+35*H/42)
  ctx.rect(x+35*W/42, y+35*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //141
  ctx.beginPath()
  ctx.moveTo(x+36*W/42, y+35*H/42)
  ctx.rect(x+36*W/42, y+35*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //142
  ctx.beginPath()
  ctx.moveTo(x+37*W/42, y+34*H/42)
  ctx.rect(x+37*W/42, y+34*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //143
  ctx.beginPath()
  ctx.moveTo(x+37*W/42, y+33*H/42)
  ctx.rect(x+37*W/42, y+33*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //144
  ctx.beginPath()
  ctx.moveTo(x+38*W/42, y+32*H/42)
  ctx.rect(x+38*W/42, y+32*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //145
  ctx.beginPath()
  ctx.moveTo(x+38*W/42, y+31*H/42)
  ctx.rect(x+38*W/42, y+31*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //146
  ctx.beginPath()
  ctx.moveTo(x+38*W/42, y+30*H/42)
  ctx.rect(x+38*W/42, y+30*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //147
  ctx.beginPath()
  ctx.moveTo(x+38*W/42, y+29*H/42)
  ctx.rect(x+38*W/42, y+29*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //148
  ctx.beginPath()
  ctx.moveTo(x+38*W/42, y+28*H/42)
  ctx.rect(x+38*W/42, y+28*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //149
  ctx.beginPath()
  ctx.moveTo(x+38*W/42, y+27*H/42)
  ctx.rect(x+38*W/42, y+27*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //150
  ctx.beginPath()
  ctx.moveTo(x+38*W/42, y+26*H/42)
  ctx.rect(x+38*W/42, y+26*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //151
  ctx.beginPath()
  ctx.moveTo(x+38*W/42, y+25*H/42)
  ctx.rect(x+38*W/42, y+25*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //152
  ctx.beginPath()
  ctx.moveTo(x+40*W/42, y+14*H/42)
  ctx.rect(x+40*W/42, y+14*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //153
  ctx.beginPath()
  ctx.moveTo(x+40*W/42, y+13*H/42)
  ctx.rect(x+40*W/42, y+13*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //154
  ctx.beginPath()
  ctx.moveTo(x+40*W/42, y+12*H/42)
  ctx.rect(x+40*W/42, y+12*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //155
  ctx.beginPath()
  ctx.moveTo(x+40*W/42, y+11*H/42)
  ctx.rect(x+40*W/42, y+11*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //156
  ctx.beginPath()
  ctx.moveTo(x+40*W/42, y+10*H/42)
  ctx.rect(x+40*W/42, y+10*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //157
  ctx.beginPath()
  ctx.moveTo(x+40*W/42, y+9*H/42)
  ctx.rect(x+40*W/42, y+9*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //158
  ctx.beginPath()
  ctx.moveTo(x+40*W/42, y+8*H/42)
  ctx.rect(x+40*W/42, y+8*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //159
  ctx.beginPath()
  ctx.moveTo(x+39*W/42, y+7*H/42)
  ctx.rect(x+39*W/42, y+7*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //160
  ctx.beginPath()
  ctx.moveTo(x+39*W/42, y+8*H/42)
  ctx.rect(x+39*W/42, y+8*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //161
  ctx.beginPath()
  ctx.moveTo(x+39*W/42, y+9*H/42)
  ctx.rect(x+39*W/42, y+9*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //162
  ctx.beginPath()
  ctx.moveTo(x+38*W/42, y+10*H/42)
  ctx.rect(x+38*W/42, y+10*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //163
  ctx.beginPath()
  ctx.moveTo(x+37*W/42, y+11*H/42)
  ctx.rect(x+37*W/42, y+11*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //164
  ctx.beginPath()
  ctx.moveTo(x+36*W/42, y+12*H/42)
  ctx.rect(x+36*W/42, y+12*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //165
  ctx.beginPath()
  ctx.moveTo(x+35*W/42, y+12*H/42)
  ctx.rect(x+35*W/42, y+12*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //166
  ctx.beginPath()
  ctx.moveTo(x+34*W/42, y+13*H/42)
  ctx.rect(x+34*W/42, y+13*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //167
  ctx.beginPath()
  ctx.moveTo(x+34*W/42, y+14*H/42)
  ctx.rect(x+34*W/42, y+14*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //168
  ctx.beginPath()
  ctx.moveTo(x+22*W/42, y+16*H/42)
  ctx.rect(x+22*W/42, y+16*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //169
  ctx.beginPath()
  ctx.moveTo(x+23*W/42, y+16*H/42)
  ctx.rect(x+23*W/42, y+16*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //170
  ctx.beginPath()
  ctx.moveTo(x+24*W/42, y+16*H/42)
  ctx.rect(x+24*W/42, y+16*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //171
  ctx.beginPath()
  ctx.moveTo(x+25*W/42, y+16*H/42)
  ctx.rect(x+25*W/42, y+16*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //172
  ctx.beginPath()
  ctx.moveTo(x+26*W/42, y+16*H/42)
  ctx.rect(x+26*W/42, y+16*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //173
  ctx.beginPath()
  ctx.moveTo(x+23*W/42, y+17*H/42)
  ctx.rect(x+23*W/42, y+17*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //174
  ctx.beginPath()
  ctx.moveTo(x+24*W/42, y+17*H/42)
  ctx.rect(x+24*W/42, y+17*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //175
  ctx.beginPath()
  ctx.moveTo(x+25*W/42, y+18*H/42)
  ctx.rect(x+25*W/42, y+18*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //176
  ctx.beginPath()
  ctx.moveTo(x+25*W/42, y+19*H/42)
  ctx.rect(x+25*W/42, y+19*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //177
  ctx.beginPath()
  ctx.moveTo(x+29*W/42, y+19*H/42)
  ctx.rect(x+29*W/42, y+19*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //178
  ctx.beginPath()
  ctx.moveTo(x+29*W/42, y+18*H/42)
  ctx.rect(x+29*W/42, y+18*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //179
  ctx.beginPath()
  ctx.moveTo(x+31*W/42, y+17*H/42)
  ctx.rect(x+31*W/42, y+17*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //180
  ctx.beginPath()
  ctx.moveTo(x+31*W/42, y+16*H/42)
  ctx.rect(x+31*W/42, y+16*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //181
  ctx.beginPath()
  ctx.moveTo(x+26*W/42, y+19*H/42)
  ctx.rect(x+26*W/42, y+19*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //182
  ctx.beginPath()
  ctx.moveTo(x+27*W/42, y+19*H/42)
  ctx.rect(x+27*W/42, y+19*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //183
  ctx.beginPath()
  ctx.moveTo(x+28*W/42, y+19*H/42)
  ctx.rect(x+28*W/42, y+19*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //184
  ctx.beginPath()
  ctx.moveTo(x+28*W/42, y+18*H/42)
  ctx.rect(x+28*W/42, y+18*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //185
  ctx.beginPath()
  ctx.moveTo(x+27*W/42, y+18*H/42)
  ctx.rect(x+27*W/42, y+18*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //186
  ctx.beginPath()
  ctx.moveTo(x+26*W/42, y+18*H/42)
  ctx.rect(x+26*W/42, y+18*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //187
  ctx.beginPath()
  ctx.moveTo(x+25*W/42, y+17*H/42)
  ctx.rect(x+25*W/42, y+17*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //188
  ctx.beginPath()
  ctx.moveTo(x+26*W/42, y+17*H/42)
  ctx.rect(x+26*W/42, y+17*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //189
  ctx.beginPath()
  ctx.moveTo(x+27*W/42, y+17*H/42)
  ctx.rect(x+27*W/42, y+17*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //190
  ctx.beginPath()
  ctx.moveTo(x+28*W/42, y+17*H/42)
  ctx.rect(x+28*W/42, y+17*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //191
  ctx.beginPath()
  ctx.moveTo(x+29*W/42, y+17*H/42)
  ctx.rect(x+29*W/42, y+17*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //192
  ctx.beginPath()
  ctx.moveTo(x+30*W/42, y+17*H/42)
  ctx.rect(x+30*W/42, y+17*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //193
  ctx.beginPath()
  ctx.moveTo(x+30*W/42, y+16*H/42)
  ctx.rect(x+30*W/42, y+16*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //194
  ctx.beginPath()
  ctx.moveTo(x+29*W/42, y+16*H/42)
  ctx.rect(x+29*W/42, y+16*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //195
  ctx.beginPath()
  ctx.moveTo(x+28*W/42, y+16*H/42)
  ctx.rect(x+28*W/42, y+16*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //196
  ctx.beginPath()
  ctx.moveTo(x+27*W/42, y+16*H/42)
  ctx.rect(x+27*W/42, y+16*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
  //197
  ctx.beginPath()
  ctx.moveTo(x+12*W/42, y+20*H/42)
  ctx.rect(x+12*W/42, y+20*H/42,W/42-p,W/42-p)
  ctx.closePath()
  ctx.fill()
}

function perfectly_normal_cowboy_bootsAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+6*H/24)
  cpx = x+2*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+20*H/24)
  cpx = x+4*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+20*H/24)
  cpx = x+4*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+18*H/24)
  cpx = x+7*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+20*H/24)
  cpx = x+19*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+17*H/24)
  cpx = x+20*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+15*H/24)
  cpx = x+18*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+16*H/24)
  cpx = x+17*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+17*H/24)
  cpx = x+7*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+5*H/24)
  cpx = x+11*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+3*H/24)
  cpx = x+2*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+6*H/24)
  ctx.stroke()
}

function snowmanAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+22*H/24)
  cpx = x+18*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+18*H/24)
  cpx = x+18*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+14*H/24)
  cpx = x+17*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+10*H/24)
  cpx = x+17*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+7*H/24)
  cpx = x+15*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+4*H/24)
  cpx = x+15*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+2*H/24)
  cpx = x+9*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+4*H/24)
  cpx = x+9*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+7*H/24)
  cpx = x+7*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+10*H/24)
  cpx = x+7*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+14*H/24)
  cpx = x+6*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+18*H/24)
  cpx = x+6*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+22*H/24)
  ctx.stroke()
  let r = W/96
  //2
  ctx.beginPath()
  ctx.arc(x+11*W/24, y+4*H/24, r, 0, Math.PI*2)
  ctx.fill()

  //3
  ctx.beginPath()
  ctx.arc(x+13*W/24, y+4*H/24, r, 0, Math.PI*2)
  ctx.fill()

  //4
  ctx.beginPath()
  ctx.arc(x+12*W/24, y+8.5*H/24, r, 0, Math.PI*2)
  ctx.fill()

  //5
  ctx.beginPath()
  ctx.arc(x+12*W/24, y+10.5*H/24, r, 0, Math.PI*2)
  ctx.fill()

  //6
  ctx.beginPath()
  ctx.arc(x+12*W/24, y+12.5*H/24, r, 0, Math.PI*2)
  ctx.fill()

  //7
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+10*H/24)
  ctx.lineTo(x+20*W/24, y+8*H/24)
  ctx.lineTo(x+22*W/24, y+8*H/24)
  ctx.lineTo(x+20*W/24, y+8*H/24)
  ctx.lineTo(x+21*W/24, y+6*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+10*H/24)
  ctx.lineTo(x+4*W/24, y+8*H/24)
  ctx.lineTo(x+2*W/24, y+8*H/24)
  ctx.lineTo(x+4*W/24, y+8*H/24)
  ctx.lineTo(x+3*W/24, y+6*H/24)
  ctx.stroke()
  let saved = ctx.fillStyle
  ctx.fillStyle = '#ED9121'
  //9
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+4.5*H/24)
  ctx.lineTo(x+14*W/24, y+5*H/24)
  ctx.lineTo(x+12*W/24, y+5.5*H/24)
  ctx.fill()
  ctx.fillStyle = saved
}

function flyover_statesAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.globalAlpha /= 3
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+1*H/24)
  cpx = x+10*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+3*H/24)
  ctx.lineTo(x+15*W/24, y+3*H/24)
  ctx.lineTo(x+16*W/24, y+4*H/24)
  ctx.lineTo(x+17*W/24, y+4*H/24)
  ctx.lineTo(x+16*W/24, y+5*H/24)
  ctx.lineTo(x+17*W/24, y+5*H/24)
  ctx.lineTo(x+18*W/24, y+4*H/24)
  ctx.lineTo(x+18*W/24, y+5*H/24)
  ctx.lineTo(x+19*W/24, y+5*H/24)
  ctx.lineTo(x+20*W/24, y+4*H/24)
  ctx.lineTo(x+21*W/24, y+5*H/24)
  cpx = x+20*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+6*H/24)
  cpx = x+18*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+7*H/24)
  cpx = x+19*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+6*H/24)
  cpx = x+18*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+9*H/24)
  cpx = x+20*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+7*H/24)
  cpx = x+19*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+6*H/24)
  cpx = x+20*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+5.5*H/24)
  cpx = x+21*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21.5*W/24, y+6*H/24)
  cpx = x+21*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21.5*W/24, y+7*H/24)
  cpx = x+22*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+8*H/24)
  cpx = x+21*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21.6*W/24, y+9*H/24)
  cpx = x+22*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+9*H/24)
  cpx = x+24*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+24*W/24, y+8*H/24)
 // ctx.stroke()
 // ctx.beginPath()
  ctx.lineTo(x+24*W/24, y+21*H/24)
  ctx.lineTo(x+23*W/24, y+20*H/24)
  ctx.lineTo(x+22*W/24, y+20*H/24)
  cpx = x+22*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+19*H/24)
  cpx = x+18*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+19*H/24)
  cpx = x+19*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+20*H/24)
  cpx = x+18*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+21*H/24)
  cpx = x+18*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+20*H/24)
  cpx = x+14*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+21*H/24)
  cpx = x+12*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+24*H/24)
  cpx = x+10*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+22*H/24)
  cpx = x+9*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+20*H/24)
  cpx = x+7*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+20*H/24)
  cpx = x+7*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+19*H/24)
  cpx = x+6*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+19*H/24)
  ctx.lineTo(x+5*W/24, y+18*H/24)
  ctx.lineTo(x+2*W/24, y+18*H/24)
  ctx.lineTo(x+0*W/24, y+17*H/24)
  ctx.fill()

  ctx.globalAlpha *= 3






    //1
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+1*H/24)
  cpx = x+10*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+3*H/24)
  ctx.lineTo(x+15*W/24, y+3*H/24)
  ctx.lineTo(x+16*W/24, y+4*H/24)
  ctx.lineTo(x+17*W/24, y+4*H/24)
  ctx.lineTo(x+16*W/24, y+5*H/24)
  ctx.lineTo(x+17*W/24, y+5*H/24)
  ctx.lineTo(x+18*W/24, y+4*H/24)
  ctx.lineTo(x+18*W/24, y+5*H/24)
  ctx.lineTo(x+19*W/24, y+5*H/24)
  ctx.lineTo(x+20*W/24, y+4*H/24)
  ctx.lineTo(x+21*W/24, y+5*H/24)
  cpx = x+20*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+6*H/24)
  cpx = x+18*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+7*H/24)
  cpx = x+19*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+6*H/24)
  cpx = x+18*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+9*H/24)
  cpx = x+20*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+7*H/24)
  cpx = x+19*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+6*H/24)
  cpx = x+20*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+5.5*H/24)
  cpx = x+21*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21.5*W/24, y+6*H/24)
  cpx = x+21*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21.5*W/24, y+7*H/24)
  cpx = x+22*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+8*H/24)
  cpx = x+21*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21.6*W/24, y+9*H/24)
  cpx = x+22*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+9*H/24)
  cpx = x+24*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+24*W/24, y+8*H/24)
  ctx.stroke()
  ctx.beginPath()
  ctx.moveTo(x+24*W/24, y+21*H/24)
  ctx.lineTo(x+23*W/24, y+20*H/24)
  ctx.lineTo(x+22*W/24, y+20*H/24)
  cpx = x+22*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+19*H/24)
  cpx = x+18*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+19*H/24)
  cpx = x+19*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+20*H/24)
  cpx = x+18*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+21*H/24)
  cpx = x+18*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+20*H/24)
  cpx = x+14*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+21*H/24)
  cpx = x+12*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+24*H/24)
  cpx = x+10*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+22*H/24)
  cpx = x+9*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+20*H/24)
  cpx = x+7*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+20*H/24)
  cpx = x+7*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+19*H/24)
  cpx = x+6*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+19*H/24)
  ctx.lineTo(x+5*W/24, y+18*H/24)
  ctx.lineTo(x+2*W/24, y+18*H/24)
  ctx.lineTo(x+0*W/24, y+17*H/24)
  ctx.stroke()
}

function reel_to_reelAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+2*H/24)
  cpx = x+8*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+8*H/24)
  cpx = x+8*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+14*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+9*H/24)
  cpx = x+3*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+8*H/24)
  cpx = x+3*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+7*H/24)
  cpx = x+1*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+8*H/24)
  cpx = x+1*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+9*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+22*W/24, y+14*H/24)
  cpx = x+16*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+8*H/24)
  cpx = x+16*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+2*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+22*W/24, y+9*H/24)
  cpx = x+23*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+8*H/24)
  cpx = x+23*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+7*H/24)
  cpx = x+21*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+8*H/24)
  cpx = x+21*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+9*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+20*H/24)
  cpx = x+8*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+19*H/24)
  cpx = x+8*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+18*H/24)
  cpx = x+6*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+19*H/24)
  cpx = x+6*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+20*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+20*H/24)
  cpx = x+18*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+19*H/24)
  cpx = x+18*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+18*H/24)
  cpx = x+16*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+19*H/24)
  cpx = x+16*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+20*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+19*H/24)
  ctx.lineTo(x+23*W/24, y+14*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+19*H/24)
  ctx.lineTo(x+1*W/24, y+14*H/24)
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+19*H/24)
  ctx.lineTo(x+8*W/24, y+15*H/24)
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+19*H/24)
  ctx.lineTo(x+16*W/24, y+15*H/24)
  ctx.stroke()

  //11
  ctx.beginPath()
  ctx.arc(x+9*W/24, y+15*H/24, W/24, 0, Math.PI*2)
  ctx.stroke()

  //12
  ctx.beginPath()
  ctx.arc(x+15*W/24, y+15*H/24, W/24, 0, Math.PI*2)
  ctx.stroke()

  //13
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+14*H/24)
  cpx = x+15*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+12*H/24)
  cpx = x+9*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+12*H/24)
  cpx = x+9*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+14*H/24)
  ctx.stroke()

  //14
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+14*H/24)
  cpx = x+13*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+15*H/24)
  cpx = x+13*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+16*H/24)
  cpx = x+11*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+16*H/24)
  cpx = x+11*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+15*H/24)
  cpx = x+11*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+14*H/24)
  ctx.stroke()

  //15
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+14*H/24)
  ctx.lineTo(x+15*W/24, y+14*H/24)
  ctx.stroke()

  //16
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+14*H/24)
  ctx.lineTo(x+1*W/24, y+14*H/24)
  ctx.stroke()

  //17
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+2*H/24)
  ctx.lineTo(x+1*W/24, y+2*H/24)
  ctx.stroke()

  //18
  ctx.beginPath()
  ctx.moveTo(x+22*W/24, y+14*H/24)
  ctx.lineTo(x+23*W/24, y+14*H/24)
  ctx.stroke()

  //19
  ctx.beginPath()
  ctx.moveTo(x+22*W/24, y+2*H/24)
  ctx.lineTo(x+23*W/24, y+2*H/24)
  ctx.stroke()
  //20 spokes
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+9*H/24)
  cpx = x+3*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+10*H/24)
  cpx = x+3*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+13*H/24)
  cpx = x+6*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+10*H/24)
  cpx = x+7*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+9*H/24)
  ctx.stroke()

  //21
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+7*H/24)
  cpx = x+3*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+6*H/24)
  cpx = x+3*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+3*H/24)
  cpx = x+6*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+6*H/24)
  cpx = x+7*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+7*H/24)
  ctx.stroke()

  //22
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+7*H/24)
  cpx = x+21*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+6*H/24)
  cpx = x+21*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+3*H/24)
  cpx = x+18*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+6*H/24)
  cpx = x+17*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+7*H/24)
  ctx.stroke()

  //23
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+9*H/24)
  cpx = x+21*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+10*H/24)
  cpx = x+21*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+13*H/24)
  cpx = x+18*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+10*H/24)
  cpx = x+17*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+9*H/24)
  ctx.stroke()
  //24
  ctx.beginPath()
  ctx.moveTo(x+23*W/24, y+6*H/24)
  cpx = x+23*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+24*W/24, y+3*H/24)
  ctx.stroke()

  //25
  ctx.beginPath()
  ctx.moveTo(x+23*W/24, y+10*H/24)
  cpx = x+23*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+24*W/24, y+13*H/24)
  ctx.stroke()

  //26
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+10*H/24)
  cpx = x+1*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+0*W/24, y+13*H/24)
  ctx.stroke()

  //27
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+6*H/24)
  cpx = x+1*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+0*W/24, y+3*H/24)
  ctx.stroke()

  //28
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+6*H/24)
  ctx.lineTo(x+15*W/24, y+6*H/24)
  ctx.lineTo(x+15*W/24, y+2*H/24)
  ctx.lineTo(x+9*W/24, y+2*H/24)
  ctx.lineTo(x+9*W/24, y+6*H/24)
  ctx.stroke()

  //29
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+5*H/24)
  ctx.lineTo(x+14*W/24, y+5*H/24)
  cpx = x+14*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+3*H/24)
  cpx = x+10*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+5*H/24)
  ctx.stroke()

  //30
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+5*H/24)
  ctx.lineTo(x+11*W/24, y+4*H/24)
  ctx.stroke()
}

function octopusAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "round"
  ctx.lineJoin = "round"
  //1
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+10*H/24)
  cpx = x+11*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+8*H/24)
  cpx = x+9*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+5*H/24)
  cpx = x+9*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+2*H/24)
  cpx = x+15*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+5*H/24)
  cpx = x+15*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+8*H/24)
  cpx = x+13*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+10*H/24)
  ctx.stroke()
  //2
  ctx.beginPath()
  ctx.arc(x+14*W/24, y+5*H/24, W/32, 0, Math.PI*2)
  ctx.stroke()
  //3
  ctx.beginPath()
  ctx.arc(x+10*W/24, y+5*H/24, W/32, 0, Math.PI*2)
  ctx.stroke()
  //4
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+10*H/24)
  cpx = x+4*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+14*H/24)
  cpx = x+4*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+20*H/24)
  cpx = x+5*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+14*H/24)
  cpx = x+5*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+11*H/24)
  ctx.stroke()
  //5
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+10*H/24)
  cpx = x+20*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+14*H/24)
  cpx = x+20*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+20*H/24)
  cpx = x+19*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+14*H/24)
  cpx = x+19*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+11*H/24)
  ctx.stroke()
  //8
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+11*H/24)
  cpx = x+6*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+15*H/24)
  cpx = x+6*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+21*H/24)
  cpx = x+7*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+15*H/24)
  cpx = x+7*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+11*H/24)
  ctx.stroke()
  //9
  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+11*H/24)
  cpx = x+18*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+15*H/24)
  cpx = x+18*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+21*H/24)
  cpx = x+17*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+15*H/24)
  cpx = x+17*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+11*H/24)
  ctx.stroke()
  // inner legs 
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+11*H/24)
  cpx = x+8*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+16*H/24)
  cpx = x+8*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+22*H/24)
  cpx = x+9*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+16*H/24)
  cpx = x+9*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+11*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+11*H/24)
  cpx = x+16*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+16*H/24)
  cpx = x+16*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+22*H/24)
  cpx = x+15*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+16*H/24)
  cpx = x+15*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+11*H/24)
  ctx.stroke()
  //1
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+11*H/24)
  cpx = x+10*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+16*H/24)
  cpx = x+10*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+23*H/24)
  cpx = x+11*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+16*H/24)
  cpx = x+11*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+11*H/24)
  ctx.stroke()
  //2
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+11*H/24)
  cpx = x+14*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+16*H/24)
  cpx = x+14*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+23*H/24)
  cpx = x+13*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+16*H/24)
  cpx = x+13*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+11*H/24)
  ctx.stroke()
}

function hang_manAt (x,y,W,color,invert) {
  if (invert)
    hangmaniAt(x,y,W,color)
  else
    hangmanuAt(x,y,W,color)
}

function hangmaniAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  const found = words.match(/\b\w{5}\b/gm)
  let wrd = randomPick(found).split('')
  let fs = W/24 * 2, i = 0
  ctx.font = "800 "+(fs)+"pt AmericanTypewriter,Courier"
  let m = [2,6,10,14,18]
  for (; i < 5; i++) {
    if (Math.random() < 0.6)
      ctx.fillText(wrd[i],x+m[i]*W/24, y+21*H/24)
  }
  //1
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+22*H/24)
  ctx.lineTo(x+4*W/24, y+22*H/24)
  ctx.stroke()
  //2
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+22*H/24)
  ctx.lineTo(x+8*W/24, y+22*H/24)
  ctx.stroke()
  //3
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+22*H/24)
  ctx.lineTo(x+12*W/24, y+22*H/24)
  ctx.stroke()
  //4
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+22*H/24)
  ctx.lineTo(x+16*W/24, y+22*H/24)
  ctx.stroke()
  //5
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+22*H/24)
  ctx.lineTo(x+20*W/24, y+22*H/24)
  ctx.stroke()
  //6
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+18*H/24)
  ctx.lineTo(x+8*W/24, y+18*H/24)
  ctx.stroke()
  //7
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+18*H/24)
  ctx.lineTo(x+5*W/24, y+2*H/24)
  ctx.lineTo(x+14*W/24, y+2*H/24)
  ctx.lineTo(x+14*W/24, y+4*H/24)
  ctx.stroke()
  //11
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+13*H/24)
  ctx.lineTo(x+14*W/24, y+12*H/24)
  ctx.stroke()
  //8
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+4*H/24)
  cpx = x+16*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+8*H/24)
  cpx = x+20*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+5*H/24)
  ctx.lineTo(x+16*W/24, y+8*H/24)
  ctx.lineTo(x+14*W/24, y+12*H/24)
  ctx.stroke()
  //9
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+12*H/24)
  ctx.lineTo(x+12*W/24, y+9*H/24)
  ctx.lineTo(x+14*W/24, y+12*H/24)
  ctx.lineTo(x+18*W/24, y+11*H/24)
  ctx.stroke()
  //10
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+13*H/24)
  cpx = x+15*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+14*H/24)
  cpx = x+15*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+15*H/24)
  cpx = x+13*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+14*H/24)
  cpx = x+13*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+13*H/24)
  ctx.stroke()
}

function hangmanuAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  const found = words.match(/\b\w{5}\b/gm)
  let wrd = randomPick(found).split('')
  let fs = W/24 * 2, i = 0
  ctx.font = "800 "+(fs)+"pt AmericanTypewriter,Courier"
  let m = [2,6,10,14,18]
  for (; i < 5; i++) {
    if (Math.random() < 0.6)
      ctx.fillText(wrd[i],x+m[i]*W/24, y+21*H/24)
  }
  //1
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+22*H/24)
  ctx.lineTo(x+4*W/24, y+22*H/24)
  ctx.stroke()
  //2
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+22*H/24)
  ctx.lineTo(x+8*W/24, y+22*H/24)
  ctx.stroke()
  //3
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+22*H/24)
  ctx.lineTo(x+12*W/24, y+22*H/24)
  ctx.stroke()
  //4
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+22*H/24)
  ctx.lineTo(x+16*W/24, y+22*H/24)
  ctx.stroke()
  //5
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+22*H/24)
  ctx.lineTo(x+20*W/24, y+22*H/24)
  ctx.stroke()
  //6
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+18*H/24)
  ctx.lineTo(x+8*W/24, y+18*H/24)
  ctx.stroke()
  //7
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+18*H/24)
  ctx.lineTo(x+5*W/24, y+2*H/24)
  ctx.lineTo(x+14*W/24, y+2*H/24)
  ctx.lineTo(x+14*W/24, y+4*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+6*H/24)
  cpx = x+15*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+5*H/24)
  cpx = x+15*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+4*H/24)
  cpx = x+13*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+5*H/24)
  cpx = x+13*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+6*H/24)
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+6*H/24)
  ctx.lineTo(x+14*W/24, y+7*H/24)
  ctx.lineTo(x+11*W/24, y+10*H/24)
  ctx.lineTo(x+14*W/24, y+7*H/24)
  ctx.lineTo(x+17*W/24, y+10*H/24)
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+7*H/24)
  ctx.lineTo(x+14*W/24, y+12*H/24)
  ctx.lineTo(x+11*W/24, y+15*H/24)
  ctx.lineTo(x+14*W/24, y+12*H/24)
  ctx.lineTo(x+17*W/24, y+15*H/24)
  ctx.stroke()
}

function coffee_makerAt (x,y,W,color,invert) {
  if (invert)
    french_pressAt(x,y,W,color)
  else
    mr_coffeeAt(x,y,W,color)
}

function stone_of_madnessAt (x,y,W,color,invert) {
  if (invert)
    stone_ofAt(x,y,W,color, invert) // trapenation
  else
    stone_ofAt(x,y,W,color)
}

function french_pressAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  ctx.globalAlpha /= 3
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+9*H/24)
  ctx.lineTo(x+18*W/24, y+9*H/24)
  ctx.lineTo(x+18*W/24, y+19*H/24)
  ctx.lineTo(x+8*W/24, y+19*H/24)
  ctx.lineTo(x+8*W/24, y+20*H/24)
  ctx.lineTo(x+18*W/24, y+20*H/24)
  ctx.lineTo(x+18*W/24, y+21*H/24)
  cpx = x+18*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+22*H/24)
  ctx.lineTo(x+9*W/24, y+22*H/24)
  cpx = x+8*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+21*H/24)
  ctx.lineTo(x+8*W/24, y+9*H/24)
  ctx.fill()
  ctx.globalAlpha *= 3

  //1
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+22*H/24)
  cpx = x+18*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+21*H/24)
  cpx = x+18*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+6*H/24)
  cpx = x+18*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+4*H/24)
  cpx = x+10*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+4*H/24)
  cpx = x+8*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+6*H/24)
  cpx = x+8*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+21*H/24)
  cpx = x+8*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+22*H/24)
  cpx = x+17*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+22*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+19*H/24)
  ctx.lineTo(x+8*W/24, y+20*H/24)
  ctx.lineTo(x+18*W/24, y+20*H/24)
  ctx.lineTo(x+18*W/24, y+19*H/24)
  ctx.lineTo(x+8*W/24, y+19*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+6*H/24)
  ctx.lineTo(x+20*W/24, y+6*H/24)
  ctx.lineTo(x+18*W/24, y+9*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+6*H/24)
  ctx.lineTo(x+13*W/24, y+19*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+4*H/24)
  ctx.lineTo(x+13*W/24, y+3*H/24)
  cpx = x+14*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+2*H/24)
  cpx = x+14*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+1*H/24)
  cpx = x+12*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+2*H/24)
  cpx = x+12*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+3*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+6*H/24)
  cpx = x+5*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+6*H/24)
  cpx = x+4*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+7*H/24)
  cpx = x+4*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+18*H/24)
  cpx = x+4*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+19*H/24)
  cpx = x+8*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+19*H/24)
  ctx.stroke()
  //7
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+18*H/24)
  cpx = x+6*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+18*H/24)
  cpx = x+5*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+17*H/24)
  cpx = x+5*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+8*H/24)
  cpx = x+5*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+7*H/24)
  cpx = x+8*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+7*H/24)
  ctx.stroke()
}

function locationAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.fillStyle = 'red'
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+22*H/24)
  cpx = x+13*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+8*H/24)
  cpx = x+14*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+1*H/24)
  cpx = x+0*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+0*W/24, y+8*H/24)
  cpx = x+1*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+22*H/24)
  cpx = x+7*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+11*H/24)
  cpx = x+4*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+8*H/24)
  cpx = x+4*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+5*H/24)
  cpx = x+10*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+8*H/24)
  cpx = x+10*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+11*H/24)
  cpx = x+7*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+22*H/24)
  ctx.fill()
}
function joineryAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+22*H/24)
  ctx.lineTo(x+16*W/24, y+20*H/24)
  ctx.lineTo(x+16*W/24, y+21*H/24)
  ctx.lineTo(x+12*W/24, y+23*H/24)
  ctx.lineTo(x+12*W/24, y+22*H/24)
  ctx.lineTo(x+8*W/24, y+20*H/24)
  ctx.lineTo(x+8*W/24, y+19*H/24)
  ctx.lineTo(x+12*W/24, y+21*H/24)
  ctx.lineTo(x+12*W/24, y+20*H/24)
  ctx.lineTo(x+16*W/24, y+18*H/24)
  ctx.lineTo(x+16*W/24, y+19*H/24)
  ctx.lineTo(x+12*W/24, y+21*H/24)
  ctx.stroke()
  //2
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+23*H/24)
  ctx.lineTo(x+2*W/24, y+18*H/24)
  ctx.stroke()
  //3
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+20*H/24)
  ctx.lineTo(x+2*W/24, y+15*H/24)
  ctx.stroke()
  //4
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+21*H/24)
  ctx.lineTo(x+22*W/24, y+18*H/24)
  ctx.stroke()
  //5
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+18*H/24)
  ctx.lineTo(x+22*W/24, y+15*H/24)
  ctx.stroke()
  //6
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+18*H/24)
  ctx.lineTo(x+2*W/24, y+11*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+22*W/24, y+11*H/24)
  ctx.lineTo(x+12*W/24, y+16*H/24)
  ctx.stroke()
  //8
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+21*H/24)
  ctx.lineTo(x+12*W/24, y+22*H/24)
  ctx.stroke()
  //right piece
  //1
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+9*H/24)
  ctx.lineTo(x+20*W/24, y+7*H/24)
  ctx.lineTo(x+20*W/24, y+8*H/24)
  ctx.lineTo(x+22*W/24, y+7*H/24)
  ctx.stroke()
  //2
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+6*H/24)
  ctx.lineTo(x+20*W/24, y+5*H/24)
  ctx.lineTo(x+22*W/24, y+4*H/24)
  ctx.stroke()
  //3
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+3*H/24)
  ctx.lineTo(x+20*W/24, y+5*H/24)
  ctx.stroke()
  //4
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+6*H/24)
  ctx.lineTo(x+16*W/24, y+4*H/24)
  ctx.lineTo(x+16*W/24, y+3*H/24)
  ctx.lineTo(x+18*W/24, y+2*H/24)
  ctx.stroke()
  //5
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+4*H/24)
  ctx.lineTo(x+12*W/24, y+6*H/24)
  ctx.lineTo(x+12*W/24, y+7*H/24)
  ctx.lineTo(x+16*W/24, y+9*H/24)
  ctx.lineTo(x+16*W/24, y+8*H/24)
  ctx.lineTo(x+12*W/24, y+6*H/24)
  ctx.stroke()
  //6
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+6*H/24)
  ctx.lineTo(x+16*W/24, y+8*H/24)
  ctx.stroke()
  //7
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+8*H/24)
  ctx.lineTo(x+19*W/24, y+7.5*H/24)
  ctx.stroke()
  // left part
  //1
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+4*H/24)
  ctx.lineTo(x+7*W/24, y+2*H/24)
  ctx.stroke()
  //2
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+6*H/24)
  ctx.lineTo(x+11*W/24, y+4*H/24)
  ctx.lineTo(x+11*W/24, y+5*H/24)
  ctx.lineTo(x+7*W/24, y+7*H/24)
  ctx.lineTo(x+7*W/24, y+6*H/24)
  ctx.lineTo(x+2*W/24, y+3.5*H/24)
  ctx.stroke()
  //3
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+6*H/24)
  ctx.lineTo(x+11*W/24, y+7*H/24)
  ctx.lineTo(x+7*W/24, y+9*H/24)
  ctx.lineTo(x+7*W/24, y+8*H/24)
  ctx.lineTo(x+11*W/24, y+6*H/24)
  ctx.stroke()
  //4
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+7*H/24)
  ctx.lineTo(x+3*W/24, y+5*H/24)
  ctx.lineTo(x+3*W/24, y+6*H/24)
  ctx.lineTo(x+7*W/24, y+8*H/24)
  ctx.stroke()
  //6
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+9*H/24)
  ctx.lineTo(x+2*W/24, y+6.5*H/24)
  ctx.stroke()
  //7
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+6*H/24)
  ctx.lineTo(x+10*W/24, y+5.5*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+6*H/24)
  ctx.lineTo(x+4*W/24, y+5.5*H/24)
  ctx.stroke()
}

function big_cityAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
   //1
   ctx.beginPath()
   ctx.moveTo(x+2*W/24, y+4*H/24)
   ctx.lineTo(x+6*W/24, y+8*H/24)
   ctx.lineTo(x+2*W/24, y+12*H/24)
   ctx.stroke()
 
   //2
   ctx.beginPath()
   ctx.moveTo(x+8*W/24, y+8*H/24)
   ctx.lineTo(x+12*W/24, y+4*H/24)
   ctx.lineTo(x+16*W/24, y+8*H/24)
   ctx.lineTo(x+12*W/24, y+12*H/24)
   ctx.lineTo(x+8*W/24, y+8*H/24)
   ctx.stroke()
 
   //3
   ctx.beginPath()
   ctx.moveTo(x+7*W/24, y+9*H/24)
   ctx.lineTo(x+3*W/24, y+13*H/24)
   ctx.lineTo(x+7*W/24, y+17*H/24)
   ctx.lineTo(x+11*W/24, y+13*H/24)
   ctx.lineTo(x+7*W/24, y+9*H/24)
   ctx.stroke()
 
   //4
   ctx.beginPath()
   ctx.moveTo(x+3*W/24, y+3*H/24)
   ctx.lineTo(x+7*W/24, y+7*H/24)
   ctx.lineTo(x+11*W/24, y+3*H/24)
   ctx.lineTo(x+10*W/24, y+2*H/24)
   ctx.stroke()
 
   //5
   ctx.beginPath()
   ctx.moveTo(x+4*W/24, y+2*H/24)
   ctx.lineTo(x+3*W/24, y+3*H/24)
   ctx.stroke()
 
   //6
   ctx.beginPath()
   ctx.moveTo(x+13*W/24, y+13*H/24)
   ctx.lineTo(x+17*W/24, y+9*H/24)
   ctx.lineTo(x+21*W/24, y+13*H/24)
   ctx.lineTo(x+17*W/24, y+17*H/24)
   ctx.lineTo(x+13*W/24, y+13*H/24)
   ctx.stroke()
 
   //7
   ctx.beginPath()
   ctx.moveTo(x+12*W/24, y+14*H/24)
   ctx.lineTo(x+16*W/24, y+18*H/24)
   ctx.lineTo(x+12*W/24, y+22*H/24)
   ctx.lineTo(x+8*W/24, y+18*H/24)
   ctx.lineTo(x+12*W/24, y+14*H/24)
   ctx.stroke()
 
   //8
   ctx.beginPath()
   ctx.moveTo(x+7*W/24, y+19*H/24)
   ctx.lineTo(x+10*W/24, y+22*H/24)
   ctx.stroke()
 
   //9
   ctx.beginPath()
   ctx.moveTo(x+7*W/24, y+19*H/24)
   ctx.lineTo(x+4*W/24, y+22*H/24)
   ctx.stroke()
 
   //10
   ctx.beginPath()
   ctx.moveTo(x+2*W/24, y+22*H/24)
   ctx.lineTo(x+6*W/24, y+18*H/24)
   ctx.lineTo(x+2*W/24, y+14*H/24)
   ctx.stroke()
 
   //11
   ctx.beginPath()
   ctx.moveTo(x+14*W/24, y+22*H/24)
   ctx.lineTo(x+17*W/24, y+19*H/24)
   ctx.lineTo(x+20*W/24, y+22*H/24)
   ctx.stroke()
 
   //12
   ctx.beginPath()
   ctx.moveTo(x+22*W/24, y+14*H/24)
   ctx.lineTo(x+18*W/24, y+18*H/24)
   ctx.lineTo(x+22*W/24, y+22*H/24)
   ctx.stroke()
 
   //13
   ctx.beginPath()
   ctx.moveTo(x+13*W/24, y+3*H/24)
   ctx.lineTo(x+17*W/24, y+7*H/24)
   ctx.lineTo(x+21*W/24, y+3*H/24)
   ctx.lineTo(x+20*W/24, y+2*H/24)
   ctx.stroke()
 
   //14
   ctx.beginPath()
   ctx.moveTo(x+14*W/24, y+2*H/24)
   ctx.lineTo(x+13*W/24, y+3*H/24)
   ctx.stroke()
 
   //15
   ctx.beginPath()
   ctx.moveTo(x+18*W/24, y+8*H/24)
   ctx.lineTo(x+22*W/24, y+4*H/24)
   ctx.stroke()
 
   //16
   ctx.beginPath()
   ctx.moveTo(x+18*W/24, y+8*H/24)
   ctx.lineTo(x+22*W/24, y+12*H/24)
   ctx.stroke()
 
   //17
   ctx.beginPath()
   ctx.moveTo(x+6*W/24, y+15*H/24)
   ctx.lineTo(x+7*W/24, y+16*H/24)
   ctx.lineTo(x+8*W/24, y+15*H/24)
   ctx.lineTo(x+8*W/24, y+11*H/24)
   ctx.lineTo(x+7*W/24, y+10*H/24)
   ctx.lineTo(x+6*W/24, y+11*H/24)
   ctx.lineTo(x+6*W/24, y+15*H/24)
   ctx.stroke()
 
   //18
   ctx.beginPath()
   ctx.moveTo(x+6*W/24, y+11*H/24)
   ctx.lineTo(x+7*W/24, y+12*H/24)
   ctx.lineTo(x+8*W/24, y+11*H/24)
   ctx.stroke()
 
   //19
   ctx.beginPath()
   ctx.moveTo(x+7*W/24, y+12*H/24)
   ctx.lineTo(x+7*W/24, y+16*H/24)
   ctx.stroke()
 
   //20
   ctx.beginPath()
   ctx.moveTo(x+12*W/24, y+11*H/24)
   ctx.lineTo(x+11*W/24, y+10*H/24)
   ctx.lineTo(x+11*W/24, y+6*H/24)
   ctx.lineTo(x+12*W/24, y+5*H/24)
   ctx.lineTo(x+13*W/24, y+6*H/24)
   ctx.lineTo(x+13*W/24, y+10*H/24)
   ctx.lineTo(x+12*W/24, y+11*H/24)
   ctx.lineTo(x+12*W/24, y+7*H/24)
   ctx.lineTo(x+13*W/24, y+6*H/24)
   ctx.stroke()
 
   //21
   ctx.beginPath()
   ctx.moveTo(x+11*W/24, y+6*H/24)
   ctx.lineTo(x+12*W/24, y+7*H/24)
   ctx.stroke()
 
   //22
   ctx.beginPath()
   ctx.moveTo(x+10*W/24, y+19*H/24)
   ctx.lineTo(x+12*W/24, y+21*H/24)
   ctx.lineTo(x+14*W/24, y+19*H/24)
   ctx.lineTo(x+14*W/24, y+17*H/24)
   ctx.lineTo(x+12*W/24, y+15*H/24)
   ctx.lineTo(x+10*W/24, y+17*H/24)
   ctx.lineTo(x+10*W/24, y+19*H/24)
   ctx.stroke()
 
   //23
   ctx.beginPath()
   ctx.moveTo(x+10*W/24, y+17*H/24)
   ctx.lineTo(x+12*W/24, y+19*H/24)
   ctx.lineTo(x+14*W/24, y+17*H/24)
   ctx.stroke()
 
   //24
   ctx.beginPath()
   ctx.moveTo(x+12*W/24, y+19*H/24)
   ctx.lineTo(x+12*W/24, y+21*H/24)
   ctx.stroke()
  
  //45
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+16*H/24)
  ctx.lineTo(x+19*W/24, y+14*H/24)
  ctx.lineTo(x+19*W/24, y+12*H/24)
  ctx.lineTo(x+17*W/24, y+10*H/24)
  ctx.lineTo(x+15*W/24, y+12*H/24)
  ctx.lineTo(x+15*W/24, y+14*H/24)
  ctx.lineTo(x+17*W/24, y+16*H/24)
  ctx.stroke()

  //46
  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+12*H/24)
  ctx.lineTo(x+17*W/24, y+14*H/24)
  ctx.lineTo(x+19*W/24, y+12*H/24)
  ctx.stroke()

  //47
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+14*H/24)
  ctx.lineTo(x+17*W/24, y+16*H/24)
  ctx.stroke()

  //48
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+9*H/24)
  ctx.lineTo(x+2*W/24, y+11*H/24)
  ctx.stroke()
 
   //28
   ctx.beginPath()
   ctx.moveTo(x+17*W/24, y+6*H/24)
   ctx.lineTo(x+19*W/24, y+4*H/24)
   ctx.lineTo(x+19*W/24, y+2*H/24)
   ctx.stroke()
 
   //29
   ctx.beginPath()
   ctx.moveTo(x+17*W/24, y+6*H/24)
   ctx.lineTo(x+15*W/24, y+4*H/24)
   ctx.lineTo(x+15*W/24, y+2*H/24)
   ctx.stroke()
 
   //30
   ctx.beginPath()
   ctx.moveTo(x+17*W/24, y+6*H/24)
   ctx.lineTo(x+17*W/24, y+3*H/24)
   ctx.lineTo(x+18*W/24, y+2*H/24)
   ctx.lineTo(x+17*W/24, y+3*H/24)
   ctx.lineTo(x+16*W/24, y+2*H/24)
   ctx.stroke()
 
   //31
   ctx.beginPath()
   ctx.moveTo(x+2*W/24, y+11*H/24)
   ctx.lineTo(x+4*W/24, y+9*H/24)
   ctx.lineTo(x+4*W/24, y+7*H/24)
   ctx.lineTo(x+2*W/24, y+9*H/24)
   ctx.stroke()
 
   //32
   ctx.beginPath()
   ctx.moveTo(x+2*W/24, y+5*H/24)
   ctx.lineTo(x+4*W/24, y+7*H/24)
   ctx.stroke()
 
   //33
   ctx.beginPath()
   ctx.moveTo(x+17*W/24, y+20*H/24)
   ctx.lineTo(x+15*W/24, y+22*H/24)
   ctx.lineTo(x+17*W/24, y+20*H/24)
   ctx.lineTo(x+19*W/24, y+22*H/24)
   ctx.stroke()
 
   //34
   ctx.beginPath()
   ctx.moveTo(x+22*W/24, y+15*H/24)
   ctx.lineTo(x+20*W/24, y+17*H/24)
   ctx.lineTo(x+22*W/24, y+19*H/24)
   ctx.lineTo(x+22*W/24, y+21*H/24)
   ctx.lineTo(x+20*W/24, y+19*H/24)
   ctx.lineTo(x+20*W/24, y+17*H/24)
   ctx.stroke()
 
   //35
   ctx.beginPath()
   ctx.moveTo(x+22*W/24, y+5*H/24)
   ctx.lineTo(x+21*W/24, y+6*H/24)
   ctx.lineTo(x+21*W/24, y+10*H/24)
   ctx.lineTo(x+22*W/24, y+11*H/24)
   ctx.lineTo(x+22*W/24, y+7*H/24)
   ctx.lineTo(x+21*W/24, y+6*H/24)
   ctx.stroke()
 
   //36
   ctx.beginPath()
   ctx.moveTo(x+7*W/24, y+6*H/24)
   ctx.lineTo(x+9*W/24, y+4*H/24)
   ctx.lineTo(x+9*W/24, y+2*H/24)
   ctx.stroke()
 
   //37
   ctx.beginPath()
   ctx.moveTo(x+7*W/24, y+3*H/24)
   ctx.lineTo(x+7*W/24, y+6*H/24)
   ctx.lineTo(x+5*W/24, y+4*H/24)
   ctx.lineTo(x+5*W/24, y+2*H/24)
   ctx.stroke()
 
   //38
   ctx.beginPath()
   ctx.moveTo(x+6*W/24, y+2*H/24)
   ctx.lineTo(x+7*W/24, y+3*H/24)
   ctx.lineTo(x+8*W/24, y+2*H/24)
   ctx.stroke()
 
   //39
   ctx.beginPath()
   ctx.moveTo(x+7*W/24, y+19*H/24)
   ctx.lineTo(x+6*W/24, y+20*H/24)
   ctx.lineTo(x+7*W/24, y+21*H/24)
   ctx.lineTo(x+8*W/24, y+20*H/24)
   ctx.lineTo(x+8*W/24, y+22*H/24)
   ctx.stroke()
 
   //40
   ctx.beginPath()
   ctx.moveTo(x+7*W/24, y+21*H/24)
   ctx.lineTo(x+7*W/24, y+22*H/24)
   ctx.stroke()
 
   //41
   ctx.beginPath()
   ctx.moveTo(x+6*W/24, y+20*H/24)
   ctx.lineTo(x+6*W/24, y+22*H/24)
   ctx.stroke()
 
   //42
   ctx.beginPath()
   ctx.moveTo(x+2*W/24, y+21*H/24)
   ctx.lineTo(x+4*W/24, y+19*H/24)
   ctx.lineTo(x+4*W/24, y+17*H/24)
   ctx.lineTo(x+2*W/24, y+19*H/24)
   ctx.lineTo(x+2*W/24, y+21*H/24)
   ctx.stroke()
 
   //43
   ctx.beginPath()
   ctx.moveTo(x+4*W/24, y+17*H/24)
   ctx.lineTo(x+2*W/24, y+15*H/24)
   ctx.stroke()

     //49
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+14*H/24)
  ctx.lineTo(x+5*W/24, y+12*H/24)
  ctx.lineTo(x+6*W/24, y+13*H/24)
  ctx.lineTo(x+6*W/24, y+11*H/24)
  ctx.lineTo(x+5*W/24, y+12*H/24)
  ctx.lineTo(x+5*W/24, y+14*H/24)
  ctx.lineTo(x+6*W/24, y+15*H/24)
  ctx.stroke()

  //50
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+10*H/24)
  ctx.lineTo(x+14*W/24, y+9*H/24)
  ctx.lineTo(x+14*W/24, y+7*H/24)
  ctx.lineTo(x+13*W/24, y+8*H/24)
  ctx.lineTo(x+14*W/24, y+7*H/24)
  ctx.lineTo(x+13*W/24, y+6*H/24)
  ctx.stroke()
  let f = W/4
  locationAt(x+W/2+pet(W/2), y+W/2+pet(W/3), f)
}

function stomachAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+1*H/24)
  cpx = x+10*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+6*H/24)
  cpx = x+13*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+3*H/24)
  cpx = x+22*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+11*H/24)
  cpx = x+22*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+21*H/24)
  cpx = x+8*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+16*H/24)
  cpx = x+5*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+18*H/24)
  cpx = x+5*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+22*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+22*H/24)
  cpx = x+3*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+18*H/24)
  cpx = x+3*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+14*H/24)
  cpx = x+7*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+12*H/24)
  cpx = x+12*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+10*H/24)
  cpx = x+12*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+8*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+8*H/24)
  cpx = x+10*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+5*H/24)
  cpx = x+8*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+1*H/24)
  ctx.stroke()
}
function missingAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+21*H/24)
  cpx = x+3*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+16*H/24)
  cpx = x+13*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+10*H/24)
  cpx = x+17*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+2*H/24)
  cpx = x+22*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+4*H/24)
  cpx = x+23*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+6*H/24)
  cpx = x+20*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+12*H/24)
  cpx = x+20*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+17*H/24)
  cpx = x+14*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+23*H/24)
  cpx = x+5*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+21*H/24)
  ctx.stroke()

  ctx.setLineDash([W/24])
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+21*H/24)
  cpx = x+1*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+16*H/24)
  cpx = x+11*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+10*H/24)
  cpx = x+15*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+2*H/24)
  cpx = x+20*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+4*H/24)
  cpx = x+21*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+6*H/24)
  cpx = x+18*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+12*H/24)
  cpx = x+18*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+17*H/24)
  cpx = x+12*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+23*H/24)
  cpx = x+3*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+21*H/24)
  ctx.stroke()
  ctx.setLineDash([])
}

function hexAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let hex = color//randomColor()
  ctx.fillStyle = hex
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = hex
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  let cc = closestColor(hex)
  //1
  defs["hexAt"].i = "closest Pantone: " + cc[1]
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+2*H/24)
  ctx.lineTo(x+22*W/24, y+2*H/24)
  ctx.lineTo(x+22*W/24, y+22*H/24)
  ctx.lineTo(x+2*W/24, y+22*H/24)
  ctx.lineTo(x+2*W/24, y+2*H/24)
  ctx.fill()
  let fs = W/24 * 2
  ctx.font = "100 "+(fs)+"pt AmericanTypewriter,Courier"
  hex = hex.toUpperCase()
  let tw = ctx.measureText(hex).width
  ctx.fillText(hex, x+12*W/24-tw/2, y+fs+23*H/24)
}

function unoAt (x,y,W,color,INVERT) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  W *= 1.5
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = "#ffffee"
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, angle = 0
  //defs["unoAt"] = {"u":"brother from another mother","i":"Kobayashi Maru"},
  //1
  ctx.beginPath()
  p = rotatePoint(x+1*W/24, y+24*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+15*W/24, y+24*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  cpx = x+16*W/24
  cpy = y+24*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+16*W/24, y+23*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  p = rotatePoint(x+16*W/24, y+1*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  cpx = x+16*W/24
  cpy = y+0*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+15*W/24, y+0*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  p = rotatePoint(x+1*W/24, y+0*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  cpx = x+0*W/24
  cpy = y+0*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+0*W/24, y+1*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  p = rotatePoint(x+0*W/24, y+23*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  cpx = x+0*W/24
  cpy = y+24*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+1*W/24, y+24*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.shadowBlur = 10
  ctx.shadowColor = "#444444"
  ctx.shadowOffsetX = -2
  ctx.shadowOffsetY  = -12
  ctx.fill()
  ctx.shadowBlur = 0
  ctx.shadowColor = "#444444"
  ctx.shadowOffsetX = 0
  ctx.shadowOffsetY  = 0
  ctx.fillStyle = "#2222ff"
  //2 inner fill
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+23*H/24)
  cpx = x+15*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+22*H/24)
  ctx.lineTo(x+15*W/24, y+2*H/24)
  cpx = x+15*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+1*H/24)
  ctx.lineTo(x+2*W/24, y+1*H/24)
  cpx = x+1*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+2*H/24)
  ctx.lineTo(x+1*W/24, y+22*H/24)
  cpx = x+1*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+23*H/24)
  ctx.lineTo(x+14*W/24, y+23*H/24)
  ctx.fill()
  ctx.fillStyle = "#ffffee"
  //3 inner oval
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+14*H/24)
  cpx = x+1*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+22*H/24)
  cpx = x+14*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+9*H/24)
  cpx = x+15*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+2*H/24)
  cpx = x+2*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+14*H/24)
  ctx.fill()
  
  ctx.fillStyle = "#ffffee"
  //4
  ctx.beginPath()
  p = rotatePoint(x+2*W/24, y+2*H/24 ,cx,cy,0)
  twoAt(p[0],p[1],W/12, ctx.fillStyle, 0)
  ctx.fill()
  //5
  ctx.beginPath()
  p = rotatePoint(x+12*W/24, y+20*H/24 ,cx,cy,0)
  twoAt(p[0],p[1],W/12, ctx.fillStyle, 180)
  ctx.fill()
  ctx.fillStyle = "#2222ff"
  //6
  ctx.beginPath()
  p = rotatePoint(x+4.3*W/24, y+8*H/24 ,cx,cy,0)
  twoAt(p[0],p[1],W/3, ctx.fillStyle, 0)
  ctx.fill()

  let orientation = "u"
  if (INVERT && INVERT[0] === 1)
     orientation = "i"
  if (W < 512) { // W is wider in this card's case
    cardcaption ("six_of_heartsAt",orientation,x,y,340,506)
  }
}

function twoAt (x,y,W,color,angle) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2

  ctx.beginPath()
  p = rotatePoint(x+8*W/24, y+19*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+17*W/24
  cpy = y+15*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+20*W/24, y+10*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+22*W/24
  cpy = y+6*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+19*W/24, y+2*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+17*W/24
  cpy = y+0*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+13*W/24, y+0*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+3*W/24
  cpy = y+1*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+2*W/24, y+10*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+8*W/24
  cpy = y+10*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+8*W/24, y+10*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+9*W/24
  cpy = y+5*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24, y+5*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+15*W/24
  cpy = y+5*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+15*W/24, y+8*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+14*W/24
  cpy = y+11*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+10*W/24, y+13*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+1*W/24
  cpy = y+16*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+0*W/24, y+24*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  p = rotatePoint(x+18*W/24, y+24*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+19*W/24, y+19*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+8*W/24, y+19*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.fill()
}

function space_intentionally_left_blankAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.setLineDash([W/24, W/24])
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+2*H/24)
  ctx.lineTo(x+22*W/24, y+2*H/24)
  ctx.lineTo(x+22*W/24, y+22*H/24)
  ctx.lineTo(x+2*W/24, y+22*H/24)
  ctx.lineTo(x+2*W/24, y+2*H/24)
  ctx.stroke()
  ctx.setLineDash([])
}

function self_referenceAt (x,y,W,color) {
  //x = W/24, y = 3*W/24
  let self = 'function self_reference (x,y,W,color) {\n\
  let self = \'function self_reference (x,y,W,color) {\n\
    let canvas = document.getElementById("myCanvas")\n\
    let ctx = canvas.getContext("2d")\n\
    ctx.fillStyle = color\n\
    ctx.font = "12pt courier"\n\
    let i = 0\n\
    for (; i < self.lengthl i++)\n\
      ctx.fillText(self[i], x, y+=16)\n\
  }\'.split("\\n")\n\
  let canvas = document.getElementById("myCanvas")\n\
  let ctx = canvas.getContext("2d")\n\
  ctx.fillStyle = color\n\
  ctx.font = "12pt courier"\n\
  let i = 0\n\
  for (; i < self.lengthl i++)\n\
    ctx.fillText(self[i], x, y+=16)\n\
}'.split("\n")
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let i = 0
  ctx.fillStyle = color
  ctx.font = "800 "+W/44+"pt courier"
  x += W/48, y += 4*W/24
  for (; i < self.length;i++)
    ctx.fillText(self[i], x,y+=W/24)
}

function upendedAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+12*H/24)
  cpx = x+2*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+22*H/24)
  cpx = x+22*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+12*H/24)
  cpx = x+2*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+12*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+22*W/24, y+12*H/24)
  cpx = x+22*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+8*H/24)
  cpx = x+22*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+6*H/24)
  cpx = x+18*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+8*H/24)
  cpx = x+18*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+10*H/24)
  cpx = x+20*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+11*H/24)
  cpx = x+20*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+12*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+12*H/24)
  cpx = x+18*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+9*H/24)
  cpx = x+18*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+8*H/24)
  cpx = x+16*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+9*H/24)
  cpx = x+16*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+12*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+9*H/24)
  cpx = x+16*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+8*H/24)
  cpx = x+14*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+9*H/24)
  cpx = x+14*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+12*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+12*H/24)
  cpx = x+8*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+9*H/24)
  cpx = x+8*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+8*H/24)
  cpx = x+6*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+9*H/24)
  cpx = x+6*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+12*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+9*H/24)
  cpx = x+6*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+8*H/24)
  cpx = x+4*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+9*H/24)
  cpx = x+4*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+12*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+12*H/24)
  cpx = x+4*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+8*H/24)
  cpx = x+4*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+6*H/24)
  cpx = x+2*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+8*H/24)
  cpx = x+2*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+12*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.arc(x+20*W/24, y+8*H/24, W/32,0,Math.PI*2)
  ctx.stroke()
}

function representationAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let cx = x+W/2, cy = y+H/2
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+22*H/24)
  ctx.lineTo(x+18*W/24, y+22*H/24)
  cpx = x+19*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+21*H/24)
  ctx.lineTo(x+19*W/24, y+3*H/24)
  cpx = x+19*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+2*H/24)
  ctx.lineTo(x+6*W/24, y+2*H/24)
  cpx = x+5*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+3*H/24)
  ctx.lineTo(x+5*W/24, y+21*H/24)
  cpx = x+5*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+22*H/24)
  ctx.stroke()
  diamondAt(x+8*W/24,y+6*H/24, 3.5*H/24)
  diamondAt(x+8*W/24,y+14*H/24, 3.5*H/24)
  diamondAt(x+13.3*W/24,y+14*H/24, 3.5*H/24)
  diamondAt(x+13.3*W/24,y+6*H/24, 3.5*H/24)
  //6
  ctx.beginPath()
  let p = rotatePoint(x+5.5*W/24, y+2.5*H/24 ,cx,cy,0)
  fourAt(p[0],p[1],W/14, ctx.fillStyle, 0)
  ctx.fill()
  //8
  ctx.beginPath()
  p = rotatePoint(x+5.5*W/24, y+4.6*H/24 ,cx,cy,0)
  diamondAt(p[0],p[1],W/14)
  ctx.fill()
  //7
  ctx.beginPath()
  p = rotatePoint(x+7.5*W/24, y+4.5*H/24 ,cx,cy,180)
  fourAt(p[0],p[1],W/14, ctx.fillStyle, 180)
  ctx.fill()
  //9
  ctx.beginPath()
  p = rotatePoint(x+17*W/24, y+17.5*H/24 ,cx,cy,0)
  diamondAt(p[0],p[1],W/14)
  ctx.fill()
}

function fourofdiamondsAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  x -=  W/6
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = 'red'
  ctx.fillStyle = '#ffffee'
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, angle = 0
  ctx.shadowBlur = 10
  ctx.shadowColor = "#444444"
  ctx.shadowOffsetX = 2
  ctx.shadowOffsetY  = 12
  defs["fourofdiamondsAt"] = {"u":"where did that come from?,well... actually","i":"out of the blue,immaterial,inapplicable,extraneous"},
  //1
  ctx.beginPath()
  p = rotatePoint(x+5*W/24, y+24*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+19*W/24
  cpy = y+24*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+19*W/24, y+24*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+20*W/24
  cpy = y+24*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+20*W/24, y+23*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+20*W/24
  cpy = y+1*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+20*W/24, y+1*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+20*W/24
  cpy = y+0*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+19*W/24, y+0*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+5*W/24
  cpy = y+0*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+5*W/24, y+0*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+4*W/24
  cpy = y+0*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+4*W/24, y+1*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+4*W/24
  cpy = y+23*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+4*W/24, y+23*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+4*W/24
  cpy = y+24*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+5*W/24, y+24*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()
  ctx.fillStyle = '#ff4000'
  //2
  ctx.shadowBlur = 0
  ctx.shadowColor = "#444444"
  ctx.shadowOffsetX = 0
  ctx.shadowOffsetY  = 0

  diamondAt(x+7.5*W/24,y+4*H/24, 4*H/24)
  //3
  diamondAt(x+7.5*W/24,y+16*H/24, 4*H/24)
  //4
  diamondAt(x+13.5*W/24,y+16*H/24, 4*H/24)
  //5
  diamondAt(x+13.5*W/24,y+4*H/24, 4*H/24)

  //6
  ctx.beginPath()
  p = rotatePoint(x+4.5*W/24, y+0.5*H/24 ,cx,cy,angle)
  fourAt(p[0],p[1],W/12, ctx.fillStyle, 0)
  ctx.fill()
  //7
  ctx.beginPath()
  p = rotatePoint(x+17.5*W/24, y+21.5*H/24 ,cx,cy,angle)
  fourAt(p[0],p[1],W/12, ctx.fillStyle, 180)
  ctx.fill()
  //8
   ctx.beginPath()
   p = rotatePoint(x+4.5*W/24, y+3*H/24 ,cx,cy,angle)
   diamondAt(p[0],p[1],W/12)
   ctx.fill()
   //9
   ctx.beginPath()
   p = rotatePoint(x+17.5*W/24, y+19*H/24 ,cx,cy,angle)
   diamondAt(p[0],p[1],W/12)
   ctx.fill()
}

function fourAt (x,y,W,color, angle) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2//, angle = 0
   //1
   ctx.beginPath()
   p = rotatePoint(x+13*W/24, y+22*H/24 ,cx,cy,angle)
   ctx.moveTo(p[0],p[1])
   cpx = x+13*W/24
   cpy = y+17*H/24
   cp = rotatePoint(cpx,cpy,cx,cy,angle)
   p = rotatePoint(x+13*W/24, y+17*H/24 ,cx,cy,angle)
   ctx.lineTo(p[0],p[1])
   p = rotatePoint(x+15*W/24, y+17*H/24 ,cx,cy,angle)
   ctx.lineTo(p[0],p[1])
   p = rotatePoint(x+16*W/24, y+14*H/24 ,cx,cy,angle)
   ctx.lineTo(p[0],p[1])
   p = rotatePoint(x+13*W/24, y+14*H/24 ,cx,cy,angle)
   ctx.lineTo(p[0],p[1])
   p = rotatePoint(x+13*W/24, y+0*H/24 ,cx,cy,angle)
   ctx.lineTo(p[0],p[1])
   p = rotatePoint(x+10*W/24, y+0*H/24 ,cx,cy,angle)
   ctx.lineTo(p[0],p[1])
   p = rotatePoint(x+0*W/24, y+15*H/24 ,cx,cy,angle)
   ctx.lineTo(p[0],p[1])
   p = rotatePoint(x+0*W/24, y+16*H/24 ,cx,cy,angle)
   ctx.lineTo(p[0],p[1])
   p = rotatePoint(x+3*W/24, y+14*H/24 ,cx,cy,angle)
   ctx.lineTo(p[0],p[1])
   p = rotatePoint(x+10*W/24, y+3*H/24 ,cx,cy,angle)
   ctx.lineTo(p[0],p[1])
   p = rotatePoint(x+10*W/24, y+14*H/24 ,cx,cy,angle)
   ctx.lineTo(p[0],p[1])
   p = rotatePoint(x+3*W/24, y+14*H/24 ,cx,cy,angle)
   ctx.lineTo(p[0],p[1])
   p = rotatePoint(x+0*W/24, y+16*H/24 ,cx,cy,angle)
   ctx.lineTo(p[0],p[1])
   p = rotatePoint(x+0*W/24, y+17*H/24 ,cx,cy,angle)
   ctx.lineTo(p[0],p[1])
   p = rotatePoint(x+10*W/24, y+17*H/24 ,cx,cy,angle)
   ctx.lineTo(p[0],p[1])
   p = rotatePoint(x+10*W/24, y+22*H/24 ,cx,cy,angle)
   ctx.lineTo(p[0],p[1])
   cpx = x+10*W/24
   cpy = y+23*H/24
   cp = rotatePoint(cpx,cpy,cx,cy,angle)
   p = rotatePoint(x+8*W/24, y+23*H/24,cx,cy,angle)
   ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
   cpx = x+7*W/24
   cpy = y+23*H/24
   cp = rotatePoint(cpx,cpy,cx,cy,angle)
   p = rotatePoint(x+7*W/24, y+24*H/24,cx,cy,angle)
   ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
   cpx = x+16*W/24
   cpy = y+24*H/24
   cp = rotatePoint(cpx,cpy,cx,cy,angle)
   p = rotatePoint(x+16*W/24, y+24*H/24,cx,cy,angle)
   ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
   cpx = x+16*W/24
   cpy = y+23*H/24
   cp = rotatePoint(cpx,cpy,cx,cy,angle)
   p = rotatePoint(x+15*W/24, y+23*H/24,cx,cy,angle)
   ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
   cpx = x+13*W/24
   cpy = y+23*H/24
   cp = rotatePoint(cpx,cpy,cx,cy,angle)
   p = rotatePoint(x+13*W/24, y+22*H/24,cx,cy,angle)
   ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
   ctx.fill()
}

function diamondAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+24*H/24)
  cpx = x+11*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+12*H/24)
  cpx = x+11*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+0*H/24)
  cpx = x+5*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+0*W/24, y+12*H/24)
  cpx = x+5*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+24*H/24)
  ctx.fill()
}

function regexAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+16*H/24)
  ctx.lineTo(x+4*W/24, y+9*H/24)
  ctx.stroke()
//14
  ctx.beginPath()
  ctx.moveTo(x+22*W/24, y+15*H/24)
  ctx.lineTo(x+22*W/24, y+11*H/24)
  ctx.stroke()
  //3
  ctx.beginPath()
  ctx.arc(x+22*W/24, y+10*H/24,ctx.lineWidth/1.2,0,Math.PI*2)
  ctx.fill()
  //5
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+9*H/24)
  ctx.lineTo(x+5*W/24, y+9*H/24)
  ctx.lineTo(x+5*W/24, y+16*H/24)
  ctx.lineTo(x+7*W/24, y+16*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+14*H/24)
  cpx = x+8*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+15*H/24)
  cpx = x+6*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+14*H/24)
  cpx = x+6*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+13*H/24)
  cpx = x+6*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+12*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+11*H/24)
  cpx = x+7*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+11*H/24)
  cpx = x+8*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+12*H/24)
  cpx = x+8*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+14*H/24)
  cpx = x+8*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+15*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+13*H/24)
  ctx.lineTo(x+11*W/24, y+13*H/24)
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+11*H/24)
  ctx.lineTo(x+13*W/24, y+11*H/24)
  ctx.lineTo(x+11*W/24, y+15*H/24)
  ctx.lineTo(x+13*W/24, y+15*H/24)
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+16*H/24)
  ctx.lineTo(x+14*W/24, y+16*H/24)
  ctx.lineTo(x+14*W/24, y+9*H/24)
  ctx.lineTo(x+12*W/24, y+9*H/24)
  ctx.stroke()

  //11
  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+13*H/24)
  ctx.lineTo(x+17*W/24, y+13*H/24)
  ctx.stroke()

  //12
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+12*H/24)
  ctx.lineTo(x+16*W/24, y+14*H/24)
  ctx.stroke()

  //13
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+16*H/24)
  ctx.lineTo(x+19*W/24, y+9*H/24)
  ctx.stroke()

  //16
  ctx.beginPath()
  ctx.moveTo(x+21*W/24, y+11*H/24)
  cpx = x+19*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+12*H/24)
  cpx = x+19*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+14*H/24)
  cpx = x+19*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+15*H/24)
  cpx = x+21*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+14*H/24)
  cpx = x+21*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+17*H/24)
  cpx = x+21*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+18*H/24)
  cpx = x+19*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+17*H/24)
  ctx.stroke()

  //17
  ctx.beginPath()
  ctx.moveTo(x+21*W/24, y+11*H/24)
  ctx.lineTo(x+21*W/24, y+14*H/24)
  ctx.stroke()
}

function lawn_mowerAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "round"

  //3
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+21*H/24)
  ctx.lineTo(x+12*W/24, y+22*H/24)
  ctx.lineTo(x+23*W/24, y+22*H/24)
  cpx = x+23*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+20*H/24)
  cpx = x+11*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+20*H/24)
  cpx = x+12*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+22*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+18*H/24)
  ctx.lineTo(x+2*W/24, y+2*H/24)
  ctx.lineTo(x+11*W/24, y+2*H/24)
  ctx.lineTo(x+16*W/24, y+13*H/24)
  ctx.stroke()
  //4
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+17*H/24)
  ctx.lineTo(x+6*W/24, y+15*H/24)
  ctx.lineTo(x+10*W/24, y+15*H/24)
  ctx.stroke()
  
  //3
  ctx.beginPath()
  ctx.moveTo(x+22*W/24, y+20*H/24)
  ctx.lineTo(x+22*W/24, y+18*H/24)
  ctx.lineTo(x+18*W/24, y+15.6*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+15*H/24)
  ctx.lineTo(x+11*W/24, y+18*H/24)
  ctx.lineTo(x+11*W/24, y+20*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+18*H/24)
  ctx.lineTo(x+22*W/24, y+18*H/24)
  ctx.stroke()

  //11
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+20*H/24)
  ctx.lineTo(x+7*W/24, y+19.5*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+14*H/24)
  cpx = x+10*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+13*H/24)
  cpx = x+16*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+13*H/24)
  cpx = x+18*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+14*H/24)
  cpx = x+18*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+15*H/24)
  cpx = x+12*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+15*H/24)
  cpx = x+10*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+14*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+14*H/24)
  cpx = x+10*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+16*H/24)
  cpx = x+10*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+17*H/24)
  cpx = x+16*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+17*H/24)
  cpx = x+18*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+16*H/24)
  cpx = x+18*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+14*H/24)
  ctx.stroke()

  ctx.lineWidth *= 2.4
  //8
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+2*H/24)
  ctx.lineTo(x+10*W/24, y+2*H/24)
  ctx.stroke()
//1
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+22*H/24)
  cpx = x+10*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+21*H/24)
  cpx = x+10*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+19*H/24)
  cpx = x+8*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+20*H/24)
  cpx = x+8*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+22*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+20*H/24)
  cpx = x+7*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+19*H/24)
  cpx = x+7*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+17*H/24)
  cpx = x+5*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+18*H/24)
  cpx = x+5*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+20*H/24)
  ctx.stroke()  
  ctx.lineWidth /= 2.4
  ctx.fillStyle = color
}

function if_you_meet_the_buddhaAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+22*H/24)
  cpx = x+18*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+22*H/24)
  cpx = x+20*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+20*H/24)
  cpx = x+20*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+18*H/24)
  cpx = x+17*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+14*H/24)
  cpx = x+17*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+8*H/24)
  cpx = x+14*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+4*H/24)
  cpx = x+10*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+8*H/24)
  cpx = x+7*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+14*H/24)
  cpx = x+7*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+18*H/24)
  cpx = x+4*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+20*H/24)
  cpx = x+4*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+22*H/24)
  cpx = x+12*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+22*H/24)
  ctx.stroke()
  //1
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+18*H/24)
  ctx.lineTo(x+17*W/24, y+9*H/24)
  ctx.stroke()
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+7*H/24)
  ctx.lineTo(x+17*W/24, y+20*H/24)
  ctx.stroke()
}

function original_faceAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  let v = document.getElementById("featuresize").value
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+20*H/24)
  ctx.lineTo(x+23*W/24, y+20*H/24)
  cpx = x+24*W/24-16
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+24*W/24-16, y+19*H/24)
  ctx.lineTo(x+24*W/24-16, y+5*H/24)
  cpx = x+24*W/24-16
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+4*H/24)
  ctx.lineTo(x+1*W/24, y+4*H/24)
  cpx = x+0*W/24+8
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+0*W/24+8, y+5*H/24)
  ctx.lineTo(x+0*W/24+8, y+19*H/24)
  cpx = x+0*W/24+8
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+20*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+7*H/24)
  ctx.lineTo(x+10*W/24, y+7*H/24)
  ctx.lineTo(x+10*W/24, y+16*H/24)
  ctx.lineTo(x+1*W/24, y+16*H/24)
  ctx.lineTo(x+1*W/24, y+7*H/24)
  ctx.stroke()

  document.getElementById("featuresize").value /= 2
  userAt(x+1.5*W/24, y+8*H/24,8*W/24,color)
  document.getElementById("featuresize").value = v
  ctx.fillStyle = color
  ctx.font = "900 "+(W/24)+"pt garamond"
 
  ctx.fillText("Massachusetts",x+1*W/24, y+6*H/24)

  //4
  scriptAt(x+1*W/24, y+18*H/24,H/32,color)
  scriptAt(x+5*W/24, y+18*H/24,H/36,color)
  //5
  ctx.font = "900 "+(W/36)+"pt garamond"
  ctx.fillText("DRIVERS LICENSE",x+11*W/24, y+5*H/24)
  
  //6
  ctx.font = "900 "+(W/48)+"pt garamond"
  ctx.fillText("04/12/2024",x+12*W/24, y+8*H/24)
  ctx.fillText("S5470986601",x+16*W/24, y+8*H/24)

  //7
  ctx.fillText("SMITH.",x+12*W/24, y+12*H/24)
 ctx.fillText(randomPick(names),x+12*W/24, y+12.8*H/24) // name
  ctx.fillText("04/09/2029",x+12*W/24, y+9*H/24)
  ctx.fillText("10/02/1967",x+16*W/24, y+9*H/24)

  ctx.fillText("Organ Donor",x+12*W/24, y+18*H/24)

  document.getElementById("featuresize").value /= 2
  heartAt(x+16.5*W/24, y+17.3*H/24, 1*W/24,color)
  document.getElementById("featuresize").value = v
  ctx.font = "900 "+(W/36)+"pt garamond"
  ctx.fillText(randomPick(["01","02","03","04","05","06","07","08","09","10","11","12"])+"/"+(10+Math.floor(Math.random()*18))+"/"+(1950+Math.floor(Math.random()*13)),x+18*W/24, y+18*H/24)
  //8
  ctx.font = "900 "+(W/60)+"pt garamond"
  ctx.fillText("41 N. Willow Ave.",x+12*W/24, y+14.5*H/24)
  ctx.fillText("Unstable MA 03742-2143",x+12*W/24, y+15*H/24)
  document.getElementById("featuresize").value /=2
  treeAt(x+20*W/24, y+4*H/24,3*W/24,color)
  document.getElementById("featuresize").value = v

  ctx.lineWidth /= 2
  ctx.globalAlpha /= 4
  x+= 4*W/24
  //1
  ctx.beginPath()
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+16*H/24)
  cpx = x+16*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+12*H/24)
  cpx = x+16*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+8*H/24)
  cpx = x+8*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+12*H/24)
  cpx = x+8*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+16*H/24)
  ctx.fill()
  ctx.stroke()
  ctx.globalAlpha *= 4
}

function one_of_suitsAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+1*H/24)
  ctx.lineTo(x+13*W/24, y+4*H/24)
  ctx.lineTo(x+16*W/24, y+1*H/24)
  ctx.lineTo(x+16*W/24, y+2*H/24)
  ctx.lineTo(x+15*W/24, y+6*H/24)
  ctx.lineTo(x+13*W/24, y+4*H/24)
  ctx.lineTo(x+11*W/24, y+6*H/24)
  ctx.lineTo(x+10*W/24, y+3*H/24)
  ctx.lineTo(x+10*W/24, y+1*H/24)
  ctx.stroke()
  //2
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+5*H/24)
  ctx.lineTo(x+13*W/24, y+6*H/24)
  ctx.lineTo(x+14*W/24, y+6*H/24)
  ctx.lineTo(x+14*W/24, y+5*H/24)
  ctx.stroke()
  //3
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+19*H/24)
  cpx = x+17*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+2*H/24)
  ctx.stroke()
  //4
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+19*H/24)
  cpx = x+10*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+3*H/24)
  ctx.stroke()
  //5
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+19*H/24)
  cpx = x+19*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+7*H/24)
  ctx.lineTo(x+18*W/24, y+6*H/24)
  ctx.lineTo(x+19*W/24, y+6*H/24)
  ctx.stroke()
  //6
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+19*H/24)
  ctx.lineTo(x+7*W/24, y+6*H/24)
  ctx.lineTo(x+8*W/24, y+5*H/24)
  ctx.lineTo(x+7*W/24, y+4*H/24)
  ctx.stroke()
  //7
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+6*H/24)
  cpx = x+12*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+14*H/24)
  ctx.stroke()
  //8
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+6*H/24)
  cpx = x+15*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+12*H/24)
  ctx.stroke()
  //9
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+1*H/24)
  cpx = x+9*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+4*H/24)
  cpx = x+4*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+5*H/24)
  cpx = x+1*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+22*H/24)
  ctx.stroke()
  //10
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+1*H/24)
  cpx = x+17*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+7*H/24)
  cpx = x+23*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+22*H/24)
  ctx.stroke()

  //11
  ctx.beginPath()
  ctx.moveTo(x+19*W/24, y+22*H/24)
  cpx = x+20*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+12*H/24)
  ctx.stroke()
  //12
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+22*H/24)
  cpx = x+5*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+12*H/24)
  cpx = x+4*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+7*H/24)
  ctx.stroke()
  //13
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+13*H/24)
  ctx.lineTo(x+20*W/24, y+13*H/24)
  ctx.lineTo(x+19*W/24, y+11*H/24)
  ctx.lineTo(x+17*W/24, y+13*H/24)
  ctx.stroke()
  
  //14
  ctx.beginPath()
  ctx.moveTo(x+19*W/24, y+6*H/24)
  ctx.lineTo(x+17.5*W/24, y+4*H/24)
  ctx.stroke()
  //15
  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+14*H/24)
  ctx.lineTo(x+15*W/24, y+12*H/24)
  ctx.stroke()
  //16
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+14*H/24)
  ctx.lineTo(x+12*W/24, y+15*H/24)
  ctx.stroke()
  //17
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+19*H/24)
  cpx = x+12*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+22*H/24)
  ctx.stroke()
  //18
  let r = W/38
  ctx.beginPath()
  ctx.arc(x+13.3*W/24, y+20.5*H/24, r, 0, Math.PI*2)
  ctx.stroke()
}

function galleryAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+13*H/24)
  ctx.lineTo(x+22*W/24, y+13*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+13*H/24)
  ctx.lineTo(x+2*W/24, y+14*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+21*W/24, y+13*H/24)
  ctx.lineTo(x+22*W/24, y+14*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+13*H/24)
  ctx.lineTo(x+12*W/24, y+22*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+13*H/24)
  ctx.lineTo(x+14*W/24, y+22*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+13*H/24)
  ctx.lineTo(x+16*W/24, y+22*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+13*H/24)
  ctx.lineTo(x+18*W/24, y+22*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+13*H/24)
  ctx.lineTo(x+20*W/24, y+22*H/24)
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+13*H/24)
  ctx.lineTo(x+22*W/24, y+22*H/24)
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+13*H/24)
  ctx.lineTo(x+22*W/24, y+19*H/24)
  ctx.stroke()

  //11
  ctx.beginPath()
  ctx.moveTo(x+19*W/24, y+13*H/24)
  ctx.lineTo(x+22*W/24, y+17*H/24)
  ctx.stroke()

  //12
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+13*H/24)
  ctx.lineTo(x+22*W/24, y+15.5*H/24)
  ctx.stroke()

  //13
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+13*H/24)
  ctx.lineTo(x+10*W/24, y+22*H/24)
  ctx.stroke()

  //14
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+13*H/24)
  ctx.lineTo(x+8*W/24, y+22*H/24)
  ctx.stroke()

  //15
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+13*H/24)
  ctx.lineTo(x+6*W/24, y+22*H/24)
  ctx.stroke()

  //16
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+13*H/24)
  ctx.lineTo(x+4*W/24, y+22*H/24)
  ctx.stroke()

  //17
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+13*H/24)
  ctx.lineTo(x+2*W/24, y+22*H/24)
  ctx.stroke()

  //18
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+13*H/24)
  ctx.lineTo(x+2*W/24, y+19*H/24)
  ctx.stroke()

  //19
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+13*H/24)
  ctx.lineTo(x+2*W/24, y+17*H/24)
  ctx.stroke()

  //20
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+13*H/24)
  ctx.lineTo(x+2*W/24, y+15.4*H/24)
  ctx.stroke()

  //22
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+2*H/24)
  ctx.lineTo(x+8*W/24, y+10*H/24)
  ctx.lineTo(x+18*W/24, y+10*H/24)
  ctx.lineTo(x+18*W/24, y+2*H/24)
  ctx.lineTo(x+8*W/24, y+2*H/24)
  ctx.stroke()

  //23
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+2*H/24)
  ctx.lineTo(x+2*W/24, y+5*H/24)
  ctx.lineTo(x+5*W/24, y+5*H/24)
  ctx.lineTo(x+5*W/24, y+2*H/24)
  ctx.lineTo(x+2*W/24, y+2*H/24)
  ctx.stroke()

  //24
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+6*H/24)
  ctx.lineTo(x+2*W/24, y+9*H/24)
  ctx.lineTo(x+5*W/24, y+9*H/24)
  ctx.lineTo(x+5*W/24, y+6*H/24)
  ctx.lineTo(x+2*W/24, y+6*H/24)
  ctx.stroke()

  //25
  ctx.beginPath()
  ctx.moveTo(x+22*W/24, y+3*H/24)
  ctx.lineTo(x+21*W/24, y+3*H/24)
  ctx.lineTo(x+21*W/24, y+9*H/24)
  ctx.lineTo(x+22*W/24, y+9*H/24)
  ctx.stroke()
  figureAt(x+pet(12*W/24),y-1.5*H/24+pet(W/24),W,color)
  figure2At(x+pet(12*W/24),y-1.5*H/24+pet(W/24),W,color)
}

function figure2At (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+18*H/24)
  cpx = x+14*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+22*H/24)
  cpx = x+11*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+22*H/24)
  cpx = x+11*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+21*H/24)
  cpx = x+12*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+18*H/24)
  cpx = x+9*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+18*H/24)
  cpx = x+9*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+12*H/24)
  cpx = x+9*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+8*H/24)
  cpx = x+11*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+7*H/24)
  cpx = x+11*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+6*H/24)
  cpx = x+11*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+5*H/24)
  cpx = x+13*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+6*H/24)
  cpx = x+13*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+8*H/24)
  cpx = x+15*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+9*H/24)
  cpx = x+15*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+11*H/24)
  cpx = x+15*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+12*H/24)
  cpx = x+14*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+17*H/24)
  cpx = x+15*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+18*H/24)
  ctx.fill()
}
function figureAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+22*H/24)
  cpx = x+15*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+22*H/24)
  cpx = x+15*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+21*H/24)
  cpx = x+13*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+20*H/24)
  cpx = x+13*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+15*H/24)
  cpx = x+14*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+14*H/24)
  cpx = x+14*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+9*H/24)
  cpx = x+14*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+7*H/24)
  cpx = x+12*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+5*H/24)
  cpx = x+12*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+4*H/24)
  cpx = x+12*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+3*H/24)
  cpx = x+10*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+4*H/24)
  cpx = x+10*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+6*H/24)
  cpx = x+8*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+8*H/24)
  cpx = x+8*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+13*H/24)
  cpx = x+8*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+14*H/24)
  cpx = x+9*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+22*H/24)
  cpx = x+12*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+22*H/24)
  cpx = x+12*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+21*H/24)
  cpx = x+10*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+20*H/24)
  cpx = x+11*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+15*H/24)
  cpx = x+12*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+20*H/24)
  cpx = x+12*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+22*H/24)
  ctx.closePath()
  ctx.fill()
}

function couchAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+15*H/24)
  cpx = x+2*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+13*H/24)
  cpx = x+2*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+7*H/24)
  cpx = x+4*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+7*H/24)
  cpx = x+6*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+11*H/24)
  cpx = x+8*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+11*H/24)
  cpx = x+22*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+13*H/24)
  cpx = x+22*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+15*H/24)
  cpx = x+4*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+15*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+7*H/24)
  cpx = x+6*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+11*H/24)
  cpx = x+10*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+7*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+15*H/24)
  ctx.lineTo(x+2*W/24, y+17*H/24)
  ctx.lineTo(x+3*W/24, y+17*H/24)
  ctx.lineTo(x+4*W/24, y+15*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+19*W/24, y+15*H/24)
  ctx.lineTo(x+20*W/24, y+17*H/24)
  ctx.lineTo(x+21*W/24, y+17*H/24)
  ctx.lineTo(x+20*W/24, y+15*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+7*H/24)
  ctx.lineTo(x+10*W/24, y+11*H/24)
  ctx.stroke()
}

function le_crépusculeAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  let saved = ctx.fillStyle
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  sunsetAt (x,y,W,color)
  ctx.fillStyle = saved
}

function pongAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  let saved =  ctx.fillStyle
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+10*H/24)
  ctx.lineTo(x+2*W/24, y+2*H/24)
  ctx.lineTo(x+22*W/24, y+2*H/24)
  ctx.lineTo(x+22*W/24, y+10*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+22*W/24, y+14*H/24)
  ctx.lineTo(x+22*W/24, y+22*H/24)
  ctx.lineTo(x+2*W/24, y+22*H/24)
  ctx.lineTo(x+2*W/24, y+14*H/24)
  ctx.stroke()

  let my = 3 + Math.floor(Math.random() * 16)
  //3
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+my*H/24)
  ctx.lineTo(x+4*W/24, y+(my+3)*H/24)
  ctx.stroke()
  my = 3 + Math.floor(Math.random() * 16)
  //4
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+my*H/24)
  ctx.lineTo(x+20*W/24, y+(my+3)*H/24)
  ctx.stroke()

  //5
  ctx.setLineDash([W/32])
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+2*H/24)
  ctx.lineTo(x+12*W/24, y+22*H/24)
  ctx.stroke()
  ctx.setLineDash([])
  //7
  if (Math.random() > 0.5) {
    ctx.beginPath()
    ctx.moveTo(x+10*W/24, y+3*H/24)
    ctx.lineTo(x+10*W/24, y+4*H/24)
    ctx.lineTo(x+11*W/24, y+4*H/24)
    ctx.lineTo(x+11*W/24, y+3*H/24)
    ctx.lineTo(x+11*W/24, y+5*H/24)
    ctx.stroke()
  } else {
    ctx.beginPath()
    ctx.moveTo(x+11*W/24, y+3*H/24)
    ctx.lineTo(x+10*W/24, y+3*H/24)
    ctx.lineTo(x+10*W/24, y+4*H/24)
    ctx.lineTo(x+10*W/24, y+5*H/24)
    ctx.lineTo(x+11*W/24, y+5*H/24)
    ctx.lineTo(x+11*W/24, y+4*H/24)
    ctx.lineTo(x+10*W/24, y+4*H/24)
    ctx.stroke()
  }
  //8 
  if (Math.random() > 0.5) {
    ctx.beginPath()
    ctx.moveTo(x+16*W/24, y+3*H/24)
    ctx.lineTo(x+15*W/24, y+3*H/24)
    ctx.lineTo(x+15*W/24, y+4*H/24)
    ctx.lineTo(x+16*W/24, y+4*H/24)
    ctx.lineTo(x+16*W/24, y+5*H/24)
    ctx.lineTo(x+15*W/24, y+5*H/24)
    ctx.stroke()
  } else {
    ctx.beginPath()
    ctx.moveTo(x+15*W/24, y+3*H/24)
    ctx.lineTo(x+16*W/24, y+3*H/24)
    ctx.lineTo(x+16*W/24, y+4*H/24)
    ctx.lineTo(x+15*W/24, y+4*H/24)
    ctx.lineTo(x+16*W/24, y+4*H/24)
    ctx.lineTo(x+16*W/24, y+5*H/24)
    ctx.lineTo(x+15*W/24, y+5*H/24)
    ctx.stroke()
  }
  //6 puck
  ctx.beginPath()
  let mx = 4 + Math.floor(Math.random() * 16)
  my = 5 + Math.floor(Math.random() * 15)
  ctx.fillRect(x+mx*W/24, y+my*H/24,1*W/32+ctx.lineWidth/2,1*H/32+ctx.lineWidth/2)
  //1 zero
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+3*H/24)
  ctx.lineTo(x+14*W/24, y+3*H/24)
  ctx.lineTo(x+14*W/24, y+5*H/24)
  ctx.lineTo(x+13*W/24, y+5*H/24)
  ctx.lineTo(x+13*W/24, y+3*H/24)
  ctx.stroke()

  //2 zero
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+3*H/24)
  ctx.lineTo(x+8*W/24, y+5*H/24)
  ctx.lineTo(x+9*W/24, y+5*H/24)
  ctx.lineTo(x+9*W/24, y+3*H/24)
  ctx.lineTo(x+8*W/24, y+3*H/24)
  ctx.stroke()
  ctx.fillStyle = saved
}

function meanAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+18*H/24)
  cpx = x+4*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+14*H/24)
  cpx = x+9*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+6*H/24)
  cpx = x+15*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+14*H/24)
  cpx = x+20*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+18*H/24)
  ctx.stroke()

  ctx.setLineDash([W/32])
  //3
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+6*H/24)
  ctx.lineTo(x+12*W/24, y+18*H/24)
  ctx.stroke()
  ctx.setLineDash([])

  //5
  ctx.beginPath()
  ctx.moveTo(x+11.3*W/24, y+3*H/24)
  ctx.lineTo(x+12.7*W/24, y+5*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+5*H/24)
  ctx.lineTo(x+13*W/24, y+3*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+11.3*W/24, y+2.3*H/24)
  ctx.lineTo(x+13*W/24, y+2.3*H/24)
  ctx.stroke()
}

function quantum_tunnellingAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+18*H/24)
  cpx = x+7*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+10*H/24)
  cpx = x+9*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+6*H/24)
  cpx = x+18*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+12*H/24)
  cpx = x+16*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+18*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+13*H/24)
  cpx = x+4.7*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+12*H/24)
  cpx = x+5*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+11*H/24)
  cpx = x+3.3*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+12*H/24)
  cpx = x+3*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+13*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+20.4*W/24, y+13*H/24)
  cpx = x+21.1*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21.4*W/24, y+12*H/24)
  cpx = x+21.4*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20.4*W/24, y+11*H/24)
  cpx = x+19.7*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19.4*W/24, y+12*H/24)
  cpx = x+19.4*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20.4*W/24, y+13*H/24)
  ctx.stroke()
  ctx.setLineDash([4*W/96])
  //4
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+12*H/24)
  ctx.lineTo(x+18.8*W/24, y+12*H/24)
  ctx.stroke()
  ctx.setLineDash([])
  
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+11*H/24)
  ctx.lineTo(x+18.8*W/24, y+12*H/24)
  ctx.stroke()
  
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+13*H/24)
  ctx.lineTo(x+18.8*W/24, y+12*H/24)
  ctx.stroke()
}

function mona_lisaAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+13*H/24)
  cpx = x+14*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+8*H/24)
  cpx = x+14*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+4*H/24)
  cpx = x+8*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+8*H/24)
  cpx = x+8*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+13*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+23*W/24, y+23*H/24)
  cpx = x+22*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+17*H/24)
  cpx = x+18*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+9*H/24)
  cpx = x+16*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+3*H/24)
  cpx = x+9*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+7*H/24)
  cpx = x+7*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+13*H/24)
  cpx = x+8*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+17*H/24)
  cpx = x+4*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+23*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+18*H/24)
  cpx = x+15*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+13*H/24)
  cpx = x+14*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+7*H/24)
  cpx = x+12*W/24
  cpy = y+4*H/24
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+13*H/24)
  cpx = x+11*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+15*H/24)
  cpx = x+9*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+18*H/24)
  cpx = x+8*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+20*H/24)
  cpx = x+13*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+19*H/24)
  cpx = x+15*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+16*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+22*H/24)
  cpx = x+15*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+18*H/24)
  cpx = x+19*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+19*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+18*H/24)
  cpx = x+17*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+16*H/24)
  ctx.stroke()

  //7 left eye
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+8*H/24)
  cpx = x+10*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+8*H/24)
  ctx.stroke()
  //12 right eye
  ctx.beginPath()
  ctx.moveTo(x+11.5*W/24, y+8*H/24)
  cpx = x+12*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+8*H/24)
  ctx.stroke()
  //8 smile
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+11*H/24)
  cpx = x+11*W/24
  cpy = y+11.33*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+11*H/24)
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+9*H/24)
  cpx = x+0*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+7*H/24)
  cpx = x+4*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+8*H/24)
  cpx = x+6*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+9*H/24)
  ctx.stroke()
  //10
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+9*H/24)
  cpx = x+21*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+9*H/24)
  cpx = x+24*W/24
  cpy = y+10*H/24
  ctx.stroke()

  //11
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+17*H/24)
  cpx = x+22*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+24*W/24, y+19*H/24)
  ctx.stroke()

  //13
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+20*H/24)
  cpx = x+6*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+23*H/24)
  ctx.stroke()

   //14
   ctx.beginPath()
   ctx.moveTo(x+16*W/24, y+23*H/24)
   cpx = x+17*W/24
   cpy = y+21*H/24
   ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+21*H/24)
   ctx.stroke()
 
   //15
   ctx.beginPath()
   ctx.moveTo(x+6*W/24, y+13*H/24)
   cpx = x+3*W/24
   cpy = y+14*H/24
   ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+15*H/24)
   ctx.stroke()
 
   //16
   ctx.beginPath()
   ctx.moveTo(x+2*W/24, y+16*H/24)
   cpx = x+2*W/24
   cpy = y+18*H/24
   ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+18*H/24)
   cpx = x+4*W/24
   cpy = y+19*H/24
   ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+19*H/24)
   cpx = x+2*W/24
   cpy = y+20*H/24
   ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+21*H/24)
   cpx = x+3*W/24
   cpy = y+21*H/24
   ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+21*H/24)
   ctx.stroke()
 
   //17
   ctx.beginPath()
   ctx.moveTo(x+19*W/24, y+14*H/24)
   cpx = x+21*W/24
   cpy = y+14*H/24
   ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+14*H/24)
   ctx.stroke()
 
   //18
   ctx.beginPath()
   ctx.moveTo(x+17*W/24, y+7*H/24)
   cpx = x+18*W/24
   cpy = y+6*H/24
   ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+7*H/24)
   cpx = x+20*W/24
   cpy = y+8*H/24
   ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+8*H/24)
   ctx.stroke()
 
   //19
   ctx.beginPath()
   ctx.moveTo(x+1*W/24, y+10*H/24)
   cpx = x+2*W/24
   cpy = y+10*H/24
   ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+11*H/24)
   ctx.stroke()
}

function reciprocalAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+12*H/24)
  ctx.lineTo(x+17*W/24, y+12*H/24)
  ctx.stroke()
  //2
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+4*H/24)
  ctx.lineTo(x+12*W/24, y+2*H/24)
  ctx.lineTo(x+12*W/24, y+11*H/24)
  ctx.lineTo(x+10*W/24, y+11*H/24)
  ctx.lineTo(x+14*W/24, y+11*H/24)
  ctx.stroke()
  //3
  let f = randomPick(atList)
  let v = document.getElementById("featuresize").value
  document.getElementById("featuresize").value /= 2
  window[f](x+6.5*W/24,y+12.5*H/24,W/2.2,ctx.strokeStyle)
  document.getElementById("featuresize").value = v
}

function divide_by_zeroAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
    //1
    ctx.beginPath()
    ctx.moveTo(x+7*W/24, y+12*H/24)
    ctx.lineTo(x+17*W/24, y+12*H/24)
    ctx.stroke()
    //2
    ctx.beginPath()
    ctx.moveTo(x+10*W/24, y+4*H/24)
    ctx.lineTo(x+12*W/24, y+2*H/24)
    ctx.lineTo(x+12*W/24, y+11*H/24)
    ctx.lineTo(x+10*W/24, y+11*H/24)
    ctx.lineTo(x+14*W/24, y+11*H/24)
    ctx.stroke()
    //3
    ctx.beginPath()
    ctx.moveTo(x+12*W/24, y+22*H/24)
    cpx = x+15*W/24
    cpy = y+22*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+17*H/24)
    cpx = x+15*W/24
    cpy = y+13*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+13*H/24)
    cpx = x+9*W/24
    cpy = y+13*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+18*H/24)
    cpx = x+9*W/24
    cpy = y+22*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+22*H/24)
    ctx.stroke()
}

function your_pointy_elbowsAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //3
  ctx.beginPath()
  ctx.moveTo(x+21*W/24, y+3*H/24)
  cpx = x+15*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+12*H/24)
  cpx = x+9*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+17*H/24)
  cpx = x+16*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+19*H/24)
  cpx = x+20*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+18*H/24)
  cpx = x+23*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+16*H/24)
  cpx = x+20*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+12*H/24)
  cpx = x+21*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+8*H/24)
  ctx.stroke()
  //6
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+13*H/24)
  ctx.lineTo(x+17*W/24, y+11*H/24)
  ctx.stroke()
  //2
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+23*H/24)
  cpx = x+14*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+17*H/24)
  ctx.stroke()
  //4
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+14*H/24)
  ctx.lineTo(x+3*W/24, y+15*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+12*H/24)
  ctx.lineTo(x+2*W/24, y+12*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+10*H/24)
  ctx.lineTo(x+3*W/24, y+9*H/24)
  ctx.stroke()
}

function workAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  let saved =  ctx.fillStyle
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "miter"
  
  //1
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+1*H/24)
  ctx.lineTo(x+2*W/24, y+5*H/24)
  ctx.lineTo(x+15*W/24, y+5*H/24)
  ctx.lineTo(x+15*W/24, y+1*H/24)
  ctx.lineTo(x+2*W/24, y+1*H/24)
  ctx.stroke()
  let fs = W/14
  ctx.font = "200 "+(fs)+"pt Calibri" 
  ctx.fillText(" Calibri", x+2.2*W/24, y+fs+1*H/12) 
  ctx.fillText(" 11", x+16.7*W/24, y+fs+1*H/12) 
  //2
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+1*H/24)
  ctx.lineTo(x+17*W/24, y+5*H/24)
  ctx.lineTo(x+22*W/24, y+5*H/24)
  ctx.lineTo(x+22*W/24, y+1*H/24)
  ctx.lineTo(x+17*W/24, y+1*H/24)
  ctx.stroke()
  //3
  ctx.beginPath()
  ctx.moveTo(x+13.5*W/24, y+3*H/24)
  ctx.lineTo(x+14*W/24, y+3.5*H/24)
  ctx.lineTo(x+14.5*W/24, y+3*H/24)
  ctx.stroke()
  //4
  ctx.beginPath()
  ctx.moveTo(x+20.5*W/24, y+3*H/24)
  ctx.lineTo(x+21*W/24, y+3.5*H/24)
  ctx.lineTo(x+21.5*W/24, y+3*H/24)
  ctx.stroke()
  
  ctx.lineWidth *= 2.4
  //5
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+7*H/24)
  ctx.lineTo(x+3*W/24, y+11*H/24)
  ctx.lineTo(x+4*W/24, y+11*H/24)
  cpx = x+5*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+10*H/24)
  cpx = x+5*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+9*H/24)
  cpx = x+3*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+9*H/24)
  cpx = x+4*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+9*H/24)
  cpx = x+5*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+8*H/24)
  cpx = x+5*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+7*H/24)
  cpx = x+3*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+7*H/24)
  ctx.stroke()
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  //6
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+11*H/24)
  ctx.lineTo(x+8*W/24, y+11*H/24)
  ctx.lineTo(x+9*W/24, y+7*H/24)
  ctx.lineTo(x+10*W/24, y+7*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+7*H/24)
  ctx.lineTo(x+9*W/24, y+7*H/24)
  ctx.stroke()
  //8
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+11*H/24)
  ctx.lineTo(x+8*W/24, y+11*H/24)
  ctx.stroke()
  //9
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+7*H/24)
  ctx.lineTo(x+12*W/24, y+9*H/24)
  cpx = x+12*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+10*H/24)
  cpx = x+14*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+9*H/24)
  ctx.lineTo(x+14*W/24, y+7*H/24)
  ctx.stroke()
  //10
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+11*H/24)
  ctx.lineTo(x+14*W/24, y+11*H/24)
  ctx.stroke()
  //11 pips
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+7*H/24)
  ctx.lineTo(x+17.5*W/24, y+6.5*H/24)
  ctx.lineTo(x+18*W/24, y+7*H/24)
  ctx.lineTo(x+17.5*W/24, y+7.5*H/24)
  ctx.closePath()
  ctx.fill()
  //12
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+9*H/24)
  ctx.lineTo(x+17.5*W/24, y+8.5*H/24)
  ctx.lineTo(x+18*W/24, y+9*H/24)
  ctx.lineTo(x+17.5*W/24, y+9.5*H/24)
  ctx.closePath()
  ctx.fill()
  //13
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+11*H/24)
  ctx.lineTo(x+17.5*W/24, y+10.5*H/24)
  ctx.lineTo(x+18*W/24, y+11*H/24)
  ctx.lineTo(x+17.5*W/24, y+11.5*H/24)
  ctx.closePath()
  ctx.fill()
  //14
  ctx.beginPath()
  ctx.moveTo(x+19*W/24, y+7*H/24)
  ctx.lineTo(x+22*W/24, y+7*H/24)
  ctx.stroke()
  //15
  ctx.beginPath()
  ctx.moveTo(x+19*W/24, y+9*H/24)
  ctx.lineTo(x+22*W/24, y+9*H/24)
  ctx.stroke()
  //16
  ctx.beginPath()
  ctx.moveTo(x+19*W/24, y+11*H/24)
  ctx.lineTo(x+22*W/24, y+11*H/24)
  ctx.stroke()
  //17
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+13*H/24)
  ctx.lineTo(x+6*W/24, y+13*H/24)
  ctx.stroke()
  //18
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+14*H/24)
  ctx.lineTo(x+4*W/24, y+14*H/24)
  ctx.stroke()
  //19
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+15*H/24)
  ctx.lineTo(x+6*W/24, y+15*H/24)
  ctx.stroke()
  //20
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+16*H/24)
  ctx.lineTo(x+4*W/24, y+16*H/24)
  ctx.stroke()
  //21
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+17*H/24)
  ctx.lineTo(x+6*W/24, y+17*H/24)
  ctx.stroke()
  //22
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+13*H/24)
  ctx.lineTo(x+13*W/24, y+13*H/24)
  ctx.stroke()
  //23
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+14*H/24)
  ctx.lineTo(x+12*W/24, y+14*H/24)
  ctx.stroke()
  //24
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+15*H/24)
  ctx.lineTo(x+13*W/24, y+15*H/24)
  ctx.stroke()

  //25
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+16*H/24)
  ctx.lineTo(x+12*W/24, y+16*H/24)
  ctx.stroke()
  //2
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+17*H/24)
  ctx.lineTo(x+13*W/24, y+17*H/24)
  ctx.stroke()
  //27
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+13*H/24)
  ctx.lineTo(x+20*W/24, y+13*H/24)
  ctx.stroke()
  //28
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+14*H/24)
  ctx.lineTo(x+20*W/24, y+14*H/24)
  ctx.stroke()
  //29
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+15*H/24)
  ctx.lineTo(x+20*W/24, y+15*H/24)
  ctx.stroke()
  //30
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+16*H/24)
  ctx.lineTo(x+20*W/24, y+16*H/24)
  ctx.stroke()
  //31
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+17*H/24)
  ctx.lineTo(x+20*W/24, y+17*H/24)
  ctx.stroke()
  //32
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+22*H/24)
  ctx.lineTo(x+2*W/24, y+23*H/24)
  ctx.lineTo(x+6*W/24, y+23*H/24)
  ctx.lineTo(x+6*W/24, y+22*H/24)
  ctx.lineTo(x+2*W/24, y+22*H/24)
  ctx.stroke()
  ctx.closePath()
  ctx.fill()
  //33
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+21*H/24)
  ctx.lineTo(x+4*W/24, y+18*H/24)
  ctx.lineTo(x+6*W/24, y+21*H/24)
  ctx.stroke()
  //34
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+20*H/24)
  ctx.lineTo(x+5*W/24, y+20*H/24)
  ctx.stroke()

  //35
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+22*H/24)
  ctx.lineTo(x+11*W/24, y+19*H/24)
  ctx.lineTo(x+13*W/24, y+22*H/24)
  ctx.stroke()
  //36
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+21*H/24)
  ctx.lineTo(x+12*W/24, y+21*H/24)
  ctx.stroke()
  //37
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+19.5*H/24)
  ctx.lineTo(x+14*W/24, y+19.5*H/24)
  ctx.lineTo(x+13.5*W/24, y+19*H/24)
  ctx.closePath()
  ctx.fill()
  //38
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+22*H/24)
  ctx.lineTo(x+17*W/24, y+20*H/24)
  ctx.lineTo(x+18*W/24, y+22*H/24)
  ctx.stroke()
  //39
  ctx.beginPath()
  ctx.moveTo(x+19*W/24, y+19*H/24)
  ctx.lineTo(x+20*W/24, y+19*H/24)
  ctx.lineTo(x+19.5*W/24, y+19.5*H/24)
  ctx.closePath()
  ctx.fill()
  //40
  ctx.beginPath()
  ctx.moveTo(x+16.5*W/24, y+21*H/24)
  ctx.lineTo(x+17.5*W/24, y+21*H/24)
  ctx.stroke()
  ctx.fillStyle = saved
}

function lighterAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+23*W/24+pet(d), y+16*H/24+pet(d))
  cpx = x+24*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+23*W/24+pet(d), y+8*H/24+pet(d))
  cpx = x+6*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+6*W/24+pet(d), y+8*H/24+pet(d))
  cpx = x+6*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+6*W/24+pet(d), y+11*H/24+pet(d))
  cpx = x+5*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+5*W/24+pet(d), y+8*H/24+pet(d))
  cpx = x+4*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+4*W/24+pet(d), y+8*H/24+pet(d))
  cpx = x+5*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+5*W/24+pet(d), y+11*H/24+pet(d))
  cpx = x+3*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+3*W/24+pet(d), y+11*H/24+pet(d))
  cpx = x+3*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+2*W/24+pet(d), y+10*H/24+pet(d))
  cpx = x+1*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+1*W/24+pet(d), y+11*H/24+pet(d))
  cpx = x+1*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+2*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+2*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+2*W/24+pet(d), y+15*H/24+pet(d))
  cpx = x+2*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+3*W/24+pet(d), y+16*H/24+pet(d))
  cpx = x+23*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+23*W/24+pet(d), y+16*H/24+pet(d))
  ctx.fillStyle = savedF
  ctx.fill()
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+7*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+7*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*W/24+pet(d), y+14*H/24+pet(d))
  cpx = x+9*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+9*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+9*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*W/24+pet(d), y+10*H/24+pet(d))
  cpx = x+7*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+7*W/24+pet(d), y+12*H/24+pet(d))
  ctx.lineTo(x+6*W/24+pet(d), y+12*H/24+pet(d))
  ctx.lineTo(x+6*W/24+pet(d), y+8*H/24+pet(d))
  ctx.lineTo(x+23*W/24+pet(d), y+8*H/24+pet(d))
  cpx = x+24*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+23*W/24+pet(d), y+16*H/24+pet(d))
  ctx.lineTo(x+6*W/24+pet(d), y+16*H/24+pet(d))
  ctx.lineTo(x+6*W/24+pet(d), y+12*H/24+pet(d))
  ctx.lineTo(x+7*W/24+pet(d), y+12*H/24+pet(d))
  ctx.fillStyle = color
  ctx.globalAlpha /= 3
  ctx.fill()
  ctx.globalAlpha *= 3

  //2
  ctx.beginPath()
  ctx.moveTo(x+6*W/24+pet(d), y+16*H/24+pet(d))
  ctx.lineTo(x+6*W/24+pet(d), y+11*H/24+pet(d))
  ctx.lineTo(x+2*W/24+pet(d), y+11*H/24+pet(d))
  ctx.lineTo(x+2*W/24+pet(d), y+12*H/24+pet(d))
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+7*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+7*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*W/24+pet(d), y+10*H/24+pet(d))
  cpx = x+9*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+9*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+9*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*W/24+pet(d), y+14*H/24+pet(d))
  cpx = x+7*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+7*W/24+pet(d), y+12*H/24+pet(d))
  ctx.stroke()

  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function thumb_driveAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.beginPath()
  ctx.moveTo(x+4*W/24+pet(d), y+9*H/24+pet(d))
  ctx.lineTo(x+0*W/24+pet(d), y+9*H/24+pet(d))
  ctx.lineTo(x+1*W/24+pet(d), y+14*H/24+pet(d))
  ctx.lineTo(x+5*W/24+pet(d), y+14*H/24+pet(d))
  ctx.lineTo(x+6*W/24+pet(d), y+16*H/24+pet(d))
  ctx.lineTo(x+24*W/24+pet(d), y+16*H/24+pet(d))
  ctx.lineTo(x+22*W/24+pet(d), y+7*H/24+pet(d))
  ctx.lineTo(x+3*W/24+pet(d), y+7*H/24+pet(d))
  ctx.lineTo(x+4*W/24+pet(d), y+9*H/24+pet(d))
  ctx.fillStyle = savedF
  ctx.fill()
  //1
  //8
  ctx.beginPath()
  ctx.moveTo(x+8*W/24+pet(d), y+9*H/24+pet(d))
  ctx.lineTo(x+9*W/24+pet(d), y+14*H/24+pet(d))
  ctx.lineTo(x+22*W/24+pet(d), y+14*H/24+pet(d))
  ctx.lineTo(x+21*W/24+pet(d), y+9*H/24+pet(d))
  ctx.lineTo(x+8*W/24+pet(d), y+9*H/24+pet(d))
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+0*W/24+pet(d), y+9*H/24+pet(d))
  ctx.lineTo(x+1*W/24+pet(d), y+9*H/24+pet(d))
  ctx.lineTo(x+2*W/24+pet(d), y+14*H/24+pet(d))
  ctx.lineTo(x+1*W/24+pet(d), y+14*H/24+pet(d))
  ctx.lineTo(x+0*W/24+pet(d), y+9*H/24+pet(d))
  ctx.lineTo(x+5*W/24+pet(d), y+9*H/24+pet(d))
  ctx.lineTo(x+6*W/24+pet(d), y+14*H/24+pet(d))
  ctx.lineTo(x+2*W/24+pet(d), y+14*H/24+pet(d))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+4*W/24+pet(d), y+9*H/24+pet(d))
  ctx.lineTo(x+3*W/24+pet(d), y+7*H/24+pet(d))
  ctx.lineTo(x+5*W/24+pet(d), y+7*H/24+pet(d))
  ctx.lineTo(x+8*W/24+pet(d), y+16*H/24+pet(d))
  ctx.lineTo(x+6*W/24+pet(d), y+16*H/24+pet(d))
  ctx.lineTo(x+5*W/24+pet(d), y+14*H/24+pet(d))
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+8*W/24+pet(d), y+16*H/24+pet(d))
  cpx = x+23*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+23*W/24+pet(d), y+16*H/24+pet(d))
  cpx = x+24*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+24*W/24+pet(d), y+15*H/24+pet(d))
  cpx = x+22*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+22*W/24+pet(d), y+8*H/24+pet(d))
  cpx = x+22*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20*W/24+pet(d), y+7*H/24+pet(d))
  cpx = x+5*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+5*W/24+pet(d), y+7*H/24+pet(d))
  ctx.stroke()

  ctx.lineWidth *= 2
   //4
  ctx.beginPath()
  ctx.moveTo(x+3*W/24+pet(d), y+10*H/24+pet(d))
  ctx.lineTo(x+3.5*W/24+pet(d), y+10*H/24+pet(d))
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+4*W/24+pet(d), y+13*H/24+pet(d))
  ctx.lineTo(x+4.5*W/24+pet(d), y+13*H/24+pet(d))
  ctx.stroke()

  ctx.fillStyle = color
  ctx.font = "800 "+(W*0.11)+"pt sans-serif"
  ctx.fillText("256GB", x+9.75*W/24+pet(d), y+12.5*H/24+pet(d))
  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function car_keyAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = savedF
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+11*H/24)
  cpx = x+12*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+11*H/24)
  cpx = x+12*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+11*H/24)
  cpx = x+15*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+11*H/24)
  cpx = x+17*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+11*H/24)
  cpx = x+18*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+12*H/24)
  cpx = x+19*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+11*H/24)
  cpx = x+21*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+12*H/24)
  ctx.fillStyle = savedF
  //ctx.fill()
  ctx.stroke()
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+10*H/24)
  cpx = x+10*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+7*H/24)
  cpx = x+10*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+6*H/24)
  cpx = x+2*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+7*H/24)
  cpx = x+2*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+15*H/24)
  cpx = x+2*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+16*H/24)
  cpx = x+10*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+15*H/24)
  cpx = x+10*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+13*H/24)
  cpx = x+5*W/24
  cpy = y+10*H/24
  ctx.fillStyle = savedF
  ctx.fill()
  ctx.stroke()
  //1
  let d = 0
  ctx.beginPath()
  ctx.moveTo(x+9*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+9*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+7*W/24+pet(d), y+14*H/24+pet(d))
  cpx = x+5*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+5*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+5*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+7*W/24+pet(d), y+10*H/24+pet(d))
  cpx = x+9*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+9*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+10*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+10*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+10*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+10*W/24+pet(d), y+15*H/24+pet(d))
  cpx = x+10*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+3*W/24+pet(d), y+16*H/24+pet(d))
  cpx = x+2*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+2*W/24+pet(d), y+15*H/24+pet(d))
  cpx = x+2*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+2*W/24+pet(d), y+9*H/24+pet(d))
  cpx = x+3*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+3*W/24+pet(d), y+9*H/24+pet(d))
  cpx = x+3*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+4*W/24+pet(d), y+10*H/24+pet(d))
  cpx = x+5*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+5*W/24+pet(d), y+9*H/24+pet(d))
  cpx = x+5*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+4*W/24+pet(d), y+8*H/24+pet(d))
  cpx = x+3*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+3*W/24+pet(d), y+9*H/24+pet(d))
  cpx = x+2*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+2*W/24+pet(d), y+9*H/24+pet(d))
  cpx = x+2*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+2*W/24+pet(d), y+7*H/24+pet(d))
  cpx = x+2*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+3*W/24+pet(d), y+6*H/24+pet(d))
  cpx = x+10*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+10*W/24+pet(d), y+7*H/24+pet(d))
  cpx = x+10*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+10*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+9*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+9*W/24+pet(d), y+12*H/24+pet(d))
  ctx.fillStyle = color
  ctx.globalAlpha /= 3
  ctx.fill()
  ctx.globalAlpha *= 3
  //3
  ctx.beginPath()
  ctx.moveTo(x+9*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+9*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+7*W/24+pet(d), y+14*H/24+pet(d))
  cpx = x+5*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+5*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+5*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+7*W/24+pet(d), y+10*H/24+pet(d))
  cpx = x+9*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+9*W/24+pet(d), y+12*H/24+pet(d))
  ctx.fillStyle = savedF
  ctx.fill()
  ctx.stroke()
  //5
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+14*H/24)
  cpx = x+9*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+12*H/24)
  cpx = x+9*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+10*H/24)
  cpx = x+5*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+12*H/24)
  cpx = x+5*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+14*H/24)
  ctx.stroke()
  //6
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+13*H/24)
  cpx = x+21*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+13*H/24)
  cpx = x+22*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+12*H/24)
  cpx = x+22*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+11*H/24)
  cpx = x+22*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+10*H/24)
  cpx = x+10*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+10*H/24)
  ctx.stroke()
  //7
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+10*H/24)
  ctx.lineTo(x+10*W/24, y+13*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+10*H/24)
  cpx = x+5*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+9*H/24)
  cpx = x+5*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+8*H/24)
  cpx = x+3*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+9*H/24)
  cpx = x+3*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+10*H/24)
  ctx.stroke()
}

function doll_houseAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  x+22*W/24, y+22*H/24
  //1
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+20*H/24)
  ctx.lineTo(x+22*W/24, y+20*H/24)
  ctx.lineTo(x+22*W/24, y+8*H/24)
  ctx.lineTo(x+20*W/24, y+2*H/24)
  ctx.lineTo(x+19*W/24, y+2*H/24)
 // ctx.lineTo(x+4*W/24, y+2*H/24)
 // ctx.lineTo(x+2*W/24, y+8*H/24)
 // ctx.lineTo(x+2*W/24, y+20*H/24)
  ctx.stroke()
  
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+2*H/24)
  ctx.lineTo(x+4*W/24, y+2*H/24)
  ctx.lineTo(x+2*W/24, y+8*H/24)
  ctx.lineTo(x+2*W/24, y+20*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+8*H/24)
  ctx.lineTo(x+22*W/24, y+8*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+14*H/24)
  ctx.lineTo(x+22*W/24, y+14*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+20*H/24)
  ctx.lineTo(x+8*W/24, y+8*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+20*H/24)
  ctx.lineTo(x+16*W/24, y+8*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+20*H/24)
  ctx.lineTo(x+12*W/24, y+14*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+20*H/24)
  ctx.lineTo(x+14*W/24, y+14*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+14*H/24)
  ctx.lineTo(x+4*W/24, y+12*H/24)
  ctx.lineTo(x+8*W/24, y+12*H/24)
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+12*H/24)
  ctx.lineTo(x+4*W/24, y+8*H/24)
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+14*H/24)
  ctx.lineTo(x+4*W/24, y+18*H/24)
  ctx.lineTo(x+8*W/24, y+18*H/24)
  ctx.stroke()

  //11
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+20*H/24)
  ctx.lineTo(x+4*W/24, y+18*H/24)
  ctx.stroke()

  //12
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+18*H/24)
  ctx.lineTo(x+20*W/24, y+14*H/24)
  ctx.stroke()

  //13
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+18*H/24)
  ctx.lineTo(x+20*W/24, y+18*H/24)
  ctx.lineTo(x+22*W/24, y+20*H/24)
  ctx.stroke()

  //14
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+12*H/24)
  ctx.lineTo(x+20*W/24, y+12*H/24)
  ctx.lineTo(x+22*W/24, y+14*H/24)
  ctx.stroke()

  //15
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+8*H/24)
  ctx.lineTo(x+20*W/24, y+11*H/24)
  ctx.lineTo(x+20*W/24, y+12*H/24)
  ctx.stroke()

  //16
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+20*H/24)
  ctx.lineTo(x+10*W/24, y+18*H/24)
  ctx.lineTo(x+10*W/24, y+14*H/24)
  ctx.stroke()

  //17
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+20*H/24)
  ctx.lineTo(x+14*W/24, y+18*H/24)
  ctx.stroke()

  //18
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+14*H/24)
  ctx.lineTo(x+10*W/24, y+12*H/24)
  ctx.lineTo(x+10*W/24, y+8*H/24)
  ctx.stroke()

  //19
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+14*H/24)
  ctx.lineTo(x+14*W/24, y+12*H/24)
  ctx.lineTo(x+14*W/24, y+8*H/24)
  ctx.stroke()

  //20
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+19*H/24)
  ctx.lineTo(x+14*W/24, y+19*H/24)
  ctx.lineTo(x+14*W/24, y+18*H/24)
  ctx.lineTo(x+12*W/24, y+18*H/24)
  ctx.lineTo(x+12*W/24, y+17*H/24)
  ctx.lineTo(x+14*W/24, y+17*H/24)
  ctx.lineTo(x+14*W/24, y+16*H/24)
  ctx.lineTo(x+12*W/24, y+16*H/24)
  ctx.lineTo(x+12*W/24, y+15*H/24)
  ctx.lineTo(x+14*W/24, y+15*H/24)
  ctx.stroke()

  //21
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+8*H/24)
  ctx.lineTo(x+5*W/24, y+10*H/24)
  ctx.lineTo(x+7*W/24, y+10*H/24)
  ctx.lineTo(x+7*W/24, y+8*H/24)
  ctx.stroke()

  //22
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+14*H/24)
  ctx.lineTo(x+17*W/24, y+16*H/24)
  ctx.lineTo(x+19*W/24, y+16*H/24)
  ctx.lineTo(x+19*W/24, y+14*H/24)
  ctx.stroke()

  //23
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+8*H/24)
  ctx.lineTo(x+17*W/24, y+10*H/24)
  ctx.lineTo(x+19*W/24, y+10*H/24)
  ctx.lineTo(x+19*W/24, y+8*H/24)
  ctx.stroke()

  //24
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+14*H/24)
  ctx.lineTo(x+5*W/24, y+16*H/24)
  ctx.lineTo(x+7*W/24, y+16*H/24)
  ctx.lineTo(x+7*W/24, y+14*H/24)
  ctx.stroke()

  //25
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+8*H/24)
  ctx.lineTo(x+11*W/24, y+10*H/24)
  ctx.lineTo(x+13*W/24, y+10*H/24)
  ctx.lineTo(x+13*W/24, y+8*H/24)
  ctx.stroke()

  //26
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+12*H/24)
  ctx.lineTo(x+14*W/24, y+12*H/24)
  ctx.stroke()

  //27
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+18*H/24)
  ctx.lineTo(x+12*W/24, y+18*H/24)
  ctx.stroke()

  //28
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+6*H/24)
  ctx.lineTo(x+19*W/24, y+6*H/24)
  ctx.lineTo(x+19*W/24, y+1*H/24)
  ctx.lineTo(x+17*W/24, y+1*H/24)
  ctx.lineTo(x+17*W/24, y+6*H/24)
  ctx.stroke()
}

function game_pieceAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  //1
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+22*H/24)
  cpx = x+19*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+21*H/24)
  cpx = x+19*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+20*H/24)
  cpx = x+12*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+7*H/24)
  cpx = x+13*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+6*H/24)
  cpx = x+15*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+4*H/24)
  cpx = x+15*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+2*H/24)
  cpx = x+9*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+4*H/24)
  cpx = x+9*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+6*H/24)
  cpx = x+12*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+20*H/24)
  cpx = x+5*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+21*H/24)
  cpx = x+5*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+22*H/24)
  cpx = x+18*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+22*H/24)
  ctx.stroke()
}

function gameAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+22*H/24)
  ctx.lineTo(x+22*W/24, y+22*H/24)
  ctx.lineTo(x+22*W/24, y+2*H/24)
  ctx.lineTo(x+2*W/24, y+2*H/24)
  ctx.lineTo(x+2*W/24, y+22*H/24)
  ctx.stroke()
  //2
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+15*H/24)
  ctx.lineTo(x+22*W/24, y+15*H/24)
  ctx.stroke()
  //3
  ctx.beginPath()
  ctx.moveTo(x+22*W/24, y+9*H/24)
  ctx.lineTo(x+2*W/24, y+9*H/24)
  ctx.stroke()
  //4
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+2*H/24)
  ctx.lineTo(x+9*W/24, y+22*H/24)
  ctx.stroke()
  //5
  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+22*H/24)
  ctx.lineTo(x+15*W/24, y+2*H/24)
  ctx.stroke()
  //6
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+9*H/24)
  ctx.lineTo(x+3*W/24, y+15*H/24)
  ctx.stroke()
  //7
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+9*H/24)
  ctx.lineTo(x+4*W/24, y+15*H/24)
  ctx.stroke()
  //8
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+9*H/24)
  ctx.lineTo(x+5*W/24, y+15*H/24)
  ctx.stroke()
  //9
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+9*H/24)
  ctx.lineTo(x+6*W/24, y+15*H/24)
  ctx.stroke()
  //10
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+9*H/24)
  ctx.lineTo(x+7*W/24, y+15*H/24)
  ctx.stroke()
  //11
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+9*H/24)
  ctx.lineTo(x+8*W/24, y+15*H/24)
  ctx.stroke()
  //12
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+9*H/24)
  ctx.lineTo(x+16*W/24, y+15*H/24)
  ctx.stroke()
  //13
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+9*H/24)
  ctx.lineTo(x+17*W/24, y+15*H/24)
  ctx.stroke()
  //14
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+9*H/24)
  ctx.lineTo(x+18*W/24, y+15*H/24)
  ctx.stroke()
  //15
  ctx.beginPath()
  ctx.moveTo(x+19*W/24, y+9*H/24)
  ctx.lineTo(x+19*W/24, y+14*H/24)
  ctx.lineTo(x+19*W/24, y+15*H/24)
  ctx.stroke()
  //16
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+9*H/24)
  ctx.lineTo(x+20*W/24, y+15*H/24)
  ctx.stroke()
  //17
  ctx.beginPath()
  ctx.moveTo(x+21*W/24, y+9*H/24)
  ctx.lineTo(x+21*W/24, y+15*H/24)
  ctx.stroke()
  //18
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+8*H/24)
  ctx.lineTo(x+15*W/24, y+8*H/24)
  ctx.stroke()
  //19
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+7*H/24)
  ctx.lineTo(x+15*W/24, y+7*H/24)
  ctx.stroke()
  //20
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+6*H/24)
  ctx.lineTo(x+15*W/24, y+6*H/24)
  ctx.stroke()
  //21
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+5*H/24)
  ctx.lineTo(x+15*W/24, y+5*H/24)
  ctx.stroke()
  //22
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+4*H/24)
  ctx.lineTo(x+15*W/24, y+4*H/24)
  ctx.stroke()
  //23
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+3*H/24)
  ctx.lineTo(x+15*W/24, y+3*H/24)
  ctx.stroke()
  //24
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+16*H/24)
  ctx.lineTo(x+15*W/24, y+16*H/24)
  ctx.stroke()
  //25
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+17*H/24)
  ctx.lineTo(x+15*W/24, y+17*H/24)
  ctx.stroke()
  //26
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+18*H/24)
  ctx.lineTo(x+15*W/24, y+18*H/24)
  ctx.stroke()
  //27
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+19*H/24)
  ctx.lineTo(x+15*W/24, y+19*H/24)
  ctx.stroke()
  //28
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+20*H/24)
  ctx.lineTo(x+15*W/24, y+20*H/24)
  ctx.stroke()
  //29
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+21*H/24)
  ctx.lineTo(x+15*W/24, y+21*H/24)
  ctx.stroke()
  //center
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+12*H/24)
  cpx = x+12*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+15*H/24)
  cpx = x+9*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+12*H/24)
  cpx = x+15*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+9*H/24)
  cpx = x+12*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+12*H/24)
  cpx = x+12*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+15*H/24)
  cpx = x+15*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+12*H/24)
  cpx = x+9*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+9*H/24)
  cpx = x+12*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+12*H/24)
  ctx.stroke()
// hptz dots
  let r = W/48 //- ctx.lineWidth/2
  if (r < 0.2)
    r = 0.2
  //30
  ctx.beginPath()
  ctx.arc(x+2.5*W/24, y+12*H/24, r, 0, Math.PI*2)
  ctx.stroke()
  //31
  ctx.beginPath()
  ctx.arc(x+6.5*W/24, y+11*H/24, r, 0, Math.PI*2)
  ctx.stroke()
  //32
  ctx.beginPath()
  ctx.arc(x+6.5*W/24, y+13*H/24, r, 0, Math.PI*2)
  ctx.stroke()
  //33
  ctx.beginPath()
  ctx.arc(x+17.5*W/24, y+11*H/24, r, 0, Math.PI*2)
  ctx.stroke()
  //34
  ctx.beginPath()
  ctx.arc(x+17.5*W/24, y+13*H/24, r, 0, Math.PI*2)
  ctx.stroke()
  //35
  ctx.beginPath()
  ctx.arc(x+21.5*W/24, y+12*H/24, r, 0, Math.PI*2)
  ctx.stroke()
// vertical
  //36
  ctx.beginPath()
  ctx.arc(x+12*W/24, y+2.5*H/24, r, 0, Math.PI*2)
  ctx.stroke()
  //37
  ctx.beginPath()
  ctx.arc(x+11*W/24, y+6.5*H/24, r, 0, Math.PI*2)
  ctx.stroke()
  //38
  ctx.beginPath()
  ctx.arc(x+13*W/24, y+6.5*H/24, r, 0, Math.PI*2)
  ctx.stroke()
  //39
  ctx.beginPath()
  ctx.arc(x+11*W/24, y+17.5*H/24, r, 0, Math.PI*2)
  ctx.stroke()
  //40
  ctx.beginPath()
  ctx.arc(x+13*W/24, y+17.5*H/24, r, 0, Math.PI*2)
  ctx.stroke()
  //41
  ctx.beginPath()
  ctx.arc(x+12*W/24, y+21.5*H/24, r, 0, Math.PI*2)
  ctx.stroke()
  // corner circs
  r = 3.5 * W/24 - ctx.lineWidth
  if (r <= 0)
    r = 0.1
  x+= W/48, y += H/48
    //42
  ctx.beginPath()
  ctx.arc(x+5*W/24, y+5*H/24, r, 0, Math.PI*2)
  ctx.stroke()
  //43
  ctx.beginPath()
  ctx.arc(x+18*W/24, y+5*H/24, r, 0, Math.PI*2)
  ctx.stroke()
  //44
  ctx.beginPath()
  ctx.arc(x+5*W/24, y+18*H/24, r, 0, Math.PI*2)
  ctx.stroke()
  //45
  ctx.beginPath()
  ctx.arc(x+18*W/24, y+18*H/24, r, 0, Math.PI*2)
  ctx.stroke()
}

function pixelAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  let saved = ctx.fillStyle
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2 + W/48, cy = y+H/2 + H/48, angle = pet(180)
  //1
  ctx.beginPath()
  p = rotatePoint(x+11*W/24, y+11*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+11*W/24, y+12*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+12*W/24, y+12*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+12*W/24, y+11*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+11*W/24, y+11*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.fill()
  ctx.fillStyle = saved
}

function anosognosiaAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+16*H/24)
  ctx.lineTo(x+13*W/24, y+23*H/24)
  ctx.lineTo(x+15*W/24, y+23*H/24)
  ctx.lineTo(x+15*W/24, y+8*H/24)
  ctx.lineTo(x+15*W/24, y+14*H/24)
  cpx = x+15*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+15*H/24)
  cpx = x+17*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+14*H/24)
  cpx = x+17*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+8*H/24)
  cpx = x+17*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+5*H/24)
  cpx = x+13*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+4*H/24)
  cpx = x+14*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+2*H/24)
  cpx = x+14*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+1*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+1*H/24)
  ctx.lineTo(x+10*W/24, y+2*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+1*H/24)
  ctx.lineTo(x+10*W/24, y+3*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+2*H/24)
  ctx.lineTo(x+10*W/24, y+4*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+3*H/24)
  ctx.lineTo(x+10*W/24, y+5*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+6*H/24)
  ctx.lineTo(x+7*W/24, y+8*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+4*H/24)
  ctx.lineTo(x+7*W/24, y+9*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+5*H/24)
  ctx.lineTo(x+7*W/24, y+10*H/24)
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+6*H/24)
  ctx.lineTo(x+7*W/24, y+11*H/24)
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+7*H/24)
  ctx.lineTo(x+7*W/24, y+12*H/24)
  ctx.stroke()

  //11
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+8*H/24)
  ctx.lineTo(x+7*W/24, y+13*H/24)
  ctx.stroke()

  //12
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+9*H/24)
  ctx.lineTo(x+7*W/24, y+14*H/24)
  ctx.stroke()

  //13
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+10*H/24)
  ctx.lineTo(x+7.5*W/24, y+14.5*H/24)
  ctx.stroke()

  //14
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+11*H/24)
  ctx.lineTo(x+8*W/24, y+15*H/24)
  ctx.stroke()

  //15
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+12*H/24)
  ctx.lineTo(x+9*W/24, y+15*H/24)
  ctx.stroke()

  //16
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+13*H/24)
  ctx.lineTo(x+9*W/24, y+16*H/24)
  ctx.stroke()

  //17
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+14*H/24)
  ctx.lineTo(x+9*W/24, y+17*H/24)
  ctx.stroke()

  //18
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+15*H/24)
  ctx.lineTo(x+9*W/24, y+18*H/24)
  ctx.stroke()

  //19
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+16*H/24)
  ctx.lineTo(x+9*W/24, y+19*H/24)
  ctx.stroke()

  //20
  ctx.beginPath()
  ctx.moveTo(x+11.7*W/24, y+17.3*H/24)
  ctx.lineTo(x+9*W/24, y+20*H/24)
  ctx.stroke()

  //21
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+19*H/24)
  ctx.lineTo(x+9*W/24, y+21*H/24)
  ctx.stroke()

  //22
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+20*H/24)
  ctx.lineTo(x+9*W/24, y+22*H/24)
  ctx.stroke()

  //23
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+21*H/24)
  ctx.lineTo(x+9*W/24, y+23*H/24)
  ctx.stroke()

  //24
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+22*H/24)
  ctx.lineTo(x+10*W/24, y+23*H/24)
  ctx.stroke()
}

function bothsidesismAt(x,y,W,color,INVERTED) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  ctx.strokeStyle = color
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  let H = W
  ctx.beginPath()
  ctx.moveTo(x+W/2, y + H/24)
  ctx.lineTo(x+W/2, y + H-H/24)
  ctx.closePath()
  ctx.stroke()
  let fillcolor = "#a9c900"
  if (INVERTED)
    fillcolor = adjustBrightnessC(fillcolor, -30)
  ctx.fillStyle = fillcolor

  ctx.beginPath()
  ctx.arc(x+W/4, y+H/2, W/4.4,0,Math.PI*2)
  ctx.closePath()
  ctx.fill()

  appleAt(x,y+H/4,  W/2,color,INVERTED)
  orangeAt(x+W/2,y+H/4,W/2,color,INVERTED)
}

function orangeAt (x,y,W,color,INVERTED) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let fillcolor = "#f28b0d"
  if (INVERTED)
    fillcolor = adjustBrightnessC(fillcolor, -30)
  ctx.fillStyle = fillcolor

  ctx.beginPath()
  ctx.arc(x+W/2, y+H/2, W/2.2,0,Math.PI*2)
  ctx.closePath()
  ctx.fill()
  //1
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+8*H/24)
  cpx = x+15*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+7*H/24)
  cpx = x+15*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+6*H/24)
  cpx = x+13*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+7*H/24)
  cpx = x+13*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+8*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+11*H/24)
  cpx = x+12*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+8*H/24)
  cpx = x+17*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+10*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+9*H/24)
  cpx = x+13*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+7*H/24)
  cpx = x+13*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+4*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+3*H/24)
  cpx = x+15*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+7*H/24)
  cpx = x+15*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+9*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+5*H/24)
  cpx = x+13*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+6*H/24)
  cpx = x+15*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+3*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+22*H/24)
  cpx = x+22*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+12*H/24)
  cpx = x+22*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+2*H/24)
  cpx = x+3*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+12*H/24)
  cpx = x+2*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+22*H/24)
  ctx.stroke()
}

function appleAt (x,y,W,color,INVERTED) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+5*H/24)
  cpx = x+12*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+3*H/24)
  cpx = x+22*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+10*H/24)
  cpx = x+21*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+22*H/24)
  cpx = x+13*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+21*H/24)
  cpx = x+11*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+22*H/24)
  cpx = x+3*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+10*H/24)
  cpx = x+2*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+3*H/24)
  cpx = x+12*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+5*H/24)
  cpx = x+12*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+1*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+12*H/24)
  cpx = x+10*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+14*H/24)
  cpx = x+10*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+15*H/24)
  cpx = x+12*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+12*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+12*H/24)
  cpx = x+14*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+14*H/24)
  cpx = x+14*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+15*H/24)
  cpx = x+12*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+12*H/24)
  ctx.stroke()
  //4
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+6*H/24)
  ctx.lineTo(x+12*W/24, y+20*H/24)
  ctx.stroke()
  //6
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+3*H/24)
  cpx = x+12*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+3*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+1*H/24)
  cpx = x+14*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+1*H/24)
  cpx = x+12*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+5*H/24)
  ctx.stroke()
}

function wd () {
  let ws = 0, ws2 = 0
  let apik = "3045dd712ffe6e702e3245525ac7fa38"
  fetch('https://api.openweathermap.org/data/2.5/weather?q=mattapoisett&units=imperial&appid='+apik)
    .then(res => res.json())
    .then(data => {
      ws = data['wind']['deg']
      ws2 = data['wind']['speed']
      temp = data['main']['temp']
      cond = data['weather']
      WD = ws
      WS = Math.round(ws2)+ " mph"
      TEMP = temp
      CONDITIONS = cond[0].main
      //console.log(data)
    })
    .catch(err => alert(err))
}

function windAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, angle = 0
  //1
  ctx.beginPath()
  p = rotatePoint(x+10*W/24, y+4*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+12*W/24
  cpy = y+4*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24, y+1*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+12*W/24
  cpy = y+4*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24, y+4*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+13*W/24
  cpy = y+1*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+14*W/24, y+1*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()
  //1
  ctx.beginPath()
  p = rotatePoint(x+12*W/24, y+23*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+12*W/24, y+22*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()
  //2
  ctx.beginPath()
  p = rotatePoint(x+1*W/24, y+12*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+2*W/24, y+12*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()
  //3
  ctx.beginPath()
  p = rotatePoint(x+22*W/24, y+12*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+21*W/24, y+12*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()
  
  let speed = WS
  let face = "Garamond"
  ctx.font = "100 italic "+(W/12)+"pt " + face
  let width = ctx.measureText(speed).width
  ctx.fillText(speed, x+W/2-width/2, y+2*H/5)
  ctx.fillText(Math.round(TEMP)+"\u00b0 F", x+W/2-width/2, y+2*H/3)

  angle = WD
  //1
  ctx.beginPath()
  p = rotatePoint(x+12*W/24, y+13*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+13*W/24
  cpy = y+13*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+13*W/24, y+12*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+13*W/24
  cpy = y+11*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24, y+11*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+11*W/24
  cpy = y+11*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+11*W/24, y+12*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+11*W/24
  cpy = y+13*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24, y+13*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()
  //2
  ctx.beginPath()
  p = rotatePoint(x+12*W/24, y+11*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+12*W/24
  cpy = y+4*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24, y+4*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+12*W/24
  cpy = y+6*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+13*W/24, y+6*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+12*W/24
  cpy = y+6*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24, y+4*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+12*W/24
  cpy = y+6*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+11*W/24, y+6*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()
  //3
  ctx.beginPath()
  p = rotatePoint(x+11*W/24, y+20*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+12*W/24
  cpy = y+20*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24, y+18*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+12*W/24
  cpy = y+20*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+13*W/24, y+20*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()
  //4
  ctx.beginPath()
  p = rotatePoint(x+12*W/24, y+18*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+12*W/24
  cpy = y+13*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24, y+13*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()
}

function mr_coffeeAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors =getCurrentPalette()
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2

  ctx.globalAlpha /= 3
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+11*H/24)
  ctx.lineTo(x+17.2*W/24, y+11*H/24)
  ctx.lineTo(x+18*W/24, y+18*H/24)
  ctx.lineTo(x+7*W/24, y+18*H/24)
  ctx.lineTo(x+8*W/24, y+11*H/24)
  ctx.fill()
  ctx.globalAlpha *= 3
  //1
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+8*H/24)
  ctx.lineTo(x+17*W/24, y+8*H/24)
  ctx.lineTo(x+19*W/24, y+2*H/24)
  ctx.lineTo(x+2*W/24, y+2*H/24)
  ctx.lineTo(x+4*W/24, y+10*H/24)
  ctx.lineTo(x+2*W/24, y+22*H/24)
  ctx.lineTo(x+20*W/24, y+22*H/24)
  ctx.lineTo(x+19*W/24, y+19*H/24)
  ctx.lineTo(x+6*W/24, y+19*H/24)
  ctx.lineTo(x+7*W/24, y+11*H/24)
  ctx.lineTo(x+6*W/24, y+8*H/24)
  ctx.stroke()
  //4
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+19*H/24)
  ctx.lineTo(x+19*W/24, y+19*H/24)
  ctx.lineTo(x+20*W/24, y+22*H/24)
  ctx.lineTo(x+18*W/24, y+22*H/24)
  ctx.stroke()
  //5
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+11*H/24)
  ctx.lineTo(x+16*W/24, y+11*H/24)
  ctx.stroke()
  //6
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+13*H/24)
  ctx.lineTo(x+16*W/24, y+13*H/24)
  ctx.stroke()
  //7
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+15*H/24)
  ctx.lineTo(x+16*W/24, y+15*H/24)
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+6*H/24)
  cpx = x+16*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+5*H/24)
  cpx = x+16*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+4*H/24)
  cpx = x+14*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+5*H/24)
  cpx = x+14*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+6*H/24)
  ctx.stroke()
  //1
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+9*H/24)
  cpx = x+19*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+9*H/24)
  cpx = x+20*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+10*H/24)
  cpx = x+21*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+15*H/24)
  cpx = x+21*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+16*H/24)
  cpx = x+18*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+16*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+18*H/24)
  ctx.lineTo(x+17*W/24, y+9*H/24)
  ctx.lineTo(x+7.25*W/24, y+9*H/24)
  ctx.lineTo(x+8*W/24, y+11*H/24)
  ctx.lineTo(x+7*W/24, y+18*H/24)
  ctx.lineTo(x+18*W/24, y+18*H/24)
  ctx.stroke()
}

function shade_birdAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, angle = pet(180)

  //1
  ctx.beginPath()
  p = rotatePoint(x+1*W/24, y+24*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+1*W/24
  cpy = y+10*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24, y+4*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+14*W/24
  cpy = y+0*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+14*W/24, y+0*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+15*W/24
  cpy = y+3*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+15*W/24, y+4*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+23*W/24
  cpy = y+6*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+23*W/24, y+24*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+17*W/24
  cpy = y+21*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+13*W/24, y+14*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+15*W/24
  cpy = y+21*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+17*W/24, y+23*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+13*W/24
  cpy = y+24*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+10*W/24, y+24*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+11*W/24
  cpy = y+20*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+11*W/24, y+13*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+9*W/24
  cpy = y+20*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+1*W/24, y+24*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()
  ctx.fillStyle = colors[0]
  //2
  ctx.beginPath()
  p = rotatePoint(x+1*W/24, y+24*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+5*W/24
  cpy = y+14*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+11*W/24, y+13*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+9*W/24
  cpy = y+20*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+1*W/24, y+24*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()

  //3
  ctx.beginPath()
  p = rotatePoint(x+13*W/24, y+14*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+20*W/24
  cpy = y+15*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+23*W/24, y+24*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+17*W/24
  cpy = y+21*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+13*W/24, y+14*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()

  //4
  ctx.beginPath()
  p = rotatePoint(x+14*W/24, y+0*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+14*W/24
  cpy = y+4*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+15*W/24, y+4*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()

  //5
  ctx.beginPath()
  p = rotatePoint(x+10*W/24, y+24*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+13*W/24
  cpy = y+24*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+17*W/24, y+23*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+15*W/24
  cpy = y+21*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+13*W/24, y+14*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+14*W/24
  cpy = y+21*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+10*W/24, y+24*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()
}

function plantaAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, angle = pet(180)

  //1
  ctx.beginPath()
  p = rotatePoint(x+11*W/24, y+24*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+11*W/24, y+15*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  cpx = x+4*W/24
  cpy = y+15*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+4*W/24, y+8*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+9*W/24
  cpy = y+7*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+11*W/24, y+14*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+7*W/24
  cpy = y+5*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+13*W/24, y+0*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+18*W/24
  cpy = y+7*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24, y+14*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+17*W/24
  cpy = y+8*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+21*W/24, y+13*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+17*W/24
  cpy = y+16*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24, y+15*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+12*W/24
  cpy = y+24*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24, y+24*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()
}

function blast_radiusAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.setLineDash([1,12])
  ctx.beginPath()
  ctx.arc(x+24*W/24, y+12*H/24, W/2.2, Math.PI/2, Math.PI *1.5)
  ctx.stroke()
  ctx.setLineDash([])
  //4
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+23*H/24)
  ctx.lineTo(x+14*W/24, y+22*H/24)
  ctx.lineTo(x+15*W/24, y+22*H/24)
  ctx.lineTo(x+14*W/24, y+20*H/24)
  ctx.lineTo(x+13*W/24, y+22*H/24)
  ctx.lineTo(x+14*W/24, y+22*H/24)
  ctx.stroke()
  //5
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+16*H/24)
  ctx.lineTo(x+11*W/24, y+15*H/24)
  ctx.lineTo(x+12*W/24, y+15*H/24)
  ctx.lineTo(x+11*W/24, y+13*H/24)
  ctx.lineTo(x+10*W/24, y+15*H/24)
  ctx.lineTo(x+11*W/24, y+15*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+8*H/24)
  ctx.lineTo(x+12*W/24, y+7*H/24)
  ctx.lineTo(x+13*W/24, y+7*H/24)
  ctx.lineTo(x+12*W/24, y+5*H/24)
  ctx.lineTo(x+11*W/24, y+7*H/24)
  ctx.lineTo(x+12*W/24, y+7*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+4*H/24)
  ctx.lineTo(x+15*W/24, y+3*H/24)
  ctx.lineTo(x+16*W/24, y+3*H/24)
  ctx.lineTo(x+15*W/24, y+1*H/24)
  ctx.lineTo(x+14*W/24, y+3*H/24)
  ctx.lineTo(x+15*W/24, y+3*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+21*H/24)
  ctx.lineTo(x+11*W/24, y+20*H/24)
  ctx.lineTo(x+12*W/24, y+20*H/24)
  ctx.lineTo(x+11*W/24, y+18*H/24)
  ctx.lineTo(x+10*W/24, y+20*H/24)
  ctx.lineTo(x+11*W/24, y+20*H/24)
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+11*H/24)
  ctx.lineTo(x+10*W/24, y+10*H/24)
  ctx.lineTo(x+11*W/24, y+10*H/24)
  ctx.lineTo(x+10*W/24, y+8*H/24)
  ctx.lineTo(x+9*W/24, y+10*H/24)
  ctx.lineTo(x+10*W/24, y+10*H/24)
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+5*H/24)
  ctx.lineTo(x+10*W/24, y+4*H/24)
  ctx.lineTo(x+11*W/24, y+4*H/24)
  ctx.lineTo(x+10*W/24, y+2*H/24)
  ctx.lineTo(x+9*W/24, y+4*H/24)
  ctx.lineTo(x+10*W/24, y+4*H/24)
  ctx.stroke()

  //11
  ctx.beginPath()
  ctx.moveTo(x+19*W/24, y+21*H/24)
  ctx.lineTo(x+20*W/24, y+19*H/24)
  ctx.stroke()

  //12
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+13*H/24)
  ctx.lineTo(x+14*W/24, y+13*H/24)
  ctx.stroke()

  //13
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+7*H/24)
  ctx.lineTo(x+17*W/24, y+5*H/24)
  ctx.stroke()

  //14
  ctx.beginPath()
  ctx.moveTo(x+23*W/24, y+4*H/24)
  ctx.lineTo(x+23*W/24, y+2*H/24)
  ctx.stroke()

  //15
  ctx.beginPath()
  ctx.moveTo(x+23*W/24, y+20*H/24)
  ctx.lineTo(x+23*W/24, y+21*H/24)
  ctx.stroke()

  //16
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+15*H/24)
  ctx.lineTo(x+19*W/24, y+16*H/24)
  ctx.stroke()

  //17
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+12*H/24)
  ctx.lineTo(x+19*W/24, y+12*H/24)
  ctx.stroke()

  //18
  ctx.beginPath()
  ctx.moveTo(x+22*W/24, y+16*H/24)
  ctx.lineTo(x+22*W/24, y+18*H/24)
  ctx.stroke()

  //19
  ctx.beginPath()
  ctx.moveTo(x+22*W/24, y+8*H/24)
  ctx.lineTo(x+21*W/24, y+6*H/24)
  ctx.stroke()

  //20
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+9*H/24)
  ctx.lineTo(x+15*W/24, y+8*H/24)
  ctx.stroke()

  //21
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+10*H/24)
  ctx.lineTo(x+15*W/24, y+11*H/24)
  ctx.stroke()

  //22
  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+16*H/24)
  ctx.lineTo(x+16*W/24, y+15*H/24)
  ctx.stroke()

  //23
  ctx.beginPath()
  ctx.moveTo(x+21*W/24, y+4*H/24)
  ctx.lineTo(x+20*W/24, y+3*H/24)
  ctx.stroke()

  //24
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+10*H/24)
  ctx.lineTo(x+19*W/24, y+8*H/24)
  ctx.stroke()

  //25
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+11*H/24)
  ctx.lineTo(x+16*W/24, y+10*H/24)
  ctx.stroke()

  //26
  ctx.beginPath()
  ctx.moveTo(x+21*W/24, y+19*H/24)
  ctx.lineTo(x+21*W/24, y+21*H/24)
  ctx.stroke()

  //27
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+18*H/24)
  ctx.lineTo(x+16*W/24, y+18*H/24)
  ctx.stroke()

  //28
  ctx.beginPath()
  ctx.moveTo(x+23*W/24, y+13*H/24)
  ctx.lineTo(x+22*W/24, y+14*H/24)
  ctx.stroke()

  //29
  ctx.beginPath()
  ctx.moveTo(x+23*W/24, y+11*H/24)
  ctx.lineTo(x+23*W/24, y+10*H/24)
  ctx.stroke()

  //30
  ctx.beginPath()
  ctx.moveTo(x+22*W/24, y+11*H/24)
  ctx.lineTo(x+21*W/24, y+10*H/24)
  ctx.stroke()

  //31
  ctx.beginPath()
  ctx.moveTo(x+19*W/24, y+14*H/24)
  ctx.lineTo(x+17*W/24, y+14*H/24)
  ctx.stroke()

  //32
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+16*H/24)
  ctx.lineTo(x+17*W/24, y+17*H/24)
  ctx.stroke()

  //33
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+20*H/24)
  ctx.lineTo(x+19*W/24, y+19*H/24)
  ctx.stroke()

  //34
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+17*H/24)
  ctx.lineTo(x+21*W/24, y+16*H/24)
  ctx.stroke()

  //35
  ctx.beginPath()
  ctx.moveTo(x+23*W/24, y+16*H/24)
  ctx.lineTo(x+23*W/24, y+15*H/24)
  ctx.stroke()

  //36
  ctx.beginPath()
  ctx.moveTo(x+23*W/24, y+7*H/24)
  ctx.lineTo(x+23*W/24, y+6*H/24)
  ctx.stroke()

  //37
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+7*H/24)
  ctx.lineTo(x+19*W/24, y+6*H/24)
  ctx.stroke()

  //38
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+7*H/24)
  ctx.lineTo(x+16*W/24, y+7*H/24)
  ctx.stroke()

  //39
  ctx.beginPath()
  ctx.moveTo(x+19*W/24, y+4*H/24)
  ctx.lineTo(x+18*W/24, y+3*H/24)
  ctx.stroke()

  //40
  ctx.beginPath()
  ctx.moveTo(x+23*W/24, y+18*H/24)
  ctx.lineTo(x+22*W/24, y+19*H/24)
  ctx.stroke()

  //41
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+13*H/24)
  ctx.lineTo(x+17*W/24, y+12*H/24)
  ctx.stroke()

  //42
  ctx.beginPath()
  ctx.moveTo(x+21*W/24, y+13*H/24)
  ctx.lineTo(x+20*W/24, y+14*H/24)
  ctx.stroke()

  //43
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+16*H/24)
  ctx.lineTo(x+9*W/24, y+18*H/24)
  ctx.lineTo(x+8*W/24, y+18*H/24)
  ctx.lineTo(x+8*W/24, y+19*H/24)
  ctx.lineTo(x+8*W/24, y+18*H/24)
  ctx.lineTo(x+7*W/24, y+18*H/24)
  ctx.lineTo(x+8*W/24, y+16*H/24)
  ctx.stroke()

  //44
  ctx.beginPath()
  ctx.moveTo(x+22*W/24, y+3*H/24)
  ctx.lineTo(x+22*W/24, y+2*H/24)
  ctx.stroke()

  //45
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+13*H/24)
  ctx.lineTo(x+8*W/24, y+13*H/24)
  ctx.lineTo(x+7*W/24, y+11*H/24)
  ctx.lineTo(x+6*W/24, y+13*H/24)
  ctx.lineTo(x+7*W/24, y+13*H/24)
  ctx.lineTo(x+7*W/24, y+14*H/24)
  ctx.stroke()

  //46
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+8*H/24)
  ctx.lineTo(x+7*W/24, y+7*H/24)
  ctx.lineTo(x+8*W/24, y+7*H/24)
  ctx.lineTo(x+7*W/24, y+5*H/24)
  ctx.lineTo(x+6*W/24, y+7*H/24)
  ctx.lineTo(x+7*W/24, y+7*H/24)
  ctx.stroke()

  //47
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+11*H/24)
  ctx.lineTo(x+5*W/24, y+10*H/24)
  ctx.lineTo(x+6*W/24, y+10*H/24)
  ctx.lineTo(x+5*W/24, y+8*H/24)
  ctx.lineTo(x+4*W/24, y+10*H/24)
  ctx.lineTo(x+5*W/24, y+10*H/24)
  ctx.stroke()

  //48
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+6*H/24)
  ctx.lineTo(x+4*W/24, y+5*H/24)
  ctx.lineTo(x+5*W/24, y+5*H/24)
  ctx.lineTo(x+4*W/24, y+3*H/24)
  ctx.lineTo(x+3*W/24, y+5*H/24)
  ctx.lineTo(x+4*W/24, y+5*H/24)
  ctx.stroke()

  //49
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+13*H/24)
  ctx.lineTo(x+3*W/24, y+11*H/24)
  ctx.lineTo(x+4*W/24, y+13*H/24)
  ctx.lineTo(x+3*W/24, y+13*H/24)
  ctx.lineTo(x+2*W/24, y+13*H/24)
  ctx.lineTo(x+3*W/24, y+13*H/24)
  ctx.lineTo(x+3*W/24, y+14*H/24)
  ctx.stroke()

  //50
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+17*H/24)
  ctx.lineTo(x+5*W/24, y+16*H/24)
  ctx.lineTo(x+6*W/24, y+16*H/24)
  ctx.lineTo(x+5*W/24, y+14*H/24)
  ctx.lineTo(x+4*W/24, y+16*H/24)
  ctx.lineTo(x+5*W/24, y+16*H/24)
  ctx.stroke()

  //51
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+22*H/24)
  ctx.lineTo(x+3*W/24, y+21*H/24)
  ctx.lineTo(x+4*W/24, y+21*H/24)
  ctx.lineTo(x+3*W/24, y+19*H/24)
  ctx.lineTo(x+2*W/24, y+21*H/24)
  ctx.lineTo(x+3*W/24, y+21*H/24)
  ctx.stroke()

  //52
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+23*H/24)
  ctx.lineTo(x+7*W/24, y+22*H/24)
  ctx.lineTo(x+8*W/24, y+22*H/24)
  ctx.lineTo(x+7*W/24, y+20*H/24)
  ctx.lineTo(x+6*W/24, y+22*H/24)
  ctx.lineTo(x+7*W/24, y+22*H/24)
  ctx.stroke()
}

function urgentAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  //1
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+22*H/24)
  ctx.lineTo(x+2*W/24, y+2*H/24)
  ctx.lineTo(x+22*W/24, y+2*H/24)
  ctx.lineTo(x+22*W/24, y+22*H/24)
  ctx.lineTo(x+2*W/24, y+22*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+19*W/24, y+3*H/24)
  ctx.lineTo(x+19*W/24, y+5*H/24)
  ctx.lineTo(x+21*W/24, y+5*H/24)
  ctx.lineTo(x+21*W/24, y+3*H/24)
  ctx.lineTo(x+19*W/24, y+3*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+5*H/24)
  ctx.lineTo(x+14*W/24, y+5*H/24)
  ctx.stroke()
  //4
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+8*H/24)
  ctx.lineTo(x+18*W/24, y+8*H/24)
  ctx.stroke()
  //5
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+10*H/24)
  ctx.lineTo(x+21*W/24, y+10*H/24)
  ctx.lineTo(x+21*W/24, y+21*H/24)
  ctx.lineTo(x+3*W/24, y+21*H/24)
  ctx.lineTo(x+3*W/24, y+10*H/24)
  ctx.stroke()
  //6
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+12*H/24)
  ctx.lineTo(x+14*W/24, y+12*H/24)
  ctx.stroke()
  //7
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+14*H/24)
  ctx.lineTo(x+14*W/24, y+14*H/24)
  ctx.stroke()
  //8
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+16*H/24)
  ctx.lineTo(x+14*W/24, y+16*H/24)
  ctx.stroke()
  //9
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+18*H/24)
  ctx.lineTo(x+14*W/24, y+18*H/24)
  ctx.stroke()
  //10
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+20*H/24)
  ctx.lineTo(x+20*W/24, y+20*H/24)
  ctx.stroke()
  //11
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+10*H/24)
  ctx.lineTo(x+14*W/24, y+18*H/24)
  ctx.lineTo(x+21*W/24, y+18*H/24)
  ctx.stroke()
  //12
  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+11*H/24)
  ctx.lineTo(x+15*W/24, y+12*H/24)
  ctx.lineTo(x+16*W/24, y+12*H/24)
  ctx.lineTo(x+16*W/24, y+11*H/24)
  ctx.lineTo(x+15*W/24, y+11*H/24)
  ctx.stroke()
  //13
  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+13*H/24)
  ctx.lineTo(x+15*W/24, y+14*H/24)
  ctx.lineTo(x+16*W/24, y+14*H/24)
  ctx.lineTo(x+16*W/24, y+13*H/24)
  ctx.lineTo(x+15*W/24, y+13*H/24)
  ctx.stroke()
  //14
  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+15*H/24)
  ctx.lineTo(x+15*W/24, y+16*H/24)
  ctx.lineTo(x+16*W/24, y+16*H/24)
  ctx.lineTo(x+16*W/24, y+15*H/24)
  ctx.lineTo(x+15*W/24, y+15*H/24)
  ctx.stroke()

  //16
  let face = "serif"
  ctx.font = "800 "+(W/24)+"pt " + face
  ctx.fillText("Urgent", x+14.5*W/24, y+4.5*H/24)
  ctx.font = "100 "+(W/48)+"pt " + face
  ctx.fillText("A-9711", x+2.5*W/24, y+21.7*H/24)

  ctx.lineWidth *= 1.4
  //17
  ctx.beginPath()
  ctx.moveTo(x+14.8*W/24, y+11.4*H/24)
  ctx.lineTo(x+15.5*W/24, y+12.3*H/24)
  ctx.lineTo(x+15.8*W/24, y+10.7*H/24)
  ctx.stroke()
  
  let v = document.getElementById("featuresize").value
  ctx.lineWidth  = document.getElementById("featuresize").value /= 9
  scriptAt(x+(4+pet(1))*W/24, y+7*H/24,H/32,color)
  scriptAt(x+(11+pet(1))*W/24, y+7*H/24,H/32,color)
  scriptAt(x+(4.5+pet(1))*W/24, y+9.5*H/20,H/29,color)
  scriptAt(x+(9+pet(1))*W/24, y+9.5*H/20,H/28,color)
 
  document.getElementById("featuresize").value = v
}

function holeAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.globalAlpha /= 3
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+15*H/24)
  cpx = x+22*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+12*H/24)
  cpx = x+22*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+10*H/24)
  cpx = x+2*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+12*H/24)
  cpx = x+2*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+15*H/24)
  ctx.fill()
  ctx.globalAlpha *= 3
  ctx.stroke()

  //1
  ctx.beginPath()
  ctx.moveTo(x+22*W/24, y+12*H/24)
  cpx = x+22*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+9*H/24)
  cpx = x+2*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+12*H/24)
  ctx.stroke()
}

function suburbsAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  //1
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+6*H/24)
  ctx.lineTo(x+6*W/24, y+6*H/24)
  ctx.lineTo(x+6*W/24, y+4*H/24)
  ctx.lineTo(x+4*W/24, y+2*H/24)
  ctx.lineTo(x+2*W/24, y+4*H/24)
  ctx.lineTo(x+2*W/24, y+6*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+6*H/24)
  ctx.lineTo(x+14*W/24, y+6*H/24)
  ctx.lineTo(x+14*W/24, y+4*H/24)
  ctx.lineTo(x+12*W/24, y+2*H/24)
  ctx.lineTo(x+10*W/24, y+4*H/24)
  ctx.lineTo(x+10*W/24, y+6*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+6*H/24)
  ctx.lineTo(x+22*W/24, y+6*H/24)
  ctx.lineTo(x+22*W/24, y+4*H/24)
  ctx.lineTo(x+20*W/24, y+2*H/24)
  ctx.lineTo(x+18*W/24, y+4*H/24)
  ctx.lineTo(x+18*W/24, y+6*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+6*H/24)
  ctx.lineTo(x+7*W/24, y+5*H/24)
  ctx.lineTo(x+7*W/24, y+3*H/24)
  ctx.lineTo(x+5*W/24, y+1*H/24)
  ctx.lineTo(x+4*W/24, y+2*H/24)
  ctx.lineTo(x+6*W/24, y+4*H/24)
  ctx.lineTo(x+7*W/24, y+3*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+2*H/24)
  ctx.lineTo(x+13*W/24, y+1*H/24)
  ctx.lineTo(x+15*W/24, y+3*H/24)
  ctx.lineTo(x+15*W/24, y+5*H/24)
  ctx.lineTo(x+14*W/24, y+6*H/24)
  ctx.lineTo(x+14*W/24, y+4*H/24)
  ctx.lineTo(x+15*W/24, y+3*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+22*W/24, y+6*H/24)
  ctx.lineTo(x+23*W/24, y+5*H/24)
  ctx.lineTo(x+23*W/24, y+3*H/24)
  ctx.lineTo(x+21*W/24, y+1*H/24)
  ctx.lineTo(x+20*W/24, y+2*H/24)
  ctx.lineTo(x+22*W/24, y+4*H/24)
  ctx.lineTo(x+23*W/24, y+3*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+22*H/24)
  ctx.lineTo(x+6*W/24, y+22*H/24)
  ctx.lineTo(x+6*W/24, y+20*H/24)
  ctx.lineTo(x+4*W/24, y+18*H/24)
  ctx.lineTo(x+2*W/24, y+20*H/24)
  ctx.lineTo(x+2*W/24, y+22*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+22*H/24)
  ctx.lineTo(x+10*W/24, y+20*H/24)
  ctx.lineTo(x+12*W/24, y+18*H/24)
  ctx.lineTo(x+14*W/24, y+20*H/24)
  ctx.lineTo(x+14*W/24, y+22*H/24)
  ctx.lineTo(x+10*W/24, y+22*H/24)
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+22*H/24)
  ctx.lineTo(x+22*W/24, y+22*H/24)
  ctx.lineTo(x+22*W/24, y+20*H/24)
  ctx.lineTo(x+20*W/24, y+18*H/24)
  ctx.lineTo(x+18*W/24, y+20*H/24)
  ctx.lineTo(x+18*W/24, y+22*H/24)
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+14*H/24)
  ctx.lineTo(x+5*W/24, y+14*H/24)
  ctx.lineTo(x+5*W/24, y+12*H/24)
  ctx.lineTo(x+3*W/24, y+10*H/24)
  ctx.lineTo(x+1*W/24, y+12*H/24)
  ctx.lineTo(x+1*W/24, y+14*H/24)
  ctx.stroke()

  //11
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+14*H/24)
  ctx.lineTo(x+9*W/24, y+12*H/24)
  ctx.lineTo(x+11*W/24, y+10*H/24)
  ctx.lineTo(x+13*W/24, y+12*H/24)
  ctx.lineTo(x+13*W/24, y+14*H/24)
  ctx.lineTo(x+9*W/24, y+14*H/24)
  ctx.stroke()

  //12
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+14*H/24)
  ctx.lineTo(x+21*W/24, y+14*H/24)
  ctx.lineTo(x+21*W/24, y+12*H/24)
  ctx.lineTo(x+19*W/24, y+10*H/24)
  ctx.lineTo(x+17*W/24, y+12*H/24)
  ctx.lineTo(x+17*W/24, y+14*H/24)
  ctx.stroke()

  //13
  ctx.beginPath()
  ctx.moveTo(x+21*W/24, y+14*H/24)
  ctx.lineTo(x+22*W/24, y+13*H/24)
  ctx.lineTo(x+22*W/24, y+11*H/24)
  ctx.lineTo(x+20*W/24, y+9*H/24)
  ctx.lineTo(x+19*W/24, y+10*H/24)
  ctx.lineTo(x+21*W/24, y+12*H/24)
  ctx.lineTo(x+22*W/24, y+11*H/24)
  ctx.stroke()

  //14
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+14*H/24)
  ctx.lineTo(x+14*W/24, y+13*H/24)
  ctx.lineTo(x+14*W/24, y+11*H/24)
  ctx.lineTo(x+12*W/24, y+9*H/24)
  ctx.lineTo(x+11*W/24, y+10*H/24)
  ctx.lineTo(x+13*W/24, y+12*H/24)
  ctx.lineTo(x+14*W/24, y+11*H/24)
  ctx.stroke()

  //15
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+22*H/24)
  ctx.lineTo(x+15*W/24, y+21*H/24)
  ctx.lineTo(x+15*W/24, y+19*H/24)
  ctx.lineTo(x+13*W/24, y+17*H/24)
  ctx.lineTo(x+12*W/24, y+18*H/24)
  ctx.lineTo(x+14*W/24, y+20*H/24)
  ctx.lineTo(x+15*W/24, y+19*H/24)
  ctx.stroke()

  //16
  ctx.beginPath()
  ctx.moveTo(x+22*W/24, y+22*H/24)
  ctx.lineTo(x+23*W/24, y+21*H/24)
  ctx.lineTo(x+23*W/24, y+19*H/24)
  ctx.lineTo(x+21*W/24, y+17*H/24)
  ctx.lineTo(x+20*W/24, y+18*H/24)
  ctx.lineTo(x+22*W/24, y+20*H/24)
  ctx.lineTo(x+23*W/24, y+19*H/24)
  ctx.stroke()

  //17
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+22*H/24)
  ctx.lineTo(x+7*W/24, y+21*H/24)
  ctx.lineTo(x+7*W/24, y+19*H/24)
  ctx.lineTo(x+5*W/24, y+17*H/24)
  ctx.lineTo(x+4*W/24, y+18*H/24)
  ctx.lineTo(x+6*W/24, y+20*H/24)
  ctx.lineTo(x+7*W/24, y+19*H/24)
  ctx.stroke()

  //18
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+14*H/24)
  ctx.lineTo(x+6*W/24, y+13*H/24)
  ctx.lineTo(x+6*W/24, y+11*H/24)
  ctx.lineTo(x+4*W/24, y+9*H/24)
  ctx.lineTo(x+3*W/24, y+10*H/24)
  ctx.lineTo(x+5*W/24, y+12*H/24)
  ctx.lineTo(x+6*W/24, y+11*H/24)
  ctx.stroke()

  let f = W/4
  locationAt(x+W/2+pet(W/2), y+W/2+pet(W/3), f)
}

function empty_setAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  //1
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+2*H/24)
  cpx = x+4*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+6*H/24)
  cpx = x+7*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+12*H/24)
  cpx = x+7*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+18*H/24)
  cpx = x+4*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+22*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+22*H/24)
  cpx = x+20*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+18*H/24)
  cpx = x+17*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+12*H/24)
  cpx = x+17*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+6*H/24)
  cpx = x+20*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+2*H/24)
  ctx.stroke()
}

function nowAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, angle = pet(360)
  let d = new Date()
  let h = d.getHours()
  let m = d.getMinutes()
  //1 minute
  angle = m * 6
  ctx.beginPath()
  p = rotatePoint(x+12*W/24, y+12*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+12*W/24, y+3*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+13*W/24, y+4*H/24 ,cx,cy,angle)
  p = rotatePoint(x+12*W/24, y+3*H/24 ,cx,cy,angle)
  p = rotatePoint(x+11*W/24, y+4*H/24 ,cx,cy,angle)
  ctx.stroke()
  angle = h*30 // plus small amount for minute
  angle += m*0.6
  //2 hour
  ctx.beginPath()
  p = rotatePoint(x+12*W/24, y+12*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+12*W/24, y+5*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+11*W/24, y+6*H/24 ,cx,cy,angle)
  p = rotatePoint(x+12*W/24, y+5*H/24 ,cx,cy,angle)
  p = rotatePoint(x+13*W/24, y+6*H/24 ,cx,cy,angle)
  ctx.stroke()
  
  //3
  ctx.beginPath()
  p = rotatePoint(x+12*W/24, y+12*H/24 ,cx,cy,angle)
  ctx.arc(p[0],p[1],10*W/24,0,Math.PI*2)
  ctx.stroke()
  angle = 0
  // date
  let day = d.getDate()
  if (day < 10)
    day = "0"+day
  let face = "sans serif"
  ctx.font = (1.4*W/24)+"pt " + face
  ctx.fillText(day,x+17.5*W/24, y+11*H/24+1.7*W/24)
  // box for date
  angle = 0
  ctx.beginPath()
  p = rotatePoint(x+17*W/24, y+13*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+17*W/24, y+11*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+20*W/24, y+11*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+20*W/24, y+13*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+17*W/24, y+13*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()
  
  ctx.lineWidth = 0.5 + document.getElementById("featuresize").value/180
  let secs = d.getSeconds()
  angle = secs * 6
  //4 secondhand
  ctx.beginPath()
  p = rotatePoint(x+12*W/24, y+12*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+12*W/24, y+3*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()
  
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  angle = 0
  //1
  ctx.beginPath()
  p = rotatePoint(x+4*W/24, y+22*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+4*W/24, y+18.5*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //2
  ctx.beginPath()
  p = rotatePoint(x+4*W/24, y+5.5*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+4*W/24, y+2*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //3
  ctx.beginPath()
  p = rotatePoint(x+20*W/24, y+22*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+20*W/24, y+18.5*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //4
  ctx.beginPath()
  p = rotatePoint(x+20*W/24, y+5.5*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+20*W/24, y+2*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //5
  ctx.beginPath()
  p = rotatePoint(x+22*W/24, y+11*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+23*W/24
  cpy = y+11*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+23*W/24, y+12*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+23*W/24
  cpy = y+13*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+22*W/24, y+13*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()
}

function bridgeAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  //1
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+8*H/24)
  cpx = x+22*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+8*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+16*H/24)
  cpx = x+8*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+10*H/24)
  cpx = x+16*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+16*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+7*H/24)
  ctx.lineTo(x+22*W/24, y+7*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+14*H/24)
  ctx.lineTo(x+4*W/24, y+8*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+10*H/24)
  ctx.lineTo(x+12*W/24, y+8*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+14*H/24)
  ctx.lineTo(x+20*W/24, y+8*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+11*H/24)
  ctx.lineTo(x+8*W/24, y+8*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+11*H/24)
  ctx.lineTo(x+16*W/24, y+8*H/24)
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+18*H/24)
  cpx = x+8*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+11*H/24)
  cpx = x+16*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+18*H/24)
  ctx.stroke()

  //10 car
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+6*H/24)
  cpx = x+17*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+6*H/24)
  cpx = x+17*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+5*H/24)
  cpx = x+17*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+4*H/24)
  cpx = x+14*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+4*H/24)
  cpx = x+13*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+5*H/24)
  cpx = x+12*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+6*H/24)
  ctx.stroke()

  //11
  ctx.beginPath()
  ctx.arc(x+13*W/24, y+6.5*H/24, W/48, 0, Math.PI*2)
  ctx.stroke()

  //12
  ctx.beginPath()
  ctx.arc(x+16*W/24, y+6.5*H/24, W/48, 0, Math.PI*2)
  ctx.stroke()
}

function shoesAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  //1
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+22*H/24)
  cpx = x+22*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+15*H/24)
  cpx = x+22*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+6*H/24)
  cpx = x+22*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+2*H/24)
  cpx = x+14*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+6*H/24)
  cpx = x+14*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+10*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+22*H/24)
  cpx = x+14*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+16*H/24)
  cpx = x+15*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+6*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+22*H/24)
  cpx = x+2*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+16*H/24)
  cpx = x+2*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+6*H/24)
  cpx = x+2*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+2*H/24)
  cpx = x+10*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+6*H/24)
  cpx = x+10*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+10*H/24)
  cpx = x+2*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+6*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+22*H/24)
  cpx = x+10*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+16*H/24)
  cpx = x+9*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+6*H/24)
  ctx.stroke()

  
  //13
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+10*H/24)
  cpx = x+22*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+6*H/24)
  ctx.stroke()
  
  //1
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+10*H/24)
  ctx.lineTo(x+16*W/24, y+11*H/24)
  ctx.lineTo(x+20*W/24, y+12*H/24)
  ctx.lineTo(x+16*W/24, y+13*H/24)
  ctx.lineTo(x+20*W/24, y+14*H/24)
  ctx.lineTo(x+16*W/24, y+15*H/24)
  ctx.lineTo(x+20*W/24, y+15*H/24)
  ctx.lineTo(x+16*W/24, y+14*H/24)
  ctx.lineTo(x+20*W/24, y+13*H/24)
  ctx.lineTo(x+16*W/24, y+12*H/24)
  ctx.lineTo(x+20*W/24, y+11*H/24)
  ctx.lineTo(x+16*W/24, y+10*H/24)
  cpx = x+13*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+12*H/24)
  cpx = x+12*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+16*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+10*H/24)
  cpx = x+22*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+13*H/24)
  cpx = x+22*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+16*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+10*H/24)
  ctx.lineTo(x+4*W/24, y+11*H/24)
  ctx.lineTo(x+8*W/24, y+12*H/24)
  ctx.lineTo(x+4*W/24, y+13*H/24)
  ctx.lineTo(x+8*W/24, y+14*H/24)
  ctx.lineTo(x+4*W/24, y+15*H/24)
  ctx.lineTo(x+8*W/24, y+15*H/24)
  ctx.lineTo(x+4*W/24, y+14*H/24)
  ctx.lineTo(x+8*W/24, y+13*H/24)
  ctx.lineTo(x+4*W/24, y+12*H/24)
  ctx.lineTo(x+8*W/24, y+11*H/24)
  ctx.lineTo(x+4*W/24, y+10*H/24)
  cpx = x+2*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+15*H/24)
  cpx = x+2*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+18*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+10*H/24)
  cpx = x+10*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+14*H/24)
  cpx = x+11*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+16*H/24)
  ctx.stroke()
}

function cabin_air_filterAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, angle = pet(80)

  //1
  ctx.beginPath()
  p = rotatePoint(x+3*W/24, y+20*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+4*W/24, y+18*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+5*W/24, y+20*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+6*W/24, y+18*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+7*W/24, y+20*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+8*W/24, y+18*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+9*W/24, y+20*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+10*W/24, y+18*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+11*W/24, y+20*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+12*W/24, y+18*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+13*W/24, y+20*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+14*W/24, y+18*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+15*W/24, y+20*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+16*W/24, y+18*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+17*W/24, y+20*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+18*W/24, y+18*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+19*W/24, y+20*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+22*W/24, y+4*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+21*W/24, y+2*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+20*W/24, y+4*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+19*W/24, y+2*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+18*W/24, y+4*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+17*W/24, y+2*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+16*W/24, y+4*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+15*W/24, y+2*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+14*W/24, y+4*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+13*W/24, y+2*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+12*W/24, y+4*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+11*W/24, y+2*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+10*W/24, y+4*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+9*W/24, y+2*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+8*W/24, y+4*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+7*W/24, y+2*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+6*W/24, y+4*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+3*W/24, y+20*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //2
  ctx.beginPath()
  p = rotatePoint(x+4*W/24, y+18*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+7*W/24, y+2*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //3
  ctx.beginPath()
  p = rotatePoint(x+18*W/24, y+18*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+21*W/24, y+2*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //4
  ctx.beginPath()
  p = rotatePoint(x+16*W/24, y+18*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+19*W/24, y+2*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //5
  ctx.beginPath()
  p = rotatePoint(x+15*W/24, y+20*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+18*W/24, y+4*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //6
  ctx.beginPath()
  p = rotatePoint(x+14*W/24, y+18*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+17*W/24, y+2*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //7
  ctx.beginPath()
  p = rotatePoint(x+17*W/24, y+20*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+20*W/24, y+4*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //8
  ctx.beginPath()
  p = rotatePoint(x+13*W/24, y+20*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+16*W/24, y+4*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //9
  ctx.beginPath()
  p = rotatePoint(x+12*W/24, y+18*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+15*W/24, y+2*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //10
  ctx.beginPath()
  p = rotatePoint(x+11*W/24, y+20*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+14*W/24, y+4*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //11
  ctx.beginPath()
  p = rotatePoint(x+10*W/24, y+18*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+13*W/24, y+2*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //12
  ctx.beginPath()
  p = rotatePoint(x+9*W/24, y+20*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+12*W/24, y+4*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //13
  ctx.beginPath()
  p = rotatePoint(x+8*W/24, y+18*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+11*W/24, y+2*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //14
  ctx.beginPath()
  p = rotatePoint(x+7*W/24, y+20*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+10*W/24, y+4*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //15
  ctx.beginPath()
  p = rotatePoint(x+6*W/24, y+18*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+9*W/24, y+2*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //16
  ctx.beginPath()
  p = rotatePoint(x+5*W/24, y+20*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+8*W/24, y+4*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //17
  ctx.beginPath()
  p = rotatePoint(x+2*W/24, y+21*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+20*W/24, y+21*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+23*W/24, y+3*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+22*W/24, y+3*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //18
  ctx.beginPath()
  p = rotatePoint(x+2*W/24, y+21*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+5*W/24, y+3*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+6*W/24, y+3*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //19
  ctx.beginPath()
  p = rotatePoint(x+21*W/24, y+16*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+22*W/24, y+16*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+23*W/24, y+10*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+22*W/24, y+10*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //20
  ctx.beginPath()
  p = rotatePoint(x+3*W/24, y+15*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+2*W/24, y+15*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+3*W/24, y+10*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+4*W/24, y+10*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()
  let v = document.getElementById("featuresize").value
  ctx.lineWidth =  document.getElementById("featuresize").value/150
  let i = 0, x1, x2
  for (; i < 23; i++) {
   x1 = x + 3*W/24 + Math.random() * 17*W/24
   y1 = y + 3*W/24 + Math.random() * 17*W/24
   p = rotatePoint(x1,y1 ,cx,cy,angle)
   ctx.beginPath()
   ctx.moveTo(p[0], p[1])
   cpx = x + 3*W/24 + Math.random() * 17*W/24
   cpy = y + 3*W/24 + Math.random() * 17*W/24
   cp = rotatePoint(cpx,cpy,cx,cy,angle)
   x1 = x + 3*W/24 + Math.random() * 17*W/24
   y1 = y + 3*W/24 + Math.random() * 17*W/24
   p = rotatePoint(x1,y1 ,cx,cy,angle)
   ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
   ctx.stroke()
  }
  document.getElementById("featuresize").value = v
}


function catAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  
  //1
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+22*H/24)
  cpx = x+22*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+16*H/24)
  cpx = x+22*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+2*H/24)
  cpx = x+20*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+4*H/24)
  cpx = x+18*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+4*H/24)
  cpx = x+14*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+2*H/24)
  cpx = x+14*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+5*H/24)
  cpx = x+14*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+6*H/24)
  cpx = x+2*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+16*H/24)
  cpx = x+2*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+22*H/24)
  cpx = x+16*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+22*H/24)
  ctx.stroke()
}
function inverted_catAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = [], d = 0
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  
   //1
  ctx.beginPath()
  ctx.moveTo(x+22*W/24+pet(d), y+8*H/24+pet(d))
  cpx = x+22*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+22*W/24+pet(d), y+22*H/24+pet(d))
  cpx = x+20*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20*W/24+pet(d), y+20*H/24+pet(d))
  cpx = x+18*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*W/24+pet(d), y+20*H/24+pet(d))
  cpx = x+14*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+14*W/24+pet(d), y+22*H/24+pet(d))
  cpx = x+14*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+14*W/24+pet(d), y+19*H/24+pet(d))
  cpx = x+14*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+13*W/24+pet(d), y+18*H/24+pet(d))
  cpx = x+2*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+2*W/24+pet(d), y+8*H/24+pet(d))
  cpx = x+2*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*W/24+pet(d), y+2*H/24+pet(d))
  cpx = x+16*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*W/24+pet(d), y+2*H/24+pet(d))
  cpx = x+22*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+22*W/24+pet(d), y+8*H/24+pet(d))
  ctx.stroke()
}

function elephantAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //12
  ctx.beginPath()
  ctx.moveTo(x+21*W/24, y+21*H/24)
  ctx.lineTo(x+22*W/24, y+21*H/24)
  ctx.stroke()
  //11
  ctx.beginPath()
  ctx.moveTo(x+22*W/24, y+21*H/24)
  cpx = x+21*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+6*H/24)
  cpx = x+21*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+3*H/24)
  cpx = x+14*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+4*H/24)
  cpx = x+2*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+12*H/24)
  ctx.stroke()
  //2
  ctx.beginPath()
  ctx.moveTo(x+21*W/24, y+21*H/24)
  cpx = x+20*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+10*H/24)
  cpx = x+19*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+14*H/24)
  cpx = x+18*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+10*H/24)
  cpx = x+16*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+12*H/24)
  cpx = x+17*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+21*H/24)
  cpx = x+18*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+22*H/24)
  cpx = x+15*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+22*H/24)
  cpx = x+15*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+15*H/24)
  cpx = x+10*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+17*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+15*H/24)
  cpx = x+13*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+21*H/24)
  cpx = x+13*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+22*H/24)
  ctx.stroke()
  //4
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+12*H/24)
  cpx = x+7*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+17*H/24)
  cpx = x+6*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+21*H/24)
  cpx = x+8*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+22*H/24)
  cpx = x+5*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+22*H/24)
  cpx = x+2*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+12*H/24)
  ctx.stroke()
  //5
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+12*H/24)
  cpx = x+2*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+18*H/24)
  ctx.stroke()
  //6
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+17*H/24)
  cpx = x+2*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+21*H/24)
  cpx = x+2*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+22*H/24)
  ctx.stroke()
  //7
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+6*H/24)
  cpx = x+17*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+11*H/24)
  cpx = x+11*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+7*H/24)
  cpx = x+10*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+4*H/24)
  ctx.stroke()
  //13
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+10*H/24)
  cpx = x+19*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+10*H/24)
  ctx.stroke()
  //8
  ctx.beginPath()
  ctx.arc(x+19*W/24, y+6*H/24, W/72, 0, Math.PI*2)
  ctx.stroke()
}

function solar_systemAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let i = 0, r = W/24, r2 = ctx.lineWidth * 1.6
  let r3 = r2 * 2.2
  for (; i < 8; i++) {
    ctx.beginPath()
    ctx.arc(x+W/2,y+H/2,r,0,Math.PI*2)
    ctx.stroke()
    a = Math.PI*2*Math.random()
    //The parametric equation for a circle is
    x2 = x+W/2 + r * Math.cos(a)
    y2 = y+H/2 + r * Math.sin(a)
    ctx.beginPath()
    ctx.arc(x2,y2,r2,0,Math.PI*2)
    ctx.fill()
    r += W/18
    if (i === 3)
      r2 *= 1.3
    if (i === 5)
      r2 /= 1.3
    if (i === 5) {
      ctx.lineWidth /= 1.25
      ctx.beginPath()
      ctx.arc(x2,y2,r3,0,Math.PI*2)
      ctx.stroke()
      ctx.lineWidth += 1.25
    }
  }
}

function fourbirdsAt () {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let W = canvas.width, H = W
  let color = getselectedcolor()
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //let p = [], cp = [], lastp = []
  //let cx = x+W/2, cy = y+H/2, angle = pet(180)
  filledcatAt (40,40,   W/2.5)
  filledcatAt (40,40+H/2,  W/2.5)
  filledcatAt (40+W/2,40,W/2.5)
  filledcatAt (40+W/2,40+H/2,W/2.5)
}

function filledcatAt (x,y,W, color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  //let color = getselectedcolor()
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.fillStyle = color

  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, angle = 0//pet(400)

  //1
  ctx.beginPath()
  p = rotatePoint(x+4*W/24, y+16*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+4*W/24
  cpy = y+22*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+10*W/24, y+22*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+16*W/24
  cpy = y+22*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+16*W/24, y+22*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+22*W/24
  cpy = y+22*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+22*W/24, y+15*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+22*W/24
  cpy = y+1*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+22*W/24, y+1*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+20*W/24
  cpy = y+4*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+20*W/24, y+4*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+19*W/24
  cpy = y+3*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+18*W/24, y+4*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+16*W/24
  cpy = y+1*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+16*W/24, y+1*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+16*W/24
  cpy = y+6*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+16*W/24, y+6*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+16*W/24
  cpy = y+8*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+14*W/24, y+8*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+6*W/24
  cpy = y+9*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+4*W/24, y+16*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()
}

function filledfloppyAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  let i = 0
  ctx.strokeStyle = colors[i++]
  ctx.fillStyle = colors[i++]
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, angle = pet(360)

  //1
  ctx.beginPath()
  p = rotatePoint(x+3*W/24, y+22*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+21*W/24
  cpy = y+22*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+21*W/24, y+22*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+22*W/24
  cpy = y+22*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+22*W/24, y+21*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+22*W/24
  cpy = y+7*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+22*W/24, y+7*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+17*W/24
  cpy = y+2*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+17*W/24, y+2*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+3*W/24
  cpy = y+2*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+3*W/24, y+2*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+2*W/24
  cpy = y+2*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+2*W/24, y+3*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+2*W/24
  cpy = y+21*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+2*W/24, y+21*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+2*W/24
  cpy = y+22*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+3*W/24, y+22*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()
  ctx.fillStyle = colors[i++]
  //2
  ctx.beginPath()
  p = rotatePoint(x+12*W/24, y+14*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+14*W/24
  cpy = y+14*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+14*W/24, y+12*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+14*W/24
  cpy = y+10*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24, y+10*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+10*W/24
  cpy = y+10*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+10*W/24, y+12*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+10*W/24
  cpy = y+14*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24, y+14*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()
  ctx.fillStyle = colors[i++]
  //3
  ctx.beginPath()
  p = rotatePoint(x+4*W/24, y+22*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+4*W/24
  cpy = y+17*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+4*W/24, y+17*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+4*W/24
  cpy = y+16*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+5*W/24, y+16*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+19*W/24
  cpy = y+16*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+19*W/24, y+16*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+20*W/24
  cpy = y+16*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+20*W/24, y+17*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+20*W/24
  cpy = y+22*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+20*W/24, y+22*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()
  ctx.fillStyle = colors[i++]
  //4
  ctx.beginPath()
  p = rotatePoint(x+4*W/24, y+4*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+4*W/24, y+6*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+18*W/24, y+6*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+18*W/24, y+4*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+4*W/24, y+4*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.fill()
  ctx.fillStyle = colors[i++]
  //5
  ctx.beginPath()
  p = rotatePoint(x+14*W/24, y+22*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+14*W/24, y+16*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+19*W/24, y+16*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  cpx = x+20*W/24
  cpy = y+16*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+20*W/24, y+17*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+20*W/24
  cpy = y+22*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+20*W/24, y+22*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+14*W/24
  cpy = y+22*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+14*W/24, y+22*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()
}

function filledbirdAt (x,y,W,color) {
  console.log(x,y,W)
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
 // let color = getselectedcolor()
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, angle = pet(360)

//1
ctx.beginPath()
p = rotatePoint(x+12*W/24, y+23*H/24 ,cx,cy,angle)
ctx.moveTo(p[0],p[1])
cpx = x+9*W/24
cpy = y+14*H/24
cp = rotatePoint(cpx,cpy,cx,cy,angle)
p = rotatePoint(x+9*W/24, y+9*H/24,cx,cy,angle)
ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
cpx = x+11*W/24
cpy = y+14*H/24
cp = rotatePoint(cpx,cpy,cx,cy,angle)
p = rotatePoint(x+6*W/24, y+23*H/24,cx,cy,angle)
ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
cpx = x+1*W/24
cpy = y+14*H/24
cp = rotatePoint(cpx,cpy,cx,cy,angle)
p = rotatePoint(x+2*W/24, y+10*H/24,cx,cy,angle)
ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
cpx = x+4*W/24
cpy = y+4*H/24
cp = rotatePoint(cpx,cpy,cx,cy,angle)
p = rotatePoint(x+11*W/24, y+4*H/24,cx,cy,angle)
ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
cpx = x+12*W/24
cpy = y+1*H/24
cp = rotatePoint(cpx,cpy,cx,cy,angle)
p = rotatePoint(x+12*W/24, y+1*H/24,cx,cy,angle)
ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
cpx = x+13*W/24
cpy = y+4*H/24
cp = rotatePoint(cpx,cpy,cx,cy,angle)
p = rotatePoint(x+13*W/24, y+4*H/24,cx,cy,angle)
ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
cpx = x+20*W/24
cpy = y+4*H/24
cp = rotatePoint(cpx,cpy,cx,cy,angle)
p = rotatePoint(x+22*W/24, y+10*H/24,cx,cy,angle)
ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
cpx = x+23*W/24
cpy = y+14*H/24
cp = rotatePoint(cpx,cpy,cx,cy,angle)
p = rotatePoint(x+18*W/24, y+23*H/24,cx,cy,angle)
ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
cpx = x+13*W/24
cpy = y+14*H/24
cp = rotatePoint(cpx,cpy,cx,cy,angle)
p = rotatePoint(x+15*W/24, y+9*H/24,cx,cy,angle)
ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
cpx = x+15*W/24
cpy = y+14*H/24
cp = rotatePoint(cpx,cpy,cx,cy,angle)
p = rotatePoint(x+12*W/24, y+23*H/24,cx,cy,angle)
ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
ctx.fill()
}

function mothAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  //1
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+6*H/24)
  cpx = x+5*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+16*H/24)
  cpx = x+2*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+18*H/24)
  cpx = x+12*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+8*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+18*H/24)
  cpx = x+10*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+17*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+17*H/24)
  cpx = x+14*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+18*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+8*H/24)
  cpx = x+12*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+18*H/24)
  cpx = x+22*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+16*H/24)
  cpx = x+19*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+6*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+13*H/24)
  cpx = x+11*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+17*H/24)
  cpx = x+13*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+13*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+5*H/24)
  cpx = x+6*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+9*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+5*H/24)
  cpx = x+18*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+9*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+6*H/24)
  cpx = x+12*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+6*H/24)
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+6*H/24)
  cpx = x+10*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+8*H/24)
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+6*H/24)
  cpx = x+14*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+8*H/24)
  ctx.stroke()

  //11
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+15*H/24)
  cpx = x+7*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+14*H/24)
  cpx = x+7*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+13*H/24)
  cpx = x+5*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+14*H/24)
  cpx = x+5*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+15*H/24)
  ctx.stroke()

  //12
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+15*H/24)
  cpx = x+19*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+14*H/24)
  cpx = x+19*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+13*H/24)
  cpx = x+17*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+14*H/24)
  cpx = x+17*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+15*H/24)
  ctx.stroke()
  let r = W/72
  //13
  ctx.beginPath()
  ctx.arc(x+11.5*W/24, y+5.3*H/24, r, 0, Math.PI * 2)
  ctx.stroke()

  //14
  ctx.beginPath()
  ctx.arc(x+12.5*W/24, y+5.3*H/24, r, 0, Math.PI * 2)
  ctx.stroke()
}

function tape_dispenserAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  //1
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+12*H/24)
  cpx = x+2*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+20*H/24)
  cpx = x+18*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+20*H/24)
  cpx = x+22*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+16*H/24)
  cpx = x+22*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+10*H/24)
  cpx = x+22*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+4*H/24)
  cpx = x+6*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+10*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+13*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+19*H/24)
  cpx = x+21*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+12*H/24)
  cpx = x+21*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+5*H/24)
  cpx = x+7*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+12*H/24)
  cpx = x+7*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+19*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+12*H/24)
  cpx = x+7*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+12*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+9*H/24)
  cpx = x+11*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+12*H/24)
  cpx = x+11*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+15*H/24)
  cpx = x+17*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+12*H/24)
  cpx = x+17*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+9*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+15*H/24)
  cpx = x+2*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+12*H/24)
  ctx.stroke()
  //7
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+12*H/24)
  cpx = x+4*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+12*H/24)
  cpx = x+4*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+14*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+15*H/24)
  cpx = x+13*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+14*H/24)
  cpx = x+15*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+15*H/24)
  ctx.stroke()
  //10
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+9*H/24)
  cpx = x+13*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+10*H/24)
  cpx = x+15*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+9*H/24)
  ctx.stroke()
   //11
   ctx.beginPath()
   ctx.moveTo(x+14*W/24, y+16*H/24)
   cpx = x+18*W/24
   cpy = y+16*H/24
   ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+12*H/24)
   cpx = x+18*W/24
   cpy = y+8*H/24
   ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+8*H/24)
   cpx = x+10*W/24
   cpy = y+8*H/24
   ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+12*H/24)
   cpx = x+10*W/24
   cpy = y+16*H/24
   ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+16*H/24)
   ctx.stroke()
}   
    
function running_with_scissorsAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, angle = pet(360)
  let v = document.getElementById("featuresize").value
  //1
  ctx.beginPath()
  p = rotatePoint(x+12*W/24, y+12*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+18*W/24
  cpy = y+2*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+18*W/24, y+2*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+16*W/24
  cpy = y+9*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+14*W/24, y+12*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()

  //2
  ctx.beginPath()
  p = rotatePoint(x+12*W/24, y+12*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+8*W/24
  cpy = y+2*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+8*W/24, y+2*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+9*W/24
  cpy = y+9*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+10*W/24, y+12*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()

  //3
  ctx.beginPath()
  p = rotatePoint(x+12*W/24, y+12*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+10*W/24
  cpy = y+16*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+10*W/24, y+16*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+7*W/24
  cpy = y+16*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+7*W/24, y+19*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+7*W/24
  cpy = y+22*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+10*W/24, y+22*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+11*W/24
  cpy = y+22*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+11*W/24, y+19*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+11*W/24
  cpy = y+17*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+11*W/24, y+17*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+13*W/24
  cpy = y+14*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+14*W/24, y+12*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()

  //4
  ctx.beginPath()
  p = rotatePoint(x+10*W/24, y+12*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+11*W/24
  cpy = y+14*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+11*W/24, y+14*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()

  //5
  ctx.beginPath()
  p = rotatePoint(x+13*W/24, y+17*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+12*W/24
  cpy = y+15.4*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle) // fix
  p = rotatePoint(x+12*W/24, y+15.4*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()

  //6
  ctx.beginPath()
  p = rotatePoint(x+13*W/24, y+14*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+14*W/24
  cpy = y+16*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+14*W/24, y+16*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+17*W/24
  cpy = y+16*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+17*W/24, y+19*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+17*W/24
  cpy = y+22*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+14*W/24, y+22*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+13*W/24
  cpy = y+22*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+13*W/24, y+19*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+13*W/24
  cpy = y+17*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+13*W/24, y+17*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+12*W/24
  cpy = y+15*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24, y+15*H/24,cx,cy,angle)
 // ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()

  //7
  ctx.beginPath()
  p = rotatePoint(x+10*W/24, y+19*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+10*W/24
  cpy = y+21*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+9*W/24, y+21*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+8*W/24
  cpy = y+21*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+8*W/24, y+19*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+8*W/24
  cpy = y+17*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+10*W/24, y+17*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+10*W/24
  cpy = y+19*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+10*W/24, y+19*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()

  //8
  ctx.beginPath()
  p = rotatePoint(x+14*W/24, y+17*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+16*W/24
  cpy = y+17*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+16*W/24, y+19*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+16*W/24
  cpy = y+21*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+15*W/24, y+21*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+15*W/24
  cpy = y+21*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+15*W/24, y+21*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+14*W/24
  cpy = y+21*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+14*W/24, y+19*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+14*W/24
  cpy = y+17*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+14*W/24, y+17*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()
  
  //9
  ctx.beginPath()
  p = rotatePoint(x+10*W/24, y+12*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+11*W/24
  cpy = y+14*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+11*W/24, y+14*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()
  
  //10
  ctx.beginPath()
  p = rotatePoint(x+12*W/24, y+14*H/24 ,cx,cy,angle)
  ctx.arc(p[0],p[1], W/48,0,Math.PI*2)
  ctx.stroke()
}

function free_palletsAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, angle = pet(180)
    
   //1
   ctx.beginPath()
   p = rotatePoint(x+4*W/24, y+2*H/24 ,cx,cy,angle)
   ctx.moveTo(p[0],p[1])
   p = rotatePoint(x+22*W/24, y+2*H/24 ,cx,cy,angle)
   ctx.lineTo(p[0],p[1])
   p = rotatePoint(x+22*W/24, y+21*H/24 ,cx,cy,angle)
   ctx.lineTo(p[0],p[1])
   p = rotatePoint(x+4*W/24, y+21*H/24 ,cx,cy,angle)
   ctx.lineTo(p[0],p[1])
   p = rotatePoint(x+4*W/24, y+2*H/24 ,cx,cy,angle)
   ctx.lineTo(p[0],p[1])
   p = rotatePoint(x+6*W/24, y+2*H/24 ,cx,cy,angle)
   ctx.lineTo(p[0],p[1])
   p = rotatePoint(x+6*W/24, y+21*H/24 ,cx,cy,angle)
   ctx.lineTo(p[0],p[1])
   p = rotatePoint(x+8*W/24, y+21*H/24 ,cx,cy,angle)
   ctx.lineTo(p[0],p[1])
   p = rotatePoint(x+8*W/24, y+2*H/24 ,cx,cy,angle)
   ctx.lineTo(p[0],p[1])
   p = rotatePoint(x+10*W/24, y+2*H/24 ,cx,cy,angle)
   ctx.lineTo(p[0],p[1])
   p = rotatePoint(x+10*W/24, y+21*H/24 ,cx,cy,angle)
   ctx.lineTo(p[0],p[1])
   p = rotatePoint(x+12*W/24, y+21*H/24 ,cx,cy,angle)
   ctx.lineTo(p[0],p[1])
   p = rotatePoint(x+12*W/24, y+2*H/24 ,cx,cy,angle)
   ctx.lineTo(p[0],p[1])
   p = rotatePoint(x+14*W/24, y+2*H/24 ,cx,cy,angle)
   ctx.lineTo(p[0],p[1])
   p = rotatePoint(x+14*W/24, y+21*H/24 ,cx,cy,angle)
   ctx.lineTo(p[0],p[1])
   p = rotatePoint(x+16*W/24, y+21*H/24 ,cx,cy,angle)
   ctx.lineTo(p[0],p[1])
   p = rotatePoint(x+16*W/24, y+2*H/24 ,cx,cy,angle)
   ctx.lineTo(p[0],p[1])
   p = rotatePoint(x+18*W/24, y+2*H/24 ,cx,cy,angle)
   ctx.lineTo(p[0],p[1])
   p = rotatePoint(x+18*W/24, y+21*H/24 ,cx,cy,angle)
   ctx.lineTo(p[0],p[1])
   p = rotatePoint(x+20*W/24, y+21*H/24 ,cx,cy,angle)
   ctx.lineTo(p[0],p[1])
   p = rotatePoint(x+20*W/24, y+2*H/24 ,cx,cy,angle)
   ctx.lineTo(p[0],p[1])
   ctx.stroke()
 
   //2
   ctx.beginPath()
   p = rotatePoint(x+6*W/24, y+11*H/24 ,cx,cy,angle)
   ctx.moveTo(p[0],p[1])
   p = rotatePoint(x+8*W/24, y+11*H/24 ,cx,cy,angle)
   ctx.lineTo(p[0],p[1])
   ctx.stroke()
 
   //3
   ctx.beginPath()
   p = rotatePoint(x+10*W/24, y+11*H/24 ,cx,cy,angle)
   ctx.moveTo(p[0],p[1])
   p = rotatePoint(x+12*W/24, y+11*H/24 ,cx,cy,angle)
   ctx.lineTo(p[0],p[1])
   ctx.stroke()
 
   //4
   ctx.beginPath()
   p = rotatePoint(x+14*W/24, y+11*H/24 ,cx,cy,angle)
   ctx.moveTo(p[0],p[1])
   p = rotatePoint(x+16*W/24, y+11*H/24 ,cx,cy,angle)
   ctx.lineTo(p[0],p[1])
   ctx.stroke()
 
   //5
   ctx.beginPath()
   p = rotatePoint(x+18*W/24, y+11*H/24 ,cx,cy,angle)
   ctx.moveTo(p[0],p[1])
   p = rotatePoint(x+20*W/24, y+11*H/24 ,cx,cy,angle)
   ctx.lineTo(p[0],p[1])
   ctx.stroke()
 
   //6
   ctx.beginPath()
   p = rotatePoint(x+20*W/24, y+12*H/24 ,cx,cy,angle)
   ctx.moveTo(p[0],p[1])
   p = rotatePoint(x+18*W/24, y+12*H/24 ,cx,cy,angle)
   ctx.lineTo(p[0],p[1])
   ctx.stroke()
 
   //7
   ctx.beginPath()
   p = rotatePoint(x+16*W/24, y+12*H/24 ,cx,cy,angle)
   ctx.moveTo(p[0],p[1])
   p = rotatePoint(x+14*W/24, y+12*H/24 ,cx,cy,angle)
   ctx.lineTo(p[0],p[1])
   ctx.stroke()
 
   //8
   ctx.beginPath()
   p = rotatePoint(x+12*W/24, y+12*H/24 ,cx,cy,angle)
   ctx.moveTo(p[0],p[1])
   p = rotatePoint(x+10*W/24, y+12*H/24 ,cx,cy,angle)
   ctx.lineTo(p[0],p[1])
   ctx.stroke()
 
   //9
   ctx.beginPath()
   p = rotatePoint(x+8*W/24, y+12*H/24 ,cx,cy,angle)
   ctx.moveTo(p[0],p[1])
   p = rotatePoint(x+6*W/24, y+12*H/24 ,cx,cy,angle)
   ctx.lineTo(p[0],p[1])
   ctx.stroke()
 
   //10
   ctx.beginPath()
   p = rotatePoint(x+6*W/24, y+20*H/24 ,cx,cy,angle)
   ctx.moveTo(p[0],p[1])
   p = rotatePoint(x+8*W/24, y+20*H/24 ,cx,cy,angle)
   ctx.lineTo(p[0],p[1])
   ctx.stroke()
 
   //11
   ctx.beginPath()
   p = rotatePoint(x+10*W/24, y+20*H/24 ,cx,cy,angle)
   ctx.moveTo(p[0],p[1])
   p = rotatePoint(x+12*W/24, y+20*H/24 ,cx,cy,angle)
   ctx.lineTo(p[0],p[1])
   ctx.stroke()
 
   //12
   ctx.beginPath()
   p = rotatePoint(x+14*W/24, y+20*H/24 ,cx,cy,angle)
   ctx.moveTo(p[0],p[1])
   p = rotatePoint(x+16*W/24, y+20*H/24 ,cx,cy,angle)
   ctx.lineTo(p[0],p[1])
   ctx.stroke()
 
   //13
   ctx.beginPath()
   p = rotatePoint(x+18*W/24, y+20*H/24 ,cx,cy,angle)
   ctx.moveTo(p[0],p[1])
   p = rotatePoint(x+20*W/24, y+20*H/24 ,cx,cy,angle)
   ctx.lineTo(p[0],p[1])
   ctx.stroke()
 
   //14
   ctx.beginPath()
   p = rotatePoint(x+6*W/24, y+3*H/24 ,cx,cy,angle)
   ctx.moveTo(p[0],p[1])
   p = rotatePoint(x+8*W/24, y+3*H/24 ,cx,cy,angle)
   ctx.lineTo(p[0],p[1])
   ctx.stroke()
 
   //15
   ctx.beginPath()
   p = rotatePoint(x+10*W/24, y+3*H/24 ,cx,cy,angle)
   ctx.moveTo(p[0],p[1])
   p = rotatePoint(x+12*W/24, y+3*H/24 ,cx,cy,angle)
   ctx.lineTo(p[0],p[1])
   ctx.stroke()
 
   //16
   ctx.beginPath()
   p = rotatePoint(x+14*W/24, y+3*H/24 ,cx,cy,angle)
   ctx.moveTo(p[0],p[1])
   p = rotatePoint(x+16*W/24, y+3*H/24 ,cx,cy,angle)
   ctx.lineTo(p[0],p[1])
   ctx.stroke()
 
   //17
   ctx.beginPath()
   p = rotatePoint(x+18*W/24, y+3*H/24 ,cx,cy,angle)
   ctx.moveTo(p[0],p[1])
   p = rotatePoint(x+20*W/24, y+3*H/24 ,cx,cy,angle)
   ctx.lineTo(p[0],p[1])
   ctx.stroke()
 
   //18
   ctx.beginPath()
   p = rotatePoint(x+4*W/24, y+2*H/24 ,cx,cy,angle)
   ctx.moveTo(p[0],p[1])
   p = rotatePoint(x+2*W/24, y+4*H/24 ,cx,cy,angle)
   ctx.lineTo(p[0],p[1])
   p = rotatePoint(x+2*W/24, y+23*H/24 ,cx,cy,angle)
   ctx.lineTo(p[0],p[1])
   p = rotatePoint(x+20*W/24, y+23*H/24 ,cx,cy,angle)
   ctx.lineTo(p[0],p[1])
   p = rotatePoint(x+22*W/24, y+21*H/24 ,cx,cy,angle)
   ctx.lineTo(p[0],p[1])
   ctx.stroke()
 
   //19
   ctx.beginPath()
   p = rotatePoint(x+4*W/24, y+21*H/24 ,cx,cy,angle)
   ctx.moveTo(p[0],p[1])
   p = rotatePoint(x+2*W/24, y+23*H/24 ,cx,cy,angle)
   ctx.lineTo(p[0],p[1])
   ctx.stroke()
 
   //20
   ctx.beginPath()
   p = rotatePoint(x+4*W/24, y+20*H/24 ,cx,cy,angle)
   ctx.moveTo(p[0],p[1])
   p = rotatePoint(x+2*W/24, y+22*H/24 ,cx,cy,angle)
   ctx.lineTo(p[0],p[1])
   ctx.stroke()
 
   //21
   ctx.beginPath()
   p = rotatePoint(x+4*W/24, y+11*H/24 ,cx,cy,angle)
   ctx.moveTo(p[0],p[1])
   p = rotatePoint(x+2*W/24, y+13*H/24 ,cx,cy,angle)
   ctx.lineTo(p[0],p[1])
   p = rotatePoint(x+2*W/24, y+14*H/24 ,cx,cy,angle)
   ctx.lineTo(p[0],p[1])
   p = rotatePoint(x+4*W/24, y+12*H/24 ,cx,cy,angle)
   ctx.lineTo(p[0],p[1])
   ctx.stroke()
 
   //22
   ctx.beginPath()
   p = rotatePoint(x+2*W/24, y+5*H/24 ,cx,cy,angle)
   ctx.moveTo(p[0],p[1])
   p = rotatePoint(x+4*W/24, y+3*H/24 ,cx,cy,angle)
   ctx.lineTo(p[0],p[1])
   ctx.stroke()
 
   //23
   ctx.beginPath()
   p = rotatePoint(x+2*W/24, y+14*H/24 ,cx,cy,angle)
   ctx.moveTo(p[0],p[1])
   p = rotatePoint(x+4*W/24, y+14*H/24 ,cx,cy,angle)
   ctx.lineTo(p[0],p[1])
   ctx.stroke()
 
   //24
   ctx.beginPath()
   p = rotatePoint(x+6*W/24, y+14*H/24 ,cx,cy,angle)
   ctx.moveTo(p[0],p[1])
   p = rotatePoint(x+8*W/24, y+14*H/24 ,cx,cy,angle)
   ctx.lineTo(p[0],p[1])
   ctx.stroke()
 
   //25
   ctx.beginPath()
   p = rotatePoint(x+10*W/24, y+14*H/24 ,cx,cy,angle)
   ctx.moveTo(p[0],p[1])
   p = rotatePoint(x+12*W/24, y+14*H/24 ,cx,cy,angle)
   ctx.lineTo(p[0],p[1])
   ctx.stroke()
 
   //26
   ctx.beginPath()
   p = rotatePoint(x+14*W/24, y+14*H/24 ,cx,cy,angle)
   ctx.moveTo(p[0],p[1])
   p = rotatePoint(x+16*W/24, y+14*H/24 ,cx,cy,angle)
   ctx.lineTo(p[0],p[1])
   ctx.stroke()
 
   //27
   ctx.beginPath()
   p = rotatePoint(x+18*W/24, y+14*H/24 ,cx,cy,angle)
   ctx.moveTo(p[0],p[1])
   p = rotatePoint(x+20*W/24, y+14*H/24 ,cx,cy,angle)
   ctx.lineTo(p[0],p[1])
   ctx.stroke()
 
   //28
   ctx.beginPath()
   p = rotatePoint(x+2*W/24, y+5*H/24 ,cx,cy,angle)
   ctx.moveTo(p[0],p[1])
   p = rotatePoint(x+4*W/24, y+5*H/24 ,cx,cy,angle)
   ctx.lineTo(p[0],p[1])
   ctx.stroke()
 
   //29
   ctx.beginPath()
   p = rotatePoint(x+6*W/24, y+5*H/24 ,cx,cy,angle)
   ctx.moveTo(p[0],p[1])
   p = rotatePoint(x+8*W/24, y+5*H/24 ,cx,cy,angle)
   ctx.lineTo(p[0],p[1])
   ctx.stroke()
 
   //30
   ctx.beginPath()
   p = rotatePoint(x+10*W/24, y+5*H/24 ,cx,cy,angle)
   ctx.moveTo(p[0],p[1])
   p = rotatePoint(x+12*W/24, y+5*H/24 ,cx,cy,angle)
   ctx.lineTo(p[0],p[1])
   ctx.stroke()
 
   //31
   ctx.beginPath()
   p = rotatePoint(x+14*W/24, y+5*H/24 ,cx,cy,angle)
   ctx.moveTo(p[0],p[1])
   p = rotatePoint(x+16*W/24, y+5*H/24 ,cx,cy,angle)
   ctx.lineTo(p[0],p[1])
   ctx.stroke()
 
   //32
   ctx.beginPath()
   p = rotatePoint(x+18*W/24, y+5*H/24 ,cx,cy,angle)
   ctx.moveTo(p[0],p[1])
   p = rotatePoint(x+20*W/24, y+5*H/24 ,cx,cy,angle)
   ctx.lineTo(p[0],p[1])
   ctx.stroke()
   // nails
   let r = W/120
   
  //33
  ctx.beginPath()
  p = rotatePoint(x+5*W/24, y+2.5*H/24 ,cx,cy,angle)
  ctx.arc(p[0],p[1],r,0,Math.PI*2)
  ctx.stroke()

  //34
  ctx.beginPath()
  p = rotatePoint(x+9*W/24, y+2.5*H/24 ,cx,cy,angle)
  ctx.arc(p[0],p[1],r,0,Math.PI*2)
  ctx.stroke()

  //35
  ctx.beginPath()
  p = rotatePoint(x+13*W/24, y+2.5*H/24 ,cx,cy,angle)
  ctx.arc(p[0],p[1],r,0,Math.PI*2)
  ctx.stroke()

  //36
  ctx.beginPath()
  p = rotatePoint(x+17*W/24, y+2.5*H/24 ,cx,cy,angle)
  ctx.arc(p[0],p[1],r,0,Math.PI*2)
  ctx.stroke()
  
  //37
  ctx.beginPath()
  p = rotatePoint(x+21*W/24, y+2.5*H/24 ,cx,cy,angle)
  ctx.arc(p[0],p[1],r,0,Math.PI*2)
  ctx.stroke()

  //38
  ctx.beginPath()
  p = rotatePoint(x+5*W/24, y+11.5*H/24 ,cx,cy,angle)
  ctx.arc(p[0],p[1],r,0,Math.PI*2)
  ctx.stroke()

  //39
  ctx.beginPath()
  p = rotatePoint(x+9*W/24, y+11.5*H/24 ,cx,cy,angle)
  ctx.arc(p[0],p[1],r,0,Math.PI*2)
  ctx.stroke()

  //40
  ctx.beginPath()
  p = rotatePoint(x+13*W/24, y+11.5*H/24 ,cx,cy,angle)
  ctx.arc(p[0],p[1],r,0,Math.PI*2)
  ctx.stroke()

  //41
  ctx.beginPath()
  p = rotatePoint(x+17*W/24, y+11.5*H/24 ,cx,cy,angle)
  ctx.arc(p[0],p[1],r,0,Math.PI*2)
  ctx.stroke()

  //42
  ctx.beginPath()
  p = rotatePoint(x+21*W/24, y+11.5*H/24 ,cx,cy,angle)
  ctx.arc(p[0],p[1],r,0,Math.PI*2)
  ctx.stroke()

  //43
  ctx.beginPath()
  p = rotatePoint(x+21*W/24, y+20.5*H/24 ,cx,cy,angle)
  ctx.arc(p[0],p[1],r,0,Math.PI*2)
  ctx.stroke()

  //44
  ctx.beginPath()
  p = rotatePoint(x+13*W/24, y+20.5*H/24 ,cx,cy,angle)
  ctx.arc(p[0],p[1],r,0,Math.PI*2)
  ctx.stroke()

  //45
  ctx.beginPath()
  p = rotatePoint(x+5*W/24, y+20.5*H/24 ,cx,cy,angle)
  ctx.arc(p[0],p[1],r,0,Math.PI*2)
  ctx.stroke()

  //46
  ctx.beginPath()
  p = rotatePoint(x+9*W/24, y+20.5*H/24 ,cx,cy,angle)
  ctx.arc(p[0],p[1],r,0,Math.PI*2)
  ctx.stroke()

  //47
  ctx.beginPath()
  p = rotatePoint(x+17*W/24, y+20.5*H/24 ,cx,cy,angle)
  ctx.arc(p[0],p[1],r,0,Math.PI*2)
  ctx.stroke()
  
}

    
  function drfilledAt (x,y,W,color) {
    let canvas = document.getElementById("myCanvas")
    let ctx = canvas.getContext("2d")
    let H = W, cpx, cpy, points = []
    let colors = shuffle(getCurrentPalette(true,13))
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
    ctx.strokeStyle = getselectedcolor()
    ctx.fillStyle = getselectedcolor()
    ctx.lineCap = "square"
    ctx.lineJoin = "bevel"
    let p = [], cp = [], lastp = []
    let cx = x+W/2, cy = y+H/2, angle = pet(180)
  
    //1
    ctx.beginPath()
    p = rotatePoint(x+12*W/24, y+22*H/24 ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    cpx = x+10*W/24
    cpy = y+20*H/24
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+10*W/24, y+18*H/24,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    cpx = x+14*W/24
    cpy = y+18*H/24
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+14*W/24, y+13*H/24,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    cpx = x+21*W/24
    cpy = y+15*H/24
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+21*W/24, y+15*H/24,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    cpx = x+22*W/24
    cpy = y+15*H/24
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+22*W/24, y+14*H/24,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    cpx = x+14*W/24
    cpy = y+12*H/24
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+14*W/24, y+12*H/24,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    cpx = x+22*W/24
    cpy = y+10*H/24
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+22*W/24, y+10*H/24,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    cpx = x+22*W/24
    cpy = y+9*H/24
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+21*W/24, y+9*H/24,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    cpx = x+14*W/24
    cpy = y+11*H/24
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+14*W/24, y+11*H/24,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    cpx = x+14*W/24
    cpy = y+6*H/24
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+8*W/24, y+6*H/24,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    cpx = x+2*W/24
    cpy = y+6*H/24
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+2*W/24, y+12*H/24,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    cpx = x+2*W/24
    cpy = y+18*H/24
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+6*W/24, y+18*H/24,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    cpx = x+6*W/24
    cpy = y+20*H/24
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+4*W/24, y+22*H/24,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    ctx.fill()
  
    //2
    ctx.beginPath()
    p = rotatePoint(x+9*W/24, y+11*H/24 ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    cpx = x+8*W/24
    cpy = y+11*H/24
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+8*W/24, y+10*H/24,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    cpx = x+8*W/24
    cpy = y+9*H/24
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+9*W/24, y+9*H/24,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    cpx = x+10*W/24
    cpy = y+9*H/24
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+10*W/24, y+10*H/24,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    cpx = x+10*W/24
    cpy = y+11*H/24
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+9*W/24, y+11*H/24,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    ctx.fill()
  }
  
  function duckrabbitAt (x,y,W,color) {
    let canvas = document.getElementById("myCanvas")
    let ctx = canvas.getContext("2d")
    let H = W, cpx, cpy, points = []
    let colors = shuffle(getCurrentPalette(true,13))
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
    ctx.strokeStyle = color
    ctx.fillStyle = color
    ctx.lineCap = "square"
    ctx.lineJoin = "bevel"
    let p = [], cp = [], lastp = []
    let cx = x+W/2, cy = y+H/2, angle =  0

    if (Math.random() > 0.5)
    angle = -90
  //1
  ctx.beginPath()
  p = rotatePoint(x+14*W/24, y+12*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+22*W/24
  cpy = y+10*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+22*W/24, y+10*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+22*W/24
  cpy = y+9*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+21*W/24, y+9*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+14*W/24
  cpy = y+11*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+14*W/24, y+11*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+14*W/24
  cpy = y+6*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+8*W/24, y+6*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+2*W/24
  cpy = y+6*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+2*W/24, y+12*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+2*W/24
  cpy = y+18*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+6*W/24, y+18*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+6*W/24
  cpy = y+20*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+4*W/24, y+22*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()

  //2
  ctx.beginPath()
  p = rotatePoint(x+12*W/24, y+22*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+10*W/24
  cpy = y+20*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+10*W/24, y+18*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+14*W/24
  cpy = y+18*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+14*W/24, y+13*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+21*W/24
  cpy = y+15*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+21*W/24, y+15*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+22*W/24
  cpy = y+15*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+22*W/24, y+14*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+14*W/24
  cpy = y+12*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+14*W/24, y+12*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()

  //3
  ctx.beginPath()
  p = rotatePoint(x+9*W/24, y+11*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+8*W/24
  cpy = y+11*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+8*W/24, y+10*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+8*W/24
  cpy = y+9*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+9*W/24, y+9*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+10*W/24
  cpy = y+9*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+10*W/24, y+10*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+10*W/24
  cpy = y+11*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+9*W/24, y+11*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()
}
  
  function whaleAt (x,y,W,color) {
    let canvas = document.getElementById("myCanvas")
    let ctx = canvas.getContext("2d")
    let H = W, cpx, cpy, points = []
    let colors = shuffle(getCurrentPalette(true,13))
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
    ctx.strokeStyle = color
    ctx.lineCap = "square"
    ctx.lineJoin = "bevel"
  
    //1
    ctx.beginPath()
    ctx.moveTo(x+4*W/24, y+10*H/24)
    cpx = x+5*W/24
    cpy = y+18*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+18*H/24)
    cpx = x+18*W/24
    cpy = y+17*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+18*H/24)
    cpx = x+22*W/24
    cpy = y+18*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+17*H/24)
    cpx = x+21*W/24
    cpy = y+17*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+17*H/24)
    cpx = x+17*W/24
    cpy = y+16*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+16*H/24)
    cpx = x+23*W/24
    cpy = y+16*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+12*H/24)
    cpx = x+23*W/24
    cpy = y+11*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+11*H/24)
    cpx = x+14*W/24
    cpy = y+12*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+12*H/24)
    cpx = x+6*W/24
    cpy = y+12*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+10*H/24)
    cpx = x+7*W/24
    cpy = y+10*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+7*H/24)
    cpx = x+7*W/24
    cpy = y+6*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+6*H/24)
    cpx = x+5*W/24
    cpy = y+7*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+8*H/24)
    cpx = x+4*W/24
    cpy = y+7*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+7*H/24)
    cpx = x+2*W/24
    cpy = y+9*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+10*H/24)
    ctx.stroke()
  
    //2
    ctx.beginPath()
    ctx.moveTo(x+16*W/24, y+16*H/24)
    cpx = x+14*W/24
    cpy = y+17*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+17*H/24)
    cpx = x+11*W/24
    cpy = y+16*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+15*H/24)
    cpx = x+14*W/24
    cpy = y+15*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+15*H/24)
    ctx.stroke()
  
    //3
    ctx.beginPath()
    ctx.arc(x+18*W/24, y+14*H/24,W/96,0,2*Math.PI)
    ctx.stroke()
  }
  
  function stone_wallAt (x,y,W,color) {
    let canvas = document.getElementById("myCanvas")
    let ctx = canvas.getContext("2d")
    let H = W, cpx, cpy, points = []
    let colors = shuffle(getCurrentPalette(true,13))
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
    ctx.strokeStyle = color
    ctx.lineCap = "square"
    ctx.lineJoin = "bevel"
  
    //1
    ctx.beginPath()
    ctx.moveTo(x+2*W/24, y+19*H/24)
    ctx.lineTo(x+4*W/24, y+20*H/24)
    ctx.lineTo(x+7*W/24, y+20*H/24)
    ctx.lineTo(x+8*W/24, y+16*H/24)
    ctx.lineTo(x+4*W/24, y+16*H/24)
    ctx.lineTo(x+2*W/24, y+17*H/24)
    ctx.lineTo(x+2*W/24, y+19*H/24)
    ctx.stroke()
  
    //2
    ctx.beginPath()
    ctx.moveTo(x+8*W/24, y+20*H/24)
    ctx.lineTo(x+8*W/24, y+17*H/24)
    ctx.lineTo(x+9*W/24, y+16*H/24)
    ctx.lineTo(x+13*W/24, y+17*H/24)
    ctx.lineTo(x+13*W/24, y+19*H/24)
    ctx.lineTo(x+12*W/24, y+20*H/24)
    ctx.lineTo(x+8*W/24, y+20*H/24)
    ctx.stroke()
  
    //3
    ctx.beginPath()
    ctx.moveTo(x+2*W/24, y+16*H/24)
    ctx.lineTo(x+4*W/24, y+15*H/24)
    ctx.lineTo(x+4*W/24, y+14*H/24)
    ctx.lineTo(x+5*W/24, y+13*H/24)
    ctx.lineTo(x+5*W/24, y+12*H/24)
    ctx.lineTo(x+2*W/24, y+11*H/24)
    ctx.stroke()
  
    //4
    ctx.beginPath()
    ctx.moveTo(x+14*W/24, y+20*H/24)
    ctx.lineTo(x+14*W/24, y+16*H/24)
    ctx.lineTo(x+15*W/24, y+15*H/24)
    ctx.lineTo(x+19*W/24, y+15*H/24)
    ctx.lineTo(x+21*W/24, y+16*H/24)
    ctx.lineTo(x+20*W/24, y+18*H/24)
    ctx.lineTo(x+20*W/24, y+19*H/24)
    ctx.lineTo(x+19*W/24, y+20*H/24)
    ctx.lineTo(x+14*W/24, y+20*H/24)
    ctx.stroke()
  
    //5
    ctx.beginPath()
    ctx.moveTo(x+21*W/24, y+20*H/24)
    ctx.lineTo(x+21*W/24, y+18*H/24)
    ctx.lineTo(x+22*W/24, y+16*H/24)
    ctx.lineTo(x+23*W/24, y+15*H/24)
    ctx.stroke()
  
    //6
    ctx.beginPath()
    ctx.moveTo(x+21*W/24, y+20*H/24)
    ctx.lineTo(x+23*W/24, y+20*H/24)
    ctx.stroke()
  
    //7
    ctx.beginPath()
    ctx.moveTo(x+5*W/24, y+15*H/24)
    ctx.lineTo(x+5*W/24, y+13*H/24)
    ctx.lineTo(x+7*W/24, y+13*H/24)
    ctx.lineTo(x+8*W/24, y+14*H/24)
    ctx.lineTo(x+8*W/24, y+15*H/24)
    ctx.lineTo(x+5*W/24, y+15*H/24)
    ctx.stroke()
  
    //8
    ctx.beginPath()
    ctx.moveTo(x+7*W/24, y+12*H/24)
    ctx.lineTo(x+9*W/24, y+14*H/24)
    ctx.lineTo(x+9*W/24, y+15*H/24)
    ctx.lineTo(x+12*W/24, y+16*H/24)
    ctx.lineTo(x+14*W/24, y+15*H/24)
    ctx.lineTo(x+14*W/24, y+13*H/24)
    ctx.lineTo(x+13*W/24, y+12*H/24)
    ctx.lineTo(x+11*W/24, y+11*H/24)
    ctx.lineTo(x+10*W/24, y+12*H/24)
    ctx.lineTo(x+8*W/24, y+11*H/24)
    ctx.lineTo(x+7*W/24, y+12*H/24)
    ctx.stroke()
  
    //9
    ctx.beginPath()
    ctx.moveTo(x+14*W/24, y+11*H/24)
    ctx.lineTo(x+15*W/24, y+13*H/24)
    ctx.lineTo(x+16*W/24, y+14*H/24)
    ctx.lineTo(x+18*W/24, y+14*H/24)
    ctx.lineTo(x+19*W/24, y+13*H/24)
    ctx.lineTo(x+20*W/24, y+12*H/24)
    ctx.lineTo(x+19*W/24, y+10*H/24)
    ctx.lineTo(x+18*W/24, y+9*H/24)
    ctx.lineTo(x+17*W/24, y+10*H/24)
    ctx.lineTo(x+15*W/24, y+10*H/24)
    ctx.lineTo(x+14*W/24, y+11*H/24)
    ctx.stroke()
  
    //10
    ctx.beginPath()
    ctx.moveTo(x+20*W/24, y+13*H/24)
    ctx.lineTo(x+19*W/24, y+14*H/24)
    ctx.lineTo(x+21*W/24, y+15*H/24)
    ctx.lineTo(x+22*W/24, y+14*H/24)
    ctx.lineTo(x+21*W/24, y+13*H/24)
    ctx.lineTo(x+20*W/24, y+13*H/24)
    ctx.stroke()
  
    //11
    ctx.beginPath()
    ctx.moveTo(x+20*W/24, y+10*H/24)
    ctx.lineTo(x+21*W/24, y+12*H/24)
    ctx.lineTo(x+22*W/24, y+13*H/24)
    ctx.lineTo(x+23*W/24, y+13*H/24)
    ctx.stroke()
  
    //12
    ctx.beginPath()
    ctx.moveTo(x+20*W/24, y+10*H/24)
    ctx.lineTo(x+20*W/24, y+9*H/24)
    ctx.lineTo(x+21*W/24, y+8*H/24)
    ctx.lineTo(x+22*W/24, y+8*H/24)
    ctx.lineTo(x+23*W/24, y+8*H/24)
    ctx.stroke()
  
    //13
    ctx.beginPath()
    ctx.moveTo(x+3*W/24, y+10*H/24)
    ctx.lineTo(x+2*W/24, y+9*H/24)
    ctx.lineTo(x+2*W/24, y+8*H/24)
    ctx.lineTo(x+2*W/24, y+7*H/24)
    ctx.lineTo(x+5*W/24, y+7*H/24)
    ctx.lineTo(x+7*W/24, y+8*H/24)
    ctx.lineTo(x+8*W/24, y+9*H/24)
    ctx.lineTo(x+7*W/24, y+11*H/24)
    ctx.lineTo(x+6*W/24, y+11*H/24)
    ctx.lineTo(x+5*W/24, y+11*H/24)
    ctx.lineTo(x+4*W/24, y+11*H/24)
    ctx.lineTo(x+3*W/24, y+10*H/24)
    ctx.stroke()
  
    //14
    ctx.beginPath()
    ctx.moveTo(x+9*W/24, y+11*H/24)
    ctx.lineTo(x+11*W/24, y+10*H/24)
    ctx.lineTo(x+11*W/24, y+9*H/24)
    ctx.lineTo(x+10*W/24, y+9*H/24)
    ctx.lineTo(x+8*W/24, y+10*H/24)
    ctx.lineTo(x+9*W/24, y+11*H/24)
    ctx.stroke()
  
    //15
    ctx.beginPath()
    ctx.moveTo(x+12*W/24, y+8*H/24)
    ctx.lineTo(x+12*W/24, y+11*H/24)
    ctx.lineTo(x+13*W/24, y+11*H/24)
    ctx.lineTo(x+14*W/24, y+10*H/24)
    ctx.lineTo(x+15*W/24, y+9*H/24)
    ctx.lineTo(x+16*W/24, y+9*H/24)
    ctx.lineTo(x+16*W/24, y+7*H/24)
    ctx.lineTo(x+14*W/24, y+5*H/24)
    ctx.lineTo(x+12*W/24, y+5*H/24)
    ctx.lineTo(x+13*W/24, y+7*H/24)
    ctx.lineTo(x+12*W/24, y+8*H/24)
    ctx.stroke()
  
    //16
    ctx.beginPath()
    ctx.moveTo(x+9*W/24, y+8*H/24)
    ctx.lineTo(x+11*W/24, y+8*H/24)
    ctx.lineTo(x+12*W/24, y+7*H/24)
    ctx.lineTo(x+11*W/24, y+5*H/24)
    ctx.lineTo(x+8*W/24, y+5*H/24)
    ctx.lineTo(x+6*W/24, y+5*H/24)
    ctx.lineTo(x+6*W/24, y+6*H/24)
    ctx.lineTo(x+7*W/24, y+7*H/24)
    ctx.lineTo(x+9*W/24, y+8*H/24)
    ctx.stroke()
  
    //17
    ctx.beginPath()
    ctx.moveTo(x+2*W/24, y+6*H/24)
    ctx.lineTo(x+4*W/24, y+6*H/24)
    ctx.lineTo(x+5*W/24, y+5*H/24)
    ctx.lineTo(x+3*W/24, y+5*H/24)
    ctx.lineTo(x+2*W/24, y+5*H/24)
    ctx.stroke()
  
    //18
    ctx.beginPath()
    ctx.moveTo(x+16*W/24, y+5*H/24)
    ctx.lineTo(x+16*W/24, y+6*H/24)
    ctx.lineTo(x+17*W/24, y+7*H/24)
    ctx.lineTo(x+17*W/24, y+8*H/24)
    ctx.lineTo(x+19*W/24, y+8*H/24)
    ctx.lineTo(x+20*W/24, y+7*H/24)
    ctx.lineTo(x+21*W/24, y+6*H/24)
    ctx.lineTo(x+20*W/24, y+5*H/24)
    ctx.lineTo(x+19*W/24, y+5*H/24)
    ctx.lineTo(x+18*W/24, y+6*H/24)
    ctx.lineTo(x+17*W/24, y+5*H/24)
    ctx.lineTo(x+16*W/24, y+5*H/24)
    ctx.stroke()
  
    //19
    ctx.beginPath()
    ctx.moveTo(x+22*W/24, y+5*H/24)
    ctx.lineTo(x+22*W/24, y+6*H/24)
    ctx.lineTo(x+21*W/24, y+7*H/24)
    ctx.lineTo(x+23*W/24, y+7*H/24)
    ctx.stroke()
  
    //20
    ctx.beginPath()
    ctx.moveTo(x+23*W/24, y+5*H/24)
    ctx.stroke()
    
    // dents
    //21
    ctx.beginPath()
    ctx.moveTo(x+15*W/24, y+18*H/24)
    ctx.lineTo(x+16*W/24, y+19*H/24)
    ctx.lineTo(x+17*W/24, y+19*H/24)
    ctx.stroke()

    //22
    ctx.beginPath()
    ctx.moveTo(x+12*W/24, y+18*H/24)
    ctx.lineTo(x+11*W/24, y+19*H/24)
    ctx.lineTo(x+10*W/24, y+19*H/24)
    ctx.stroke()

    //23
    ctx.beginPath()
    ctx.moveTo(x+4*W/24, y+18*H/24)
    ctx.lineTo(x+5*W/24, y+19*H/24)
    ctx.lineTo(x+6*W/24, y+18*H/24)
    ctx.stroke()

    //24
    ctx.beginPath()
    ctx.moveTo(x+12*W/24, y+15*H/24)
    ctx.lineTo(x+13*W/24, y+15*H/24)
    ctx.lineTo(x+13*W/24, y+14*H/24)
    ctx.stroke()

    //25
    ctx.beginPath()
    ctx.moveTo(x+16*W/24, y+12*H/24)
    ctx.lineTo(x+16*W/24, y+13*H/24)
    ctx.lineTo(x+17*W/24, y+13*H/24)
    ctx.stroke()

    //26
    ctx.beginPath()
    ctx.moveTo(x+23*W/24, y+17*H/24)
    ctx.lineTo(x+22*W/24, y+18*H/24)
    ctx.lineTo(x+23*W/24, y+18*H/24)
    ctx.stroke()

    //27
    ctx.beginPath()
    ctx.moveTo(x+5*W/24, y+8*H/24)
    ctx.lineTo(x+6*W/24, y+9*H/24)
    ctx.lineTo(x+6*W/24, y+10*H/24)
    ctx.stroke()

    //28
    ctx.beginPath()
    ctx.moveTo(x+14*W/24, y+8*H/24)
    ctx.lineTo(x+13*W/24, y+9*H/24)
    ctx.stroke()

    //29
    ctx.beginPath()
    ctx.moveTo(x+21*W/24, y+10*H/24)
    ctx.lineTo(x+22*W/24, y+11*H/24)
    ctx.stroke()

    //30
    ctx.beginPath()
    ctx.moveTo(x+9*W/24, y+7*H/24)
    ctx.lineTo(x+10*W/24, y+6*H/24)
    ctx.stroke()

    //31
    ctx.beginPath()
    ctx.moveTo(x+2*W/24, y+12*H/24)
    ctx.lineTo(x+3*W/24, y+13*H/24)
    ctx.lineTo(x+3*W/24, y+14*H/24)
    ctx.stroke()
  }
  
  function bacteriophageAt (x,y,W,color) {
    let canvas = document.getElementById("myCanvas")
    let ctx = canvas.getContext("2d")
    let H = W, cpx, cpy, points = []
    let colors = shuffle(getCurrentPalette(true,13))
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
    ctx.strokeStyle = color
    ctx.lineCap = "square"
    ctx.lineJoin = "bevel"
  
    //1
    ctx.beginPath()
    ctx.moveTo(x+9*W/24, y+8*H/24)
    ctx.lineTo(x+15*W/24, y+8*H/24)
    ctx.lineTo(x+12*W/24, y+2*H/24)
    ctx.lineTo(x+9*W/24, y+8*H/24)
    ctx.stroke()
  
    //2
    ctx.beginPath()
    ctx.moveTo(x+9*W/24, y+8*H/24)
    ctx.lineTo(x+12*W/24, y+10*H/24)
    ctx.lineTo(x+15*W/24, y+8*H/24)
    ctx.lineTo(x+15*W/24, y+3*H/24)
    ctx.lineTo(x+12*W/24, y+2*H/24)
    ctx.lineTo(x+9*W/24, y+3*H/24)
    ctx.lineTo(x+9*W/24, y+8*H/24)
    ctx.stroke()
  
    //3
    ctx.beginPath()
    ctx.moveTo(x+10*W/24, y+10*H/24)
    ctx.lineTo(x+14*W/24, y+10*H/24)
    ctx.lineTo(x+13*W/24, y+10*H/24)
    ctx.lineTo(x+13*W/24, y+20*H/24)
    ctx.lineTo(x+11*W/24, y+20*H/24)
    ctx.lineTo(x+11*W/24, y+10*H/24)
    ctx.stroke()
  
    //4
    ctx.beginPath()
    ctx.moveTo(x+10*W/24, y+20*H/24)
    ctx.lineTo(x+14*W/24, y+20*H/24)
    ctx.lineTo(x+19*W/24, y+13*H/24)
    ctx.lineTo(x+22*W/24, y+22*H/24)
    ctx.stroke()
  
    //5
    ctx.beginPath()
    ctx.moveTo(x+10*W/24, y+20*H/24)
    ctx.lineTo(x+5*W/24, y+13*H/24)
    ctx.lineTo(x+2*W/24, y+22*H/24)
    ctx.stroke()
  
    //6
    ctx.beginPath()
    ctx.moveTo(x+11*W/24, y+20*H/24)
    ctx.lineTo(x+8*W/24, y+13*H/24)
    ctx.lineTo(x+5*W/24, y+21*H/24)
    ctx.stroke()
  
    //7
    ctx.beginPath()
    ctx.moveTo(x+13*W/24, y+20*H/24)
    ctx.lineTo(x+16*W/24, y+13*H/24)
    ctx.lineTo(x+19*W/24, y+21*H/24)
    ctx.stroke()
  
    //8
    ctx.beginPath()
    ctx.moveTo(x+10*W/24, y+20*H/24)
    ctx.lineTo(x+10*W/24, y+21*H/24)
    ctx.lineTo(x+14*W/24, y+21*H/24)
    ctx.lineTo(x+14*W/24, y+20*H/24)
    ctx.stroke()
  }
  
  function eyeglassesAt (x,y,W,color) {
    let canvas = document.getElementById("myCanvas")
    let ctx = canvas.getContext("2d")
    let H = W, cpx, cpy, points = []
    let colors = shuffle(getCurrentPalette(true,13))
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
    ctx.strokeStyle = color
    ctx.lineCap = "square"
    ctx.lineJoin = "bevel"
   //6
   ctx.beginPath()
   ctx.moveTo(x+21*W/24, y+10*H/24)
   cpx = x+6*W/24
   cpy = y+5*H/24
   ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+5*H/24)
   cpx = x+4*W/24
   cpy = y+5*H/24
   ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+9*H/24)
   ctx.stroke()
 
   //7
   ctx.beginPath()
   ctx.moveTo(x+3*W/24, y+10*H/24)
   cpx = x+18*W/24
   cpy = y+5*H/24
   ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+5*H/24)
   cpx = x+20*W/24
   cpy = y+5*H/24
   ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+9*H/24)
   ctx.stroke()
  
    //3
    ctx.beginPath()
    ctx.moveTo(x+2*W/24, y+11*H/24)
    cpx = x+2*W/24
    cpy = y+18*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+18*H/24)
    cpx = x+11*W/24
    cpy = y+18*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+11*H/24)
    cpx = x+11*W/24
    cpy = y+10*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+10*H/24)
    cpx = x+3*W/24
    cpy = y+10*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+10*H/24)
    cpx = x+2*W/24
    cpy = y+10*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+11*H/24)
    ctx.stroke()
  
    //4
    ctx.beginPath()
    ctx.moveTo(x+13*W/24, y+11*H/24)
    cpx = x+13*W/24
    cpy = y+18*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+18*H/24)
    cpx = x+22*W/24
    cpy = y+18*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+11*H/24)
    cpx = x+22*W/24
    cpy = y+10*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+10*H/24)
    cpx = x+14*W/24
    cpy = y+10*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+10*H/24)
    cpx = x+13*W/24
    cpy = y+10*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+11*H/24)
    ctx.stroke()
  
    //5
    ctx.beginPath()
    ctx.moveTo(x+11*W/24, y+11*H/24)
    cpx = x+11*W/24
    cpy = y+10*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+10*H/24)
    cpx = x+13*W/24
    cpy = y+10*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+11*H/24)
    ctx.stroke()
  }
  
  function dreyAt (x,y,W,color) {
    let canvas = document.getElementById("myCanvas")
    let ctx = canvas.getContext("2d")
    let H = W, cpx, cpy, points = []
    let colors = shuffle(getCurrentPalette(true,13))
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
    ctx.strokeStyle = color
    ctx.lineCap = "square"
    ctx.lineJoin = "bevel"
  
    //1
    ctx.beginPath()
    ctx.moveTo(x+9*W/24, y+22*H/24)
    ctx.lineTo(x+10*W/24, y+13*H/24)
    ctx.lineTo(x+6*W/24, y+8*H/24)
    ctx.lineTo(x+1*W/24, y+6*H/24)
    ctx.stroke()
  
    //2
    ctx.beginPath()
    ctx.moveTo(x+1*W/24, y+5*H/24)
    ctx.lineTo(x+5*W/24, y+6*H/24)
    ctx.lineTo(x+3*W/24, y+1*H/24)
    ctx.stroke()
  
    //3
    ctx.beginPath()
    ctx.moveTo(x+4*W/24, y+1*H/24)
    ctx.lineTo(x+8*W/24, y+7*H/24)
    ctx.lineTo(x+12*W/24, y+10*H/24)
    ctx.lineTo(x+16*W/24, y+6*H/24)
    ctx.lineTo(x+17*W/24, y+1*H/24)
    ctx.stroke()
  
    //4
    ctx.beginPath()
    ctx.moveTo(x+14*W/24, y+22*H/24)
    ctx.lineTo(x+14*W/24, y+12*H/24)
    ctx.lineTo(x+17*W/24, y+8*H/24)
    ctx.lineTo(x+23*W/24, y+4*H/24)
    ctx.stroke()
  
    //5
    ctx.beginPath()
    ctx.moveTo(x+19*W/24, y+1*H/24)
    ctx.lineTo(x+18*W/24, y+6*H/24)
    ctx.lineTo(x+23*W/24, y+3*H/24)
    ctx.stroke()
  
    //6
    ctx.beginPath()
    ctx.moveTo(x+10*W/24, y+10*H/24)
    ctx.lineTo(x+14*W/24, y+6*H/24)
    ctx.stroke()
    
    let v = document.getElementById("featuresize").value
    ctx.lineWidth = 1+document.getElementById("featuresize").value/75
    //7
    ctx.beginPath()
    ctx.moveTo(x+8*W/24, y+8*H/24)
    ctx.lineTo(x+15*W/24, y+8*H/24)
    ctx.stroke()
  
    //8
    ctx.beginPath()
    ctx.moveTo(x+9*W/24, y+6*H/24)
    ctx.lineTo(x+13*W/24, y+10*H/24)
    ctx.stroke()
  
    //9
    ctx.beginPath()
    ctx.moveTo(x+9*W/24, y+9*H/24)
    ctx.lineTo(x+14*W/24, y+7*H/24)
    ctx.stroke()
  
    //10
    ctx.beginPath()
    ctx.moveTo(x+9*W/24, y+7*H/24)
    ctx.lineTo(x+14*W/24, y+9*H/24)
    ctx.stroke()
  
    //11
    ctx.beginPath()
    ctx.moveTo(x+10*W/24, y+8*H/24)
    ctx.lineTo(x+12*W/24, y+5*H/24)
    ctx.stroke()
  
    //12
    ctx.beginPath()
    ctx.moveTo(x+10*W/24, y+6*H/24)
    ctx.lineTo(x+13*W/24, y+8*H/24)
    ctx.stroke()
  
    //13
    ctx.beginPath()
    ctx.moveTo(x+13*W/24, y+6*H/24)
    ctx.lineTo(x+10*W/24, y+7*H/24)
    ctx.stroke()
  
    //14
    ctx.beginPath()
    ctx.moveTo(x+11*W/24, y+5*H/24)
    ctx.lineTo(x+14*W/24, y+8*H/24)
    ctx.stroke()
  
    //15
    ctx.beginPath()
    ctx.moveTo(x+11*W/24, y+10*H/24)
    ctx.lineTo(x+12*W/24, y+6*H/24)
    ctx.stroke()
  
    //16
    ctx.beginPath()
    ctx.moveTo(x+13*W/24, y+9*H/24)
    ctx.lineTo(x+10*W/24, y+5*H/24)
    ctx.stroke()
  
    //17
    ctx.beginPath()
    ctx.moveTo(x+9*W/24, y+7*H/24)
    ctx.lineTo(x+13*W/24, y+5*H/24)
    ctx.stroke()
  
    //18
    ctx.beginPath()
    ctx.moveTo(x+9*W/24, y+8*H/24)
    ctx.lineTo(x+12*W/24, y+9*H/24)
    ctx.stroke()
  
    //19
    ctx.beginPath()
    ctx.moveTo(x+13*W/24, y+7*H/24)
    ctx.lineTo(x+10*W/24, y+7*H/24)
    ctx.stroke()
  
    //20
    ctx.beginPath()
    ctx.moveTo(x+15*W/24, y+6*H/24)
    ctx.lineTo(x+11*W/24, y+7*H/24)
    ctx.stroke()
  
    //21
    ctx.beginPath()
    ctx.moveTo(x+15*W/24, y+7*H/24)
    ctx.lineTo(x+12*W/24, y+5*H/24)
    ctx.stroke()
    document.getElementById("featuresize").value = v
  }
  
  function winter_stickAt (x,y,W,color) {
    let canvas = document.getElementById("myCanvas")
    let ctx = canvas.getContext("2d")
    let H = W, cpx, cpy, points = []
    let colors = shuffle(getCurrentPalette(true,13))
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
    ctx.strokeStyle = color
    ctx.fillStyle = color
    ctx.lineCap = "square"
    ctx.lineJoin = "bevel"
  
    ctx.globalAlpha /= 3
    ctx.beginPath()
    ctx.moveTo(x+13*W/24, y+5*H/24)
    ctx.lineTo(x+14*W/24, y+2*H/24)
    ctx.lineTo(x+16*W/24, y+3*H/24)
    ctx.lineTo(x+15*W/24, y+6*H/24)
    ctx.fill()
    ctx.globalAlpha *= 3

    //1
    ctx.beginPath()
    ctx.moveTo(x+11*W/24, y+18*H/24)
    ctx.lineTo(x+16*W/24, y+3*H/24)
    ctx.lineTo(x+14*W/24, y+2*H/24)
    ctx.lineTo(x+9*W/24, y+17*H/24)
    ctx.stroke()
  
    //2
    ctx.beginPath()
    ctx.moveTo(x+13*W/24, y+5*H/24)
    ctx.lineTo(x+15*W/24, y+6*H/24)
    ctx.stroke()
  
    //3
    ctx.beginPath()
    ctx.moveTo(x+6*W/24, y+18*H/24)
    cpx = x+8*W/24
    cpy = y+18*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+16*H/24)
    cpx = x+8*W/24
    cpy = y+18*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+18*H/24)
    cpx = x+12*W/24
    cpy = y+18*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+16*H/24)
    cpx = x+12*W/24
    cpy = y+18*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+18*H/24)
    ctx.stroke()
    
    ctx.setLineDash([4,8])
    //4
    ctx.beginPath()
    ctx.moveTo(x+9*W/24, y+17*H/24)
    ctx.lineTo(x+8*W/24, y+20*H/24)
    ctx.stroke()
  
    //5
    ctx.beginPath()
    ctx.moveTo(x+11*W/24, y+18*H/24)
    ctx.lineTo(x+10*W/24, y+21*H/24)
    ctx.stroke()
    ctx.setLineDash([])
    //6
    ctx.beginPath()
    ctx.moveTo(x+4*W/24, y+14*H/24)
    cpx = x+6*W/24
    cpy = y+14*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+12*H/24)
    cpx = x+6*W/24
    cpy = y+14*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+14*H/24)
    ctx.stroke()
  
    //7
    ctx.beginPath()
    ctx.moveTo(x+14*W/24, y+14*H/24)
    cpx = x+16*W/24
    cpy = y+14*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+12*H/24)
    cpx = x+16*W/24
    cpy = y+14*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+14*H/24)
    cpx = x+20*W/24
    cpy = y+14*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+12*H/24)
    cpx = x+20*W/24
    cpy = y+14*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+14*H/24)
    cpx = x+2*W/24
    cpy = y+10*H/24
    ctx.stroke()
  
    //8
    ctx.beginPath()
    ctx.moveTo(x+2*W/24, y+10*H/24)
    cpx = x+4*W/24
    cpy = y+10*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+8*H/24)
    cpx = x+4*W/24
    cpy = y+10*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+10*H/24)
    cpx = x+8*W/24
    cpy = y+10*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+8*H/24)
    cpx = x+8*W/24
    cpy = y+10*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+10*H/24)
    ctx.stroke()
  
    //9
    ctx.beginPath()
    ctx.moveTo(x+14*W/24, y+20*H/24)
    ctx.stroke()
  
    //10
    ctx.beginPath()
    ctx.moveTo(x+12*W/24, y+22*H/24)
    cpx = x+14*W/24
    cpy = y+22*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+20*H/24)
    cpx = x+14*W/24
    cpy = y+22*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+22*H/24)
    cpx = x+18*W/24
    cpy = y+22*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+20*H/24)
    cpx = x+18*W/24
    cpy = y+22*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+22*H/24)
    ctx.stroke()
  
    //11
    ctx.beginPath()
    ctx.moveTo(x+2*W/24, y+22*H/24)
    cpx = x+4*W/24
    cpy = y+22*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+20*H/24)
    cpx = x+4*W/24
    cpy = y+22*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+22*H/24)
    ctx.stroke()
  
    //12
    ctx.beginPath()
    ctx.moveTo(x+16*W/24, y+18*H/24)
    cpx = x+18*W/24
    cpy = y+18*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+16*H/24)
    cpx = x+18*W/24
    cpy = y+18*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+18*H/24)
    ctx.stroke()
  
    //13
    ctx.beginPath()
    ctx.moveTo(x+2*W/24, y+4*H/24)
    cpx = x+2*W/24
    cpy = y+6*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+6*H/24)
    cpx = x+6*W/24
    cpy = y+6*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+4*H/24)
    cpx = x+6*W/24
    cpy = y+6*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+6*H/24)
    cpx = x+10*W/24
    cpy = y+6*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+4*H/24)
    cpx = x+10*W/24
    cpy = y+6*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+6*H/24)
    ctx.stroke()
  
    //14
    ctx.beginPath()
    ctx.moveTo(x+15*W/24, y+10*H/24)
    cpx = x+17*W/24
    cpy = y+10*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+8*H/24)
    cpx = x+17*W/24
    cpy = y+10*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+10*H/24)
    cpx = x+21*W/24
    cpy = y+10*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+8*H/24)
    cpx = x+21*W/24
    cpy = y+10*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+10*H/24)
    ctx.stroke()
  
    //15
    ctx.beginPath()
    ctx.moveTo(x+17*W/24, y+6*H/24)
    cpx = x+19*W/24
    cpy = y+6*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+4*H/24)
    cpx = x+19*W/24
    cpy = y+6*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+6*H/24)
    ctx.stroke()
  
    //16
    ctx.beginPath()
    ctx.moveTo(x+6*W/24, y+18*H/24)
    cpx = x+4*W/24
    cpy = y+18*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+16*H/24)
    cpx = x+4*W/24
    cpy = y+18*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+18*H/24)
    ctx.stroke()
    
    //17
    ctx.beginPath()
    ctx.moveTo(x+7*W/24, y+22*H/24)
    cpx = x+9*W/24
    cpy = y+22*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+20*H/24)
    cpx = x+9*W/24
    cpy = y+22*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+22*H/24)
    ctx.stroke()
  }
  
  function oocyteAt (x,y,W,color) {
    let canvas = document.getElementById("myCanvas")
    let ctx = canvas.getContext("2d")
    let H = W, cpx, cpy, points = []
    let colors = shuffle(getCurrentPalette(true,13))
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
    ctx.strokeStyle = color
    ctx.lineCap = "square"
    ctx.lineJoin = "bevel"
  
    //1
    ctx.beginPath()
    ctx.arc(x+12*W/24, y+12*H/24, 12*W/24, 0, 2*Math.PI)
    ctx.stroke()
  
    //2
    ctx.beginPath()
    ctx.arc(x+12*W/24, y+12*H/24, 10*W/24, 0, 2*Math.PI)
    ctx.stroke()
  
    //3
    ctx.beginPath()
    ctx.arc(x+12*W/24, y+13*H/24, 9*W/24, 0, 2*Math.PI)
    ctx.stroke()
  
    //4 pb
    ctx.beginPath()
    ctx.moveTo(x+12*W/24, y+4*H/24)
    cpx = x+10*W/24
    cpy = y+4*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+3*H/24)
    cpx = x+10*W/24
    cpy = y+2*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+2*H/24)
    cpx = x+14*W/24
    cpy = y+2*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+3*H/24)
    cpx = x+14*W/24
    cpy = y+4*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+4*H/24)
    ctx.stroke()
  }
  
  function bird_cageAt (x,y,W,color) {
    let canvas = document.getElementById("myCanvas")
    let ctx = canvas.getContext("2d")
    let H = W, cpx, cpy, points = []
    let colors = shuffle(getCurrentPalette(true,13))
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
    ctx.strokeStyle = color
    ctx.lineCap = "square"
    ctx.lineJoin = "bevel"
   
     //11
    ctx.beginPath()
    ctx.moveTo(x+7*W/24, y+20*H/24)
    ctx.lineTo(x+10*W/24, y+17*H/24)
    cpx = x+15*W/24
    cpy = y+17*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+12*H/24)
    cpx = x+15*W/24
    cpy = y+11*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+11*H/24)
    cpx = x+16*W/24
    cpy = y+10*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+10*H/24)
    cpx = x+15*W/24
    cpy = y+9*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+9*H/24)
    cpx = x+12*W/24
    cpy = y+9*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+11*H/24)
    cpx = x+9*W/24
    cpy = y+12*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+15*H/24)
    cpx = x+6*W/24
    cpy = y+18*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+18*H/24)
    cpx = x+6*W/24
    cpy = y+19*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+20*H/24)
    //ctx.stroke()
  
    ctx.beginPath()
    ctx.arc(x+12*W/24, y+1*H/24, W/24, 0, Math.PI*2)
 
    ctx.stroke()
    //2
    ctx.beginPath()
    ctx.moveTo(x+4*W/24, y+22*H/24)
    ctx.lineTo(x+20*W/24, y+22*H/24)
    ctx.lineTo(x+20*W/24, y+8*H/24)
    cpx = x+20*W/24
    cpy = y+2*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+2*H/24)
    cpx = x+4*W/24
    cpy = y+2*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+8*H/24)
    cpx = x+4*W/24
    cpy = y+22*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+22*H/24)
    ctx.stroke()
  
    //3
    ctx.beginPath()
    ctx.moveTo(x+12*W/24, y+2*H/24)
    cpx = x+6*W/24
    cpy = y+3*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+8*H/24)
    cpx = x+6*W/24
    cpy = y+22*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+22*H/24)
    ctx.stroke()
  
    //4
    ctx.beginPath()
    ctx.moveTo(x+12*W/24, y+2*H/24)
    cpx = x+8*W/24
    cpy = y+4*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+8*H/24)
    cpx = x+8*W/24
    cpy = y+22*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+22*H/24)
    ctx.stroke()
  
    //5
    ctx.beginPath()
    ctx.moveTo(x+12*W/24, y+2*H/24)
    cpx = x+10*W/24
    cpy = y+6*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+8*H/24)
    cpx = x+10*W/24
    cpy = y+22*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+22*H/24)
    ctx.stroke()

    ctx.beginPath()
    ctx.moveTo(x+12*W/24, y+2*H/24)
    cpx = x+18*W/24
    cpy = y+3*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+8*H/24)
    ctx.lineTo(x+18*W/24, y+22*H/24)
    ctx.stroke()
  
    //1
    ctx.beginPath()
    ctx.moveTo(x+12*W/24, y+2*H/24)
    cpx = x+16*W/24
    cpy = y+4*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+8*H/24)
    ctx.lineTo(x+16*W/24, y+22*H/24)
    ctx.stroke()
  
    //8
    ctx.beginPath()
    ctx.moveTo(x+12*W/24, y+2*H/24)
    cpx = x+14*W/24
    cpy = y+6*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+8*H/24)
    cpx = x+14*W/24
    cpy = y+22*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+22*H/24)
    ctx.lineTo(x+12*W/24, y+22*H/24)
    ctx.lineTo(x+12*W/24, y+2*H/24)
    ctx.stroke()
  
    //9
    ctx.beginPath()
    ctx.moveTo(x+4*W/24, y+21*H/24)
    ctx.lineTo(x+20*W/24, y+21*H/24)
    ctx.stroke()
  
    //10
    ctx.beginPath()
    ctx.moveTo(x+4*W/24, y+8*H/24)
    ctx.lineTo(x+20*W/24, y+8*H/24)
    ctx.stroke()
  }

  function housesplodeAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  let x0 = x, y0 = y
  x -= W/24, y -= W/24
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+12*H/24)
  ctx.lineTo(x+2*W/24, y+10*H/24)
  ctx.lineTo(x+6*W/24, y+3*H/24)
  ctx.lineTo(x+10*W/24, y+3*H/24)
  ctx.lineTo(x+10*W/24, y+5*H/24)
  ctx.lineTo(x+11*W/24, y+5*H/24)
  ctx.lineTo(x+10*W/24, y+5*H/24)
  ctx.lineTo(x+10*W/24, y+3*H/24)
  ctx.lineTo(x+10*W/24, y+1*H/24)
  ctx.lineTo(x+11*W/24, y+1*H/24)
  ctx.lineTo(x+10*W/24, y+1*H/24)
  ctx.lineTo(x+10*W/24, y+3*H/24)
  ctx.lineTo(x+6*W/24, y+3*H/24)
  ctx.lineTo(x+2*W/24, y+10*H/24)
  ctx.lineTo(x+5*W/24, y+10*H/24)
  ctx.stroke()
  y +=  2*W/24
  //2
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+12*H/24)
  ctx.lineTo(x+2*W/24, y+20*H/24)
  ctx.lineTo(x+11*W/24, y+20*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+20*H/24)
  ctx.lineTo(x+14*W/24, y+20*H/24)
  ctx.lineTo(x+14*W/24, y+10*H/24)
  ctx.lineTo(x+5*W/24, y+10*H/24)
  ctx.lineTo(x+14*W/24, y+10*H/24)
  ctx.lineTo(x+15*W/24, y+8*H/24)
  ctx.stroke()
   x += W/24, 
  //4
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+20*H/24)
  ctx.lineTo(x+22*W/24, y+20*H/24)
  ctx.lineTo(x+22*W/24, y+10*H/24)
  ctx.lineTo(x+14*W/24, y+10*H/24)
  ctx.lineTo(x+22*W/24, y+10*H/24)
  ctx.lineTo(x+21*W/24, y+8*H/24)
  ctx.stroke()
  y -= 2*W/24
  //5
  ctx.beginPath()
  ctx.moveTo(x+21*W/24, y+8*H/24)
  ctx.lineTo(x+18*W/24, y+3*H/24)
  ctx.lineTo(x+15*W/24, y+8*H/24)
  ctx.lineTo(x+18*W/24, y+3*H/24)
  ctx.lineTo(x+12*W/24, y+3*H/24)
  ctx.lineTo(x+12*W/24, y+1*H/24)
  ctx.lineTo(x+11*W/24, y+1*H/24)
  ctx.lineTo(x+12*W/24, y+1*H/24)
  ctx.lineTo(x+12*W/24, y+3*H/24)
  ctx.lineTo(x+12*W/24, y+5*H/24)
  ctx.lineTo(x+11*W/24, y+5*H/24)
  ctx.stroke()
}
function house_rAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, angle = 0//pet(180)

  //1
  ctx.beginPath()
  p = rotatePoint(x+13*W/24, y+14*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+16*W/24, y+14*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+16*W/24, y+21*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+12*W/24, y+21*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+12*W/24, y+18*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+14*W/24, y+18*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+14*W/24, y+21*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+2*W/24, y+21*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+2*W/24, y+14*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+10*W/24, y+14*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+10*W/24, y+21*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //2
  ctx.beginPath()
  p = rotatePoint(x+2*W/24, y+14*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+4*W/24, y+10*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+6*W/24, y+10*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+6*W/24, y+11*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+8*W/24, y+11*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+8*W/24, y+10*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+10*W/24, y+10*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //3
  ctx.beginPath()
  p = rotatePoint(x+6*W/24, y+10*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+6*W/24, y+8*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+8*W/24, y+8*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+8*W/24, y+10*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //4
  ctx.beginPath()
  p = rotatePoint(x+3*W/24, y+16*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+5*W/24, y+16*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+5*W/24, y+18*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+3*W/24, y+18*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+3*W/24, y+16*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()
  //5
  ctx.beginPath()
  p = rotatePoint(x+17*W/24, y+17*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+20*W/24, y+21*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+23*W/24, y+17*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+20*W/24, y+17*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //6
  ctx.beginPath()
  p = rotatePoint(x+20*W/24, y+21*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+23*W/24, y+21*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //7
  ctx.beginPath()
  p = rotatePoint(x+18*W/24, y+13*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+18*W/24, y+10*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+22*W/24, y+13*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+18*W/24, y+16*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //8
  ctx.beginPath()
  p = rotatePoint(x+22*W/24, y+13*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+22*W/24, y+10*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()
//11
  ctx.beginPath()
  p = rotatePoint(x+7*W/24, y+16*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+9*W/24, y+16*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+9*W/24, y+18*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+7*W/24, y+18*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+7*W/24, y+16*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()
  //9
  y += W/48
  x -= W/48
  ctx.beginPath()
  p = rotatePoint(x+14*W/24, y+13*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+11*W/24, y+13*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+14*W/24, y+9*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+17*W/24, y+13*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //10
  ctx.beginPath()
  p = rotatePoint(x+14*W/24, y+9*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+11*W/24, y+9*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  
}

function accidentAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+12*H/24)
  cpx = x+11*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+7*H/24)
  cpx = x+14*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+24*W/24, y+3*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+5*H/24)
  cpx = x+8*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+7*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+3*H/24)
  cpx = x+8*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+5*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+8*H/24)
  ctx.lineTo(x+12*W/24, y+10*H/24)
  ctx.stroke()

  //7
  ctx.lineWidth /= 2
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+10*H/24)
  ctx.lineTo(x+12*W/24, y+14*H/24)
  ctx.stroke()

  //1
  ctx.beginPath()
  ctx.moveTo(x+13.4*W/24, y+6.5*H/24)
  ctx.lineTo(x+13.4*W/24, y+9*H/24)
  ctx.stroke()
  //5
  car2At(x+15*W/24, y+7*H/24, W/4,color)

  strokeBlobAt(ctx,x+16*W/24, y+7*H/24,W/160)
  strokeBlobAt(ctx,x+21*W/24, y+13*H/24,W/120)
  strokeBlobAt(ctx,x+14*W/24, y+14*H/24,W/140)

  let i = 0, d = W/32
  //2
  x -= 1*W/24
  ctx.lineWidth = 1
  for (; i < 9; i++) {
    ctx.beginPath()
    ctx.moveTo(x+0*W/24+pet(d), y+24*H/24)
    ctx.lineTo(x+4*W/24+pet(d), y+17*H/24+pet(d))
    ctx.lineTo(x+4*W/24+pet(d), y+24*H/24)
    ctx.lineTo(x+8*W/24+pet(d), y+17*H/24+pet(d))
    ctx.lineTo(x+8*W/24+pet(d), y+24*H/24)
    ctx.lineTo(x+12*W/24+pet(d), y+17*H/24+pet(d))
    ctx.lineTo(x+12*W/24+pet(d), y+24*H/24)
    ctx.lineTo(x+16*W/24+pet(d), y+17*H/24+pet(d))
    ctx.lineTo(x+16*W/24+pet(d), y+24*H/24)
    ctx.lineTo(x+20*W/24+pet(d), y+17*H/24+pet(d))
    ctx.lineTo(x+20*W/24+pet(d), y+24*H/24)
    ctx.lineTo(x+24*W/24+pet(d), y+17*H/24+pet(d))
    ctx.lineTo(x+24*W/24+pet(d), y+24*H/24)
    ctx.stroke()
  }
}

function car2At (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, angle = Math.random() * 360

  //1
  ctx.beginPath()
  p = rotatePoint(x+18*W/24, y+20*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+20*W/24
  cpy = y+20*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+20*W/24, y+18*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+20*W/24
  cpy = y+16*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+18*W/24, y+16*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+16*W/24
  cpy = y+16*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+16*W/24, y+18*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+16*W/24
  cpy = y+20*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+18*W/24, y+20*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()

  ctx.globalAlpha /= 3
  ctx.fill()
  ctx.globalAlpha *= 3

  //2
  ctx.beginPath()
  p = rotatePoint(x+9*W/24, y+18*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+9*W/24
  cpy = y+16*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+7*W/24, y+16*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+5*W/24
  cpy = y+16*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+5*W/24, y+18*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+5*W/24
  cpy = y+20*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+7*W/24, y+20*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+9*W/24
  cpy = y+20*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+9*W/24, y+18*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()

  ctx.globalAlpha /= 3
  ctx.fill()
  ctx.globalAlpha *= 3

  //3
  ctx.beginPath()
  p = rotatePoint(x+22*W/24, y+18*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+20*W/24
  cpy = y+18*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+20*W/24, y+18*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+20*W/24
  cpy = y+16*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+18*W/24, y+16*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+16*W/24
  cpy = y+16*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+16*W/24, y+18*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+9*W/24
  cpy = y+18*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+9*W/24, y+18*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+9*W/24
  cpy = y+16*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+7*W/24, y+16*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+5*W/24
  cpy = y+16*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+5*W/24, y+18*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+2*W/24
  cpy = y+18*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+2*W/24, y+18*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+2*W/24
  cpy = y+16*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+2*W/24, y+16*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+2*W/24
  cpy = y+12*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+6*W/24, y+12*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+6*W/24
  cpy = y+8*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+10*W/24, y+8*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+14*W/24
  cpy = y+8*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+14*W/24, y+8*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+18*W/24
  cpy = y+8*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+18*W/24, y+12*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+22*W/24
  cpy = y+12*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+22*W/24, y+16*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+22*W/24
  cpy = y+18*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+22*W/24, y+18*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()

  ctx.globalAlpha /= 3
  ctx.fill()
  ctx.globalAlpha *= 3
}
function raysHAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, angle = 0

  let a = Math.PI*1.3, r = W, i = 0,inc = Math.PI/20

  ctx.save()
  ctx.beginPath()
  p = rotatePoint(x+12*W/24, y+16*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+12*W/24
  cpy = y+22*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+17*W/24, y+22*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+22*W/24
  cpy = y+22*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+22*W/24, y+12*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+22*W/24
  cpy = y+2*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+17*W/24, y+2*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+12*W/24
  cpy = y+2*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24, y+8*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+12*W/24
  cpy = y+0*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+17*W/24, y+0*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+24*W/24
  cpy = y+0*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+24*W/24, y+12*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+24*W/24
  cpy = y+24*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+17*W/24, y+24*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+12*W/24
  cpy = y+24*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24, y+16*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  p = rotatePoint(x+12*W/24, y+24*H/24 ,cx,cy,angle)
 // ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+0*W/24, y+24*H/24 ,cx,cy,angle)
 // ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+0*W/24, y+0*H/24 ,cx,cy,angle)
 // ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+12*W/24, y+0*H/24 ,cx,cy,angle)
 // ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+12*W/24, y+8*H/24 ,cx,cy,angle)
 // ctx.lineTo(p[0],p[1])
  ctx.closePath()
  ctx.clip()
  //1
  for (; i < 50; i++) {
    ctx.beginPath()
    ctx.moveTo(x+16*W/24, y+12*H/24)
    let x2 = x+16*W/24 + r * Math.cos(a)
    let y2 = cy + r * Math.sin(a)
    ctx.lineTo(x2,y2)
    ctx.stroke()
    a += inc
  }
  ctx.restore()

  ctx.save()
  //2
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+16*H/24)
  cpx = x+12*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+22*H/24)
  cpx = x+2*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+12*H/24)
  cpx = x+2*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+2*H/24)
  cpx = x+12*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+8*H/24)
  cpx = x+12*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+0*H/24)
  cpx = x+0*W/24
  cpy = y+0*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+0*W/24, y+12*H/24)
  cpx = x+0*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+24*H/24)
  cpx = x+12*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+16*H/24)
  ctx.closePath()
  ctx.clip()
  i = 0
  for (; i < 50; i++) {
    ctx.beginPath()
    ctx.moveTo(x+8*W/24, y+12*H/24)
    let x2 = x+8*W/24 + r * Math.cos(a)
    let y2 = cy + r * Math.sin(a)
    ctx.lineTo(x2,y2)
    ctx.stroke()
    a += inc
  }
  ctx.restore()
}

function flytrapAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, angle = 0
  //1
  ctx.beginPath()
  p = rotatePoint(x+12*W/24, y+16*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+12*W/24
  cpy = y+22*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+17*W/24, y+22*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+22*W/24
  cpy = y+22*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+22*W/24, y+12*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+22*W/24
  cpy = y+2*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+17*W/24, y+2*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+12*W/24
  cpy = y+2*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24, y+8*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()

  raysHAt (x,y,W,color)
  angle = 180
  //1
  ctx.beginPath()
  p = rotatePoint(x+12*W/24, y+16*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+12*W/24
  cpy = y+22*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+17*W/24, y+22*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+22*W/24
  cpy = y+22*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+22*W/24, y+12*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+22*W/24
  cpy = y+2*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+17*W/24, y+2*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+12*W/24
  cpy = y+2*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24, y+8*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.globalAlpha /= 3
  ctx.fill()
  ctx.globalAlpha *= 3
  ctx.stroke()

  ctx.lineWidth /= 3
  //1
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+9*H/24)
  ctx.lineTo(x+8*W/24, y+8*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+15*H/24)
  ctx.lineTo(x+8*W/24, y+16*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+12*H/24)
  ctx.lineTo(x+5*W/24, y+12*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+9*H/24)
  ctx.lineTo(x+16*W/24, y+8*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+15*H/24)
  ctx.lineTo(x+16*W/24, y+16*H/24)
  ctx.stroke()
  ctx.lineWidth *= 3
  raysHAt (x,y,W,color)
  fly2At (x+14*W/24,y+9*W/24,W/4,color)
}

function fly2At (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, angle = pet(180)

  //1
  ctx.beginPath()
  p = rotatePoint(x+12*W/24, y+4*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+15*W/24
  cpy = y+4*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+15*W/24, y+2*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+15*W/24
  cpy = y+1*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24, y+1*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+9*W/24
  cpy = y+1*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+9*W/24, y+2*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+9*W/24
  cpy = y+4*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24, y+4*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.globalAlpha /= 3
  ctx.fill()
  ctx.globalAlpha *= 3
  ctx.stroke()

  //2
  ctx.beginPath()
  p = rotatePoint(x+12*W/24, y+4*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+16*W/24
  cpy = y+4*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+16*W/24, y+12*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+16*W/24
  cpy = y+22*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24, y+22*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+8*W/24
  cpy = y+22*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+8*W/24, y+12*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+8*W/24
  cpy = y+4*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24, y+4*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.globalAlpha /= 3
  ctx.fill()
  ctx.globalAlpha *= 3
  ctx.stroke()

  //3
  ctx.beginPath()
  p = rotatePoint(x+12*W/24, y+4*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+4*W/24
  cpy = y+5*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+2*W/24, y+18*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+2*W/24
  cpy = y+22*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+8*W/24, y+22*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+11*W/24
  cpy = y+20*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24, y+4*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()

  //4
  ctx.beginPath()
  p = rotatePoint(x+12*W/24, y+4*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+20*W/24
  cpy = y+5*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+22*W/24, y+18*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+22*W/24
  cpy = y+22*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+16*W/24, y+22*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+12*W/24
  cpy = y+22*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24, y+4*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()

  //5
  ctx.beginPath()
  p = rotatePoint(x+16*W/24, y+8*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+20*W/24
  cpy = y+8*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+20*W/24, y+6*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()

  //6
  ctx.beginPath()
  p = rotatePoint(x+16*W/24, y+12*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+20*W/24
  cpy = y+12*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+21*W/24, y+10*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()

  //7
  ctx.beginPath()
  p = rotatePoint(x+16*W/24, y+15*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+20*W/24
  cpy = y+15*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+21*W/24, y+18*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()

  //8
  ctx.beginPath()
  p = rotatePoint(x+8*W/24, y+15*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+4*W/24
  cpy = y+15*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+3*W/24, y+18*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()

  //9
  ctx.beginPath()
  p = rotatePoint(x+8*W/24, y+12*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+4*W/24
  cpy = y+12*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+3*W/24, y+10*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()

  //10
  ctx.beginPath()
  p = rotatePoint(x+8*W/24, y+8*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+4*W/24
  cpy = y+8*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+4*W/24, y+6*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()
}

  function fliesAt (x,y,W,color) {
    let canvas = document.getElementById("myCanvas")
    let ctx = canvas.getContext("2d")
    let H = W, cpx, cpy, points = []
    let colors = shuffle(getCurrentPalette(true,13))
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
    let s = +document.getElementById("featuresize").value
    document.getElementById("featuresize").value = s/3
    ctx.strokeStyle = randomPick(colors)
    ctx.fillStyle = color
    ctx.lineCap = "square"
    ctx.lineJoin = "bevel"
    let pad = 2*W/24
    let i = 0,x1 = pad, y1 = pad, W1=W/6
    let space = W1/20
    for (; i < 64; i++) {
      ctx.strokeStyle = randomPick(colors)
      flyAt (x+Math.random()*W,y+Math.random()*H,W1*Math.random() *5,color, i)
    }
    document.getElementById("featuresize").value = s
  }
  
  function flyAt (x,y,W,color) {
    let canvas = document.getElementById("myCanvas")
    let ctx = canvas.getContext("2d")
    let H = W, cpx, cpy, points = []
    let colors = shuffle(getCurrentPalette(true,13))
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
    ctx.strokeStyle = color
    ctx.lineCap = "square"
    ctx.lineJoin = "bevel"
    let angle = Math.random() * 2 * Math.PI
    let angle2 = angle + Math.PI/7
    let inc = Math.PI/randomPick([4,3,8])
    //39 fly
    ctx.beginPath()
    ctx.ellipse(x, y, W/19+Math.random()*W/30, W/9, angle,0,Math.PI*2)
    ctx.stroke()
    ctx.beginPath()
    ctx.ellipse(x, y, W/19, W/9+Math.random()*W/30, angle+inc,0,Math.PI*2)
    ctx.stroke()
    ctx.beginPath()
    ctx.ellipse(x, y, W/19+Math.random()*W/30, W/9, angle2+inc,0,Math.PI*2)
    ctx.stroke()
  }
  
function almost_hanged_manAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  //1
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+20*H/24)
  cpx = x+12*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+20*H/24)
  cpx = x+16*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+15*H/24)
  cpx = x+18*W/24
  cpy = y+15*H/24
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+16*H/24)
  cpx = x+18*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+21*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+15*H/24)
  cpx = x+18*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+19*H/24)
  cpx = x+16*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+22*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+23*H/24)
  cpx = x+12*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+21*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+23*H/24)
  cpx = x+18*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+16*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+23*H/24)
  cpx = x+7*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+21*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+19*H/24)
  cpx = x+8*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+22*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+16*H/24)
  cpx = x+7*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+18*H/24)
  cpx = x+9*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+23*H/24)
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+17*H/24)
  cpx = x+12*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+18*H/24)
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+15*H/24)
  cpx = x+20*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+12*H/24)
  cpx = x+20*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+10*H/24)
  cpx = x+18*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+11*H/24)
  ctx.stroke()

  //11
  //12
  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+12*H/24)
  cpx = x+16*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+13*H/24)
  ctx.stroke()

  //13
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+16*H/24)
  cpx = x+6*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+13*H/24)
  ctx.stroke()

  //14 ear left

    //43
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+15*H/24)
  cpx = x+5*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+13*H/24)
  cpx = x+4*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+10*H/24)
  cpx = x+6*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+11*H/24)
  ctx.stroke()
  //44
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+14*H/24)
  cpx = x+5*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+12*H/24)
  ctx.stroke()

  //15
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+14*H/24)
  cpx = x+11*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+14*H/24)
  ctx.stroke()

  //16 nostril

  //18
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+12*H/24)
  cpx = x+10*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+14*H/24)
  ctx.stroke()

  //19
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+8*H/24)
  cpx = x+9*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+8*H/24)
  cpx = x+11*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+10*H/24)
  ctx.stroke()

  //20 right hair
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+10*H/24)
  cpx = x+19*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+5*H/24)
  cpx = x+17*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+3*H/24)
  cpx = x+16*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+7*H/24)
  cpx = x+18*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+10*H/24)
  ctx.stroke()

  //21
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+8*H/24)
  cpx = x+14*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+8*H/24)
  ctx.stroke()

  //22
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+6*H/24)
  cpx = x+9*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+6*H/24)
  ctx.stroke()

  //23
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+10*H/24)
  cpx = x+7*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+6*H/24)
  cpx = x+7*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+4*H/24)
  cpx = x+5*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+6*H/24)
  cpx = x+5*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+10*H/24)
  cpx = x+6*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+10*H/24)
  //ctx.stroke()

  //24 top hair
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+4*H/24)
  cpx = x+7*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+1*H/24)
  cpx = x+14*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+3*H/24)
  cpx = x+16*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+4*H/24)
  cpx = x+13*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+3*H/24)
  cpx = x+7*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+4*H/24)
  ctx.stroke()

  //25
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+10*H/24)
  cpx = x+8*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+9*H/24)
  ctx.stroke()

  //26
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+10*H/24)
  cpx = x+9*W/24
  cpy = y+9.4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+10*H/24)
  ctx.stroke()

  //27
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+10*H/24)
  cpx = x+9*W/24
  cpy = y+10.7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+10*H/24)
  ctx.stroke()

  //28
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+10*H/24)
  cpx = x+14*W/24
  cpy = y+10.6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+10*H/24)
  cpx = x+14*W/24
  cpy = y+9.4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+10*H/24)
  ctx.stroke()

  //29
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+9*H/24)
  cpx = x+14*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+9*H/24)
  ctx.stroke()

  //30
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+10*H/24)
  cpx = x+10*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+9*H/24)
  ctx.stroke()

  //31
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+16*H/24)
  cpx = x+12*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+16*H/24)
  ctx.stroke()

  //32
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+7*H/24)
  cpx = x+8*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+6*H/24)
  cpx = x+10*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+6*H/24)
  ctx.stroke()

  //33
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+13*H/24)
  cpx = x+18*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+13*H/24)
  cpx = x+19*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+11*H/24)
  ctx.stroke()

  //34
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+12*H/24)
  cpx = x+5*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+12*H/24)
  //ctx.stroke()

  //35
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+11*H/24)
  cpx = x+10*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+10*H/24)
  ctx.stroke()

  //36
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+12*H/24)
  cpx = x+19*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+13*H/24)
  ctx.stroke()

    //46 rt side of nose
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+15*H/24)
  cpx = x+14*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+13*H/24)
  cpx = x+12*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+11*H/24)
  ctx.stroke()
  //37
  ctx.beginPath()
  ctx.arc(x+9.3*W/24, y+10*H/24, W/88, 0, Math.PI*2)
  ctx.stroke()

  //38
  ctx.beginPath()
  ctx.arc(x+14.4*W/24, y+10*H/24, W/88, 0, Math.PI*2)
  ctx.stroke()

  //39 fly
  ctx.lineWidth /=2
  ctx.beginPath()
  ctx.ellipse(x+9*W/24, y+2*H/24, W/96, W/48, Math.PI/5,0,Math.PI*2)
  ctx.stroke()
  ctx.beginPath()
  ctx.ellipse(x+9.2*W/24, y+2.3*H/24, W/96, W/48, Math.PI/2,0,Math.PI*2)
  ctx.stroke()
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
    //48 mouth
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+16*H/24)
  cpx = x+10*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+15*H/24)
  cpx = x+12*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+15*H/24)
  cpx = x+13*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+16*H/24)
  ctx.stroke()
  
  //40 rt nostril
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+14*H/24)
  cpx = x+12*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+14*H/24)
  ctx.stroke()
  
  //52
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+10*H/24)
  cpx = x+5*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+4*H/24)
  cpx = x+7*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+10*H/24)
  cpx = x+5*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+10*H/24)
  ctx.stroke()
}
  
function checkpointAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  //1
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+20*H/24)
  ctx.lineTo(x+8*W/24, y+20*H/24)
  ctx.lineTo(x+8*W/24, y+7*H/24)
  ctx.lineTo(x+5*W/24, y+3*H/24)
  ctx.lineTo(x+2*W/24, y+7*H/24)
  ctx.lineTo(x+2*W/24, y+20*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+8*H/24)
  ctx.lineTo(x+3*W/24, y+19*H/24)
  ctx.lineTo(x+7*W/24, y+19*H/24)
  ctx.lineTo(x+7*W/24, y+8*H/24)
  cpx = x+7*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+6*H/24)
  cpx = x+3*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+8*H/24)
  ctx.stroke()
  ctx.globalAlpha /= 3
  ctx.fill()
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+12*H/24)
  ctx.lineTo(x+9*W/24, y+14*H/24)
  ctx.lineTo(x+11*W/24, y+12*H/24)
  ctx.lineTo(x+13*W/24, y+12*H/24)
  ctx.lineTo(x+11*W/24, y+14*H/24)
  ctx.lineTo(x+13*W/24, y+14*H/24)
  ctx.lineTo(x+15*W/24, y+12*H/24)
  ctx.lineTo(x+17*W/24, y+12*H/24)
  ctx.lineTo(x+15*W/24, y+14*H/24)
  ctx.lineTo(x+17*W/24, y+14*H/24)
  ctx.lineTo(x+19*W/24, y+12*H/24)
  ctx.lineTo(x+9*W/24, y+12*H/24)
  ctx.fill()
  ctx.globalAlpha *= 3
  //3
  ctx.beginPath()
  ctx.moveTo(x+22*W/24, y+20*H/24)
  cpx = x+18*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+20*H/24)
  ctx.lineTo(x+18*W/24, y+19*H/24)
  ctx.lineTo(x+22*W/24, y+19*H/24)
  ctx.lineTo(x+22*W/24, y+20*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+21*W/24, y+19*H/24)
  ctx.lineTo(x+21*W/24, y+13*H/24)
  cpx = x+21*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+12*H/24)
  cpx = x+19*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+13*H/24)
  cpx = x+19*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+19*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+19*W/24, y+14*H/24)
  ctx.lineTo(x+9*W/24, y+14*H/24)
  ctx.lineTo(x+9*W/24, y+12*H/24)
  ctx.lineTo(x+20*W/24, y+12*H/24)
  ctx.stroke()
  //6
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+14*H/24)
  ctx.lineTo(x+11*W/24, y+12*H/24)
  ctx.stroke()
  //7
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+14*H/24)
  ctx.lineTo(x+13*W/24, y+12*H/24)
  ctx.stroke()
  //8
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+14*H/24)
  ctx.lineTo(x+15*W/24, y+12*H/24)
  ctx.stroke()
  //9
  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+14*H/24)
  ctx.lineTo(x+17*W/24, y+12*H/24)
  ctx.stroke()
  //10
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+14*H/24)
  ctx.lineTo(x+19*W/24, y+12*H/24)
  ctx.stroke()
  //12
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+13*H/24)
  ctx.lineTo(x+8*W/24, y+13*H/24)
  ctx.stroke()
  //11
  ctx.beginPath()
  ctx.arc(x+20*W/24, y+13*H/24, W/48,0,Math.PI*2)
  ctx.stroke()
}
  
function philosopherAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  //8
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+8*H/24)
  ctx.lineTo(x+11*W/24, y+8*H/24)
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+8*H/24)
  ctx.lineTo(x+15*W/24, y+8*H/24)
  ctx.stroke()
  //1 right hair 
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+1*H/24)
  cpx = x+18*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+3*H/24)
  cpx = x+19*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+8*H/24)
  ctx.stroke()
  //2
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+5*H/24)
  cpx = x+12*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+3*H/24)
  cpx = x+18*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+9*H/24)
  ctx.stroke()
  //1
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+8*H/24)
  cpx = x+6*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+7*H/24)
  cpx = x+4*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+9*H/24)
  cpx = x+4*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+11*H/24)
  cpx = x+4*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+21*H/24)
  cpx = x+8*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+22*H/24)
  cpx = x+10*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+23*H/24)
  cpx = x+15*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+22*H/24)
  cpx = x+17*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+21*H/24)
  cpx = x+18*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+20.5*H/24)
  ctx.stroke()
  //2
  ctx.beginPath()
  ctx.moveTo(x+19*W/24, y+15*H/24)
  cpx = x+19*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+12*H/24)
  cpx = x+20*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+9*H/24)
  ctx.stroke()
  //3
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+9*H/24)
  cpx = x+18*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+8*H/24)
  cpx = x+20*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+9*H/24)
  ctx.stroke()
  //4
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+10*H/24)
  cpx = x+11*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+13*H/24)
  cpx = x+10*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+14*H/24)
  cpx = x+11*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+15*H/24)
  cpx = x+13*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+14*H/24)
  cpx = x+14*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+13*H/24)
  cpx = x+13*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+10*H/24)
  ctx.stroke()
  //5
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+13*H/24)
  cpx = x+8*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+18*H/24)
  ctx.stroke()
  //6
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+13*H/24)
  cpx = x+16*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+17*H/24)
  ctx.stroke()
  //7
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+20*H/24)
  cpx = x+10*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+19*H/24)
  cpx = x+14*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+20*H/24)
  ctx.stroke()
  //8
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+18*H/24)
  cpx = x+9*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+17*H/24)
  ctx.stroke()
  //10
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+8*H/24)
  cpx = x+6*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+10*H/24)
  ctx.stroke()
  //11
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+10*H/24)
  cpx = x+11*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+8*H/24)
  cpx = x+7*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+10*H/24)
  cpx = x+7*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+12*H/24)
  cpx = x+11*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+10*H/24)
  ctx.stroke()
  //12
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+10*H/24)
  cpx = x+13*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+8*H/24)
  cpx = x+17*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+10*H/24)
  cpx = x+17*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+12*H/24)
  cpx = x+13*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+10*H/24)
  ctx.stroke()
  //13
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+10*H/24)
  cpx = x+7*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+9*H/24)
  cpx = x+11*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+10*H/24)
  ctx.stroke()
  //14
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+10*H/24)
  cpx = x+13*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+9*H/24)
  cpx = x+17*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+10*H/24)
  ctx.stroke()
  //4
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+8*H/24)
  ctx.lineTo(x+7*W/24, y+10*H/24)
  ctx.stroke()
  //5
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+9*H/24)
  ctx.lineTo(x+17*W/24, y+10*H/24)
  ctx.stroke()
  //6
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+10*H/24)
  cpx = x+12*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+10*H/24)
  ctx.stroke()
  //15
  ctx.beginPath()
  ctx.arc(x+9*W/24, y+10*H/24, W/48,0,Math.PI*2)
  ctx.stroke()
  //16
  ctx.beginPath()
  ctx.arc(x+16*W/24, y+10*H/24, W/48,0,Math.PI*2)
  ctx.stroke()
  //17
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+17*H/24)
  cpx = x+17*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+20*H/24)
  cpx = x+18*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+20*H/24)
  cpx = x+21*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+16*H/24)
  cpx = x+20*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+15*H/24)
  cpx = x+17*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+18*H/24)
  cpx = x+13*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+17*H/24)
  ctx.stroke()
  //18
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+7*H/24)
  cpx = x+12*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+7*H/24)
  ctx.stroke()
  //19
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+6*H/24)
  cpx = x+12*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+6*H/24)
  ctx.stroke()
  //20
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+5*H/24)
  cpx = x+12*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+5*H/24)
  ctx.stroke()
  //21
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+7*H/24)
  cpx = x+5*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+3*H/24)
  cpx = x+6*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+1*H/24)
  ctx.stroke()
  //22
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+7*H/24)
  cpx = x+6*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+3*H/24)
  cpx = x+11*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+5*H/24)
  ctx.stroke()
  //3 pipe bowl inner
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+16*H/24)
  cpx = x+19*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+16.5*H/24)
  ctx.stroke()
  //7 right ear 
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+11*H/24)
  cpx = x+19*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+9*H/24)
  cpx = x+9*W/24
  cpy = y+17*H/24
  ctx.stroke()
  //12 upperlip
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+17*H/24)
  cpx = x+10*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+16.3*H/24)
  cpx = x+14*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+17*H/24)
  ctx.stroke()
  //8 lip/pipe
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+17*H/24)
  cpx = x+12*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+17*H/24)
  cpx = x+12.5*W/24
  cpy = y+16.6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+17*H/24)
  cpx = x+14*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+17*H/24)
  ctx.stroke()
  //4
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+18*H/24)
  ctx.lineTo(x+13.5*W/24, y+17.9*H/24)
  ctx.stroke()
  //5
  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+17*H/24)
  ctx.lineTo(x+14.6*W/24, y+17.4*H/24)
  ctx.stroke()
}

  function alarm_clockAt (x,y,W,color) {
    let canvas = document.getElementById("myCanvas")
    let ctx = canvas.getContext("2d")
    let H = W, cpx, cpy, points = []
    let colors = shuffle(getCurrentPalette(true,13))
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
    ctx.strokeStyle = color
    ctx.lineCap = "square"
    ctx.lineJoin = "bevel"
    //2
    ctx.beginPath()
    ctx.moveTo(x+11*W/24, y+12*H/24)
    ctx.lineTo(x+10*W/24, y+12*H/24)
    cpx = x+10*W/24
    cpy = y+10*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+10*H/24)
    cpx = x+14*W/24
    cpy = y+10*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+12*H/24)
    ctx.stroke()
    //3
    ctx.beginPath()
    ctx.moveTo(x+11*W/24, y+15*H/24)
    ctx.lineTo(x+14*W/24, y+15*H/24)
    ctx.lineTo(x+14*W/24, y+16*H/24)
    ctx.lineTo(x+10*W/24, y+16*H/24)
    ctx.lineTo(x+10*W/24, y+15*H/24)
    ctx.stroke()
    //4
    ctx.beginPath()
    ctx.moveTo(x+11*W/24, y+12*H/24)
    cpx = x+11*W/24
    cpy = y+11*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+11*H/24)
    cpx = x+13*W/24
    cpy = y+11*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+12*H/24)
    ctx.stroke()
    //5
    ctx.beginPath()
    ctx.moveTo(x+14*W/24, y+12*H/24)
    cpx = x+14*W/24
    cpy = y+14*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+15*H/24)
    ctx.stroke()
    //6
    ctx.beginPath()
    ctx.moveTo(x+13*W/24, y+12*H/24)
    cpx = x+13*W/24
    cpy = y+14*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+15*H/24)
    ctx.stroke()
    //7
    ctx.beginPath()
    ctx.moveTo(x+17*W/24, y+16*H/24)
    ctx.lineTo(x+16*W/24, y+16*H/24)
    ctx.stroke()
    //8
    ctx.beginPath()
    ctx.moveTo(x+16*W/24, y+11*H/24)
    ctx.lineTo(x+16*W/24, y+10*H/24)
    ctx.lineTo(x+20*W/24, y+10*H/24)
    ctx.lineTo(x+20*W/24, y+11*H/24)
    ctx.stroke()
    //9
    ctx.beginPath()
    ctx.moveTo(x+16*W/24, y+11*H/24)
    ctx.lineTo(x+19*W/24, y+11*H/24)
    ctx.stroke()
    //10
    ctx.beginPath()
    ctx.moveTo(x+19*W/24, y+11*H/24)
    cpx = x+17*W/24
    cpy = y+13*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+16*H/24)
    ctx.stroke()
    //11
    ctx.beginPath()
    ctx.moveTo(x+20*W/24, y+11*H/24)
    cpx = x+18*W/24
    cpy = y+13*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+16*H/24)
    ctx.stroke()
  
    //12
    ctx.beginPath()
    ctx.moveTo(x+6*W/24, y+16*H/24)
    ctx.lineTo(x+7*W/24, y+16*H/24)
    ctx.lineTo(x+7*W/24, y+10*H/24)
    ctx.lineTo(x+6*W/24, y+10*H/24)
    cpx = x+6*W/24
    cpy = y+11*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+11*H/24)
    ctx.lineTo(x+6*W/24, y+11*H/24)
    ctx.lineTo(x+6*W/24, y+16*H/24)
    ctx.stroke()
  
    //13
    ctx.beginPath()
    ctx.moveTo(x+8*W/24, y+11*H/24)
    ctx.lineTo(x+8*W/24, y+12*H/24)
    ctx.lineTo(x+9*W/24, y+12*H/24)
    ctx.lineTo(x+9*W/24, y+11*H/24)
    ctx.lineTo(x+8*W/24, y+11*H/24)
    ctx.stroke()
  
    //14
    ctx.beginPath()
    ctx.moveTo(x+8*W/24, y+14*H/24)
    ctx.lineTo(x+8*W/24, y+15*H/24)
    ctx.lineTo(x+9*W/24, y+15*H/24)
    ctx.lineTo(x+9*W/24, y+14*H/24)
    ctx.lineTo(x+8*W/24, y+14*H/24)
    ctx.stroke()
  
    //15
    ctx.beginPath()
    ctx.moveTo(x+3*W/24, y+9*H/24)
    ctx.lineTo(x+3*W/24, y+17*H/24)
    ctx.lineTo(x+21*W/24, y+17*H/24)
    ctx.lineTo(x+21*W/24, y+9*H/24)
    ctx.lineTo(x+3*W/24, y+9*H/24)
    ctx.stroke()
  
    //16
    ctx.beginPath()
    ctx.moveTo(x+3*W/24, y+19*H/24)
    ctx.lineTo(x+21*W/24, y+19*H/24)
    cpx = x+23*W/24
    cpy = y+19*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+17*H/24)
    ctx.lineTo(x+23*W/24, y+9*H/24)
    cpx = x+23*W/24
    cpy = y+7*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+7*H/24)
    ctx.lineTo(x+3*W/24, y+7*H/24)
    cpx = x+1*W/24
    cpy = y+7*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+9*H/24)
    ctx.lineTo(x+1*W/24, y+17*H/24)
    cpx = x+1*W/24
    cpy = y+19*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+19*H/24)
    ctx.stroke()
  
    //17
    ctx.beginPath()
    ctx.moveTo(x+3*W/24, y+19*H/24)
    ctx.lineTo(x+3*W/24, y+20*H/24)
    ctx.lineTo(x+5*W/24, y+20*H/24)
    ctx.lineTo(x+5*W/24, y+19*H/24)
    ctx.stroke()
  
    //18
    ctx.beginPath()
    ctx.moveTo(x+21*W/24, y+19*H/24)
    ctx.lineTo(x+21*W/24, y+20*H/24)
    ctx.lineTo(x+19*W/24, y+20*H/24)
    ctx.lineTo(x+19*W/24, y+19*H/24)
    ctx.stroke()
  
    //19
    ctx.beginPath()
    ctx.moveTo(x+10*W/24, y+7*H/24)
    ctx.lineTo(x+10*W/24, y+6*H/24)
    ctx.lineTo(x+14*W/24, y+6*H/24)
    ctx.lineTo(x+14*W/24, y+7*H/24)
    ctx.stroke()
    
 
    //21
    ctx.beginPath()
    ctx.moveTo(x+6*W/24, y+13*H/24)
    ctx.lineTo(x+7*W/24, y+13*H/24)
    ctx.stroke()

    //22
    ctx.beginPath()
    ctx.moveTo(x+17.5*W/24, y+13*H/24)
    ctx.lineTo(x+18.4*W/24, y+13*H/24)
    ctx.stroke()

    //24
    ctx.beginPath()
    ctx.moveTo(x+12.8*W/24, y+13*H/24)
    ctx.lineTo(x+13.6*W/24, y+13*H/24)
    ctx.stroke()
  }
  
  function teak_rat_sculptureAt (x,y,W,color) {
    let canvas = document.getElementById("myCanvas")
    let ctx = canvas.getContext("2d")
    let H = W, cpx, cpy, points = []
    let colors = shuffle(getCurrentPalette(true,13))
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
    ctx.strokeStyle = color
    ctx.lineCap = "square"
    ctx.lineJoin = "bevel"
  
    //1
    ctx.beginPath()
    ctx.moveTo(x+2*W/24, y+18*H/24)
    ctx.lineTo(x+20*W/24, y+18*H/24)
    ctx.lineTo(x+20*W/24, y+10*H/24)
    cpx = x+12*W/24
    cpy = y+10*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+14*H/24)
    cpx = x+8*W/24
    cpy = y+16*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+16*H/24)
    cpx = x+2*W/24
    cpy = y+16*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+18*H/24)
    ctx.stroke()
  
    //2
    ctx.beginPath()
    ctx.moveTo(x+20*W/24, y+16*H/24)
    cpx = x+22*W/24
    cpy = y+16*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+14*H/24)
    cpx = x+22*W/24
    cpy = y+7*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+7*H/24)
    ctx.stroke()
  
    //3
    ctx.beginPath()
    ctx.moveTo(x+8*W/24, y+18*H/24)
    ctx.lineTo(x+7*W/24, y+20*H/24)
    ctx.stroke()
  
    //4
    ctx.beginPath()
    ctx.moveTo(x+10*W/24, y+18*H/24)
    ctx.lineTo(x+10*W/24, y+20*H/24)
    ctx.stroke()
  
    //5
    ctx.beginPath()
    ctx.moveTo(x+18*W/24, y+18*H/24)
    ctx.lineTo(x+20*W/24, y+20*H/24)
    ctx.stroke()
  
    //6
    ctx.beginPath()
    ctx.moveTo(x+16*W/24, y+18*H/24)
    ctx.lineTo(x+16*W/24, y+20*H/24)
    ctx.stroke()
  
    //7 eye
    ctx.beginPath()
    ctx.arc(x+11*W/24, y+15*H/24, W/48, 0, Math.PI*2)
    ctx.stroke()
  
    //8
    ctx.beginPath()
    ctx.moveTo(x+3*W/24, y+16*H/24)
    ctx.lineTo(x+2*W/24, y+14*H/24)
    ctx.stroke()
  
    //9
    ctx.beginPath()
    ctx.moveTo(x+4*W/24, y+16*H/24)
    ctx.lineTo(x+4*W/24, y+14*H/24)
    ctx.stroke()
  
    //10
    ctx.beginPath()
    ctx.moveTo(x+5*W/24, y+16*H/24)
    ctx.lineTo(x+6*W/24, y+14*H/24)
    ctx.stroke()
  }
  
  function coat_hangerAt (x,y,W,color) {
    let canvas = document.getElementById("myCanvas")
    let ctx = canvas.getContext("2d")
    let H = W, cpx, cpy, points = []
    let colors = shuffle(getCurrentPalette(true,13))
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
    ctx.strokeStyle = color
    ctx.lineCap = "square"
    ctx.lineJoin = "bevel"
  
      //1
    ctx.beginPath()
    ctx.moveTo(x+14*W/24, y+5*H/24)
    cpx = x+14*W/24
    cpy = y+2*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+2*H/24)
    cpx = x+10*W/24
    cpy = y+2*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+4*H/24)
    cpx = x+10*W/24
    cpy = y+6*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+6*H/24)
    cpx = x+12*W/24
    cpy = y+6*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+7*H/24)
    cpx = x+12*W/24
    cpy = y+9*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+9*H/24)
    ctx.stroke()

    //2
    ctx.beginPath()
    ctx.moveTo(x+4*W/24, y+20*H/24)
    ctx.lineTo(x+20*W/24, y+20*H/24)
    cpx = x+22*W/24
    cpy = y+20*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+18*H/24)
    cpx = x+20*W/24
    cpy = y+16*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+9*H/24)
    ctx.stroke()

    //3
    ctx.beginPath()
    ctx.moveTo(x+4*W/24, y+20*H/24)
    cpx = x+2*W/24
    cpy = y+20*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+18*H/24)
    cpx = x+4*W/24
    cpy = y+16*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+9*H/24)
    ctx.stroke()
  }
  
  function fish_hookAt (x,y,W,color) {
    let canvas = document.getElementById("myCanvas")
    let ctx = canvas.getContext("2d")
    let H = W, cpx, cpy, points = []
    let colors = shuffle(getCurrentPalette(true,13))
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
    ctx.strokeStyle = color
    ctx.lineCap = "square"
    ctx.lineJoin = "bevel"
  
  //1
    ctx.beginPath()
    ctx.moveTo(x+12*W/24, y+22*H/24)
    cpx = x+8*W/24
    cpy = y+22*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+18*H/24)
    cpx = x+9*W/24
    cpy = y+14*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+12*H/24)
    cpx = x+12*W/24
    cpy = y+11*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+7*H/24)
    cpx = x+12*W/24
    cpy = y+4*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+4*H/24)
    cpx = x+13*W/24
    cpy = y+4*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+3*H/24)
    cpx = x+13*W/24
    cpy = y+2*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+2*H/24)
    cpx = x+11*W/24
    cpy = y+2*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+3*H/24)
    cpx = x+11*W/24
    cpy = y+4*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+4*H/24)
    ctx.stroke()

    //2
    ctx.beginPath()
    ctx.moveTo(x+12*W/24, y+22*H/24)
    cpx = x+16*W/24
    cpy = y+22*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+18*H/24)
    cpx = x+16*W/24
    cpy = y+16*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+16*H/24)
    cpx = x+16*W/24
    cpy = y+18*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+18*H/24)
    ctx.stroke()
  }
  
  function herdAt (x,y,W,color) {
    let canvas = document.getElementById("myCanvas")
    let ctx = canvas.getContext("2d")
    let H = W, cpx, cpy, points = []
    let colors = shuffle(getCurrentPalette(true,13))
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
    let s = +document.getElementById("featuresize").value
    document.getElementById("featuresize").value = s/3
    ctx.strokeStyle = color
    let saved = ctx.fillStyle
    ctx.fillStyle = color
    ctx.lineCap = "square"
    ctx.lineJoin = "bevel"
    let pad = 2*W/24
    let i = 0,x1 = pad, y1 = pad, W1=W/6
    let space = W1/20
    let f = Math.floor(Math.random() * 25)
    for (; i < 25; i++) {
      if (i > 0 && i % 5 === 0) {
        y1 += W1 +space
        x1 = pad
      } 
     // y1 += pet (W/12)
      animalAt (x+x1,y+y1,W1,color, f===i)
      x1 += W1 + space
    }
    document.getElementById("featuresize").value = s
    ctx.fillStyle = saved
  }
  
  function animalAt (x,y,W,color,f) {
    let canvas = document.getElementById("myCanvas")
    let ctx = canvas.getContext("2d")
    let H = W, cpx, cpy, points = []
    let colors = shuffle(getCurrentPalette(true,13))
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
    ctx.strokeStyle = color
    ctx.lineCap = "square"
    ctx.lineJoin = "bevel"
    //1
    ctx.beginPath()
    ctx.moveTo(x+12*W/24, y+16*H/24)
    cpx = x+19*W/24
    cpy = y+16*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+12*H/24)
    cpx = x+19*W/24
    cpy = y+8*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+8*H/24)
    cpx = x+5*W/24
    cpy = y+8*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+12*H/24)
    cpx = x+5*W/24
    cpy = y+16*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+16*H/24)
    if(f)
      ctx.fill()
    else
      ctx.stroke()
  
    //2
    ctx.beginPath()
    ctx.moveTo(x+7*W/24, y+15*H/24)
    ctx.lineTo(x+7*W/24, y+22*H/24)
    ctx.stroke()
  
    //3
    ctx.beginPath()
    ctx.moveTo(x+7*W/24, y+15*H/24)
    ctx.lineTo(x+9*W/24, y+22*H/24)
    ctx.stroke()
  
    //4
    ctx.beginPath()
    ctx.moveTo(x+17*W/24, y+15*H/24)
    ctx.lineTo(x+17*W/24, y+22*H/24)
    ctx.stroke()
  
    //5
    ctx.beginPath()
    ctx.moveTo(x+17*W/24, y+15*H/24)
    ctx.lineTo(x+15*W/24, y+22*H/24)
    ctx.stroke()
    
  let r = Math.random()
  if (r < 0.25) {
     //6
    ctx.beginPath()
    ctx.moveTo(x+19*W/24, y+12*H/24)
    ctx.lineTo(x+20*W/24, y+8*H/24)
    ctx.stroke()
    //7 up right
    ctx.beginPath()
    ctx.moveTo(x+5*W/24, y+12*H/24)
    ctx.lineTo(x+4*W/24, y+16*H/24)
    ctx.stroke()

    //8
    ctx.beginPath()
    ctx.moveTo(x+20*W/24, y+8*H/24)
    cpx = x+22*W/24
    cpy = y+8*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+6*H/24)
    cpx = x+22*W/24
    cpy = y+4*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+4*H/24)
    cpx = x+20*W/24
    cpy = y+8*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+8*H/24)
    if(f)
      ctx.fill()
    ctx.stroke()
  } else 
  if (r < 0.5) {
      //14
    ctx.beginPath()
    ctx.moveTo(x+5*W/24, y+12*H/24)
    ctx.lineTo(x+4*W/24, y+8*H/24)
    ctx.stroke()
    //9
    ctx.beginPath()
    ctx.moveTo(x+19*W/24, y+12*H/24)
    ctx.lineTo(x+20*W/24, y+16*H/24)
    cpx = x+22*W/24
    cpy = y+16*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+18*H/24)
    cpx = x+22*W/24
    cpy = y+20*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+20*H/24)
    cpx = x+20*W/24
    cpy = y+16*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+16*H/24)
    if(f)
      ctx.fill()
    ctx.stroke()
  } else 
    if (r < 0.75) {
    //10
    ctx.beginPath()
    ctx.moveTo(x+5*W/24, y+12*H/24)
    ctx.lineTo(x+4*W/24, y+8*H/24)
    cpx = x+2*W/24
    cpy = y+8*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+6*H/24)
    cpx = x+2*W/24
    cpy = y+4*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+4*H/24)
    cpx = x+4*W/24
    cpy = y+8*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+8*H/24)
    if(f)
      ctx.fill()
    ctx.stroke()

    //11
    ctx.beginPath()
    ctx.moveTo(x+19*W/24, y+12*H/24)
    ctx.lineTo(x+20*W/24, y+16*H/24)
    ctx.stroke()
  }  else  {
     //12
    ctx.beginPath()
    ctx.moveTo(x+5*W/24, y+12*H/24)
    ctx.lineTo(x+4*W/24, y+16*H/24)
    cpx = x+2*W/24
    cpy = y+16*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+18*H/24)
    cpx = x+2*W/24
    cpy = y+20*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+20*H/24)
    cpx = x+4*W/24
    cpy = y+16*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+16*H/24)
    if(f)
      ctx.fill()
    ctx.stroke()

    //15
    ctx.beginPath()
    ctx.moveTo(x+19*W/24, y+12*H/24)
    ctx.lineTo(x+20*W/24, y+8*H/24)
    ctx.stroke()
  }
  
}
  
  function rainbowAt (x,y,W,color) {
    let canvas = document.getElementById("myCanvas")
    let ctx = canvas.getContext("2d")
    let H = W, cpx, cpy, points = []
    let colors = shuffle(getCurrentPalette(true,13))
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
    ctx.strokeStyle = color
    ctx.lineCap = "square"
    ctx.lineJoin = "bevel"
  
    ctx.beginPath()
    ctx.moveTo(x+2*W/24, y+17*H/24)
    cpx = x+3*W/24
    cpy = y+7*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+7*H/24)
    cpx = x+21*W/24
    cpy = y+7*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+17*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+4*W/24, y+17*H/24)
    cpx = x+5*W/24
    cpy = y+9*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+9*H/24)
    cpx = x+19*W/24
    cpy = y+9*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+17*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+6*W/24, y+17*H/24)
    cpx = x+7*W/24
    cpy = y+11*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+11*H/24)
    cpx = x+17*W/24
    cpy = y+11*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+17*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+8*W/24, y+17*H/24)
    cpx = x+9*W/24
    cpy = y+13*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+13*H/24)
    cpx = x+15*W/24
    cpy = y+13*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+17*H/24)
    ctx.stroke()
  }
  
  function keyAt (x,y,W,color) {
    let canvas = document.getElementById("myCanvas")
    let ctx = canvas.getContext("2d")
    let H = W, cpx, cpy, points = []
    let colors = shuffle(getCurrentPalette(true,13))
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
    ctx.strokeStyle = color
    ctx.lineCap = "square"
    ctx.lineJoin = "bevel"
  
    ctx.beginPath()
    ctx.moveTo(x+11*W/24, y+22*H/24)
    ctx.lineTo(x+11*W/24, y+8*H/24)
    ctx.lineTo(x+9*W/24, y+8*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+12*W/24, y+17*H/24)
    ctx.lineTo(x+12*W/24, y+8*H/24)
    ctx.lineTo(x+14*W/24, y+8*H/24)
    cpx = x+16*W/24
    cpy = y+8*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+6*H/24)
    cpx = x+16*W/24
    cpy = y+4*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+4*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+9*W/24, y+8*H/24)
    cpx = x+7*W/24
    cpy = y+8*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+6*H/24)
    cpx = x+7*W/24
    cpy = y+4*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+4*H/24)
    cpx = x+9*W/24
    cpy = y+2*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+2*H/24)
    cpx = x+12*W/24
    cpy = y+2*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+2*H/24)
    cpx = x+14*W/24
    cpy = y+2*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+4*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+9*W/24, y+7*H/24)
    cpx = x+8*W/24
    cpy = y+7*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+6*H/24)
    cpx = x+8*W/24
    cpy = y+5*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+5*H/24)
    cpx = x+10*W/24
    cpy = y+5*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+5*H/24)
    cpx = x+10*W/24
    cpy = y+4*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+4*H/24)
    cpx = x+10*W/24
    cpy = y+3*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+3*H/24)
    cpx = x+12*W/24
    cpy = y+3*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+3*H/24)
    cpx = x+13*W/24
    cpy = y+3*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+4*H/24)
    cpx = x+13*W/24
    cpy = y+5*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+5*H/24)
    cpx = x+14*W/24
    cpy = y+5*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+5*H/24)
    cpx = x+15*W/24
    cpy = y+5*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+6*H/24)
    cpx = x+15*W/24
    cpy = y+7*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+7*H/24)
    ctx.lineTo(x+9*W/24, y+7*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+11*W/24, y+8*H/24)
    ctx.lineTo(x+11*W/24, y+22*H/24)
    ctx.lineTo(x+12*W/24, y+22*H/24)
    ctx.lineTo(x+12*W/24, y+20*H/24)
    ctx.lineTo(x+14*W/24, y+20*H/24)
    ctx.lineTo(x+14*W/24, y+22*H/24)
    ctx.lineTo(x+15*W/24, y+22*H/24)
    ctx.lineTo(x+15*W/24, y+17*H/24)
    ctx.lineTo(x+14*W/24, y+17*H/24)
    ctx.lineTo(x+14*W/24, y+19*H/24)
    ctx.lineTo(x+12*W/24, y+19*H/24)
    ctx.lineTo(x+12*W/24, y+8*H/24)
    ctx.stroke()
  }
  
  function too_many_thingsAt (x,y,W,color) {
    let canvas = document.getElementById("myCanvas")
    let ctx = canvas.getContext("2d")
    let H = W, cpx, cpy, points = []
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
    let s = +document.getElementById("featuresize").value
    document.getElementById("featuresize").value = s/3
    ctx.strokeStyle = color
    let saved = ctx.fillStyle
    ctx.lineCap = "square"
    ctx.lineJoin = "bevel"
    let pad = 2*W/24
    let i = 0,x1 = pad, y1 = pad,W1=W/5
    let space = W1/7
    let index = Math.floor(atList.length * Math.random())
    for (; i < 16; i++) {
       if (i > 0 && i % 4 === 0) {
         y1 += W1 +space
         x1 = pad
       } 
       window [atList[index%atList.length]] (x+x1,y+y1,W1,color)
       x1 += W1 + space
       index++
     }
    document.getElementById("featuresize").value = s
    ctx.fillStyle = saved
  }
  
  function flock_of_birdsAt (x,y,W,color) {
    let canvas = document.getElementById("myCanvas")
    let ctx = canvas.getContext("2d")
    let H = W, cpx, cpy, points = []
    let colors = shuffle(getCurrentPalette(true,13))
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
    ctx.strokeStyle = color
    ctx.lineCap = "square"
    ctx.lineJoin = "bevel"
    let i = 0,x1,y1,W1=W/8
    let pad = 2*W/24
    for (; i < 23; i++) {
      x1 = x + (Math.random() * (W - 2*pad))
      y1 = y + (Math.random() * (H - 2*pad))
      gullAt (x1,y1,W1,color)
    }
  }
  
  function gullAt (x,y,W,color) {
    let canvas = document.getElementById("myCanvas")
    let ctx = canvas.getContext("2d")
    let H = W, cpx, cpy, points = []
    let colors = shuffle(getCurrentPalette(true,13))
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
    ctx.strokeStyle = color
    ctx.lineCap = "square"
    ctx.lineJoin = "bevel"
    let r = Math.random()
    if (r < 0.333) {
      ctx.beginPath()
      ctx.moveTo(x+2*W/24, y+18*H/24)
      cpx = x+4*W/24
      cpy = y+11*H/24
      ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+11*H/24)
      cpx = x+12*W/24
      cpy = y+11*H/24
      ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+14*H/24)
      cpx = x+13*W/24
      cpy = y+8*H/24
      ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+7*H/24)
      cpx = x+21*W/24
      cpy = y+6*H/24
      ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+8*H/24)
      ctx.stroke()
    } else 
    if (r < 0.667) {
      ctx.beginPath()
      ctx.moveTo(x+22*W/24, y+18*H/24)
      cpx = x+20*W/24
      cpy = y+11*H/24
      ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+11*H/24)
      cpx = x+14*W/24
      cpy = y+11*H/24
      ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+14*H/24)
      cpx = x+13*W/24
      cpy = y+8*H/24
      ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+7*H/24)
      cpx = x+6*W/24
      cpy = y+6*H/24
      ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+8*H/24)
      ctx.stroke()
    } else {
      ctx.beginPath()
      ctx.moveTo(x+22*W/24, y+9*H/24)
      cpx = x+19*W/24
      cpy = y+11*H/24
      ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+11*H/24)
      cpx = x+12*W/24
      cpy = y+11*H/24
      ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+14*H/24)
      cpx = x+12*W/24
      cpy = y+11*H/24
      ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+11*H/24)
      cpx = x+5*W/24
      cpy = y+11*H/24
      ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+9*H/24)
      ctx.stroke()
    }
  }
  
  function antsAt (x,y,W,color) {
    let canvas = document.getElementById("myCanvas")
    let ctx = canvas.getContext("2d")
    let H = W, cpx, cpy, points = []
    ctx.strokeStyle = color
    ctx.lineCap = "square"
    ctx.lineJoin = "bevel"
    let i = 0,x1,y1,W1=W/8
    let pad = 2*W/24
    for (; i < 19; i++) {
      x1 = x + (Math.random() * (W - 2*pad))
      y1 = y + (Math.random() * (H - 2*pad))
      antAt (x1,y1,W1,color)
    }
  }
  
function evidenceAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  //1
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+12*H/24)
  ctx.lineTo(x+6*W/24, y+1*H/24)
  ctx.lineTo(x+10*W/24, y+13*H/24)
  ctx.lineTo(x+20*W/24, y+9*H/24)
  ctx.lineTo(x+16*W/24, y+1*H/24)
  ctx.lineTo(x+6*W/24, y+1*H/24)
  ctx.stroke()
  //7
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+1*H/24)
  ctx.lineTo(x+20*W/24, y+9*H/24)
  ctx.lineTo(x+10*W/24, y+13*H/24)
  ctx.stroke()
  //2
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+12*H/24)
  ctx.lineTo(x+9*W/24, y+10*H/24)
  ctx.stroke()
  //3
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+16*H/24)
  ctx.lineTo(x+15*W/24, y+18*H/24)
  cpx = x+20*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+17*H/24)
  cpx = x+22*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+14*H/24)
  cpx = x+20*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+16*H/24)
  ctx.stroke()
  //4
  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+18*H/24)
  cpx = x+16*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+20*H/24)
  cpx = x+8*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+20*H/24)
  ctx.stroke()
  //5
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+20*H/24)
  cpx = x+14*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+16*H/24)
  ctx.stroke()
  //2 2
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+5*H/24)
  cpx = x+9*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+2*H/24)
  cpx = x+15*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+4*H/24)
  cpx = x+15*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+10*H/24)
  cpx = x+17*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+8*H/24)
  ctx.stroke()
}
  
function antAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/75
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let r = 2.8 * W/24
  if (Math.random() > 0.5) {
    ctx.beginPath()
    ctx.arc(x+12*W/24, y+12*H/24,r,0,Math.PI*2)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.arc(x+16*W/24, y+16*H/24,r,0,Math.PI*2)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.arc(x+8*W/24, y+8*H/24,r,0,Math.PI*2)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+12*W/24, y+9*H/24)
    ctx.lineTo(x+12*W/24, y+6*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+12*W/24, y+15*H/24)
    ctx.lineTo(x+12*W/24, y+18*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+15*W/24, y+12*H/24)
    ctx.lineTo(x+18*W/24, y+12*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+9*W/24, y+12*H/24)
    ctx.lineTo(x+6*W/24, y+12*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+10*W/24, y+14*H/24)
    ctx.lineTo(x+8*W/24, y+16*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+14*W/24, y+10*H/24)
    ctx.lineTo(x+16*W/24, y+8*H/24)
    ctx.stroke()
  } else {
    ctx.beginPath()
    ctx.arc(x+12*W/24, y+12*H/24,r,0,Math.PI*2)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.arc(x+16*W/24, y+8*H/24,r,0,Math.PI*2)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.arc(x+8*W/24, y+16*H/24,r,0,Math.PI*2)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+12*W/24, y+9*H/24)
    ctx.lineTo(x+12*W/24, y+6*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+12*W/24, y+15*H/24)
    ctx.lineTo(x+12*W/24, y+18*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+9*W/24, y+12*H/24)
    ctx.lineTo(x+6*W/24, y+12*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+15*W/24, y+12*H/24)
    ctx.lineTo(x+18*W/24, y+12*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+10*W/24, y+10*H/24)
    ctx.lineTo(x+8*W/24, y+8*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+14*W/24, y+14*H/24)
    ctx.lineTo(x+16*W/24, y+16*H/24)
    ctx.stroke()
  }
}
  
  function aiAt (x,y,W,color) {
    let canvas = document.getElementById("myCanvas")
    let ctx = canvas.getContext("2d")
    let H = W, cpx, cpy, points = []
    let colors = shuffle(getCurrentPalette(true,13))
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
    ctx.strokeStyle = color
    ctx.lineCap = "square"
    ctx.lineJoin = "bevel"
  
    ctx.beginPath()
    ctx.moveTo(x+3*W/24, y+5*H/24)
    cpx = x+3*W/24
    cpy = y+2*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+2*H/24)
    cpx = x+9*W/24
    cpy = y+2*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+4*H/24)
    cpx = x+9*W/24
    cpy = y+5*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+5*H/24)
    cpx = x+6*W/24
    cpy = y+6*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+5*H/24)
    cpx = x+5*W/24
    cpy = y+6*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+6*H/24)
    cpx = x+3*W/24
    cpy = y+6*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+5*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+15*W/24, y+5*H/24)
    cpx = x+15*W/24
    cpy = y+3*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+3*H/24)
    cpx = x+21*W/24
    cpy = y+3*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+6*H/24)
    cpx = x+21*W/24
    cpy = y+7*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+7*H/24)
    cpx = x+19*W/24
    cpy = y+7*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+6*H/24)
    cpx = x+18*W/24
    cpy = y+7*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+6*H/24)
    cpx = x+15*W/24
    cpy = y+6*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+5*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+2*W/24, y+11*H/24)
    cpx = x+2*W/24
    cpy = y+9*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+9*H/24)
    cpx = x+8*W/24
    cpy = y+9*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+12*H/24)
    cpx = x+8*W/24
    cpy = y+13*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+13*H/24)
    cpx = x+6*W/24
    cpy = y+13*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+12*H/24)
    cpx = x+5*W/24
    cpy = y+13*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+12*H/24)
    cpx = x+2*W/24
    cpy = y+12*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+11*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+11*W/24, y+10*H/24)
    cpx = x+11*W/24
    cpy = y+8*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+8*H/24)
    cpx = x+17*W/24
    cpy = y+8*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+11*H/24)
    cpx = x+17*W/24
    cpy = y+12*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+12*H/24)
    cpx = x+15*W/24
    cpy = y+12*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+11*H/24)
    cpx = x+14*W/24
    cpy = y+12*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+11*H/24)
    cpx = x+11*W/24
    cpy = y+11*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+10*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+16*W/24, y+17*H/24)
    cpx = x+16*W/24
    cpy = y+14*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+14*H/24)
    cpx = x+22*W/24
    cpy = y+14*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+16*H/24)
    cpx = x+22*W/24
    cpy = y+17*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+17*H/24)
    cpx = x+19*W/24
    cpy = y+18*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+17*H/24)
    cpx = x+18*W/24
    cpy = y+18*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+18*H/24)
    cpx = x+16*W/24
    cpy = y+18*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+17*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+2*W/24, y+21*H/24)
    cpx = x+2*W/24
    cpy = y+18*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+18*H/24)
    cpx = x+8*W/24
    cpy = y+18*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+20*H/24)
    cpx = x+8*W/24
    cpy = y+21*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+21*H/24)
    cpx = x+5*W/24
    cpy = y+22*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+21*H/24)
    cpx = x+4*W/24
    cpy = y+22*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+22*H/24)
    cpx = x+2*W/24
    cpy = y+22*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+21*H/24)
    ctx.stroke()
    
    ctx.beginPath()
    ctx.moveTo(x+8*W/24, y+16*H/24)
    cpx = x+8*W/24
    cpy = y+14*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+14*H/24)
    cpx = x+14*W/24
    cpy = y+14*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+17*H/24)
    cpx = x+14*W/24
    cpy = y+18*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+18*H/24)
    cpx = x+12*W/24
    cpy = y+18*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+17*H/24)
    cpx = x+11*W/24
    cpy = y+18*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+17*H/24)
    cpx = x+8*W/24
    cpy = y+17*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+16*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+12*W/24, y+21*H/24)
    cpx = x+12*W/24
    cpy = y+19*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+19*H/24)
    cpx = x+18*W/24
    cpy = y+19*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+22*H/24)
    cpx = x+18*W/24
    cpy = y+23*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+23*H/24)
    cpx = x+16*W/24
    cpy = y+23*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+22*H/24)
    cpx = x+15*W/24
    cpy = y+23*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+22*H/24)
    cpx = x+12*W/24
    cpy = y+22*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+21*H/24)
    ctx.stroke()
  
    ctx.setLineDash([4,8])
    
    ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+19*H/24)
  ctx.lineTo(x+15*W/24, y+20*H/24)
  ctx.lineTo(x+19*W/24, y+15*H/24)
  ctx.lineTo(x+18*W/24, y+4*H/24)
  ctx.lineTo(x+6*W/24, y+3*H/24)
  ctx.lineTo(x+5*W/24, y+10*H/24)
  ctx.lineTo(x+5*W/24, y+19*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+19*H/24)
  ctx.lineTo(x+11*W/24, y+15*H/24)
  ctx.lineTo(x+15*W/24, y+20*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+19*W/24, y+15*H/24)
  ctx.lineTo(x+11*W/24, y+15*H/24)
  ctx.lineTo(x+14*W/24, y+9*H/24)
  ctx.lineTo(x+19*W/24, y+15*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+4*H/24)
  ctx.lineTo(x+14*W/24, y+9*H/24)
  ctx.lineTo(x+11*W/24, y+7*H/24)
  ctx.lineTo(x+18*W/24, y+4*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+10*H/24)
  ctx.lineTo(x+11*W/24, y+7*H/24)
  ctx.lineTo(x+6*W/24, y+3*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+10*H/24)
  ctx.lineTo(x+11*W/24, y+15*H/24)
  ctx.stroke()
    ctx.setLineDash([])
  }
  
  function toy_drumAt (x,y,W,color) {
    let canvas = document.getElementById("myCanvas")
    let ctx = canvas.getContext("2d")
    let H = W, cpx, cpy, points = []
    let colors = shuffle(getCurrentPalette(true,13))
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
    ctx.strokeStyle = color
    ctx.lineCap = "square"
    ctx.lineJoin = "bevel"
  
    ctx.beginPath()
    ctx.moveTo(x+12*W/24, y+3*H/24)
    cpx = x+4*W/24
    cpy = y+3*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+8*H/24)
    cpx = x+4*W/24
    cpy = y+14*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+14*H/24)
    cpx = x+20*W/24
    cpy = y+14*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+8*H/24)
    cpx = x+20*W/24
    cpy = y+3*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+3*H/24)
    ctx.stroke()
  //right top
    ctx.beginPath()
    ctx.moveTo(x+12*W/24, y+4*H/24)
    cpx = x+19*W/24
    cpy = y+4*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+8*H/24)
    cpx = x+19*W/24
    cpy = y+13*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+13*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+12*W/24, y+4*H/24)
    cpx = x+5*W/24
    cpy = y+4*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+8*H/24)
    cpx = x+5*W/24
    cpy = y+13*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+13*H/24)
    ctx.stroke()
  
   // bottom
    ctx.beginPath()
    ctx.moveTo(x+4*W/24, y+16*H/24)
    cpx = x+4*W/24
    cpy = y+22*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+22*H/24)
    cpx = x+20*W/24
    cpy = y+22*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+14*H/24)
    ctx.lineTo(x+20*W/24, y+8*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+4*W/24, y+9*H/24)
    ctx.lineTo(x+4*W/24, y+16*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+6*W/24, y+13*H/24)
    ctx.lineTo(x+6*W/24, y+20*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+9*W/24, y+14*H/24)
    ctx.lineTo(x+9*W/24, y+21.5*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+12*W/24, y+14*H/24)
    ctx.lineTo(x+12*W/24, y+22*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+15*W/24, y+14*H/24)
    ctx.lineTo(x+15*W/24, y+21.5*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+18*W/24, y+13*H/24)
    ctx.lineTo(x+18*W/24, y+20*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+17*W/24, y+12*H/24)
    cpx = x+4*W/24
    cpy = y+3*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+3*H/24)
    cpx = x+4*W/24
    cpy = y+2*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+3*H/24)
    cpx = x+17*W/24
    cpy = y+12*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+12*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+7*W/24, y+12*H/24)
    cpx = x+19*W/24
    cpy = y+3*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+3*H/24)
    cpx = x+20*W/24
    cpy = y+2*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+3*H/24)
    cpx = x+7*W/24
    cpy = y+12*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+12*H/24)
    ctx.stroke()
  }
  
  function walk_it_backAt (x,y,W,color) {
    let canvas = document.getElementById("myCanvas")
    let ctx = canvas.getContext("2d")
    let H = W, cpx, cpy, poinats = []
    let colors = shuffle(getCurrentPalette(true,13))
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
    ctx.strokeStyle = color
    ctx.lineCap = "square"
    ctx.lineJoin = "bevel"
  
    ctx.beginPath()
    ctx.moveTo(x+9*W/24, y+20*H/24)
    ctx.lineTo(x+8*W/24, y+20*H/24)
    ctx.lineTo(x+4*W/24, y+19*H/24)
    cpx = x+4*W/24
    cpy = y+18*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+18*H/24)
    cpx = x+7*W/24
    cpy = y+18*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+18*H/24)
    ctx.lineTo(x+7*W/24, y+12*H/24)
    ctx.lineTo(x+8*W/24, y+4*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+9*W/24, y+20*H/24)
    ctx.lineTo(x+9*W/24, y+18*H/24)
    ctx.lineTo(x+10*W/24, y+12*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+14*W/24, y+20*H/24)
    ctx.lineTo(x+12*W/24, y+20*H/24)
    cpx = x+12*W/24
    cpy = y+19*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+19*H/24)
    ctx.lineTo(x+15*W/24, y+18*H/24)
    ctx.lineTo(x+13*W/24, y+12*H/24)
    ctx.lineTo(x+13*W/24, y+5*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+10*W/24, y+12*H/24)
    ctx.lineTo(x+12*W/24, y+6*H/24)
    ctx.lineTo(x+13*W/24, y+5*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+15*W/24, y+20*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+14*W/24, y+20*H/24)
    ctx.lineTo(x+18*W/24, y+19*H/24)
    ctx.lineTo(x+17*W/24, y+17*H/24)
    ctx.lineTo(x+16*W/24, y+12*H/24)
    ctx.lineTo(x+17*W/24, y+5*H/24)
    ctx.lineTo(x+17*W/24, y+4*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+18*W/24, y+11*H/24)
    ctx.lineTo(x+20*W/24, y+11*H/24)
    ctx.lineTo(x+20*W/24, y+9*H/24)
    ctx.lineTo(x+22*W/24, y+12*H/24)
    ctx.lineTo(x+20*W/24, y+15*H/24)
    ctx.lineTo(x+20*W/24, y+13*H/24)
    ctx.lineTo(x+18*W/24, y+13*H/24)
    ctx.lineTo(x+18*W/24, y+11*H/24)
    ctx.stroke()
  }
  
  
  function islandAt (x,y,W,color) {
    let canvas = document.getElementById("myCanvas")
    let ctx = canvas.getContext("2d")
    let H = W, cpx, cpy, points = []
    let colors = shuffle(getCurrentPalette(true,13))
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
    ctx.strokeStyle = color
    ctx.lineCap = "square"
    ctx.lineJoin = "bevel"
  
    ctx.beginPath()
    ctx.moveTo(x+10*W/24, y+20*H/24)
    cpx = x+18*W/24
    cpy = y+20*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+10*H/24)
    cpx = x+18*W/24
    cpy = y+4*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+4*H/24)
    cpx = x+10*W/24
    cpy = y+4*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+10*H/24)
    cpx = x+10*W/24
    cpy = y+14*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+14*H/24)
    cpx = x+4*W/24
    cpy = y+14*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+17*H/24)
    cpx = x+4*W/24
    cpy = y+20*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+20*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+2*W/24, y+4*H/24)
    cpx = x+4*W/24
    cpy = y+4*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+2*H/24)
    cpx = x+4*W/24
    cpy = y+4*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+4*H/24)
    cpx = x+8*W/24
    cpy = y+4*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+2*H/24)
    cpx = x+8*W/24
    cpy = y+4*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+4*H/24)
    cpx = x+12*W/24
    cpy = y+4*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+2*H/24)
    cpx = x+12*W/24
    cpy = y+4*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+4*H/24)
    cpx = x+16*W/24
    cpy = y+4*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+2*H/24)
    cpx = x+16*W/24
    cpy = y+4*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+4*H/24)
    cpx = x+20*W/24
    cpy = y+4*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+2*H/24)
    cpx = x+20*W/24
    cpy = y+4*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+4*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+2*W/24, y+7*H/24)
    cpx = x+4*W/24
    cpy = y+7*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+5*H/24)
    cpx = x+4*W/24
    cpy = y+7*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+7*H/24)
    cpx = x+8*W/24
    cpy = y+7*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+5*H/24)
    cpx = x+8*W/24
    cpy = y+7*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+7*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+18*W/24, y+7*H/24)
    cpx = x+20*W/24
    cpy = y+7*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+5*H/24)
    cpx = x+20*W/24
    cpy = y+7*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+7*H/24)
    ctx.stroke()
    
    ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+13*H/24)
  cpx = x+4*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+11*H/24)
  cpx = x+4*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+13*H/24)
  cpx = x+8*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+11*H/24)
  cpx = x+8*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9.3*W/24, y+12.7*H/24)
  ctx.stroke()
    
    ctx.beginPath()
    ctx.moveTo(x+2*W/24, y+10*H/24)
    cpx = x+4*W/24
    cpy = y+10*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+8*H/24)
    cpx = x+4*W/24
    cpy = y+10*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+10*H/24)
    cpx = x+8*W/24
    cpy = y+10*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+8*H/24)
    cpx = x+8*W/24
    cpy = y+10*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+10*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+18*W/24, y+10*H/24)
    cpx = x+20*W/24
    cpy = y+10*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+8*H/24)
    cpx = x+20*W/24
    cpy = y+10*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+10*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+2*W/24, y+13*H/24)
    cpx = x+4*W/24
    cpy = y+13*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+11*H/24)
    cpx = x+4*W/24
    cpy = y+13*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+13*H/24)
    cpx = x+8*W/24
    cpy = y+13*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+11*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+18*W/24, y+13*H/24)
    cpx = x+20*W/24
    cpy = y+13*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+11*H/24)
    cpx = x+20*W/24
    cpy = y+13*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+13*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+2*W/24, y+16*H/24)
    cpx = x+4*W/24
    cpy = y+16*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+14*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+18*W/24, y+16*H/24)
    cpx = x+20*W/24
    cpy = y+16*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+14*H/24)
    cpx = x+20*W/24
    cpy = y+16*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+16*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+2*W/24, y+19*H/24)
    cpx = x+4*W/24
    cpy = y+19*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+17*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+22*W/24, y+19*H/24)
    cpx = x+20*W/24
    cpy = y+19*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+17*H/24)
    cpx = x+20*W/24
    cpy = y+19*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+19*H/24)
    cpx = x+16.3*W/24
    cpy = y+19.1*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+16.2*W/24, y+17.3*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+2*W/24, y+22*H/24)
    cpx = x+4*W/24
    cpy = y+22*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+20*H/24)
    cpx = x+4*W/24
    cpy = y+22*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+22*H/24)
    cpx = x+8*W/24
    cpy = y+22*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+20*H/24)
    cpx = x+8*W/24
    cpy = y+22*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+22*H/24)
    cpx = x+12*W/24
    cpy = y+22*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+20*H/24)
    cpx = x+12*W/24
    cpy = y+22*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+22*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+14*W/24, y+22*H/24)
    cpx = x+16*W/24
    cpy = y+22*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+20*H/24)
    cpx = x+16*W/24
    cpy = y+22*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+22*H/24)
    cpx = x+20*W/24
    cpy = y+22*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+20*H/24)
    cpx = x+20*W/24
    cpy = y+22*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+22*H/24)
    ctx.stroke()
  }
  
  function thread_the_needleAt (x,y,W,color) {
    let canvas = document.getElementById("myCanvas")
    let ctx = canvas.getContext("2d")
    let H = W, cpx, cpy, points = []
    let colors = shuffle(getCurrentPalette(true,13))
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
    ctx.strokeStyle = color
    ctx.lineCap = "square"
    ctx.lineJoin = "bevel"
  
    ctx.beginPath()
    ctx.moveTo(x+13*W/24, y+24*H/24)
    cpx = x+13*W/24
    cpy = y+20*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+18*H/24)
    cpx = x+18*W/24
    cpy = y+15*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+10*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+18*W/24, y+8*H/24)
    cpx = x+18*W/24
    cpy = y+2*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+2*H/24)
    cpx = x+6*W/24
    cpy = y+2*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+9*H/24)
    cpx = x+6*W/24
    cpy = y+15*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+18*H/24)
    cpx = x+11*W/24
    cpy = y+20*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+24*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+22*W/24, y+7*H/24)
    cpx = x+20*W/24
    cpy = y+8*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+8*H/24)
    cpx = x+12*W/24
    cpy = y+8*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+12*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+22*W/24, y+9*H/24)
    cpx = x+20*W/24
    cpy = y+10*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+10*H/24)
    cpx = x+12*W/24
    cpy = y+10*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+14*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+16*W/24, y+10*H/24)
    cpx = x+16*W/24
    cpy = y+14*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+16*H/24)
    cpx = x+8*W/24
    cpy = y+14*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+9*H/24)
    cpx = x+8*W/24
    cpy = y+4*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+4*H/24)
    cpx = x+16*W/24
    cpy = y+4*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+8*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+7*W/24, y+15*H/24)
    cpx = x+6*W/24
    cpy = y+17*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+19*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+8*W/24, y+17*H/24)
    cpx = x+7*W/24
    cpy = y+19*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+21*H/24)
    ctx.stroke()
  }
  
  function stone_axeAt (x,y,W,color) {
    let canvas = document.getElementById("myCanvas")
    let ctx = canvas.getContext("2d")
    let H = W, cpx, cpy, points = []
    let colors = shuffle(getCurrentPalette(true,13))
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
    ctx.strokeStyle = color
    ctx.lineCap = "square"
    ctx.lineJoin = "bevel"
  
    ctx.beginPath()
    ctx.moveTo(x+4*W/24, y+20*H/24)
    cpx = x+8*W/24
    cpy = y+20*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+22*H/24)
    cpx = x+15*W/24
    cpy = y+20*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+20*H/24)
    cpx = x+19*W/24
    cpy = y+18*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+16*H/24)
    cpx = x+21*W/24
    cpy = y+15*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+14*H/24)
    cpx = x+19*W/24
    cpy = y+9*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+9*H/24)
    cpx = x+18*W/24
    cpy = y+7*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+6*H/24)
    cpx = x+15*W/24
    cpy = y+6*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+4*H/24)
    cpx = x+13*W/24
    cpy = y+2*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+3*H/24)
    cpx = x+10*W/24
    cpy = y+3*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+4*H/24)
    cpx = x+5*W/24
    cpy = y+4*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+8*H/24)
    cpx = x+3*W/24
    cpy = y+9*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+12*H/24)
    cpx = x+4*W/24
    cpy = y+14*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+17*H/24)
    cpx = x+3*W/24
    cpy = y+19*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+20*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+5*W/24, y+19*H/24)
    cpx = x+9*W/24
    cpy = y+16*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+16*H/24)
    cpx = x+11*W/24
    cpy = y+19*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+21*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+10*W/24, y+16*H/24)
    cpx = x+12*W/24
    cpy = y+15*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+15*H/24)
    cpx = x+11*W/24
    cpy = y+10*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+7*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+12*W/24, y+15*H/24)
    cpx = x+15*W/24
    cpy = y+16*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+15*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+11*W/24, y+19*H/24)
    cpx = x+14*W/24
    cpy = y+18*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+17*H/24)
    cpx = x+19*W/24
    cpy = y+16*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+16*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+4*W/24, y+17*H/24)
    cpx = x+7*W/24
    cpy = y+16*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+14*H/24)
    cpx = x+6*W/24
    cpy = y+12*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+12*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+6*W/24, y+8*H/24)
    cpx = x+8*W/24
    cpy = y+8*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+7*H/24)
    cpx = x+6*W/24
    cpy = y+5*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+5*H/24)
    cpx = x+8*W/24
    cpy = y+7*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+7*H/24)
    cpx = x+9*W/24
    cpy = y+4*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+4*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+16*W/24, y+6*H/24)
    cpx = x+15*W/24
    cpy = y+7*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+8*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+19*W/24, y+12*H/24)
    cpx = x+17*W/24
    cpy = y+13*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+14*H/24)
    cpx = x+19*W/24
    cpy = y+14*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+14*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+4*W/24, y+20*H/24)
    cpx = x+6*W/24
    cpy = y+23*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+22*H/24)
    cpx = x+9*W/24
    cpy = y+22*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+22*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+10*W/24, y+22*H/24)
    cpx = x+13*W/24
    cpy = y+23*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+20*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+12*W/24, y+3*H/24)
    cpx = x+12*W/24
    cpy = y+4*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+4*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+4*W/24, y+11*H/24)
    cpx = x+6*W/24
    cpy = y+11*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+10*H/24)
    cpx = x+7*W/24
    cpy = y+9*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+8*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+18*W/24, y+8*H/24)
    cpx = x+16*W/24
    cpy = y+9*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+11*H/24)
    cpx = x+17*W/24
    cpy = y+12*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+11*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+18*W/24, y+17*H/24)
    cpx = x+19*W/24
    cpy = y+18*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+18*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+9*W/24, y+10*H/24)
    cpx = x+10*W/24
    cpy = y+6*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+5*H/24)
    cpx = x+11*W/24
    cpy = y+6*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+7*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+4*W/24, y+19*H/24)
    ctx.lineTo(x+5*W/24, y+18*H/24)
    ctx.lineTo(x+5*W/24, y+17*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+20*W/24, y+14*H/24)
    ctx.lineTo(x+19*W/24, y+15*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+7*W/24, y+22*H/24)
    ctx.lineTo(x+7*W/24, y+21*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+14*W/24, y+4*H/24)
    cpx = x+13*W/24
    cpy = y+5*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+6*H/24)
    cpx = x+14*W/24
    cpy = y+7*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+6*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+9*W/24, y+12*H/24)
    ctx.lineTo(x+10*W/24, y+14*H/24)
    ctx.stroke()
  }
  
  function indicate_by_pointingAt (x,y,W,color) {
    let canvas = document.getElementById("myCanvas")
    let ctx = canvas.getContext("2d")
    let H = W, cpx, cpy, points = []
    let colors = shuffle(getCurrentPalette(true,13))
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
    ctx.strokeStyle = color
    ctx.lineCap = "square"
    ctx.lineJoin = "bevel"
  
    ctx.beginPath()
    ctx.moveTo(x+18*W/24, y+22*H/24)
    cpx = x+19*W/24
    cpy = y+21*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+19*H/24)
    cpx = x+19*W/24
    cpy = y+16*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+16*H/24)
    cpx = x+19*W/24
    cpy = y+15*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+15*H/24)
    cpx = x+20*W/24
    cpy = y+14*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+14*H/24)
    cpx = x+17*W/24
    cpy = y+14*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+16*H/24)
    cpx = x+17*W/24
    cpy = y+10*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+10*H/24)
    cpx = x+17*W/24
    cpy = y+9*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+9*H/24)
    cpx = x+15*W/24
    cpy = y+9*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+10*H/24)
    cpx = x+15*W/24
    cpy = y+15*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+15*H/24)
    cpx = x+15*W/24
    cpy = y+14*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+14*H/24)
    cpx = x+13*W/24
    cpy = y+14*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+15*H/24)
    cpx = x+13*W/24
    cpy = y+16*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+16*H/24)
    cpx = x+13*W/24
    cpy = y+15*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+15*H/24)
    cpx = x+11*W/24
    cpy = y+15*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+16*H/24)
    cpx = x+11*W/24
    cpy = y+17*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+17*H/24)
    cpx = x+11*W/24
    cpy = y+16*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+16*H/24)
    cpx = x+9*W/24
    cpy = y+16*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+17*H/24)
    cpx = x+9*W/24
    cpy = y+20*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+20*H/24)
    cpx = x+9*W/24
    cpy = y+22*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+22*H/24)
    ctx.stroke()
    ctx.beginPath()
    ctx.moveTo(x+2*W/24, y+4*H/24)
    ctx.lineTo(x+2*W/24, y+8*H/24)
    ctx.lineTo(x+2*W/24, y+6*H/24)
    ctx.lineTo(x+22*W/24, y+6*H/24)
    ctx.lineTo(x+22*W/24, y+4*H/24)
    ctx.lineTo(x+22*W/24, y+8*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+18*W/24, y+4*H/24)
    ctx.lineTo(x+18*W/24, y+8*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+14*W/24, y+4*H/24)
    ctx.lineTo(x+14*W/24, y+8*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+10*W/24, y+4*H/24)
    ctx.lineTo(x+10*W/24, y+8*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+6*W/24, y+4*H/24)
    ctx.lineTo(x+6*W/24, y+8*H/24)
    ctx.stroke()
  }
  
function plastic_owlAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+22*H/24)
  cpx = x+17*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+20*H/24)
  cpx = x+17*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+16*H/24)
  cpx = x+17*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+9*H/24)
  cpx = x+18*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+6*H/24)
  cpx = x+17*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+4*H/24)
  cpx = x+17*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+3*H/24)
  cpx = x+17*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+1*H/24)
  cpx = x+15*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+3*H/24)
  cpx = x+12*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+3*H/24)
  cpx = x+9*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+1*H/24)
  cpx = x+7*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+3*H/24)
  cpx = x+7*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+4*H/24)
  cpx = x+7*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+6*H/24)
  cpx = x+6*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+9*H/24)
  cpx = x+7*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+16*H/24)
  cpx = x+7*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+20*H/24)
  cpx = x+7*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+22*H/24)
  ctx.stroke()
  
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+7*H/24)
  cpx = x+15*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+13*H/24)
  ctx.stroke()
  
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+7*H/24)
  cpx = x+9*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+13*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+6*H/24)
  cpx = x+9*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+5*H/24)
  cpx = x+9*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+4*H/24)
  cpx = x+11*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+5*H/24)
  cpx = x+11*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+6*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+6*H/24)
  cpx = x+13*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+5*H/24)
  cpx = x+13*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+4*H/24)
  cpx = x+15*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+5*H/24)
  cpx = x+15*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+6*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+5*H/24)
  cpx = x+11*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+8*H/24)
  cpx = x+13*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+5*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+6*H/24)
  cpx = x+10*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+7*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+6*H/24)
  cpx = x+14*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+7*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+20*H/24)
  ctx.lineTo(x+10*W/24, y+17*H/24)
  ctx.lineTo(x+11*W/24, y+20*H/24)
  ctx.lineTo(x+9*W/24, y+18*H/24)
  ctx.lineTo(x+8*W/24, y+20*H/24)
  ctx.lineTo(x+8*W/24, y+17*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+17*H/24)
  ctx.lineTo(x+16*W/24, y+20*H/24)
  ctx.lineTo(x+15*W/24, y+18*H/24)
  ctx.lineTo(x+13*W/24, y+20*H/24)
  ctx.lineTo(x+14*W/24, y+17*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+3*H/24)
  ctx.lineTo(x+10*W/24, y+4*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+4*H/24)
  ctx.lineTo(x+15*W/24, y+3*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+16*H/24)
  ctx.lineTo(x+11*W/24, y+17*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+16*H/24)
  ctx.lineTo(x+12*W/24, y+17*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+16*H/24)
  ctx.lineTo(x+13*W/24, y+17*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+16*H/24)
  ctx.lineTo(x+10*W/24, y+17*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+16*H/24)
  ctx.lineTo(x+14*W/24, y+17*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.arc(x+10*W/24, y+5*H/24,W/48, 0, Math.PI*2)
  ctx.stroke()

  ctx.beginPath()
  ctx.arc(x+14*W/24, y+5*H/24,W/48, 0, Math.PI*2)
  ctx.stroke()
}

function furniture_at_nightAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  let saved =  ctx.fillStyle
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  let col2 = color//"#000000"
  col2 = "rgba("+hexToR(col2)+", "+hexToG(col2)+", "+hexToB(col2)+", 0.0)";// transparent
  let grad = ctx.createLinearGradient(x,y,x,y+H)
  grad.addColorStop(0,col2);
  grad.addColorStop(1, color);
  ctx.fillStyle = grad
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+2*H/24)
  ctx.lineTo(x+6*W/24, y+22*H/24)
  ctx.lineTo(x+7*W/24, y+22*H/24)
  ctx.lineTo(x+7*W/24, y+21*H/24)
  ctx.lineTo(x+17*W/24, y+21*H/24)
  ctx.lineTo(x+17*W/24, y+22*H/24)
  ctx.lineTo(x+18*W/24, y+22*H/24)
  ctx.lineTo(x+18*W/24, y+2*H/24)
  ctx.lineTo(x+6*W/24, y+2*H/24)
  ctx.globalAlpha /= 2
  ctx.fill()
  ctx.globalAlpha *= 2

  ctx.setLineDash([1,20])
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+16*H/24)
  ctx.lineTo(x+6*W/24, y+22*H/24)
  ctx.lineTo(x+7*W/24, y+22*H/24)
  ctx.lineTo(x+7*W/24, y+21*H/24)
  ctx.lineTo(x+17*W/24, y+21*H/24)
  ctx.lineTo(x+17*W/24, y+22*H/24)
  ctx.lineTo(x+18*W/24, y+22*H/24)
  ctx.lineTo(x+18*W/24, y+21*H/24)
  ctx.stroke()
  
  ctx.setLineDash([2,15])
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+16*H/24)
  ctx.lineTo(x+6*W/24, y+10*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+21*H/24)
  ctx.lineTo(x+18*W/24, y+15*H/24)
  ctx.stroke()
  
  ctx.setLineDash([4,10])
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+10*H/24)
  ctx.lineTo(x+6*W/24, y+4*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+15*H/24)
  ctx.lineTo(x+18*W/24, y+8*H/24)
  ctx.stroke()
  
  ctx.setLineDash([])
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+4*H/24)
  ctx.lineTo(x+6*W/24, y+2*H/24)
  ctx.lineTo(x+18*W/24, y+2*H/24)
  ctx.lineTo(x+18*W/24, y+3*H/24)
  ctx.stroke()
  
  ctx.setLineDash([8,10])
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+8*H/24)
  ctx.lineTo(x+18*W/24, y+3*H/24)
  ctx.stroke()
  
  //draws
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+7*H/24)
  ctx.lineTo(x+7*W/24, y+3*H/24)
  ctx.lineTo(x+17*W/24, y+3*H/24)
  ctx.stroke()
  let r = W/48
  ctx.beginPath()
  ctx.arc(x+9*W/24, y+5*H/24,r,0,Math.PI*2)
  ctx.stroke()
  ctx.beginPath()
  ctx.arc(x+15*W/24, y+5*H/24,r,0,Math.PI*2)
  ctx.stroke()
  
  ctx.setLineDash([4,10])
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+11*H/24)
  ctx.lineTo(x+7*W/24, y+7*H/24)
  ctx.lineTo(x+17*W/24, y+7*H/24)
  ctx.lineTo(x+17*W/24, y+3*H/24)
  ctx.stroke()
  ctx.beginPath()
  ctx.arc(x+9*W/24, y+9*H/24,r,0,Math.PI*2)
  ctx.stroke()
  ctx.beginPath()
  ctx.arc(x+15*W/24, y+9*H/24,r,0,Math.PI*2)
  ctx.stroke()
  
  ctx.setLineDash([3,10])
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+15*H/24)
  ctx.lineTo(x+7*W/24, y+11*H/24)
  ctx.lineTo(x+17*W/24, y+11*H/24)
  ctx.lineTo(x+17*W/24, y+7*H/24)
  ctx.stroke()
  ctx.beginPath()
  ctx.arc(x+9*W/24, y+13*H/24,r,0,Math.PI*2)
  ctx.stroke()
  ctx.beginPath()
  ctx.arc(x+15*W/24, y+13*H/24,r,0,Math.PI*2)
  ctx.stroke()
  
  ctx.setLineDash([2,15])
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+20*H/24)
  ctx.lineTo(x+7*W/24, y+15*H/24)
  ctx.lineTo(x+17*W/24, y+15*H/24)
  ctx.lineTo(x+17*W/24, y+11*H/24)
  ctx.stroke()
  ctx.setLineDash([1,20])
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+20*H/24)
  ctx.lineTo(x+17*W/24, y+20*H/24)
  ctx.lineTo(x+17*W/24, y+15*H/24)
  ctx.stroke()
  ctx.beginPath()
  ctx.arc(x+9*W/24, y+17.5*H/24,r,0,Math.PI*2)
  ctx.stroke()
  ctx.beginPath()
  ctx.arc(x+15*W/24, y+17.5*H/24,r,0,Math.PI*2)
  ctx.stroke()
  ctx.setLineDash([])
  ctx.fillStyle = saved
}

  function cubicleAt (x,y,W,color) {
    let canvas = document.getElementById("myCanvas")
    let ctx = canvas.getContext("2d")
    let H = W, cpx, cpy, points = []
    let colors = shuffle(getCurrentPalette(true,13))
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
    ctx.strokeStyle = color
    ctx.lineCap = "square"
    ctx.lineJoin = "bevel"
  
    ctx.beginPath()
    ctx.moveTo(x+2*W/24, y+6*H/24)
    ctx.lineTo(x+8*W/24, y+12*H/24)
    ctx.lineTo(x+8*W/24, y+22*H/24)
    ctx.lineTo(x+2*W/24, y+16*H/24)
    ctx.lineTo(x+2*W/24, y+6*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+2*W/24, y+6*H/24)
    ctx.lineTo(x+16*W/24, y+6*H/24)
    ctx.lineTo(x+22*W/24, y+12*H/24)
    ctx.lineTo(x+14*W/24, y+12*H/24)
    ctx.lineTo(x+14*W/24, y+22*H/24)
    ctx.lineTo(x+22*W/24, y+22*H/24)
    ctx.lineTo(x+22*W/24, y+12*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+16*W/24, y+6*H/24)
    ctx.lineTo(x+16*W/24, y+10*H/24)
    ctx.lineTo(x+16*W/24, y+11*H/24)
    ctx.lineTo(x+17*W/24, y+12*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+16*W/24, y+11*H/24)
    ctx.lineTo(x+10*W/24, y+11*H/24)
    ctx.lineTo(x+9*W/24, y+11*H/24)
    ctx.lineTo(x+12*W/24, y+14*H/24)
    ctx.lineTo(x+14*W/24, y+14*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+8*W/24, y+16*H/24)
    ctx.lineTo(x+14*W/24, y+16*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+12*W/24, y+14*H/24)
    ctx.lineTo(x+12*W/24, y+20*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+9*W/24, y+11*H/24)
    ctx.lineTo(x+9*W/24, y+17*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+11*W/24, y+7*H/24)
    ctx.lineTo(x+11*W/24, y+9*H/24)
    ctx.lineTo(x+14*W/24, y+9*H/24)
    ctx.lineTo(x+14*W/24, y+7*H/24)
    ctx.lineTo(x+11*W/24, y+7*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+17*W/24, y+8*H/24)
    ctx.lineTo(x+17*W/24, y+10*H/24)
    ctx.lineTo(x+19*W/24, y+12*H/24)
    ctx.lineTo(x+19*W/24, y+10*H/24)
    ctx.lineTo(x+17*W/24, y+8*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+16*W/24, y+6*H/24)
    ctx.lineTo(x+22*W/24, y+6*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+12*W/24, y+2*H/24)
    ctx.lineTo(x+16*W/24, y+6*H/24)
    ctx.lineTo(x+12*W/24, y+2*H/24)
    ctx.lineTo(x+12*W/24, y+6*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+12*W/24, y+2*H/24)
    ctx.lineTo(x+6*W/24, y+2*H/24)
    ctx.lineTo(x+6*W/24, y+6*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+12*W/24, y+2*H/24)
    ctx.lineTo(x+18*W/24, y+2*H/24)
    ctx.lineTo(x+18*W/24, y+6*H/24)
    ctx.stroke()
    
    ctx.beginPath()
  ctx.moveTo(x+23*W/24, y+12*H/24)
  ctx.lineTo(x+22*W/24, y+12*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+23*W/24, y+22*H/24)
  ctx.lineTo(x+22*W/24, y+22*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+16*H/24)
  ctx.lineTo(x+1*W/24, y+15*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+6*H/24)
  ctx.lineTo(x+1*W/24, y+5*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+23*W/24, y+6*H/24)
  ctx.lineTo(x+22*W/24, y+6*H/24)
  ctx.stroke()
  }

function power_linesAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+2*H/24)
  ctx.lineTo(x+12*W/24, y+22*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+4*H/24)
  ctx.lineTo(x+15*W/24, y+4*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+8*H/24)
  ctx.lineTo(x+17*W/24, y+8*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+9*H/24)
  ctx.lineTo(x+7*W/24, y+10*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+5*H/24)
  ctx.lineTo(x+9*W/24, y+6*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+5*H/24)
  ctx.lineTo(x+15*W/24, y+6*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+9*H/24)
  ctx.lineTo(x+17*W/24, y+10*H/24)
  ctx.stroke()
  
  ctx.lineWidth *= 0.5
  
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+2*H/24)
  ctx.lineTo(x+9*W/24, y+6*H/24)
  ctx.lineTo(x+5*W/24, y+22*H/24)
  ctx.stroke()
  
  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+2*H/24)
  ctx.lineTo(x+7*W/24, y+10*H/24)
  ctx.lineTo(x+5*W/24, y+22*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+19*W/24, y+2*H/24)
  ctx.lineTo(x+15*W/24, y+6*H/24)
  ctx.lineTo(x+6*W/24, y+22*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+22*H/24)
  ctx.lineTo(x+17*W/24, y+10*H/24)
  ctx.lineTo(x+22*W/24, y+5*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+9*H/24)
  ctx.lineTo(x+7*W/24, y+8*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+9*H/24)
  ctx.lineTo(x+17*W/24, y+8*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+5*H/24)
  ctx.lineTo(x+15*W/24, y+4*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+5*H/24)
  ctx.lineTo(x+9*W/24, y+4*H/24)
  ctx.stroke()
}

function vinylAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  ctx.lineWidth *= 1.3
  let r = H/60
  ctx.beginPath()
  ctx.arc(x+12*W/24, y+12*H/24,r,0,2*Math.PI)
  ctx.stroke()
  let i = 0
  r *= 5
  for (; i < 7; i++) {
    r+= H/24
    ctx.beginPath()
    ctx.arc(x+12*W/24, y+12*H/24,r,0,2*Math.PI)
    ctx.stroke()
    if (i === 0)
      ctx.lineWidth /= 2
  }
  ctx.lineWidth = 1.3 * (1 + document.getElementById("featuresize").value/50)
  r+= H/24
  ctx.beginPath()
  ctx.arc(x+12*W/24, y+12*H/24,r,0,2*Math.PI)
  ctx.stroke()
}

function strokeorfill (ctx) {
  
  ctx.stroke()
  if (Math.random() > 0.5) {
    ctx.closePath()
    ctx.fill()
  }
}

function paperclipAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, angle = pet(360)
  //1
  ctx.beginPath()
  p = rotatePoint(x+9*W/24, y+16*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+9*W/24
  cpy = y+6*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+9*W/24, y+6*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+9*W/24
  cpy = y+2*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+13*W/24, y+2*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+16*W/24
  cpy = y+2*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+16*W/24, y+6*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+16*W/24
  cpy = y+20*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+16*W/24, y+20*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+16*W/24
  cpy = y+23*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+13*W/24, y+23*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+10*W/24
  cpy = y+23*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+10*W/24, y+20*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+10*W/24
  cpy = y+6*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+10*W/24, y+6*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+10*W/24
  cpy = y+3*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+13*W/24, y+3*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+15*W/24
  cpy = y+3*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+15*W/24, y+6*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+15*W/24
  cpy = y+14*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+15*W/24, y+14*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()
}

function serverAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, angle = 0

  //1
  ctx.beginPath()
  p = rotatePoint(x+3*W/24, y+8*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+3*W/24, y+16*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+20*W/24, y+16*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+20*W/24, y+8*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+3*W/24, y+8*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+6*W/24, y+4*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+23*W/24, y+4*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+20*W/24, y+8*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //2
  ctx.beginPath()
  p = rotatePoint(x+20*W/24, y+15*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+20*W/24, y+16*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+23*W/24, y+12*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+23*W/24, y+4*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+20*W/24, y+8*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //5
  ctx.beginPath()
  p = rotatePoint(x+6*W/24, y+7*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+9*W/24, y+7*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //6
  ctx.beginPath()
  p = rotatePoint(x+7*W/24, y+6*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+10*W/24, y+6*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //7
  ctx.beginPath()
  p = rotatePoint(x+8*W/24, y+5*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+11*W/24, y+5*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //8
  ctx.beginPath()
  p = rotatePoint(x+14*W/24, y+7*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+17*W/24, y+7*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //9
  ctx.beginPath()
  p = rotatePoint(x+15*W/24, y+6*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+18*W/24, y+6*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //10
  ctx.beginPath()
  p = rotatePoint(x+16*W/24, y+5*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+19*W/24, y+5*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //11
  ctx.beginPath()
  p = rotatePoint(x+5*W/24, y+9*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+5*W/24, y+13*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+9*W/24, y+13*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+9*W/24, y+9*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+5*W/24, y+9*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //12
  ctx.beginPath()
  p = rotatePoint(x+10*W/24, y+9*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+18*W/24, y+9*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //13
  ctx.beginPath()
  p = rotatePoint(x+10*W/24, y+11*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+18*W/24, y+11*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //14
  ctx.beginPath()
  p = rotatePoint(x+10*W/24, y+14*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+18*W/24, y+14*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //15
  ctx.beginPath()
  p = rotatePoint(x+5*W/24, y+15*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+18*W/24, y+15*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()
  //16
  ctx.beginPath()
  p = rotatePoint(x+10*W/24, y+10*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+18*W/24, y+10*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //17
  ctx.beginPath()
  p = rotatePoint(x+10*W/24, y+12*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+18*W/24, y+12*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //18
  ctx.beginPath()
  p = rotatePoint(x+10*W/24, y+13*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+18*W/24, y+13*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()


  ctx.lineWidth *= 3
  //3 handles
  ctx.beginPath()
  p = rotatePoint(x+4*W/24, y+9*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+2*W/24, y+11*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+2*W/24, y+17*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+4*W/24, y+15*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  //4
  ctx.beginPath()
  p = rotatePoint(x+19*W/24, y+9*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+17*W/24, y+11*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+17*W/24, y+17*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  p = rotatePoint(x+19*W/24, y+15*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

}

function pillAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+8*H/24)
  ctx.lineTo(x+7*W/24, y+12*H/24)
  ctx.lineTo(x+4*W/24, y+9*H/24)
  cpx = x+2*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+5*H/24)
  cpx = x+6*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+5*H/24)
  cpx = x+11*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+8*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+8*H/24)
  ctx.lineTo(x+17*W/24, y+12*H/24)
  ctx.lineTo(x+20*W/24, y+9*H/24)
  cpx = x+22*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+5*H/24)
  cpx = x+18*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+5*H/24)
  cpx = x+13*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+8*H/24)
  ctx.stroke()
  
  let r = W/64
  
  ctx.beginPath()
  ctx.arc(x+18*W/24, y+9*H/24,r,0,2*Math.PI)
  strokeorfill(ctx)

  ctx.beginPath()
  ctx.arc(x+14*W/24, y+16*H/24,r,0,2*Math.PI)
  strokeorfill(ctx)

  ctx.beginPath()
  ctx.arc(x+17*W/24, y+11*H/24,r,0,2*Math.PI)
  strokeorfill(ctx)

  ctx.beginPath()
  ctx.arc(x+15*W/24, y+12*H/24,r,0,2*Math.PI)
  strokeorfill(ctx)

  ctx.beginPath()
  ctx.arc(x+15*W/24, y+14*H/24,r,0,2*Math.PI)
  strokeorfill(ctx)

  ctx.beginPath()
  ctx.arc(x+16*W/24, y+17*H/24,r,0,2*Math.PI)
  strokeorfill(ctx)

  ctx.beginPath()
  ctx.arc(x+7*W/24, y+10*H/24,r,0,2*Math.PI)
  strokeorfill(ctx)

  ctx.beginPath()
  ctx.arc(x+12*W/24, y+21*H/24,r,0,2*Math.PI)
  strokeorfill(ctx)

  ctx.beginPath()
  ctx.arc(x+13*W/24, y+19*H/24,r,0,2*Math.PI)
  strokeorfill(ctx)

  ctx.beginPath()
  ctx.arc(x+11*W/24, y+18*H/24,r,0,2*Math.PI)
  strokeorfill(ctx)

  ctx.beginPath()
  ctx.arc(x+12*W/24, y+16*H/24,r,0,2*Math.PI)
  strokeorfill(ctx)

  ctx.beginPath()
  ctx.arc(x+8*W/24, y+12*H/24,r,0,2*Math.PI)
  strokeorfill(ctx)

  ctx.beginPath()
  ctx.arc(x+10*W/24, y+13*H/24,r,0,2*Math.PI)
  strokeorfill(ctx)

  ctx.beginPath()
  ctx.arc(x+10*W/24, y+16*H/24,r,0,2*Math.PI)
  strokeorfill(ctx)

  ctx.beginPath()
  ctx.arc(x+12*W/24, y+14*H/24,r,0,2*Math.PI)
  strokeorfill(ctx)

  ctx.beginPath()
  ctx.arc(x+8*W/24, y+14*H/24,r,0,2*Math.PI)
  strokeorfill(ctx)

  ctx.beginPath()
  ctx.arc(x+8*W/24, y+16*H/24,r,0,2*Math.PI)
  strokeorfill(ctx)

  ctx.beginPath()
  ctx.arc(x+9*W/24, y+18*H/24,r,0,2*Math.PI)
  strokeorfill(ctx)

  ctx.beginPath()
  ctx.arc(x+10*W/24, y+20*H/24,r,0,2*Math.PI)
  strokeorfill(ctx)

  ctx.beginPath()
  ctx.arc(x+9*W/24, y+22*H/24,r,0,2*Math.PI)
  strokeorfill(ctx)

  ctx.beginPath()
  ctx.arc(x+15*W/24, y+19*H/24,r,0,2*Math.PI)
  strokeorfill(ctx)

  ctx.beginPath()
  ctx.arc(x+13*W/24, y+13*H/24,r,0,2*Math.PI)
  strokeorfill(ctx)

  ctx.beginPath()
  ctx.arc(x+6*W/24, y+9*H/24,r,0,2*Math.PI)
  strokeorfill(ctx)

  ctx.beginPath()
  ctx.arc(x+14*W/24, y+22*H/24,r,0,2*Math.PI)
  strokeorfill(ctx)

  ctx.beginPath()
  ctx.arc(x+17*W/24, y+22*H/24,r,0,2*Math.PI)
  strokeorfill(ctx)

  ctx.beginPath()
  ctx.arc(x+14*W/24, y+18*H/24,r,0,2*Math.PI)
  strokeorfill(ctx)

  ctx.beginPath()
  ctx.arc(x+14*W/24, y+20*H/24,r,0,2*Math.PI)
  strokeorfill(ctx)

  ctx.beginPath()
  ctx.arc(x+13*W/24, y+15*H/24,r,0,2*Math.PI)
  strokeorfill(ctx)

  ctx.beginPath()
  ctx.arc(x+11*W/24, y+15*H/24,r,0,2*Math.PI)
  strokeorfill(ctx)

  ctx.beginPath()
  ctx.arc(x+5*W/24, y+21*H/24,r,0,2*Math.PI)
  strokeorfill(ctx)

  ctx.beginPath()
  ctx.arc(x+7*W/24, y+19*H/24,r,0,2*Math.PI)
  strokeorfill(ctx)

  ctx.beginPath()
  ctx.arc(x+19*W/24, y+20*H/24,r,0,2*Math.PI)
  strokeorfill(ctx)

  ctx.beginPath()
  ctx.arc(x+17*W/24, y+20*H/24,r,0,2*Math.PI)
  strokeorfill(ctx)
}

function compassAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+4*H/24)
  ctx.lineTo(x+12*W/24, y+2*H/24)
  ctx.lineTo(x+13*W/24, y+2*H/24)
  ctx.lineTo(x+13*W/24, y+4*H/24)
  ctx.lineTo(x+11*W/24, y+4*H/24)
  ctx.lineTo(x+11*W/24, y+5*H/24)
  ctx.lineTo(x+14*W/24, y+5*H/24)
  ctx.lineTo(x+14*W/24, y+4*H/24)
  ctx.lineTo(x+13*W/24, y+4*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+5*H/24)
  ctx.lineTo(x+22*W/24, y+22*H/24)
  ctx.lineTo(x+21*W/24, y+20*H/24)
  ctx.lineTo(x+19*W/24, y+20*H/24)
  ctx.lineTo(x+12*W/24, y+5*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+5*H/24)
  ctx.lineTo(x+2*W/24, y+22*H/24)
  ctx.lineTo(x+3*W/24, y+20*H/24)
  ctx.lineTo(x+5*W/24, y+20*H/24)
  ctx.lineTo(x+13*W/24, y+5*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+6*H/24)
  cpx = x+20*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+12*H/24)
  cpx = x+5*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+6*H/24)
  ctx.stroke()
}

function sol_lewittAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/16
  ctx.strokeStyle = color
 // ctx.lineCap = "square"
 // ctx.lineJoin = "bevel"
//1
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+2*H/24)
  ctx.lineTo(x+22*W/24, y+2*H/24)
  ctx.lineTo(x+22*W/24, y+22*H/24)
  ctx.lineTo(x+2*W/24, y+22*H/24)
  ctx.lineTo(x+2*W/24, y+2*H/24)
  ctx.lineTo(x+3*W/24, y+2*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+20*H/24)
  ctx.lineTo(x+4*W/24, y+4*H/24)
  ctx.lineTo(x+20*W/24, y+4*H/24)
  ctx.lineTo(x+20*W/24, y+20*H/24)
  ctx.lineTo(x+4*W/24, y+20*H/24)
  ctx.lineTo(x+4*W/24, y+19*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+4*H/24)
  ctx.lineTo(x+12*W/24, y+20*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+12*H/24)
  ctx.lineTo(x+20*W/24, y+12*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+10*H/24)
  ctx.lineTo(x+20*W/24, y+10*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+8*H/24)
  ctx.lineTo(x+20*W/24, y+8*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+6*H/24)
  ctx.lineTo(x+20*W/24, y+6*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+4*H/24)
  ctx.lineTo(x+10*W/24, y+12*H/24)
  ctx.stroke()
//
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+4*H/24)
  ctx.lineTo(x+8*W/24, y+11*H/24)
  ctx.lineTo(x+8*W/24, y+12*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+4*H/24)
  ctx.lineTo(x+6*W/24, y+12*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+14*H/24)
  ctx.lineTo(x+6*W/24, y+12*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+12*H/24)
  ctx.lineTo(x+20*W/24, y+20*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+12*H/24)
  ctx.lineTo(x+20*W/24, y+17*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+12*H/24)
  ctx.lineTo(x+20*W/24, y+14*H/24)
  ctx.stroke()
//
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+18*H/24)
  ctx.lineTo(x+14*W/24, y+20*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+20*H/24)
  ctx.lineTo(x+12*W/24, y+15*H/24)
  ctx.stroke()
  // lower left
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+18*H/24)
  ctx.lineTo(x+10*W/24, y+20*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+15*H/24)
  ctx.lineTo(x+7*W/24, y+20*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+20*H/24)
  ctx.lineTo(x+12*W/24, y+12*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+12*H/24)
  ctx.lineTo(x+4*W/24, y+17*H/24)
  ctx.stroke()
}
 
function albersAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette())
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let a = ctx.globalAlpha
  ctx.globalAlpha = 0.8
  ctx.fillStyle = (colors[0])
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+2*H/24)
  ctx.lineTo(x+2*W/24, y+22*H/24)
  ctx.lineTo(x+22*W/24, y+22*H/24)
  ctx.lineTo(x+22*W/24, y+2*H/24)
  ctx.lineTo(x+2*W/24, y+2*H/24)
  ctx.fill()

  ctx.fillStyle = (colors[1])
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+21*H/24)
  ctx.lineTo(x+20*W/24, y+21*H/24)
  ctx.lineTo(x+20*W/24, y+5*H/24)
  ctx.lineTo(x+4*W/24, y+5*H/24)
  ctx.lineTo(x+4*W/24, y+21*H/24)
  ctx.fill()

  ctx.fillStyle = (colors[2])
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+20*H/24)
  ctx.lineTo(x+18*W/24, y+20*H/24)
  ctx.lineTo(x+18*W/24, y+8*H/24)
  ctx.lineTo(x+6*W/24, y+8*H/24)
  ctx.lineTo(x+6*W/24, y+20*H/24)
  ctx.fill()

  ctx.fillStyle = (colors[3])
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+19*H/24)
  ctx.lineTo(x+16*W/24, y+19*H/24)
  ctx.lineTo(x+16*W/24, y+11*H/24)
  ctx.lineTo(x+8*W/24, y+11*H/24)
  ctx.lineTo(x+8*W/24, y+19*H/24)
  ctx.fill()
  ctx.globalAlpha = a
}


function icebergAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.globalAlpha /= 3
  //1
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+6*H/24)
  ctx.lineTo(x+18*W/24, y+6*H/24)
  ctx.lineTo(x+21*W/24, y+11*H/24)
  ctx.lineTo(x+21*W/24, y+16*H/24)
  ctx.lineTo(x+19*W/24, y+17*H/24)
  ctx.lineTo(x+17*W/24, y+20*H/24)
  ctx.lineTo(x+14*W/24, y+22*H/24)
  ctx.lineTo(x+8*W/24, y+21*H/24)
  ctx.lineTo(x+5*W/24, y+18*H/24)
  ctx.lineTo(x+4*W/24, y+15*H/24)
  ctx.lineTo(x+6*W/24, y+12*H/24)
  ctx.lineTo(x+5*W/24, y+9*H/24)
  ctx.lineTo(x+8*W/24, y+7*H/24)
  ctx.lineTo(x+9*W/24, y+6*H/24)
  ctx.fill()
  ctx.globalAlpha *= 3

  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+9*H/24)
  ctx.lineTo(x+8*W/24, y+7*H/24)
  ctx.lineTo(x+9*W/24, y+6*H/24)
  ctx.lineTo(x+10*W/24, y+4*H/24)
  ctx.lineTo(x+11*W/24, y+4*H/24)
  ctx.lineTo(x+12*W/24, y+2*H/24)
  ctx.lineTo(x+13*W/24, y+4*H/24)
  ctx.lineTo(x+15*W/24, y+3*H/24)
  ctx.lineTo(x+16*W/24, y+4*H/24)
  ctx.lineTo(x+17*W/24, y+3*H/24)
  ctx.lineTo(x+18*W/24, y+6*H/24)
  ctx.lineTo(x+21*W/24, y+11*H/24)
  ctx.lineTo(x+21*W/24, y+16*H/24)
  ctx.lineTo(x+19*W/24, y+17*H/24)
  ctx.lineTo(x+17*W/24, y+20*H/24)
  ctx.lineTo(x+14*W/24, y+22*H/24)
  ctx.lineTo(x+8*W/24, y+21*H/24)
  ctx.lineTo(x+7*W/24, y+20*H/24)
  ctx.lineTo(x+5*W/24, y+18*H/24)
  ctx.lineTo(x+4*W/24, y+15*H/24)
  ctx.lineTo(x+6*W/24, y+12*H/24)
  ctx.lineTo(x+5*W/24, y+9*H/24)
  ctx.lineTo(x+8*W/24, y+7*H/24)
  ctx.lineTo(x+9*W/24, y+6*H/24)
  ctx.stroke()
  
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+6*H/24)
  ctx.lineTo(x+22*W/24, y+6*H/24)
  ctx.stroke()
}

function screwAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+4*H/24)
  cpx = x+10*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+3*H/24)
  cpx = x+10*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+2*H/24)
  cpx = x+14*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+3*H/24)
  cpx = x+14*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+4*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+4*H/24)
  cpx = x+12*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+5*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+5*H/24)
  cpx = x+12*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+6*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+6*H/24)
  cpx = x+12*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+7*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+7*H/24)
  cpx = x+12*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+8*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+8*H/24)
  cpx = x+12*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+9*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+9*H/24)
  cpx = x+12*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+10*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+10*H/24)
  cpx = x+12*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+11*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+11*H/24)
  cpx = x+12*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+12*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+12*H/24)
  cpx = x+12*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+13*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+13*H/24)
  cpx = x+12*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+14*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+14*H/24)
  cpx = x+12*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+15*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+15*H/24)
  cpx = x+12*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+16*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+16*H/24)
  cpx = x+12*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+17*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+17*H/24)
  cpx = x+12*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+18*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+18*H/24)
  cpx = x+12*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+19*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+19*H/24)
  cpx = x+12*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+20*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+20*H/24)
  cpx = x+12*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+21*H/24)
  ctx.stroke()


  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+20*H/24)
  ctx.lineTo(x+12*W/24, y+22*H/24)
  ctx.lineTo(x+13*W/24, y+20*H/24)
  ctx.lineTo(x+13*W/24, y+4*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+4*H/24)
  ctx.lineTo(x+11*W/24, y+20*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+3*H/24)
  ctx.lineTo(x+13*W/24, y+3*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+2.5*H/24)
  ctx.lineTo(x+12*W/24, y+3.5*H/24)
  ctx.stroke()
}

function nailAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+4*H/24)
  cpx = x+10*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+3*H/24)
  cpx = x+10*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+2*H/24)
  cpx = x+14*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+3*H/24)
  cpx = x+14*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+4*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+4*H/24)
  ctx.lineTo(x+11*W/24, y+20*H/24)
  ctx.lineTo(x+12*W/24, y+22*H/24)
  ctx.lineTo(x+13*W/24, y+20*H/24)
  ctx.lineTo(x+13*W/24, y+4*H/24)
  ctx.stroke()
}

function press_the_buttonAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+21*H/24)
  cpx = x+12*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+20*H/24)
  cpx = x+12*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+17*H/24)
  cpx = x+12*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+16*H/24)
  cpx = x+6*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+17*H/24)
  cpx = x+6*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+18*H/24)
  cpx = x+12*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+17*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+21*H/24)
  cpx = x+6*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+20*H/24)
  cpx = x+6*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+17*H/24)
  ctx.stroke()
  


  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+14*H/24)
  cpx = x+6*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+16*H/24)
  cpx = x+12*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+14*H/24)
  cpx = x+22*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+10*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+14*H/24)
  cpx = x+6*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+12*H/24)
  cpx = x+22*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+3*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+12*H/24)
  cpx = x+6*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+14*H/24)
  cpx = x+12*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+12*H/24)
  cpx = x+12*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+10*H/24)
  ctx.stroke()
}

function paper_bagAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+22*H/24)
  ctx.lineTo(x+20*W/24, y+22*H/24)
  ctx.lineTo(x+20*W/24, y+2*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+22*H/24)
  ctx.lineTo(x+10*W/24, y+2*H/24)
  ctx.lineTo(x+4*W/24, y+2*H/24)
  ctx.lineTo(x+4*W/24, y+21*H/24)
  ctx.lineTo(x+4*W/24, y+22*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+2*H/24)
  ctx.lineTo(x+14*W/24, y+2*H/24)
  cpx = x+14*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+3*H/24)
  cpx = x+16*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+2*H/24)
  ctx.lineTo(x+20*W/24, y+2*H/24)
  ctx.stroke()
  
  ctx.setLineDash([W/32, W/24])
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+22*H/24)
  ctx.lineTo(x+7*W/24, y+18*H/24)
  ctx.lineTo(x+10*W/24, y+22*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+18*H/24)
  ctx.lineTo(x+7*W/24, y+2*H/24)
  ctx.stroke()
  ctx.setLineDash([])
}

function medicationAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+20*H/24)
  ctx.lineTo(x+22*W/24, y+20*H/24)
  ctx.lineTo(x+22*W/24, y+8*H/24)
  ctx.lineTo(x+2*W/24, y+8*H/24)
  ctx.lineTo(x+2*W/24, y+20*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+8*H/24)
  ctx.lineTo(x+4*W/24, y+5*H/24)
  ctx.lineTo(x+20*W/24, y+5*H/24)
  ctx.lineTo(x+22*W/24, y+8*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+20*H/24)
  ctx.lineTo(x+7*W/24, y+8*H/24)
  ctx.lineTo(x+7*W/24, y+5*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+10*H/24)
  ctx.lineTo(x+10*W/24, y+10*H/24)
  ctx.lineTo(x+8*W/24, y+12*H/24)
  ctx.lineTo(x+10*W/24, y+12*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+12*H/24)
  ctx.lineTo(x+11*W/24, y+11*H/24)
  ctx.lineTo(x+12*W/24, y+11*H/24)
  ctx.lineTo(x+12*W/24, y+12*H/24)
  ctx.lineTo(x+11*W/24, y+12*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+10*H/24)
  ctx.lineTo(x+13*W/24, y+12*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+11*H/24)
  ctx.lineTo(x+14*W/24, y+12*H/24)
  ctx.lineTo(x+15*W/24, y+12*H/24)
  ctx.lineTo(x+15*W/24, y+11*H/24)
  ctx.lineTo(x+14*W/24, y+11*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+12*H/24)
  ctx.lineTo(x+16*W/24, y+10*H/24)
  ctx.lineTo(x+17*W/24, y+10*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+11*H/24)
  ctx.lineTo(x+17*W/24, y+11*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+10*H/24)
  ctx.lineTo(x+18*W/24, y+12*H/24)
  ctx.lineTo(x+18*W/24, y+11*H/24)
  ctx.lineTo(x+19*W/24, y+11*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+22*W/24, y+10*H/24)
  ctx.lineTo(x+20*W/24, y+10*H/24)
  ctx.lineTo(x+20*W/24, y+15*H/24)
  ctx.lineTo(x+22*W/24, y+15*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+13*H/24)
  ctx.lineTo(x+8*W/24, y+17*H/24)
  ctx.lineTo(x+12*W/24, y+17*H/24)
  ctx.lineTo(x+12*W/24, y+13*H/24)
  ctx.lineTo(x+8*W/24, y+13*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+16*H/24)
  ctx.lineTo(x+10*W/24, y+15*H/24)
  ctx.lineTo(x+11*W/24, y+15*H/24)
  ctx.lineTo(x+10*W/24, y+14*H/24)
  ctx.lineTo(x+9*W/24, y+15*H/24)
  ctx.lineTo(x+10*W/24, y+15*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+17*H/24)
  ctx.lineTo(x+14*W/24, y+17*H/24)
  ctx.lineTo(x+14*W/24, y+16*H/24)
  ctx.lineTo(x+13*W/24, y+16*H/24)
  ctx.lineTo(x+13*W/24, y+15*H/24)
  ctx.lineTo(x+14*W/24, y+15*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+17*H/24)
  ctx.lineTo(x+15*W/24, y+15*H/24)
  ctx.lineTo(x+16*W/24, y+15*H/24)
  ctx.lineTo(x+16*W/24, y+17*H/24)
  ctx.lineTo(x+15*W/24, y+17*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+16*H/24)
  ctx.lineTo(x+17*W/24, y+17*H/24)
  ctx.lineTo(x+17*W/24, y+16*H/24)
  ctx.lineTo(x+18*W/24, y+16*H/24)
  ctx.lineTo(x+18*W/24, y+17*H/24)
  ctx.lineTo(x+18*W/24, y+16*H/24)
  ctx.lineTo(x+19*W/24, y+16*H/24)
  ctx.lineTo(x+19*W/24, y+17*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+21*W/24, y+17*H/24)
  ctx.lineTo(x+20*W/24, y+17*H/24)
  ctx.lineTo(x+20*W/24, y+16*H/24)
  ctx.lineTo(x+21*W/24, y+16*H/24)
  ctx.lineTo(x+21*W/24, y+17*H/24)
  ctx.lineTo(x+21*W/24, y+18*H/24)
  ctx.lineTo(x+20*W/24, y+18*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+19*H/24)
  ctx.lineTo(x+9*W/24, y+19*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+19*H/24)
  ctx.lineTo(x+11*W/24, y+19*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+19*H/24)
  ctx.lineTo(x+13*W/24, y+19*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+19*H/24)
  ctx.lineTo(x+15*W/24, y+19*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+12*H/24)
  cpx = x+3*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+11*H/24)
  cpx = x+3*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+10*H/24)
  cpx = x+6*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+11*H/24)
  cpx = x+6*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+12*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+19*W/24, y+12*H/24)
  cpx = x+18*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+12*H/24)
  ctx.stroke()
  
  ctx.beginPath()
  ctx.moveTo(x+21*W/24, y+12*H/24)
  ctx.lineTo(x+21*W/24, y+13*H/24)
  ctx.stroke()
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+11*H/24)
  ctx.lineTo(x+5*W/24, y+11*H/24)
  ctx.stroke()
}

function paint_brushAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+3*H/24)
  cpx = x+11*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+2*H/24)
  cpx = x+13*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+3*H/24)
  cpx = x+13*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+10*H/24)
  cpx = x+17*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+12*H/24)
  cpx = x+17*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+16*H/24)
  cpx = x+7*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+16*H/24)
  cpx = x+7*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+12*H/24)
  cpx = x+7*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+10*H/24)
  cpx = x+11*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+3*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+16*H/24)
  cpx = x+7*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+22*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+16*H/24)
  cpx = x+8*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+22*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+16*H/24)
  cpx = x+9*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+22*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+16*H/24)
  cpx = x+10*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+22*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+16*H/24)
  cpx = x+11*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+22*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+16*H/24)
  cpx = x+12*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+22*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+16*H/24)
  cpx = x+13*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+22*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+16*H/24)
  cpx = x+14*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+22*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+16*H/24)
  cpx = x+15*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+22*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+16*H/24)
  cpx = x+16*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+22*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+16*H/24)
  cpx = x+17*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+22*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+14*H/24)
  ctx.lineTo(x+17*W/24, y+14*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+3*H/24)
  ctx.lineTo(x+12*W/24, y+4*H/24)
  ctx.stroke()
}

function pencil_sharpenerAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color

  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+15*H/24)
  ctx.lineTo(x+10*W/24, y+3*H/24)
  ctx.lineTo(x+11*W/24, y+3*H/24)
  ctx.lineTo(x+11*W/24, y+15*H/24)
  ctx.lineTo(x+10*W/24, y+15*H/24)
  ctx.lineTo(x+15*W/24, y+15*H/24)
  ctx.lineTo(x+15*W/24, y+3*H/24)
  ctx.lineTo(x+11*W/24, y+3*H/24)
  ctx.stroke()
  
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+2*H/24)
  cpx = x+6*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+6*H/24)
  cpx = x+7*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+9*H/24)
  cpx = x+7*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+12*H/24)
  cpx = x+6*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+16*H/24)
  ctx.stroke()
  
  ctx.beginPath()
  ctx.moveTo(x+19*W/24, y+16*H/24)
  ctx.lineTo(x+19*W/24, y+12*H/24)
  cpx = x+18*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+9*H/24)
  cpx = x+18*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+6*H/24)
  ctx.lineTo(x+19*W/24, y+2*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+2*H/24)
  ctx.lineTo(x+4*W/24, y+8*H/24)
  ctx.lineTo(x+4*W/24, y+12*H/24)
  ctx.lineTo(x+6*W/24, y+6*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+22*H/24)
  ctx.lineTo(x+4*W/24, y+18*H/24)
  ctx.lineTo(x+6*W/24, y+12*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+12*H/24)
  cpx = x+5*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+14*H/24)
  ctx.stroke()
  ctx.globalAlpha /= 3
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+19*H/24)
  cpx = x+7*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+17*H/24)
  cpx = x+13*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+19*H/24)
  cpx = x+13*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+21*H/24)
  cpx = x+7*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+19*H/24)
  ctx.fill()
  ctx.globalAlpha *= 3
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+12.5*W/24, y+9*H/24)
  ctx.lineTo(x+13.5*W/24, y+9*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+8.5*H/24)
  ctx.lineTo(x+13*W/24, y+9.5*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+10*H/24)
  cpx = x+12*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+9*H/24)
  cpx = x+12*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+8*H/24)
  cpx = x+14*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+9*H/24)
  cpx = x+14*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+10*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+16*H/24)
  ctx.lineTo(x+4*W/24, y+22*H/24)
  ctx.lineTo(x+17*W/24, y+22*H/24)
  ctx.lineTo(x+19*W/24, y+16*H/24)
  ctx.lineTo(x+6*W/24, y+16*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+2*H/24)
  ctx.lineTo(x+19*W/24, y+2*H/24)
  ctx.stroke()
}

function hammerAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+11*H/24)
  ctx.lineTo(x+22*W/24, y+9*H/24)
  ctx.lineTo(x+21*W/24, y+8*H/24)
  cpx = x+19*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+6*H/24)
  cpx = x+17*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+4*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+11*H/24)
  cpx = x+19*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+10*H/24)
  cpx = x+19*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+8*H/24)
  cpx = x+15*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+6*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+5*H/24)
  cpx = x+11*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+3*H/24)
  cpx = x+16*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+4*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+6*H/24)
  cpx = x+2*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+18*H/24)
  cpx = x+5*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+21*H/24)
  cpx = x+17*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+8*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+5*H/24)
  cpx = x+11*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+4*H/24)
  cpx = x+14*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+6*H/24)
  ctx.stroke()
}

function clickAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+3*H/24)
  ctx.lineTo(x+5*W/24, y+19*H/24)
  ctx.lineTo(x+10*W/24, y+15*H/24)
  ctx.lineTo(x+14*W/24, y+22*H/24)
  ctx.lineTo(x+16*W/24, y+21*H/24)
  ctx.lineTo(x+12*W/24, y+14*H/24)
  ctx.lineTo(x+12*W/24, y+14*H/24)
  ctx.lineTo(x+17*W/24, y+13*H/24)
  ctx.lineTo(x+5*W/24, y+3*H/24)
  ctx.stroke()
  
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+2*H/24)
  ctx.lineTo(x+3*W/24, y+1*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+2*H/24)
  ctx.lineTo(x+5*W/24, y+1*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+2*H/24)
  ctx.lineTo(x+7*W/24, y+1*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+3*H/24)
  ctx.lineTo(x+7*W/24, y+3*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+3*H/24)
  ctx.lineTo(x+3*W/24, y+3*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+4*H/24)
  ctx.lineTo(x+3*W/24, y+5*H/24)
  ctx.stroke()
}

function stumpAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+22*H/24)
  ctx.lineTo(x+5*W/24, y+19*H/24)
  ctx.lineTo(x+4.75*W/24, y+22*H/24)
  ctx.lineTo(x+7*W/24, y+19*H/24)
  ctx.lineTo(x+7*W/24, y+22*H/24)
  ctx.lineTo(x+9*W/24, y+19*H/24)
  ctx.lineTo(x+9.5*W/24, y+22*H/24)
  ctx.lineTo(x+11*W/24, y+19*H/24)
  ctx.lineTo(x+12*W/24, y+22*H/24)
  ctx.lineTo(x+13*W/24, y+19*H/24)
  ctx.lineTo(x+14.5*W/24, y+22*H/24)
  ctx.lineTo(x+15*W/24, y+19*H/24)
  ctx.lineTo(x+17*W/24, y+22*H/24)
  ctx.lineTo(x+17*W/24, y+19*H/24)
  ctx.lineTo(x+19.25*W/24, y+22*H/24)
  ctx.lineTo(x+19*W/24, y+19*H/24)
  ctx.lineTo(x+22*W/24, y+22*H/24)
  ctx.stroke()

  //1
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+22*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+22*H/24)
  ctx.stroke()
  
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+22*H/24)
  cpx = x+6*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+6*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+22*W/24, y+22*H/24)
  cpx = x+18*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+6*H/24)
  ctx.stroke()
  
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+6*H/24)
  cpx = x+6*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+2*H/24)
  cpx = x+18*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+6*H/24)
  cpx = x+18*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+10*H/24)
  cpx = x+6*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+6*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+9*H/24)
  cpx = x+7*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+6*H/24)
  cpx = x+7*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+3*H/24)
  cpx = x+17*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+6*H/24)
  cpx = x+17*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+9*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+8*H/24)
  cpx = x+8*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+6*H/24)
  cpx = x+8*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+4*H/24)
  cpx = x+16*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+6*H/24)
  cpx = x+16*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+8*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+7*H/24)
  cpx = x+9*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+6*H/24)
  cpx = x+9*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+5*H/24)
  cpx = x+15*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+6*H/24)
  cpx = x+15*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+7*H/24)
  ctx.stroke()
}

function progress_indicatorAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let r = 10 * W/24, i = 0
  let fadd = (Math.PI)/180
  let start = 0
  
  ctx.beginPath()
  for (; i < 360; i++) {
    ctx.arc(x+12*W/24, y+12*H/24, r, start, start + fadd)
    start += fadd
    r += W/24/360
  }
  ctx.stroke()
  i = 0, start = 0
  r = 10 * W/24
  ctx.beginPath()
  for (; i < 360; i++) {
    ctx.arc(x+12*W/24, y+12*H/24, r, start, start + fadd)
    start += fadd
    r -= W/24/360
  }
  ctx.lineTo(x+23*W/24, y+12*H/24)
  ctx.stroke()
}

function riverAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+20*H/24)
  cpx = x+10*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+12*H/24)
  cpx = x+7*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+6*H/24)
  cpx = x+19*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+13*H/24)
  cpx = x+15*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+19*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+14*H/24)
  cpx = x+6*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+8*H/24)
  cpx = x+2*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+2*H/24)
  cpx = x+21*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+6*H/24)
  cpx = x+20*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+13*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+5*H/24)
  cpx = x+9*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+4*H/24)
  cpx = x+9*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+5*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+4*H/24)
  cpx = x+12*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+3*H/24)
  cpx = x+12*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+4*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+5*H/24)
  cpx = x+15*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+4*H/24)
  cpx = x+15*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+5*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+8*H/24)
  cpx = x+18*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+7*H/24)
  cpx = x+19*W/24
  cpy = y+8*H/24
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+8*H/24)
  cpx = x+18*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+7*H/24)
  cpx = x+18*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+8*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+6*H/24)
  cpx = x+19*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+5*H/24)
  cpx = x+19*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+6*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+19*H/24)
  cpx = x+3*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+18*H/24)
  cpx = x+3*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+19*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+17*H/24)
  cpx = x+4*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+16*H/24)
  cpx = x+4*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+17*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+16*H/24)
  cpx = x+7*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+15*H/24)
  cpx = x+7*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+16*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+15*H/24)
  cpx = x+5*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+14*H/24)
  cpx = x+5*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+15*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+13*H/24)
  cpx = x+6*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+12*H/24)
  cpx = x+6*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+13*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+11*H/24)
  cpx = x+7*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+10*H/24)
  cpx = x+7*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+11*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+9*H/24)
  cpx = x+6*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+8*H/24)
  cpx = x+6*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+9*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+7*H/24)
  cpx = x+7*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+6*H/24)
  cpx = x+7*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+7*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+5*H/24)
  cpx = x+6*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+4*H/24)
  cpx = x+6*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+5*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+10*H/24)
  cpx = x+19*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+9*H/24)
  cpx = x+19*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+10*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+12*H/24)
  cpx = x+19*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+11*H/24)
  cpx = x+19*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+12*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+14*H/24)
  cpx = x+18*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+13*H/24)
  cpx = x+18*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+14*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+16*H/24)
  cpx = x+19*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+15*H/24)
  cpx = x+19*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+16*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+19*W/24, y+18*H/24)
  cpx = x+20*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+17*H/24)
  cpx = x+20*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+18*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+22*W/24, y+15*H/24)
  cpx = x+21*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+14*H/24)
  cpx = x+21*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+15*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+4*H/24)
  cpx = x+17*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+3*H/24)
  cpx = x+17*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+4*H/24)
  ctx.stroke()
}

function shopping_listAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  W *= 1.15
  x -= 1.5*W/24
  y -= 1.5*W/24
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  
  let v = document.getElementById("featuresize").value
  document.getElementById("featuresize").value /= 2
  scriptAt(x+(7+pet(1))*W/24, y+6*H/24,H/32,color)
  scriptAt(x+(7+pet(1))*W/24, y+8*H/24,H/32,color)
  scriptAt(x+(10+pet(1))*W/24, y+8*H/24,H/32,color)
  scriptAt(x+(7+pet(1))*W/24, y+10*H/24,H/32,color)
  scriptAt(x+(7+pet(1))*W/24, y+12*H/24,H/32,color)
  scriptAt(x+(10+pet(1))*W/24, y+12*H/24,H/32,color)
  scriptAt(x+(7+pet(1))*W/24, y+14*H/24,H/32,color)
  scriptAt(x+(11+pet(1))*W/24, y+14*H/24,H/32,color)
  scriptAt(x+(7+pet(1))*W/24, y+16*H/24,H/34,color)
  scriptAt(x+(7+pet(1))*W/24, y+18*H/24,H/34,color)
  scriptAt(x+(10+pet(1))*W/24, y+18*H/24,H/34,color)
  document.getElementById("featuresize").value = v
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+22*H/24)
  ctx.lineTo(x+5*W/24, y+2*H/24)
  ctx.lineTo(x+6*W/24, y+2*H/24)
  ctx.lineTo(x+6*W/24, y+3*H/24)
  ctx.lineTo(x+7*W/24, y+3*H/24)
  ctx.lineTo(x+7*W/24, y+2*H/24)
  ctx.lineTo(x+8*W/24, y+2*H/24)
  ctx.lineTo(x+8*W/24, y+3*H/24)
  ctx.lineTo(x+9*W/24, y+3*H/24)
  ctx.lineTo(x+9*W/24, y+2*H/24)
  ctx.lineTo(x+10*W/24, y+2*H/24)
  ctx.lineTo(x+10*W/24, y+3*H/24)
  ctx.lineTo(x+11*W/24, y+3*H/24)
  ctx.lineTo(x+11*W/24, y+2*H/24)
  ctx.lineTo(x+12*W/24, y+2*H/24)
  ctx.lineTo(x+12*W/24, y+3*H/24)
  ctx.lineTo(x+13*W/24, y+3*H/24)
  ctx.lineTo(x+13*W/24, y+2*H/24)
  ctx.lineTo(x+14*W/24, y+2*H/24)
  ctx.lineTo(x+14*W/24, y+3*H/24)
  ctx.lineTo(x+15*W/24, y+3*H/24)
  ctx.lineTo(x+15*W/24, y+2*H/24)
  ctx.lineTo(x+16*W/24, y+2*H/24)
  ctx.lineTo(x+16*W/24, y+3*H/24)
  ctx.lineTo(x+17*W/24, y+3*H/24)
  ctx.lineTo(x+17*W/24, y+2*H/24)
  ctx.lineTo(x+18*W/24, y+2*H/24)
  ctx.lineTo(x+18*W/24, y+21*H/24)
  ctx.lineTo(x+17*W/24, y+21*H/24)
  ctx.lineTo(x+17*W/24, y+22*H/24)
  ctx.lineTo(x+18*W/24, y+21*H/24)
  ctx.lineTo(x+17*W/24, y+22*H/24)
  ctx.lineTo(x+5*W/24, y+22*H/24)
  ctx.stroke()
}

function postcardAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  
  let v = document.getElementById("featuresize").value
  document.getElementById("featuresize").value /= 2
  scriptAt(x+(4+pet(2))*W/24, y+8*H/24,H/25,color)
  scriptAt(x+(3.5+pet(2))*W/24, y+11*H/24,H/25,color)
  scriptAt(x+(8+pet(2))*W/24, y+11*H/24,H/25,color)
  scriptAt(x+(3.5+pet(2))*W/24, y+14*H/24,H/25,color)
  scriptAt(x+(3.5+pet(2))*W/24, y+17*H/24,H/25,color)
  scriptAt(x+(8+pet(3))*W/24, y+17*H/24,H/25,color)
  
  document.getElementById("featuresize").value = v
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+5*H/24)
  ctx.lineTo(x+22*W/24, y+5*H/24)
  ctx.lineTo(x+22*W/24, y+19*H/24)
  ctx.lineTo(x+2*W/24, y+19*H/24)
  ctx.lineTo(x+2*W/24, y+5*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+21*W/24, y+6*H/24)
  ctx.lineTo(x+21*W/24, y+10*H/24)
  ctx.lineTo(x+18*W/24, y+10*H/24)
  ctx.lineTo(x+18*W/24, y+6*H/24)
  ctx.lineTo(x+21*W/24, y+6*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+8*H/24)
  ctx.lineTo(x+12*W/24, y+17*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+17*H/24)
  ctx.lineTo(x+20*W/24, y+17*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+15*H/24)
  ctx.lineTo(x+20*W/24, y+15*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+13*H/24)
  ctx.lineTo(x+20*W/24, y+13*H/24)
  ctx.stroke()
}

function puzzle_pieceAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.beginPath()
  ctx.moveTo(x+21*W/24, y+22*H/24)
  cpx = x+22*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+21*H/24)
  cpx = x+22*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+16*H/24)
  cpx = x+22*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+15*H/24)
  cpx = x+17*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+13*H/24)
  cpx = x+17*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+11*H/24)
  cpx = x+22*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+10*H/24)
  cpx = x+22*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+8*H/24)
  cpx = x+22*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+7*H/24)
  cpx = x+15*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+7*H/24)
  cpx = x+14*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+6*H/24)
  cpx = x+16*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+2*H/24)
  cpx = x+7*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+6*H/24)
  cpx = x+10*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+7*H/24)
  cpx = x+7*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+7*H/24)
  cpx = x+6*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+8*H/24)
  cpx = x+6*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+11*H/24)
  cpx = x+6*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+12*H/24)
  cpx = x+2*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+15*H/24)
  cpx = x+2*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+17*H/24)
  cpx = x+6*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+21*H/24)
  cpx = x+6*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+22*H/24)
  cpx = x+11*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+22*H/24)
  cpx = x+12*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+21*H/24)
  cpx = x+10*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+16*H/24)
  cpx = x+18*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+21*H/24)
  cpx = x+16*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+22*H/24)
  cpx = x+21*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+22*H/24)
  ctx.stroke()
}

function lighthouseAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+22*H/24)
  cpx = x+9*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+7*H/24)
  ctx.lineTo(x+15*W/24, y+7*H/24)
  ctx.lineTo(x+18*W/24, y+22*H/24)
  ctx.lineTo(x+6*W/24, y+22*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+22*H/24)
  ctx.lineTo(x+11*W/24, y+18*H/24)
  ctx.lineTo(x+13*W/24, y+18*H/24)
  ctx.lineTo(x+13*W/24, y+21*H/24)
  ctx.lineTo(x+13*W/24, y+22*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+7*H/24)
  ctx.lineTo(x+9*W/24, y+3*H/24)
  ctx.lineTo(x+11*W/24, y+3*H/24)
  ctx.lineTo(x+11*W/24, y+7*H/24)
  ctx.lineTo(x+13*W/24, y+7*H/24)
  ctx.lineTo(x+13*W/24, y+3*H/24)
  ctx.lineTo(x+15*W/24, y+3*H/24)
  ctx.lineTo(x+15*W/24, y+7*H/24)
  ctx.lineTo(x+15*W/24, y+3*H/24)
  ctx.lineTo(x+11*W/24, y+3*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+3*H/24)
  ctx.lineTo(x+12*W/24, y+2*H/24)
  ctx.lineTo(x+15*W/24, y+3*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+18*H/24)
  cpx = x+11*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+17*H/24)
  cpx = x+13*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+18*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+5*H/24)
  ctx.lineTo(x+22*W/24, y+8*H/24)
  ctx.lineTo(x+15*W/24, y+5*H/24)
  ctx.lineTo(x+22*W/24, y+2*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+5*H/24)
  ctx.lineTo(x+2*W/24, y+2*H/24)
  ctx.lineTo(x+9*W/24, y+5*H/24)
  ctx.lineTo(x+2*W/24, y+8*H/24)
  ctx.stroke()
  
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+6*H/24)
  ctx.lineTo(x+16*W/24, y+6*H/24)
  ctx.lineTo(x+16*W/24, y+7*H/24)
  ctx.lineTo(x+8*W/24, y+7*H/24)
  ctx.lineTo(x+8*W/24, y+6*H/24)
  ctx.stroke()
}

function waveAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+22*H/24)
  cpx = x+18*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+15*H/24)
  cpx = x+18*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+10*H/24)
  cpx = x+8*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+14*H/24)
  cpx = x+8*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+16*H/24)
  cpx = x+8*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+14*H/24)
  cpx = x+4*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+8*H/24)
  cpx = x+8*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+4*H/24)
  cpx = x+20*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+6*H/24)
  ctx.stroke()
}

function sofaAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+22*H/24)
  cpx = x+12*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+22*H/24)
  cpx = x+12*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+16*H/24)
  cpx = x+12*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+15*H/24)
  cpx = x+5*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+15*H/24)
  cpx = x+5*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+11*H/24)
  cpx = x+5*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+10*H/24)
  cpx = x+2*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+10*H/24)
  cpx = x+2*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+22*H/24)
  ctx.stroke()
  //2
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+22*H/24)
  ctx.lineTo(x+22*W/24, y+12*H/24)
  ctx.lineTo(x+22*W/24, y+6*H/24)
  cpx = x+22*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+5*H/24)
  cpx = x+15*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+5*H/24)
  cpx = x+15*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+2*H/24)
  cpx = x+15*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+1*H/24)
  cpx = x+12*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+1*H/24)
  cpx = x+2*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+10*H/24)
  ctx.stroke()
  //10
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+16*H/24)
  ctx.lineTo(x+21*W/24, y+8*H/24)
  ctx.lineTo(x+13*W/24, y+8*H/24)
  ctx.lineTo(x+6*W/24, y+14*H/24)
  ctx.lineTo(x+7*W/24, y+14*H/24)
  ctx.stroke()
  //4
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+16*H/24)
  ctx.lineTo(x+13*W/24, y+15*H/24)
  cpx = x+13*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+14*H/24)
  cpx = x+7*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+14*H/24)
  ctx.stroke()
  //6
  ctx.beginPath()
  ctx.moveTo(x+21*W/24, y+7*H/24)
  cpx = x+21*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+6*H/24)
  cpx = x+15*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+6*H/24)
  ctx.stroke()
  //7
  ctx.beginPath()
  ctx.moveTo(x+21*W/24, y+7*H/24)
  ctx.lineTo(x+21*W/24, y+12*H/24)
  ctx.stroke()
  //8
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+20*H/24)
  ctx.lineTo(x+13*W/24, y+16*H/24)
  ctx.stroke()
}

function conference_room_bAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+3*H/24)
  ctx.lineTo(x+2*W/24, y+5*H/24)
  ctx.lineTo(x+3*W/24, y+6*H/24)
  ctx.lineTo(x+3*W/24, y+4*H/24)
  ctx.lineTo(x+2*W/24, y+3*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+4*H/24)
  ctx.lineTo(x+5*W/24, y+4*H/24)
  ctx.lineTo(x+5*W/24, y+6*H/24)
  ctx.lineTo(x+3*W/24, y+6*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+6*H/24)
  ctx.lineTo(x+4*W/24, y+7*H/24)
  ctx.lineTo(x+3*W/24, y+6*H/24)
  ctx.lineTo(x+5*W/24, y+6*H/24)
  ctx.lineTo(x+6*W/24, y+7*H/24)
  ctx.lineTo(x+5*W/24, y+6*H/24)
  ctx.lineTo(x+5*W/24, y+4*H/24)
  ctx.lineTo(x+6*W/24, y+5*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+22*W/24, y+3*H/24)
  ctx.lineTo(x+22*W/24, y+5*H/24)
  ctx.lineTo(x+21*W/24, y+6*H/24)
  ctx.lineTo(x+21*W/24, y+4*H/24)
  ctx.lineTo(x+22*W/24, y+3*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+21*W/24, y+4*H/24)
  ctx.lineTo(x+19*W/24, y+4*H/24)
  ctx.lineTo(x+19*W/24, y+6*H/24)
  ctx.lineTo(x+21*W/24, y+6*H/24)
  ctx.lineTo(x+20*W/24, y+7*H/24)
  ctx.lineTo(x+21*W/24, y+6*H/24)
  ctx.lineTo(x+19*W/24, y+6*H/24)
  ctx.lineTo(x+18*W/24, y+7*H/24)
  ctx.lineTo(x+19*W/24, y+6*H/24)
  ctx.lineTo(x+19*W/24, y+4*H/24)
  ctx.lineTo(x+18*W/24, y+5*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+4*H/24)
  ctx.lineTo(x+7*W/24, y+20*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+4*H/24)
  ctx.lineTo(x+17*W/24, y+20*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+4*H/24)
  cpx = x+7*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+2*H/24)
  cpx = x+15*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+2*H/24)
  cpx = x+17*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+4*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+20*H/24)
  cpx = x+7*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+22*H/24)
  cpx = x+15*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+22*H/24)
  cpx = x+17*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+20*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+19*H/24)
  ctx.lineTo(x+3*W/24, y+17*H/24)
  ctx.lineTo(x+5*W/24, y+17*H/24)
  ctx.lineTo(x+5*W/24, y+19*H/24)
  ctx.lineTo(x+6*W/24, y+20*H/24)
  ctx.lineTo(x+5*W/24, y+19*H/24)
  ctx.lineTo(x+5*W/24, y+17*H/24)
  ctx.lineTo(x+6*W/24, y+18*H/24)
  ctx.lineTo(x+5*W/24, y+17*H/24)
  ctx.lineTo(x+5*W/24, y+19*H/24)
  ctx.lineTo(x+3*W/24, y+19*H/24)
  ctx.lineTo(x+4*W/24, y+20*H/24)
  ctx.lineTo(x+3*W/24, y+19*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+19*H/24)
  ctx.lineTo(x+2*W/24, y+18*H/24)
  ctx.lineTo(x+2*W/24, y+16*H/24)
  ctx.lineTo(x+3*W/24, y+17*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+12*H/24)
  ctx.lineTo(x+2*W/24, y+10*H/24)
  ctx.lineTo(x+3*W/24, y+11*H/24)
  ctx.lineTo(x+3*W/24, y+13*H/24)
  ctx.lineTo(x+2*W/24, y+12*H/24)
  ctx.lineTo(x+3*W/24, y+13*H/24)
  ctx.lineTo(x+5*W/24, y+13*H/24)
  ctx.lineTo(x+5*W/24, y+11*H/24)
  ctx.lineTo(x+3*W/24, y+11*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+13*H/24)
  ctx.lineTo(x+4*W/24, y+14*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+13*H/24)
  ctx.lineTo(x+6*W/24, y+14*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+11*H/24)
  ctx.lineTo(x+6*W/24, y+12*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+19*W/24, y+10*H/24)
  ctx.lineTo(x+19*W/24, y+12*H/24)
  ctx.lineTo(x+21*W/24, y+12*H/24)
  ctx.lineTo(x+21*W/24, y+10*H/24)
  ctx.lineTo(x+19*W/24, y+10*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+19*W/24, y+18*H/24)
  ctx.lineTo(x+19*W/24, y+20*H/24)
  ctx.lineTo(x+21*W/24, y+20*H/24)
  ctx.lineTo(x+21*W/24, y+18*H/24)
  ctx.lineTo(x+19*W/24, y+18*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+21*W/24, y+18*H/24)
  ctx.lineTo(x+22*W/24, y+17*H/24)
  ctx.lineTo(x+22*W/24, y+19*H/24)
  ctx.lineTo(x+21*W/24, y+20*H/24)
  ctx.lineTo(x+20*W/24, y+21*H/24)
  ctx.lineTo(x+21*W/24, y+20*H/24)
  ctx.lineTo(x+19*W/24, y+20*H/24)
  ctx.lineTo(x+18*W/24, y+21*H/24)
  ctx.lineTo(x+19*W/24, y+20*H/24)
  ctx.lineTo(x+19*W/24, y+18*H/24)
  ctx.lineTo(x+18*W/24, y+19*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+11*H/24)
  ctx.lineTo(x+19*W/24, y+10*H/24)
  ctx.lineTo(x+19*W/24, y+12*H/24)
  ctx.lineTo(x+18*W/24, y+13*H/24)
  ctx.lineTo(x+19*W/24, y+12*H/24)
  ctx.lineTo(x+21*W/24, y+12*H/24)
  ctx.lineTo(x+20*W/24, y+13*H/24)
  ctx.lineTo(x+22*W/24, y+11*H/24)
  ctx.lineTo(x+22*W/24, y+9*H/24)
  ctx.lineTo(x+21*W/24, y+10*H/24)
  ctx.stroke()
  
  //table legs
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+22*H/24)
  ctx.lineTo(x+9*W/24, y+23*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+22*H/24)
  ctx.lineTo(x+17*W/24, y+23*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+3*H/24)
  ctx.lineTo(x+18*W/24, y+4*H/24)
  ctx.stroke()
}

function doorAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.globalAlpha /= 3
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+20*H/24)
  ctx.lineTo(x+8*W/24, y+20*H/24)
  ctx.lineTo(x+8*W/24, y+2*H/24)
  ctx.lineTo(x+18*W/24, y+2*H/24)
  ctx.lineTo(x+10*W/24, y+4*H/24)
  ctx.lineTo(x+10*W/24, y+20*H/24)
  ctx.fill()
  ctx.globalAlpha *= 3

  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+20*H/24)
  ctx.lineTo(x+10*W/24, y+22*H/24)
  ctx.lineTo(x+10*W/24, y+4*H/24)
  ctx.lineTo(x+18*W/24, y+2*H/24)
  ctx.lineTo(x+18*W/24, y+20*H/24)
  ctx.lineTo(x+22*W/24, y+20*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+20*H/24)
  ctx.lineTo(x+2*W/24, y+20*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+20*H/24)
  ctx.lineTo(x+8*W/24, y+2*H/24)
  ctx.lineTo(x+18*W/24, y+2*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.arc(x+12*W/24, y+13*H/24, W/48, 0, Math.PI*2)
  ctx.stroke()
}

function windowAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+22*H/24)
  ctx.lineTo(x+19*W/24, y+22*H/24)
  ctx.lineTo(x+19*W/24, y+2*H/24)
  ctx.lineTo(x+5*W/24, y+2*H/24)
  ctx.lineTo(x+5*W/24, y+22*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+3*H/24)
  ctx.lineTo(x+18*W/24, y+3*H/24)
  ctx.lineTo(x+18*W/24, y+21*H/24)
  ctx.lineTo(x+6*W/24, y+21*H/24)
  ctx.lineTo(x+6*W/24, y+3*H/24)
  ctx.lineTo(x+6*W/24, y+12*H/24)
  ctx.lineTo(x+18*W/24, y+12*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+3*H/24)
  ctx.lineTo(x+12*W/24, y+12*H/24)
  ctx.stroke()
}

function sunAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+16*H/24)
  cpx = x+16*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+12*H/24)
  cpx = x+16*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+8*H/24)
  cpx = x+8*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+12*H/24)
  cpx = x+8*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+16*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+17*H/24)
  ctx.lineTo(x+12*W/24, y+21*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+12*H/24)
  ctx.lineTo(x+21*W/24, y+12*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+7*H/24)
  ctx.lineTo(x+12*W/24, y+3*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+12*H/24)
  ctx.lineTo(x+3*W/24, y+12*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+16*H/24)
  ctx.lineTo(x+5*W/24, y+19*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+16*H/24)
  ctx.lineTo(x+19*W/24, y+19*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+8*H/24)
  ctx.lineTo(x+19*W/24, y+5*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+8*H/24)
  ctx.lineTo(x+5*W/24, y+5*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+10*H/24)
  ctx.lineTo(x+4*W/24, y+9*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+10*H/24)
  ctx.lineTo(x+20*W/24, y+9*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+14*H/24)
  ctx.lineTo(x+20*W/24, y+15*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+14*H/24)
  ctx.lineTo(x+4*W/24, y+15*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+7*H/24)
  ctx.lineTo(x+9*W/24, y+4*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+7*H/24)
  ctx.lineTo(x+15*W/24, y+4*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+17*H/24)
  ctx.lineTo(x+9*W/24, y+20*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+17*H/24)
  ctx.lineTo(x+15*W/24, y+20*H/24)
  ctx.stroke()
}

function rainAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+2*H/24)
  ctx.lineTo(x+2*W/24, y+14*H/24)
  //ctx.stroke()
  
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+2*H/24)
  ctx.lineTo(x+2*W/24, y+14*H/24)
  //ctx.stroke()
  
    //2
    ctx.beginPath()
    ctx.moveTo(x+8*W/24, y+2*H/24)
    ctx.lineTo(x+5*W/24, y+8*H/24)
    ctx.stroke()
  
    //3
    ctx.beginPath()
    ctx.moveTo(x+5*W/24, y+10*H/24)
    ctx.lineTo(x+3*W/24, y+14*H/24)
    ctx.stroke()
  

  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+6*H/24)
  ctx.lineTo(x+6*W/24, y+11*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+13*H/24)
  ctx.lineTo(x+3*W/24, y+18*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+7*H/24)
  ctx.lineTo(x+5*W/24, y+2*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+2*H/24)
  ctx.lineTo(x+9*W/24, y+9*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+22*H/24)
  ctx.lineTo(x+6*W/24, y+17*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+14*H/24)
  ctx.lineTo(x+12*W/24, y+8*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+20*H/24)
  ctx.lineTo(x+11*W/24, y+15*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+22*H/24)
  ctx.lineTo(x+11*W/24, y+18*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+12*H/24)
  ctx.lineTo(x+16*W/24, y+6*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+15*H/24)
  ctx.lineTo(x+15*W/24, y+10*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+5*H/24)
  ctx.lineTo(x+17*W/24, y+2*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+9*H/24)
  ctx.lineTo(x+19*W/24, y+3*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+22*W/24, y+3*H/24)
  ctx.lineTo(x+20*W/24, y+7*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+19*W/24, y+10*H/24)
  ctx.lineTo(x+15*W/24, y+15*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+21*H/24)
  ctx.lineTo(x+16*W/24, y+16*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+22*H/24)
  ctx.lineTo(x+17*W/24, y+18*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+16*H/24)
  ctx.lineTo(x+21*W/24, y+9*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+21*W/24, y+13*H/24)
  ctx.lineTo(x+19*W/24, y+19*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+19*W/24, y+22*H/24)
  ctx.lineTo(x+22*W/24, y+17*H/24)
  ctx.stroke()
}

function cloudsAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+8*H/24)
  cpx = x+10*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+8*H/24)
  cpx = x+12*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+7*H/24)
  cpx = x+13*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+6*H/24)
  cpx = x+13*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+4*H/24)
  cpx = x+10*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+3*H/24)
  cpx = x+6*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+4*H/24)
  cpx = x+4*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+5*H/24)
  cpx = x+2*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+7*H/24)
  cpx = x+2*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+8*H/24)
  cpx = x+5*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+8*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+22*H/24)
  cpx = x+2*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+20*H/24)
  cpx = x+2*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+19*H/24)
  cpx = x+3*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+18*H/24)
  cpx = x+5*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+16*H/24)
  cpx = x+8*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+17*H/24)
  cpx = x+10*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+19*H/24)
  cpx = x+12*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+20*H/24)
  cpx = x+12*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+22*H/24)
  cpx = x+4*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+22*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+15*H/24)
  cpx = x+11*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+13*H/24)
  cpx = x+11*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+12*H/24)
  cpx = x+12*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+10*H/24)
  cpx = x+14*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+10*H/24)
  cpx = x+14*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+9*H/24)
  cpx = x+17*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+9*H/24)
  cpx = x+19*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+11*H/24)
  cpx = x+21*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+12*H/24)
  cpx = x+22*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+14*H/24)
  cpx = x+22*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+15*H/24)
  cpx = x+13*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+15*H/24)
  ctx.stroke()
}

function spiderAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+22*H/24)
  cpx = x+6*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+16*H/24)
  cpx = x+6*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+12*H/24)
  cpx = x+18*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+16*H/24)
  cpx = x+18*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+22*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+12*H/24)
  cpx = x+15*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+10*H/24)
  cpx = x+15*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+7*H/24)
  cpx = x+9*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+10*H/24)
  cpx = x+9*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+12*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+8*H/24)
  ctx.lineTo(x+8*W/24, y+6*H/24)
  ctx.lineTo(x+8*W/24, y+3*H/24)
  ctx.lineTo(x+11*W/24, y+2*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+9*H/24)
  ctx.lineTo(x+6*W/24, y+8*H/24)
  ctx.lineTo(x+4*W/24, y+3*H/24)
  ctx.lineTo(x+7*W/24, y+1*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+10*H/24)
  ctx.lineTo(x+3*W/24, y+10*H/24)
  ctx.lineTo(x+2*W/24, y+15*H/24)
  ctx.lineTo(x+3*W/24, y+19*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+11*H/24)
  ctx.lineTo(x+4*W/24, y+12*H/24)
  ctx.lineTo(x+4*W/24, y+17*H/24)
  ctx.lineTo(x+6*W/24, y+21*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+11*H/24)
  ctx.lineTo(x+20*W/24, y+12*H/24)
  ctx.lineTo(x+20*W/24, y+17*H/24)
  ctx.lineTo(x+18*W/24, y+21*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+10*H/24)
  ctx.lineTo(x+21*W/24, y+10*H/24)
  ctx.lineTo(x+22*W/24, y+15*H/24)
  ctx.lineTo(x+21*W/24, y+19*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+9*H/24)
  ctx.lineTo(x+18*W/24, y+8*H/24)
  ctx.lineTo(x+20*W/24, y+3*H/24)
  ctx.lineTo(x+17*W/24, y+1*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+8*H/24)
  ctx.lineTo(x+16*W/24, y+6*H/24)
  ctx.lineTo(x+16*W/24, y+3*H/24)
  ctx.lineTo(x+13*W/24, y+2*H/24)
  ctx.stroke()
}

function flameAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+22*H/24)
  cpx = x+2*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+12*H/24)
  cpx = x+2*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+7*H/24)
  cpx = x+5*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+12*H/24)
  cpx = x+7*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+2*H/24)
  cpx = x+13*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+12*H/24)
  cpx = x+17*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+8*H/24)
  cpx = x+21*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+14*H/24)
  cpx = x+20*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+22*H/24)
  ctx.stroke()
}

function hop_scotchAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.beginPath()
  ctx.moveTo(x+7*W/16, y+15*H/16)
  ctx.lineTo(x+9*W/16, y+15*H/16)
  ctx.lineTo(x+9*W/16, y+13*H/16)
  ctx.lineTo(x+7*W/16, y+13*H/16)
  ctx.lineTo(x+7*W/16, y+15*H/16)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+8*W/16, y+13*H/16)
  ctx.lineTo(x+8*W/16, y+11*H/16)
  ctx.lineTo(x+6*W/16, y+11*H/16)
  ctx.lineTo(x+6*W/16, y+13*H/16)
  ctx.lineTo(x+8*W/16, y+13*H/16)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+7*W/16, y+11*H/16)
  ctx.lineTo(x+7*W/16, y+9*H/16)
  ctx.lineTo(x+9*W/16, y+9*H/16)
  ctx.lineTo(x+9*W/16, y+11*H/16)
  ctx.lineTo(x+7*W/16, y+11*H/16)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+8*W/16, y+9*H/16)
  ctx.lineTo(x+8*W/16, y+7*H/16)
  ctx.lineTo(x+10*W/16, y+7*H/16)
  ctx.lineTo(x+10*W/16, y+9*H/16)
  ctx.lineTo(x+8*W/16, y+9*H/16)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+7*W/16, y+7*H/16)
  ctx.lineTo(x+9*W/16, y+7*H/16)
  ctx.lineTo(x+9*W/16, y+5*H/16)
  ctx.lineTo(x+7*W/16, y+5*H/16)
  ctx.lineTo(x+7*W/16, y+7*H/16)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+6*W/16, y+5*H/16)
  ctx.lineTo(x+6*W/16, y+3*H/16)
  ctx.lineTo(x+10*W/16, y+3*H/16)
  ctx.lineTo(x+10*W/16, y+5*H/16)
  ctx.lineTo(x+8*W/16, y+5*H/16)
  ctx.lineTo(x+8*W/16, y+3*H/16)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+6*W/16, y+5*H/16)
  ctx.lineTo(x+8*W/16, y+5*H/16)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+9*W/16, y+11*H/16)
  ctx.lineTo(x+10*W/16, y+11*H/16)
  ctx.lineTo(x+10*W/16, y+13*H/16)
  ctx.lineTo(x+9*W/16, y+13*H/16)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+7*W/16, y+7*H/16)
  ctx.lineTo(x+6*W/16, y+7*H/16)
  ctx.lineTo(x+6*W/16, y+9*H/16)
  ctx.lineTo(x+7*W/16, y+9*H/16)
  ctx.lineTo(x+8*W/16, y+9*H/16)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+6*W/16, y+3*H/16)
  cpx = x+6*W/16
  cpy = y+1*H/16
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/16, y+1*H/16)
  cpx = x+10*W/16
  cpy = y+1*H/16
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/16, y+3*H/16)
  ctx.stroke()
}

function parking_lotAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  let i = 0, offset = W/8
  for (; i < 6; i++) {
    cartopAt (x+offset*1.5+offset*i,y+offset/1.8+pet(W/48),W/6,color,180)
    cartopAt (x+offset*1.5+offset*i,y+offset+offset+pet(W/48),W/6,color,0)
    if (i != 3)
      cartopAt (x+offset*1.5+offset*i,y+offset*5+pet(W/48),W/6,color,180)
    cartopAt (x+offset*1.5+offset*i,y+offset*6.4+pet(W/48),W/6,color,0)
  }
  cartopAt (x+offset*3,y+offset+offset*2.5+pet(W/48),W/6,color,-90)

  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+23*H/24)
  ctx.lineTo(x+5*W/24, y+23*H/24)
  ctx.lineTo(x+5*W/24, y+15*H/24)
  ctx.lineTo(x+2*W/24, y+15*H/24)
  ctx.lineTo(x+2*W/24, y+23*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+2*H/24)
  ctx.lineTo(x+5*W/24, y+2*H/24)
  ctx.lineTo(x+5*W/24, y+10*H/24)
  ctx.lineTo(x+2*W/24, y+10*H/24)
  ctx.lineTo(x+2*W/24, y+2*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+19*H/24)
  ctx.lineTo(x+23*W/24, y+19*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+6*H/24)
  ctx.lineTo(x+23*W/24, y+6*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+2*H/24)
  ctx.lineTo(x+8*W/24, y+10*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+15*H/24)
  ctx.lineTo(x+8*W/24, y+23*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+23*H/24)
  ctx.lineTo(x+11*W/24, y+15*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+10*H/24)
  ctx.lineTo(x+11*W/24, y+2*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+23*H/24)
  ctx.lineTo(x+14*W/24, y+15*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+10*H/24)
  ctx.lineTo(x+14*W/24, y+2*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+2*H/24)
  ctx.lineTo(x+17*W/24, y+10*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+2*H/24)
  ctx.lineTo(x+20*W/24, y+10*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+23*W/24, y+2*H/24)
  ctx.lineTo(x+23*W/24, y+10*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+15*H/24)
  ctx.lineTo(x+17*W/24, y+23*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+15*H/24)
  ctx.lineTo(x+20*W/24, y+23*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+23*W/24, y+15*H/24)
  ctx.lineTo(x+23*W/24, y+23*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+2*H/24)
  ctx.lineTo(x+2*W/24, y+3*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+3*H/24)
  ctx.lineTo(x+2*W/24, y+4*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+9*H/24)
  ctx.lineTo(x+2*W/24, y+10*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+8*H/24)
  ctx.lineTo(x+2*W/24, y+9*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+7*H/24)
  ctx.lineTo(x+2*W/24, y+8*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+6*H/24)
  ctx.lineTo(x+2*W/24, y+7*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+5*H/24)
  ctx.lineTo(x+2*W/24, y+6*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+4*H/24)
  ctx.lineTo(x+2*W/24, y+5*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+15*H/24)
  ctx.lineTo(x+2*W/24, y+16*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+16*H/24)
  ctx.lineTo(x+2*W/24, y+17*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+17*H/24)
  ctx.lineTo(x+2*W/24, y+18*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+22*H/24)
  ctx.lineTo(x+2*W/24, y+23*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+20*H/24)
  ctx.lineTo(x+2*W/24, y+21*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+19*H/24)
  ctx.lineTo(x+2*W/24, y+20*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+18*H/24)
  ctx.lineTo(x+2*W/24, y+19*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+21*H/24)
  ctx.lineTo(x+2*W/24, y+22*H/24)
  ctx.stroke()

  ctx.globalAlpha /=4
  //1
  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+18*H/24)
  cpx = x+15*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+12*H/24)
  cpx = x+12.75*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12.75*W/24, y+12*H/24)
 // ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+18*H/24)
  cpx = x+16*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+13*H/24)
  cpx = x+12.75*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12.75*W/24, y+13*H/24)
  //ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+18*H/24)
  cpx = x+15*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+12*H/24)
  cpx = x+15*W/24
  cpy = y+12.2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12.8*W/24, y+12*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+18*H/24)
  cpx = x+16*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+13*H/24)
  cpx = x+15*W/24
  cpy = y+13.2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12.8*W/24, y+13*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+16*H/24)
  cpx = x+15*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+12*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+16*H/24)
  cpx = x+16*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+13*H/24)
  ctx.stroke()
  ctx.globalAlpha *=4
}

function tunnelAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+18*H/24)
  cpx = x+4*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+6*H/24)
  cpx = x+20*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+18*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+22*W/24, y+18*H/24)
  cpx = x+22*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+4*H/24)
  cpx = x+2*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+18*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+9*H/24)
  cpx = x+11*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+7*H/24)
  cpx = x+13*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+9*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+1*W/24, y+18*H/24)
  ctx.lineTo(x+4*W/24, y+18*H/24)
  ctx.lineTo(x+11*W/24, y+9*H/24)
  ctx.lineTo(x+13*W/24, y+9*H/24)
  ctx.lineTo(x+20*W/24, y+18*H/24)
  ctx.lineTo(x+23*W/24, y+18*H/24)
  ctx.stroke()
}

function steering_wheelAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  let cs = W/24
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+12*cs+pet(d), y+14*cs+pet(d))
  cpx = x+14*cs
  cpy = y+14*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+14*cs+pet(d), y+12*cs+pet(d))
  cpx = x+14*cs
  cpy = y+10*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*cs+pet(d), y+10*cs+pet(d))
  cpx = x+10*cs
  cpy = y+10*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+10*cs+pet(d), y+12*cs+pet(d))
  cpx = x+10*cs
  cpy = y+14*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*cs+pet(d), y+14*cs+pet(d))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+12*cs+pet(d), y+24*cs+pet(d))
  cpx = x+24*cs
  cpy = y+24*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+24*cs+pet(d), y+12*cs+pet(d))
  cpx = x+24*cs
  cpy = y+0*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*cs+pet(d), y+0*cs+pet(d))
  cpx = x+0*cs
  cpy = y+0*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+0*cs+pet(d), y+12*cs+pet(d))
  cpx = x+0*cs
  cpy = y+24*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*cs+pet(d), y+24*cs+pet(d))
  cpx = x+12*cs
  cpy = y+22*cs
  ctx.moveTo(x+12*cs+pet(d), y+22*cs+pet(d))
  cpx = x+2*cs
  cpy = y+22*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+2*cs+pet(d), y+12*cs+pet(d))
  cpx = x+2*cs
  cpy = y+2*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*cs+pet(d), y+2*cs+pet(d))
  cpx = x+22*cs
  cpy = y+2*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+22*cs+pet(d), y+12*cs+pet(d))
  cpx = x+22*cs
  cpy = y+22*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*cs+pet(d), y+22*cs+pet(d))
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+2.2*cs+pet(d), y+10*cs+pet(d))
  cpx = x+10*cs
  cpy = y+11*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+10*cs+pet(d), y+11*cs+pet(d))
  cpx = x+10*cs
  cpy = y+12*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+10*cs+pet(d), y+12*cs+pet(d))
  cpx = x+2*cs
  cpy = y+11*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+2*cs+pet(d), y+11*cs+pet(d))
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+14*cs+pet(d), y+12*cs+pet(d))
  cpx = x+22*cs
  cpy = y+11*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+22*cs+pet(d), y+11*cs+pet(d))
  cpx = x+22*cs
  cpy = y+10*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+21.8*cs+pet(d), y+10*cs+pet(d))
  cpx = x+14*cs
  cpy = y+11*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+14*cs+pet(d), y+11*cs+pet(d))
  ctx.stroke()
  x += cs/2
  //5
  ctx.beginPath()
  ctx.moveTo(x+11*cs+pet(d), y+14*cs+pet(d))
  cpx = x+11*cs
  cpy = y+22*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+11*cs+pet(d), y+22*cs+pet(d))
  cpx = x+12*cs
  cpy = y+22*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*cs+pet(d), y+22*cs+pet(d))
  cpx = x+12*cs
  cpy = y+14*cs
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*cs+pet(d), y+14*cs+pet(d))
  ctx.stroke()

  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function seedAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+23*H/24)
  cpx = x+12*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+21*H/24)
  cpx = x+21*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+8*H/24)
  cpx = x+22*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+7*H/24)
  cpx = x+22*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+4*H/24)
  ctx.lineTo(x+13*W/24, y+2*H/24)
  ctx.lineTo(x+11*W/24, y+2*H/24)
  ctx.lineTo(x+11*W/24, y+4*H/24)
  cpx = x+2*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+7*H/24)
  cpx = x+2*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+8*H/24)
  cpx = x+3*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+21*H/24)
  cpx = x+12*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+23*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+8*H/24)
  ctx.lineTo(x+21*W/24, y+8*H/24)
  ctx.lineTo(x+3*W/24, y+8*H/24)
  ctx.stroke()
}

function impossibleAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+2*H/24)
  ctx.lineTo(x+22*W/24, y+2*H/24)
  ctx.lineTo(x+22*W/24, y+18*H/24)
  ctx.lineTo(x+4*W/24, y+18*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+6*H/24)
  ctx.lineTo(x+18*W/24, y+6*H/24)
  ctx.lineTo(x+18*W/24, y+14*H/24)
  ctx.lineTo(x+4*W/24, y+14*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+6*H/24)
  ctx.lineTo(x+16*W/24, y+10*H/24)
  ctx.lineTo(x+16*W/24, y+14*H/24)
  ctx.lineTo(x+16*W/24, y+10*H/24)
  ctx.lineTo(x+4*W/24, y+10*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+22*H/24)
  ctx.lineTo(x+20*W/24, y+22*H/24)
  ctx.lineTo(x+22*W/24, y+18*H/24)
  ctx.stroke()


  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+6*H/24)
  cpx = x+3*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+4*H/24)
  cpx = x+3*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+2*H/24)
  cpx = x+5*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+4*H/24)
  cpx = x+5*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+6*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+14*H/24)
  cpx = x+3*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+12*H/24)
  cpx = x+3*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+10*H/24)
  cpx = x+5*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+12*H/24)
  cpx = x+5*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+14*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+22*H/24)
  cpx = x+3*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+20*H/24)
  cpx = x+3*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+18*H/24)
  cpx = x+5*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+20*H/24)
  cpx = x+5*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+22*H/24)
  ctx.stroke()
}

function uphillAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+22*H/24)
  ctx.lineTo(x+22*W/24, y+6*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+12*H/24)
  ctx.lineTo(x+7*W/24, y+17*H/24)
  ctx.lineTo(x+17*W/24, y+7*H/24)
  ctx.lineTo(x+15*W/24, y+5*H/24)
  ctx.lineTo(x+13*W/24, y+7*H/24)
  ctx.lineTo(x+10*W/24, y+6*H/24)
  ctx.lineTo(x+4*W/24, y+12*H/24)
  ctx.stroke()

  let r = 1.42 * W/24
  ctx.beginPath()
  ctx.arc(x+10*W/24, y+16*H/24, r, 0, Math.PI * 2)
  ctx.stroke()

  ctx.beginPath()
  ctx.arc(x+16*W/24, y+10*H/24, r, 0, Math.PI * 2)
  ctx.stroke()
}

function witch_huntAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+12*H/24)
  ctx.lineTo(x+9*W/24, y+8*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+14*H/24)
  ctx.lineTo(x+11*W/24, y+9*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+15*H/24)
  ctx.lineTo(x+12*W/24, y+11*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+15*H/24)
  cpx = x+5*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+12*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+14*H/24)
  ctx.lineTo(x+2*W/24, y+18*H/24)
  ctx.lineTo(x+2*W/24, y+18*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+18*H/24)
  ctx.lineTo(x+16*W/24, y+2*H/24)
  ctx.lineTo(x+20*W/24, y+18*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+17*H/24)
  cpx = x+10*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+18*H/24)
  cpx = x+10*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+19*H/24)
  cpx = x+22*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+18*H/24)
  cpx = x+22*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+17*H/24)
  ctx.stroke()
}

function sailboatAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+18*H/24)
  ctx.lineTo(x+10*W/24, y+2*H/24)
  ctx.lineTo(x+10*W/24, y+3*H/24)
  ctx.lineTo(x+21*W/24, y+17*H/24)
  ctx.lineTo(x+10*W/24, y+17*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+22*W/24, y+22*H/24)
  ctx.lineTo(x+22*W/24, y+15*H/24)
  ctx.lineTo(x+22*W/24, y+14*H/24)
  ctx.lineTo(x+19*W/24, y+14*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+19*W/24, y+14*H/24)
  ctx.lineTo(x+22*W/24, y+14*H/24)
  ctx.lineTo(x+22*W/24, y+22*H/24)
  ctx.lineTo(x+8*W/24, y+22*H/24)
  cpx = x+4*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+18*H/24)
  cpx = x+4*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+14*H/24)
  ctx.lineTo(x+10*W/24, y+14*H/24)
  ctx.stroke()
}

 
function lemonAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+11*H/24)
  cpx = x+21*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+6*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+7*H/24)
  cpx = x+11*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+6*H/24)
  cpx = x+11*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+5*H/24)
  cpx = x+13*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+6*H/24)
  cpx = x+13*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+7*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+7*H/24)
  cpx = x+12*W/24
  cpy = y+11*H/24
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+7*H/24)
  ctx.lineTo(x+12*W/24, y+11*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+6*H/24)
  ctx.lineTo(x+21*W/24, y+6*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+7*H/24)
  ctx.lineTo(x+18*W/24, y+10*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+5*H/24)
  ctx.lineTo(x+12*W/24, y+2*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+5*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+21*W/24, y+6*H/24)
  cpx = x+21*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+2*H/24)
  cpx = x+3*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+6*H/24)
  cpx = x+3*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+11*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+5*H/24)
  ctx.lineTo(x+6*W/24, y+3*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+6*H/24)
  ctx.lineTo(x+3*W/24, y+6*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+7*H/24)
  ctx.lineTo(x+6*W/24, y+10*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+5*H/24)
  ctx.lineTo(x+18*W/24, y+3*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+12*H/24)
  cpx = x+2*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+6*H/24)
  cpx = x+2*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+1*H/24)
  cpx = x+22*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+6*H/24)
  cpx = x+22*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+12*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+6*H/24)
  cpx = x+2*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+21*H/24)
  cpx = x+11*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+22*H/24)
  cpx = x+13*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+21*H/24)
  cpx = x+22*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+6*H/24)
  ctx.stroke()
}

function dieAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let r = W/50
  
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+22*H/24)
  ctx.lineTo(x+16*W/24, y+22*H/24)
  ctx.lineTo(x+16*W/24, y+8*H/24)
  ctx.lineTo(x+2*W/24, y+8*H/24)
  ctx.lineTo(x+2*W/24, y+22*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+22*H/24)
  ctx.lineTo(x+22*W/24, y+16*H/24)
  ctx.lineTo(x+22*W/24, y+2*H/24)
  ctx.lineTo(x+16*W/24, y+8*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+8*H/24)
  ctx.lineTo(x+8*W/24, y+2*H/24)
  ctx.lineTo(x+22*W/24, y+2*H/24)
  ctx.stroke()
  //5
  ctx.beginPath()
  ctx.arc(x+5*W/24, y+11*H/24, r, 0, Math.PI*2)
  ctx.stroke()

  ctx.beginPath()
  ctx.arc(x+13*W/24, y+11*H/24, r, 0, Math.PI*2)
  ctx.stroke()

  ctx.beginPath()
  ctx.arc(x+9*W/24, y+15*H/24, r, 0, Math.PI*2)
  ctx.stroke()

  ctx.beginPath()
  ctx.arc(x+13*W/24, y+19*H/24, r, 0, Math.PI*2)
  ctx.stroke()

  ctx.beginPath()
  ctx.arc(x+5*W/24, y+19*H/24, r, 0, Math.PI*2)
  ctx.stroke()

  ctx.beginPath()
  ctx.arc(x+12*W/24, y+5*H/24, r, 0, Math.PI*2)
  ctx.stroke()

  ctx.beginPath()
  ctx.arc(x+19*W/24, y+12*H/24, r, 0, Math.PI*2)
  ctx.stroke()
  // 3 top
  ctx.beginPath()
  ctx.arc(x+9*W/24, y+3*H/24, r, 0, Math.PI*2)
  ctx.stroke()
  
  ctx.beginPath()
  ctx.arc(x+15*W/24, y+7*H/24, r, 0, Math.PI*2)
  ctx.stroke()
  
  ctx.beginPath()
  ctx.arc(x+12*W/24, y+5*H/24, r, 0, Math.PI*2)
  ctx.stroke()
}

function talkAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  
  randomWordAt(x-1*W/24, y+6*H/24,H/14,W,color)
  randomWordAt(x-1*W/24, y+10*H/24,H/14,W,color)
  randomWordAt(x-1*W/24, y+14*H/24,H/14,W,color)

  ctx.beginPath()
  ctx.moveTo(x+22*W/24, y+20*H/24)
  cpx = x+18*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+18*H/24)
  cpx = x+6*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+18*H/24)
  cpx = x+2*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+14*H/24)
  cpx = x+2*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+6*H/24)
  cpx = x+2*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+2*H/24)
  cpx = x+16*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+2*H/24)
  cpx = x+20*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+6*H/24)
  cpx = x+20*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+16*H/24)
  cpx = x+22*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+20*H/24)
  ctx.stroke()
}

function dog_whistleAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+10*H/24)
  cpx = x+2*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+6*H/24)
  cpx = x+2*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+2*H/24)
  cpx = x+10*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+6*H/24)
  cpx = x+10*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+8*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+10*H/24)
  cpx = x+7*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+9*H/24)
  cpx = x+7*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+8*H/24)
  cpx = x+6*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+6*H/24)
  cpx = x+9*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+8*H/24)
  cpx = x+8*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+9*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+9*H/24)
  ctx.lineTo(x+8*W/24, y+10*H/24)
  ctx.lineTo(x+16*W/24, y+18*H/24)
  ctx.lineTo(x+18*W/24, y+20*H/24)
  cpx = x+20*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+18*H/24)
  cpx = x+18*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+20*H/24)
  cpx = x+20*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+18*H/24)
  ctx.lineTo(x+10*W/24, y+8*H/24)
  ctx.lineTo(x+9*W/24, y+8*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+18*H/24)
  ctx.lineTo(x+18*W/24, y+16*H/24)
  cpx = x+17*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+15*H/24)
  cpx = x+15*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+18*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+18*H/24)
  cpx = x+16*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+16*H/24)
  ctx.stroke()
  
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+9*H/24)
  cpx = x+3*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+6*H/24)
  cpx = x+3*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+3*H/24)
  cpx = x+9*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+6*H/24)
  ctx.stroke()
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+6*H/24)
  cpx = x+9*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+7*H/24)
  ctx.stroke()
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+9*H/24)
  ctx.lineTo(x+7*W/24, y+9*H/24)
  ctx.stroke()
}
 
function ghost_in_the_machineAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+14*H/24)
  cpx = x+9*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+14*H/24)
  cpx = x+11*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+14*H/24)
  cpx = x+13*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+14*H/24)
  cpx = x+15*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+14*H/24)
  cpx = x+16*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+8*H/24)
  cpx = x+16*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+4*H/24)
  cpx = x+8*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+8*H/24)
  cpx = x+8*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+14*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+13*H/24)
  cpx = x+11*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+12*H/24)
  cpx = x+11*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+11*H/24)
  cpx = x+11*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+10*H/24)
  cpx = x+13*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+11*H/24)
  cpx = x+13*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+12*H/24)
  cpx = x+13*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+13*H/24)
  ctx.stroke()
  
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+9*H/24)
  cpx = x+9*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+8*H/24)
  cpx = x+9*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+7*H/24)
  cpx = x+11*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+8*H/24)
  cpx = x+11*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+9*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+9*H/24)
  cpx = x+13*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+8*H/24)
  cpx = x+13*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+7*H/24)
  cpx = x+15*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+8*H/24)
  cpx = x+15*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+9*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+19*W/24, y+16*H/24)
  cpx = x+5*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+16*H/24)
  cpx = x+4*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+15*H/24)
  cpx = x+4*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+3*H/24)
  cpx = x+4*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+2*H/24)
  cpx = x+19*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+2*H/24)
  cpx = x+20*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+3*H/24)
  cpx = x+20*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+15*H/24)
  cpx = x+20*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+16*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+17*H/24)
  ctx.lineTo(x+6*W/24, y+17*H/24)
  ctx.lineTo(x+6*W/24, y+18*H/24)
  ctx.lineTo(x+7*W/24, y+18*H/24)
  ctx.lineTo(x+7*W/24, y+19*H/24)
  ctx.lineTo(x+6*W/24, y+19*H/24)
  ctx.lineTo(x+6*W/24, y+20*H/24)
  ctx.lineTo(x+5*W/24, y+20*H/24)
  ctx.lineTo(x+5*W/24, y+19*H/24)
  ctx.lineTo(x+4*W/24, y+19*H/24)
  ctx.lineTo(x+4*W/24, y+18*H/24)
  ctx.lineTo(x+5*W/24, y+18*H/24)
  ctx.lineTo(x+5*W/24, y+17*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+21*H/24)
  cpx = x+15*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+20*H/24)
  cpx = x+15*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+19*H/24)
  cpx = x+17*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+20*H/24)
  cpx = x+17*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+21*H/24)
  cpx = x+19*W/24
  cpy = y+19*H/24
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+19*W/24, y+19*H/24)
  cpx = x+18*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+18*H/24)
  cpx = x+18*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+17*H/24)
  cpx = x+20*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+18*H/24)
  cpx = x+20*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+19*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+1*H/24)
  ctx.lineTo(x+3*W/24, y+23*H/24)
  ctx.lineTo(x+19*W/24, y+23*H/24)
  cpx = x+21*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+21*H/24)
  cpx = x+21*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+1*H/24)
  cpx = x+3*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+1*H/24)
  cpx = x+11*W/24
  cpy = y+20*H/24
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+20*H/24)
  ctx.lineTo(x+8*W/24, y+21*H/24)
  ctx.moveTo(x+13*W/24, y+20*H/24)
  ctx.lineTo(x+11*W/24, y+21*H/24)
  ctx.stroke()
}

function connect_the_dotsAt  (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.font = '600 13pt Garamond'
  if (W < 60)
    ctx.font = '0pt Garamond'
  let count = 1, r = W/72
  let cx = x+W/2, cy = y+H/2
  let offx = 12, offy = 12
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.beginPath()
  ctx.arc(x+10*W/24, y+2*H/24,r,0,Math.PI*2)
  ctx.fill()
  offx = 8
  if (x+10*W/24 < cx) offx = -18
  offy =  20
 if (y+2*H/24 < cy) offy = -8
  ctx.fillText(count++,x+offx+10*W/24, y+offy+2*H/24)
  ctx.beginPath()
  ctx.arc(x+14*W/24, y+2*H/24,r,0,Math.PI*2)
  ctx.fill()
  offx = 8
  if (x+14*W/24 < cx) offx = -18
  offy = 20
  if (y+2*H/24 < cy) offy = -8
  ctx.fillText(count++,x+offx+14*W/24, y+offy+2*H/24)
  ctx.beginPath()
  ctx.arc(x+18*W/24, y+2*H/24,r,0,Math.PI*2)
  ctx.fill()
  offx = 8
  if (x+18*W/24 < cx) offx = -18
  offy = 20
  if (y+2*H/24 < cy) offy = -8
  ctx.fillText(count++,x+offx+18*W/24, y+offy+2*H/24)
  ctx.beginPath()
  ctx.arc(x+20*W/24, y+6*H/24,r,0,Math.PI*2)
  ctx.fill()
  offx = 8
  if (x+20*W/24 < cx) offx = -18
  offy = 20
  if (y+6*H/24 < cy) offy = -8
  ctx.fillText(count++,x+offx+20*W/24, y+offy+6*H/24)
  ctx.beginPath()
  ctx.arc(x+22*W/24, y+10*H/24,r,0,Math.PI*2)
  ctx.fill()
  offx = 8
  if (x+22*W/24 < cx) offx = -18
  offy = 20
  if (y+10*H/24 < cy) offy = -8
  ctx.fillText(count++,x+offx+22*W/24, y+offy+10*H/24)
  ctx.beginPath()
  ctx.arc(x+22*W/24, y+14*H/24,r,0,Math.PI*2)
  ctx.fill()
  offx = 8
  if (x+22*W/24 < cx) offx = -18
  offy = 20
  if (y+14*H/24 < cy) offy = -8
  ctx.fillText(count++,x+offx+22*W/24, y+offy+14*H/24)
  ctx.beginPath()
  ctx.arc(x+22*W/24, y+18*H/24,r,0,Math.PI*2)
  ctx.fill()
  offx = 8
  if (x+22*W/24 < cx) offx = -18
  offy = 20
  if (y+18*H/24 < cy) offy = -8
  ctx.fillText(count++,x+offx+22*W/24, y+offy+18*H/24)
  ctx.beginPath()
  ctx.arc(x+22*W/24, y+22*H/24,r,0,Math.PI*2)
  ctx.fill()
  offx = 8
  if (x+22*W/24 < cx) offx = -18
  offy = 20
  if (y+22*H/24 < cy) offy = -8
  ctx.fillText(count++,x+offx+22*W/24, y+offy+22*H/24)
  ctx.beginPath()
  ctx.arc(x+18*W/24, y+22*H/24,r,0,Math.PI*2)
  ctx.fill()
  offx = 8
  if (x+18*W/24 < cx) offx = -18
  offy = 20
  if (y+22*H/24 < cy) offy = -8
  ctx.fillText(count++,x+offx+18*W/24, y+offy+22*H/24)
  ctx.beginPath()
  ctx.arc(x+14*W/24, y+22*H/24,r,0,Math.PI*2)
  ctx.fill()
  offx = 8
  if (x+14*W/24 < cx) offx = -18
  offy = 20
  if (y+22*H/24 < cy) offy = -8
  ctx.fillText(count++,x+offx+14*W/24, y+offy+22*H/24)
  ctx.beginPath()
  ctx.arc(x+10*W/24, y+22*H/24,r,0,Math.PI*2)
  ctx.fill()
  offx = 8
  if (x+10*W/24 < cx) offx = -18
  offy = 20
  if (y+22*H/24 < cy) offy = -8
  ctx.fillText(count++,x+offx+10*W/24, y+offy+22*H/24)
  ctx.beginPath()
  ctx.arc(x+10*W/24, y+18*H/24,r,0,Math.PI*2)
  ctx.fill()
  offx = 8
  if (x+10*W/24 < cx) offx = -18
  offy = 20
  if (y+18*H/24 < cy) offy = -8
  ctx.fillText(count++,x+offx+10*W/24, y+offy+18*H/24)
  ctx.beginPath()
  ctx.arc(x+10*W/24, y+14*H/24,r,0,Math.PI*2)
  ctx.fill()
  offx = 8
  if (x+10*W/24 < cx) offx = -18
  offy = 20
  if (y+14*H/24 < cy) offy = -8
  ctx.fillText(count++,x+offx+10*W/24, y+offy+14*H/24)
  ctx.beginPath()
  ctx.arc(x+10*W/24, y+10*H/24,r,0,Math.PI*2)
  ctx.fill()
  offx = 8
  if (x+10*W/24 < cx) offx = -18
  offy = 20
  if (y+10*H/24 < cy) offy = -8
  ctx.fillText(count++,x+offx+10*W/24, y+offy+10*H/24)
  ctx.beginPath()
  ctx.arc(x+8*W/24, y+6*H/24,r,0,Math.PI*2)
  ctx.fill()
  offx = 8
  if (x+8*W/24 < cx) offx = -18
  offy = 20
  if (y+6*H/24 < cy) offy = -8
  ctx.fillText(count++,x+offx+8*W/24, y+offy+6*H/24)
  ctx.beginPath()
  ctx.arc(x+6*W/24, y+2*H/24,r,0,Math.PI*2)
  ctx.fill()
  offx = 8
  if (x+6*W/24 < cx) offx = -18
  offy = 20
  if (y+2*H/24 < cy) offy = -8
  ctx.fillText(count++,x+offx+6*W/24, y+offy+2*H/24)
  ctx.beginPath()
  ctx.arc(x+4*W/24, y+6*H/24,r,0,Math.PI*2)
  ctx.fill()
  offx = 8
  if (x+4*W/24 < cx) offx = -18
  offy = 20
  if (y+6*H/24 < cy) offy = -8
  ctx.fillText(count++,x+offx+4*W/24, y+offy+6*H/24)
  ctx.beginPath()
  ctx.arc(x+2*W/24, y+10*H/24,r,0,Math.PI*2)
  ctx.fill()
  offx = 8
  if (x+2*W/24 < cx) offx = -18
  offy = 20
  if (y+10*H/24 < cy) offy = -8
  ctx.fillText(count++,x+offx+2*W/24, y+offy+10*H/24)
  ctx.beginPath()
  ctx.arc(x+2*W/24, y+14*H/24,r,0,Math.PI*2)
  ctx.fill()
  offx = 8
  if (x+2*W/24 < cx) offx = -18
  offy = 20
  if (y+14*H/24 < cy) offy = -8
  ctx.fillText(count++,x+offx+2*W/24, y+offy+14*H/24)
  ctx.beginPath()
  ctx.arc(x+2*W/24, y+18*H/24,r,0,Math.PI*2)
  ctx.fill()
  offx = 8
  if (x+2*W/24 < cx) offx = -18
  offy = 20
  if (y+18*H/24 < cy) offy = -8
  ctx.fillText(count++,x+offx+2*W/24, y+offy+18*H/24)
  ctx.beginPath()
  ctx.arc(x+2*W/24, y+22*H/24,r,0,Math.PI*2)
  ctx.fill()
  offx = 8
  if (x+2*W/24 < cx) offx = -18
  offy = 20
  if (y+22*H/24 < cy) offy = -8
  ctx.fillText(count++,x+offx+2*W/24, y+offy+22*H/24)
  ctx.beginPath()
  ctx.arc(x+6*W/24, y+22*H/24,r,0,Math.PI*2)
  ctx.fill()
  offx = 8
  if (x+6*W/24 < cx) offx = -18
  offy = 20
  if (y+22*H/24 < cy) offy = -8
  ctx.fillText(count++,x+offx+6*W/24, y+offy+22*H/24)
  ctx.beginPath()
  ctx.arc(x+14*W/24, y+10*H/24,r,0,Math.PI*2)
  ctx.fill()
  offx = 8
  if (x+14*W/24 < cx) offx = -18
  offy = 20
  if (y+10*H/24 < cy) offy = -8
  ctx.fillText(count++,x+offx+14*W/24, y+offy+10*H/24)
  ctx.beginPath()
  ctx.arc(x+18*W/24, y+10*H/24,r,0,Math.PI*2)
  ctx.fill()
  offx = 8
  if (x+18*W/24 < cx) offx = -18
  offy = 20
  if (y+10*H/24 < cy) offy = -8
  ctx.fillText(count++,x+offx+18*W/24, y+offy+10*H/24)

}

function cheeseAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+12*H/24)
  ctx.lineTo(x+12*W/24, y+2*H/24)
  cpx = x+21*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+8*H/24)
  ctx.lineTo(x+2*W/24, y+12*H/24)
  ctx.lineTo(x+2*W/24, y+20*H/24)
  ctx.lineTo(x+22*W/24, y+16*H/24)
  ctx.lineTo(x+22*W/24, y+8*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+14*H/24)
  cpx = x+3*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+15*H/24)
  cpx = x+3*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+16*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+19*H/24)
  cpx = x+5*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+17*H/24)
  cpx = x+9*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+18*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+14*H/24)
  cpx = x+7*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+13*H/24)
  cpx = x+7*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+12*H/24)
  cpx = x+9*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+13*H/24)
  cpx = x+9*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+14*H/24)
  cpx = x+14*W/24
  cpy = y+16*H/24
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+16*H/24)
  cpx = x+12*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+14*H/24)
  cpx = x+12*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+12*H/24)
  cpx = x+16*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+14*H/24)
  cpx = x+16*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+16*H/24)
  cpx = x+17*W/24
  cpy = y+9*H/24
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+9*H/24)
  cpx = x+17*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+11*H/24)
  cpx = x+20*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+9*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+19*W/24, y+15*H/24)
  cpx = x+18*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+14*H/24)
  cpx = x+18*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+13*H/24)
  cpx = x+20*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+14*H/24)
  cpx = x+20*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+15*H/24)
  ctx.stroke()
}

function keyholeAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  ctx.globalAlpha /= 3
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+8*H/24)
  cpx = x+6*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+13*H/24)
  cpx = x+7*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+22*H/24)
  cpx = x+17*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+22*H/24)
  cpx = x+15*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+13*H/24)
  cpx = x+18*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+8*H/24)
  cpx = x+18*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+2*H/24)
  cpx = x+6*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+8*H/24)
  ctx.fill()
  ctx.globalAlpha *= 3

  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+8*H/24)
  cpx = x+6*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+13*H/24)
  cpx = x+7*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+22*H/24)
  cpx = x+17*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+22*H/24)
  cpx = x+15*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+13*H/24)
  cpx = x+18*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+8*H/24)
  cpx = x+18*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+2*H/24)
  cpx = x+6*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+8*H/24)
  ctx.stroke()
  
}

function unread_spreadAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+16*H/24)
  cpx = x+2*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+17*H/24)
  cpx = x+8*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+17*H/24)
  cpx = x+9*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+16*H/24)
  cpx = x+9*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+7*H/24)
  cpx = x+9*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+6*H/24)
  cpx = x+3*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+6*H/24)
  cpx = x+2*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+7*H/24)
  cpx = x+2*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+16*H/24)
  ctx.stroke()
// card2 
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+14*H/24)
  cpx = x+9*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+15*H/24)
  cpx = x+15*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+15*H/24)
  cpx = x+16*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+14*H/24)
  cpx = x+16*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+5*H/24)
  cpx = x+16*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+4*H/24)
  cpx = x+10*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+4*H/24)
  cpx = x+9*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+5*H/24)
  cpx = x+9*W/24
  cpy = y+7*H/24
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+16*H/24)
  cpx = x+16*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+15*H/24)
  cpx = x+16*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+6*H/24)
  cpx = x+16*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+5*H/24)
  cpx = x+22*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+5*H/24)
  cpx = x+23*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+6*H/24)
  cpx = x+23*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+15*H/24)
  cpx = x+23*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+16*H/24)
  cpx = x+17*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+16*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+16*H/24)
  cpx = x+3*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+15*H/24)
  cpx = x+3*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+8*H/24)
  cpx = x+3*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+7*H/24)
  cpx = x+7*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+7*H/24)
  cpx = x+8*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+8*H/24)
  cpx = x+8*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+15*H/24)
  cpx = x+8*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+16*H/24)
  cpx = x+4*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+16*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+14*H/24)
  cpx = x+10*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+13*H/24)
  cpx = x+10*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+6*H/24)
  cpx = x+10*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+5*H/24)
  cpx = x+14*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+5*H/24)
  cpx = x+15*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+6*H/24)
  cpx = x+15*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+13*H/24)
  cpx = x+15*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+14*H/24)
  cpx = x+11*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+14*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+15*H/24)
  cpx = x+17*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+14*H/24)
  cpx = x+17*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+7*H/24)
  cpx = x+17*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+6*H/24)
  cpx = x+21*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+6*H/24)
  cpx = x+22*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+7*H/24)
  cpx = x+22*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+14*H/24)
  cpx = x+22*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+15*H/24)
  cpx = x+18*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+15*H/24)
  ctx.stroke()
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+7*H/24)
  ctx.lineTo(x+9*W/24, y+5*H/24)
  ctx.stroke()
}

function heirloomAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+8*H/24)
  cpx = x+12*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+5*H/24)
  cpx = x+3*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+12*H/24)
  cpx = x+3*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+18*H/24)
  cpx = x+12*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+18*H/24)
  cpx = x+21*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+12*H/24)
  cpx = x+21*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+5*H/24)
  cpx = x+12*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+8*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+8*H/24)
  cpx = x+13*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+6*H/24)
  cpx = x+17*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+9*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+8*H/24)
  cpx = x+11*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+4*H/24)
  cpx = x+12*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+4*H/24)
  cpx = x+12*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+8*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+8*H/24)
  cpx = x+11*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+6*H/24)
  cpx = x+5*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+9*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+9*H/24)
  cpx = x+16*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+7*H/24)
  cpx = x+13*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+8*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+9*H/24)
  cpx = x+6*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+7*H/24)
  cpx = x+11*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+8*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+8*H/24)
  cpx = x+10*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+11*H/24)
  cpx = x+11*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+8*H/24)
  ctx.stroke()
}

function space_invaderAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = 1
  x += W/24
  //1
  ctx.beginPath()
  ctx.moveTo(x+0*W/12, y+8*H/12)
  ctx.rect(x+0*W/12, y+8*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
  //2
  ctx.beginPath()
  ctx.moveTo(x+0*W/12, y+7*H/12)
  ctx.rect(x+0*W/12, y+7*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
  //3
  ctx.beginPath()
  ctx.moveTo(x+0*W/12, y+6*H/12)
  ctx.rect(x+0*W/12, y+6*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
  //4
  ctx.beginPath()
  ctx.moveTo(x+1*W/12, y+6*H/12)
  ctx.rect(x+1*W/12, y+6*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
  //5
  ctx.beginPath()
  ctx.moveTo(x+1*W/12, y+5*H/12)
  ctx.rect(x+1*W/12, y+5*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
  //6
  ctx.beginPath()
  ctx.moveTo(x+2*W/12, y+4*H/12)
  ctx.rect(x+2*W/12, y+4*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
  //7
  ctx.beginPath()
  ctx.moveTo(x+3*W/12, y+4*H/12)
  ctx.rect(x+3*W/12, y+4*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
  //8
  ctx.beginPath()
  ctx.moveTo(x+4*W/12, y+4*H/12)
  ctx.rect(x+4*W/12, y+4*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
  //9
  ctx.beginPath()
  ctx.moveTo(x+5*W/12, y+4*H/12)
  ctx.rect(x+5*W/12, y+4*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
  //10
  ctx.beginPath()
  ctx.moveTo(x+2*W/12, y+5*H/12)
  ctx.rect(x+2*W/12, y+5*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
  //11
  ctx.beginPath()
  ctx.moveTo(x+2*W/12, y+6*H/12)
  ctx.rect(x+2*W/12, y+6*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
  //12
  ctx.beginPath()
  ctx.moveTo(x+2*W/12, y+7*H/12)
  ctx.rect(x+2*W/12, y+7*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
  //13
  ctx.beginPath()
  ctx.moveTo(x+2*W/12, y+8*H/12)
  ctx.rect(x+2*W/12, y+8*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
  //14
  ctx.beginPath()
  ctx.moveTo(x+3*W/12, y+9*H/12)
  ctx.rect(x+3*W/12, y+9*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
  //15
  ctx.beginPath()
  ctx.moveTo(x+4*W/12, y+9*H/12)
  ctx.rect(x+4*W/12, y+9*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
  //16
  ctx.beginPath()
  ctx.moveTo(x+6*W/12, y+9*H/12)
  ctx.rect(x+6*W/12, y+9*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
  //17
  ctx.beginPath()
  ctx.moveTo(x+7*W/12, y+9*H/12)
  ctx.rect(x+7*W/12, y+9*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
  //18
  ctx.beginPath()
  ctx.moveTo(x+8*W/12, y+8*H/12)
  ctx.rect(x+8*W/12, y+8*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
  //19
  ctx.beginPath()
  ctx.moveTo(x+8*W/12, y+7*H/12)
  ctx.rect(x+8*W/12, y+7*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
  //20
  ctx.beginPath()
  ctx.moveTo(x+8*W/12, y+6*H/12)
  ctx.rect(x+8*W/12, y+6*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
  //21
  ctx.beginPath()
  ctx.moveTo(x+10*W/12, y+6*H/12)
  ctx.rect(x+10*W/12, y+6*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
  //22
  ctx.beginPath()
  ctx.moveTo(x+10*W/12, y+7*H/12)
  ctx.rect(x+10*W/12, y+7*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
  //23
  ctx.beginPath()
  ctx.moveTo(x+10*W/12, y+8*H/12)
  ctx.rect(x+10*W/12, y+8*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
  //24
  ctx.beginPath()
  ctx.moveTo(x+9*W/12, y+6*H/12)
  ctx.rect(x+9*W/12, y+6*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
  //25
  ctx.beginPath()
  ctx.moveTo(x+3*W/12, y+7*H/12)
  ctx.rect(x+3*W/12, y+7*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
  //26
  ctx.beginPath()
  ctx.moveTo(x+4*W/12, y+7*H/12)
  ctx.rect(x+4*W/12, y+7*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
  //27
  ctx.beginPath()
  ctx.moveTo(x+5*W/12, y+7*H/12)
  ctx.rect(x+5*W/12, y+7*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
  //28
  ctx.beginPath()
  ctx.moveTo(x+6*W/12, y+7*H/12)
  ctx.rect(x+6*W/12, y+7*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
  //29
  ctx.beginPath()
  ctx.moveTo(x+7*W/12, y+7*H/12)
  ctx.rect(x+7*W/12, y+7*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
  //30
  ctx.beginPath()
  ctx.moveTo(x+3*W/12, y+6*H/12)
  ctx.rect(x+3*W/12, y+6*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
  //31
  ctx.beginPath()
  ctx.moveTo(x+4*W/12, y+6*H/12)
  ctx.rect(x+4*W/12, y+6*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
  //32
  ctx.beginPath()
  ctx.moveTo(x+5*W/12, y+6*H/12)
  ctx.rect(x+5*W/12, y+6*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
  //33
  ctx.beginPath()
  ctx.moveTo(x+6*W/12, y+6*H/12)
  ctx.rect(x+6*W/12, y+6*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
  //34
  ctx.beginPath()
  ctx.moveTo(x+7*W/12, y+6*H/12)
  ctx.rect(x+7*W/12, y+6*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
  //35
  ctx.beginPath()
  ctx.moveTo(x+9*W/12, y+5*H/12)
  ctx.rect(x+9*W/12, y+5*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
  //36
  ctx.beginPath()
  ctx.moveTo(x+8*W/12, y+4*H/12)
  ctx.rect(x+8*W/12, y+4*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
  //37
  ctx.beginPath()
  ctx.moveTo(x+7*W/12, y+4*H/12)
  ctx.rect(x+7*W/12, y+4*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
  //38
  ctx.beginPath()
  ctx.moveTo(x+6*W/12, y+4*H/12)
  ctx.rect(x+6*W/12, y+4*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
  //39
  ctx.beginPath()
  ctx.moveTo(x+4*W/12, y+5*H/12)
  ctx.rect(x+4*W/12, y+5*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
  //40
  ctx.beginPath()
  ctx.moveTo(x+5*W/12, y+5*H/12)
  ctx.rect(x+5*W/12, y+5*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
  //41
  ctx.beginPath()
  ctx.moveTo(x+6*W/12, y+5*H/12)
  ctx.rect(x+6*W/12, y+5*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
  //42
  ctx.beginPath()
  ctx.moveTo(x+8*W/12, y+5*H/12)
  ctx.rect(x+8*W/12, y+5*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
  //43
  ctx.beginPath()
  ctx.moveTo(x+3*W/12, y+3*H/12)
  ctx.rect(x+3*W/12, y+3*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
  //44
  ctx.beginPath()
  ctx.moveTo(x+2*W/12, y+2*H/12)
  ctx.rect(x+2*W/12, y+2*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
  //45
  ctx.beginPath()
  ctx.moveTo(x+7*W/12, y+3*H/12)
  ctx.rect(x+7*W/12, y+3*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
  //46
  ctx.beginPath()
  ctx.moveTo(x+8*W/12, y+2*H/12)
  ctx.rect(x+8*W/12, y+2*H/12,W/12-p,W/12-p)
  ctx.closePath()
  ctx.fill()
}


function peace_symbolAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+2*H/24)
  ctx.lineTo(x+12*W/24, y+22*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+19*H/24)
  ctx.lineTo(x+12*W/24, y+12*H/24)
  ctx.lineTo(x+19*W/24, y+19*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.arc(x+12*W/24, y+12*H/24, W/24*10, 0, Math.PI*2)
  ctx.stroke()
}

function shareAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+0*H/24)
  ctx.lineTo(x+24*W/24, y+0*H/24)
  ctx.lineTo(x+12*W/24, y+24*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+0*W/24, y+0*H/24)
  ctx.lineTo(x+9*W/24, y+10*H/24)
  ctx.lineTo(x+12*W/24, y+24*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+10*H/24)
  ctx.lineTo(x+24*W/24, y+0*H/24)
  ctx.stroke()
}

function bookmarkAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+24*H/24)
  ctx.lineTo(x+2*W/24, y+0*H/24)
  ctx.lineTo(x+22*W/24, y+0*H/24)
  ctx.lineTo(x+22*W/24, y+24*H/24)
  ctx.lineTo(x+12*W/24, y+16*H/24)
  ctx.lineTo(x+2*W/24, y+24*H/24)
  ctx.stroke()
}

function racetrackAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+22*H/24)
  cpx = x+20*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+14*H/24)
  cpx = x+20*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+10*H/24)
  cpx = x+20*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+2*H/24)
  cpx = x+4*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+10*H/24)
  cpx = x+4*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+14*H/24)
  cpx = x+4*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+22*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+18*H/24)
  cpx = x+16*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+14*H/24)
  cpx = x+16*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+10*H/24)
  cpx = x+16*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+6*H/24)
  cpx = x+8*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+10*H/24)
  cpx = x+8*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+14*H/24)
  cpx = x+8*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+18*H/24)
  ctx.stroke()
  ctx.setLineDash([W/48, W/24])

  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+10*H/24)
  cpx = x+18*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+4*H/24)
  cpx = x+6*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+10*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+14*H/24)
  cpx = x+6*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+20*H/24)
  cpx = x+18*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+14*H/24)
  ctx.stroke()
  
  ctx.setLineDash([])
  let r = W/60
  // cars
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+10*H/24)
  cpx = x+18*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+11*H/24)
  cpx = x+19*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+12*H/24)
  cpx = x+19*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+13*H/24)
  cpx = x+19*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+14*H/24)
  cpx = x+17*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+14*H/24)
  cpx = x+17*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+10*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.arc(x+17*W/24, y+11*H/24, r, 0, 2*Math.PI)
  ctx.stroke()

  ctx.beginPath()
  ctx.arc(x+17*W/24, y+13*H/24, r, 0, 2*Math.PI)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+14*H/24)
  cpx = x+6*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+13*H/24)
  cpx = x+5*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+12*H/24)
  cpx = x+5*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+11*H/24)
  cpx = x+5*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+10*H/24)
  cpx = x+7*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+10*H/24)
  cpx = x+7*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+14*H/24)
  ctx.stroke()
  
  ctx.beginPath()
  ctx.arc(x+7*W/24, y+11*H/24, r, 0, 2*Math.PI)
  ctx.stroke()

  ctx.beginPath()
  ctx.arc(x+7*W/24, y+13*H/24, r, 0, 2*Math.PI)
  ctx.stroke()
}

function morulaAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  let r1 = W/2
  ctx.beginPath()
  ctx.arc(x+W/2, y+H/2, r1, 0, Math.PI*2)
  ctx.stroke()
  r1 *= 0.85
  ctx.beginPath()
  ctx.arc(x+W/2, y+H/2, r1, 0, Math.PI*2)
  ctx.stroke()

  r1 *= 0.35
  ctx.beginPath()
  ctx.arc(W/2, H/2, r1, 0, Math.PI*2)
 // ctx.stroke()
  let r2 = r1*1.7
  r1 *= 1.1
  let a = 0
  let inc = (Math.PI*2)/7
  let cx = W/2, cy = H/2
  let x2 = cx + r2 * Math.cos(a)
  let y2 = cy + r2 * Math.sin(a)

  let s = Math.PI * 1.65
  let e = Math.PI * 1.8 + Math.PI/1.7
  let i = 0
  ctx.beginPath()
  for (;i < 7; i++) {
    
    ctx.arc(x+x2, y+y2, r1, s, e)
    
    a += inc
    x2 = cx + r2 * Math.cos(a)
    y2 = cy + r2 * Math.sin(a)
    s += Math.PI/3.6
    e += Math.PI/3.6
  }
  ctx.closePath()
  ctx.stroke()
}

function eggAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+4*H/24)
  cpx = x+3*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+10*H/24)
  cpx = x+3*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+16*H/24)
  cpx = x+20*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+10*H/24)
  cpx = x+20*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+4*H/24)
  ctx.stroke()
}

function crackedeggAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+4*H/24)
  cpx = x+2*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+10*H/24)
  cpx = x+2*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+16*H/24)
  ctx.lineTo(x+9*W/24, y+13*H/24)
  ctx.lineTo(x+10*W/24, y+12*H/24)
  ctx.lineTo(x+8*W/24, y+10*H/24)
  ctx.lineTo(x+10*W/24, y+7*H/24)
  ctx.lineTo(x+8*W/24, y+7*H/24)
  ctx.lineTo(x+10*W/24, y+4*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+16*H/24)
  cpx = x+22*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+10*H/24)
  cpx = x+22*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+4*H/24)
  ctx.lineTo(x+13*W/24, y+6*H/24)
  ctx.lineTo(x+15*W/24, y+7*H/24)
  ctx.lineTo(x+12*W/24, y+9*H/24)
  ctx.lineTo(x+15*W/24, y+11*H/24)
  ctx.lineTo(x+13*W/24, y+13*H/24)
  ctx.lineTo(x+14*W/24, y+16*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+16*H/24)
  cpx = x+14*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+20*H/24)
  cpx = x+21*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+22*H/24)
  cpx = x+21*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+23*H/24)
  cpx = x+3*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+23*H/24)
  cpx = x+1*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+22*H/24)
  cpx = x+1*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+20*H/24)
  ctx.stroke()


  //1
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+20*H/24)
  cpx = x+7*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+18*H/24)
  cpx = x+14*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+20*H/24)
  cpx = x+14*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+22*H/24)
  cpx = x+7*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+20*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+18*H/24)
  cpx = x+11*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+16*H/24)
  cpx = x+9*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+15*H/24)
  cpx = x+12*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+14*H/24)
  ctx.stroke()
}

function two_car_garageAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color

  ctx.globalAlpha /= 3
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+13*H/24)
  ctx.lineTo(x+21*W/24, y+13*H/24)
  ctx.lineTo(x+21*W/24, y+20*H/24)
  ctx.lineTo(x+13*W/24, y+20*H/24)
  ctx.fill()
  ctx.globalAlpha *= 3
  //1
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+20*H/24)
  ctx.lineTo(x+22*W/24, y+20*H/24)
  ctx.lineTo(x+22*W/24, y+7*H/24)
  ctx.lineTo(x+12*W/24, y+2*H/24)
  ctx.lineTo(x+2*W/24, y+7*H/24)
  ctx.lineTo(x+2*W/24, y+20*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+20*H/24)
  ctx.lineTo(x+3*W/24, y+10*H/24)
  ctx.lineTo(x+11*W/24, y+10*H/24)
  ctx.lineTo(x+11*W/24, y+19*H/24)
  ctx.lineTo(x+11*W/24, y+20*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+20*H/24)
  ctx.lineTo(x+13*W/24, y+10*H/24)
  ctx.lineTo(x+21*W/24, y+10*H/24)
  ctx.lineTo(x+21*W/24, y+20*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+13*H/24)
  ctx.lineTo(x+21*W/24, y+13*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+6.75*W/24, y+19*H/24)
  ctx.lineTo(x+7.25*W/24, y+19*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+16.75*W/24, y+12*H/24)
  ctx.lineTo(x+17.25*W/24, y+12*H/24)
  ctx.stroke()
}

function virusAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  W *= 1.25
  x -= 2*W/24
  y -= 2*W/24
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+18*H/24)
  cpx = x+18*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+12*H/24)
  cpx = x+18*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+6*H/24)
  cpx = x+6*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+12*H/24)
  cpx = x+6*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+18*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+6*H/24)
  cpx = x+11*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+5*H/24)
  cpx = x+11*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+4*H/24)
  cpx = x+13*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+5*H/24)
  cpx = x+13*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+6*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+12*H/24)
  cpx = x+18*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+13*H/24)
  cpx = x+20*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+12*H/24)
  cpx = x+20*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+11*H/24)
  cpx = x+18*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+12*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+7*H/24)
  cpx = x+16*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+6*H/24)
  cpx = x+18*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+7*H/24)
  cpx = x+18*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+8*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+18*H/24)
  cpx = x+13*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+19*H/24)
  cpx = x+13*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+20*H/24)
  cpx = x+11*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+19*H/24)
  cpx = x+11*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+18*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+12*H/24)
  cpx = x+6*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+13*H/24)
  cpx = x+4*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+12*H/24)
  cpx = x+4*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+11*H/24)
  cpx = x+6*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+12*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+8*H/24)
  cpx = x+6*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+7*H/24)
  cpx = x+6*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+6*H/24)
  cpx = x+8*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+7*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+16*H/24)
  cpx = x+6*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+17*H/24)
  cpx = x+6*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+18*H/24)
  cpx = x+8*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+17*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+17*H/24)
  cpx = x+16*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+18*H/24)
  cpx = x+18*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+17*H/24)
  cpx = x+18*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+16*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+13*H/24)
  cpx = x+11*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+12*H/24)
  cpx = x+11*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+11*H/24)
  cpx = x+13*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+12*H/24)
  cpx = x+13*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+13*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+9*H/24)
  cpx = x+11*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+8*H/24)
  cpx = x+11*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+7*H/24)
  cpx = x+13*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+8*H/24)
  cpx = x+13*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+9*H/24)
  cpx = x+16*W/24
  cpy = y+11*H/24
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+11*H/24)
  cpx = x+15*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+10*H/24)
  cpx = x+15*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+9*H/24)
  cpx = x+17*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+10*H/24)
  cpx = x+17*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+11*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+15*H/24)
  cpx = x+15*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+14*H/24)
  cpx = x+15*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+13*H/24)
  cpx = x+17*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+14*H/24)
  cpx = x+17*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+15*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+11*H/24)
  cpx = x+7*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+10*H/24)
  cpx = x+7*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+9*H/24)
  cpx = x+9*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+10*H/24)
  cpx = x+9*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+11*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+13*H/24)
  cpx = x+9*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+14*H/24)
  cpx = x+9*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+15*H/24)
  cpx = x+7*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+14*H/24)
  cpx = x+7*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+13*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+17*H/24)
  cpx = x+11*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+16*H/24)
  cpx = x+11*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+15*H/24)
  cpx = x+13*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+16*H/24)
  cpx = x+13*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+17*H/24)
  ctx.stroke()
}

function nodogAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "round"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, angle = -3

  ctx.beginPath()
  p = rotatePoint(x+9*W/24, y+23*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+9*W/24
  cpy = y+19*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+9*W/24, y+19*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+9*W/24
  cpy = y+17*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+10*W/24, y+17*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+11*W/24
  cpy = y+17*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+11*W/24, y+17*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+11*W/24
  cpy = y+18*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+13*W/24, y+17*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+12*W/24
  cpy = y+16*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+14*W/24, y+15*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+14*W/24
  cpy = y+14*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+13*W/24, y+14*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+11*W/24
  cpy = y+14*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+11*W/24, y+17*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+10*W/24
  cpy = y+17*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+10*W/24, y+17*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+10*W/24
  cpy = y+15*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+10*W/24, y+14*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+7*W/24
  cpy = y+13*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+7*W/24, y+10*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+6*W/24
  cpy = y+9*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+4*W/24, y+10*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+3*W/24
  cpy = y+10*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+3*W/24, y+9*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+2*W/24
  cpy = y+9*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+1*W/24, y+8*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+1*W/24
  cpy = y+7*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+4*W/24, y+7*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+4*W/24
  cpy = y+5*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+6*W/24, y+5*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+8*W/24
  cpy = y+5*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+8*W/24, y+7*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+18*W/24
  cpy = y+7*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+18*W/24, y+14*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+21*W/24
  cpy = y+13*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+22*W/24, y+12*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+23*W/24
  cpy = y+12*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+23*W/24, y+13*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+22*W/24
  cpy = y+14*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+18*W/24, y+16*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+15*W/24
  cpy = y+17*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+15*W/24, y+16*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+15*W/24
  cpy = y+17*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+15*W/24, y+18*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+15*W/24
  cpy = y+19*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+13*W/24, y+19*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+12*W/24
  cpy = y+19*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+11*W/24, y+23*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.fill()

  ctx.strokeStyle = "white"
  //ctx.lineWidth *= 2
  //3 N
  ctx.beginPath()
  p = rotatePoint(x+9*W/24, y+10*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+10.2*W/24
  cpy = y+9*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+10.2*W/24, y+7.5*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+10*W/24
  cpy = y+9*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+10.8*W/24, y+10.4*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+11*W/24
  cpy = y+9*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24, y+8*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()

  //4 o
  ctx.beginPath()
  p = rotatePoint(x+12*W/24, y+10*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+12*W/24
  cpy = y+9*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+13*W/24, y+9*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+13.5*W/24
  cpy = y+9*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+13.5*W/24, y+10*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+13.5*W/24
  cpy = y+11*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12.5*W/24, y+11*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  cpx = x+12*W/24
  cpy = y+11*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+12*W/24, y+10*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()

  //5 !
  ctx.beginPath()
  p = rotatePoint(x+14*W/24, y+12*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  p = rotatePoint(x+14.1*W/24, y+12.1*H/24 ,cx,cy,angle)
  ctx.lineTo(p[0],p[1])
  ctx.stroke()

  ctx.beginPath()
  p = rotatePoint(x+14.9*W/24, y+11.1*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+15.8*W/24
  cpy = y+9.4*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+15.8*W/24, y+9.4*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  ctx.stroke()
  //6
  ctx.beginPath()
  p = rotatePoint(x+14.2*W/24, y+11.2*H/24 ,cx,cy,angle)
  ctx.moveTo(p[0],p[1])
  cpx = x+15.6*W/24
  cpy = y+10*H/24
  cp = rotatePoint(cpx,cpy,cx,cy,angle)
  p = rotatePoint(x+15.7*W/24, y+10.3*H/24,cx,cy,angle)
  ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
  //ctx.stroke()
  ctx.strokeStyle = color
  //ctx.lineWidth /= 2
}

function get_off_my_lawnAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.font = 3*W/24+"pt Times New Roman"
  ctx.fillText("KEEP",x+7*W/24, y+6.25*H/24)
  ctx.fillText("OFF",x+8*W/24, y+10.75*H/24)

  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+12*H/24)
  ctx.lineTo(x+21*W/24, y+12*H/24)
  ctx.lineTo(x+21*W/24, y+2*H/24)
  ctx.lineTo(x+3*W/24, y+2*H/24)
  ctx.lineTo(x+3*W/24, y+12*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+2*H/24)
  ctx.lineTo(x+11*W/24, y+1*H/24)
  ctx.lineTo(x+13*W/24, y+1*H/24)
  ctx.lineTo(x+13*W/24, y+2*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+12*H/24)
  ctx.lineTo(x+11*W/24, y+22*H/24)
  ctx.moveTo(x+13*W/24, y+22*H/24)
  ctx.lineTo(x+13*W/24, y+12*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+22*H/24)
  cpx = x+13*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+16*H/24)
  cpx = x+15*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+22*H/24)
  cpx = x+15*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+17*H/24)
  cpx = x+16*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+22*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+22*H/24)
  cpx = x+11*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+17*H/24)
  cpx = x+9*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+22*H/24)
  cpx = x+9*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+18*H/24)
  cpx = x+8*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+22*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+22*H/24)
  cpx = x+7*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+18*H/24)
  cpx = x+6*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+22*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+22*H/24)
  cpx = x+6*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+17*H/24)
  cpx = x+4*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+22*H/24)
  cpx = x+4*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+18*H/24)
  cpx = x+2*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+22*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+21*W/24, y+22*H/24)
  cpx = x+22*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+17*H/24)
  cpx = x+20*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+22*H/24)
  cpx = x+20*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+17*H/24)
  cpx = x+19*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+22*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+22*H/24)
  cpx = x+16*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+19*H/24)
  cpx = x+17*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+22*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+22*H/24)
  cpx = x+18*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+18*H/24)
  cpx = x+19*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+22*H/24)
  ctx.stroke()
  nodogAt(x+3*W/24, y+15*H/24 , 8*W/24, color)
}

function too_expensive_burgerAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  W *= 1.25
  x -= 2*W/24
  y -= 2*W/24
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.globalAlpha /= 3
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+16*H/24)
  ctx.lineTo(x+19*W/24, y+16*H/24)
  cpx = x+20*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+14*H/24)
  cpx = x+20*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+12*H/24)
  ctx.lineTo(x+17*W/24, y+12*H/24)
  ctx.lineTo(x+15*W/24, y+15*H/24)
  ctx.lineTo(x+12*W/24, y+12*H/24)
  ctx.lineTo(x+5*W/24, y+12*H/24)
  cpx = x+4*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+14*H/24)
  cpx = x+4*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+16*H/24)
  ctx.fill()  
  ctx.globalAlpha *= 3

  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+11*H/24)
  cpx = x+6*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+11*H/24)
  cpx = x+10*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+11*H/24)
  cpx = x+14*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+11*H/24)
  cpx = x+18*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+11*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+10*H/24)
  cpx = x+4*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+10*H/24)
  cpx = x+4*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+5*H/24)
  cpx = x+20*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+10*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+12*H/24)
  cpx = x+15*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+15*H/24)
  cpx = x+17*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+12*H/24)
  cpx = x+19*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+12*H/24)
  cpx = x+20*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+14*H/24)
  cpx = x+20*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+16*H/24)
  cpx = x+5*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+16*H/24)
  cpx = x+4*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+14*H/24)
  cpx = x+4*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+12*H/24)
  cpx = x+12*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+12*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+16*H/24)
  cpx = x+20*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+16*H/24)
  cpx = x+20*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+19*H/24)
  cpx = x+6*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+19*H/24)
  cpx = x+4*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+16*H/24)
  ctx.stroke()
// letuce
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+12*H/24)
  ctx.lineTo(x+17*W/24, y+12*H/24)
  ctx.stroke()

  // seeds
  let r = W/96
  ctx.beginPath()
  ctx.arc(x+6*W/24, y+8*H/24, r, 0, Math.PI*2)
  ctx.stroke()

  ctx.beginPath()
  ctx.arc(x+8*W/24, y+7*H/24, r, 0, Math.PI*2)
  ctx.stroke()

  ctx.beginPath()
  ctx.arc(x+10*W/24, y+8*H/24, r, 0, Math.PI*2)
  ctx.stroke()

  ctx.beginPath()
  ctx.arc(x+10*W/24, y+6*H/24, r, 0, Math.PI*2)
  ctx.stroke()

  ctx.beginPath()
  ctx.arc(x+12*W/24, y+7*H/24, r, 0, Math.PI*2)
  ctx.stroke()

  ctx.beginPath()
  ctx.arc(x+14*W/24, y+6*H/24, r, 0, Math.PI*2)
  ctx.stroke()

  ctx.beginPath()
  ctx.arc(x+15*W/24, y+8*H/24, r, 0, Math.PI*2)
  ctx.stroke()

  ctx.beginPath()
  ctx.arc(x+17*W/24, y+7*H/24, r, 0, Math.PI*2)
  ctx.stroke()

  ctx.beginPath()
  ctx.arc(x+18*W/24, y+9*H/24, r, 0, Math.PI*2)
  ctx.stroke()
}

function bandaidAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+16*H/24)
  cpx = x+2*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+14*H/24)
  cpx = x+2*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+10*H/24)
  cpx = x+2*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+8*H/24)
  cpx = x+20*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+8*H/24)
  cpx = x+22*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+10*H/24)
  cpx = x+22*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+14*H/24)
  cpx = x+22*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+16*H/24)
  cpx = x+4*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+16*H/24)
  ctx.stroke()
  let r = W/96

  ctx.beginPath()
  ctx.arc(x+9*W/24, y+9*H/24, r, 0, Math.PI*2)
  ctx.stroke()

  ctx.beginPath()
  ctx.arc(x+11*W/24, y+9*H/24, r, 0, Math.PI*2)
  ctx.stroke()

  ctx.beginPath()
  ctx.arc(x+13*W/24, y+9*H/24, r, 0, Math.PI*2)
  ctx.stroke()

  ctx.beginPath()
  ctx.arc(x+15*W/24, y+9*H/24, r, 0, Math.PI*2)
  ctx.stroke()

  ctx.beginPath()
  ctx.arc(x+9*W/24, y+11*H/24, r, 0, Math.PI*2)
  ctx.stroke()

  ctx.beginPath()
  ctx.arc(x+9*W/24, y+13*H/24, r, 0, Math.PI*2)
  ctx.stroke()

  ctx.beginPath()
  ctx.arc(x+9*W/24, y+15*H/24, r, 0, Math.PI*2)
  ctx.stroke()

  ctx.beginPath()
  ctx.arc(x+11*W/24, y+15*H/24, r, 0, Math.PI*2)
  ctx.stroke()

  ctx.beginPath()
  ctx.arc(x+13*W/24, y+15*H/24, r, 0, Math.PI*2)
  ctx.stroke()

  ctx.beginPath()
  ctx.arc(x+15*W/24, y+15*H/24, r, 0, Math.PI*2)
  ctx.stroke()

  ctx.beginPath()
  ctx.arc(x+13*W/24, y+13*H/24, r, 0, Math.PI*2)
  ctx.stroke()

  ctx.beginPath()
  ctx.arc(x+15*W/24, y+13*H/24, r, 0, Math.PI*2)
  ctx.stroke()

  ctx.beginPath()
  ctx.arc(x+15*W/24, y+11*H/24, r, 0, Math.PI*2)
  ctx.stroke()

  ctx.beginPath()
  ctx.arc(x+13*W/24, y+11*H/24, r, 0, Math.PI*2)
  ctx.stroke()

  ctx.beginPath()
  ctx.arc(x+11*W/24, y+11*H/24, r, 0, Math.PI*2)
  ctx.stroke()

  ctx.beginPath()
  ctx.arc(x+11*W/24, y+13*H/24, r, 0, Math.PI*2)
  ctx.stroke()
/////////////
  ctx.beginPath()
  ctx.arc(x+10*W/24, y+10*H/24, r, 0, Math.PI*2)
  ctx.stroke()

  ctx.beginPath()
  ctx.arc(x+12*W/24, y+10*H/24, r, 0, Math.PI*2)
  ctx.stroke()

  ctx.beginPath()
  ctx.arc(x+14*W/24, y+10*H/24, r, 0, Math.PI*2)
  ctx.stroke()

  ctx.beginPath()
  ctx.arc(x+10*W/24, y+12*H/24, r, 0, Math.PI*2)
  ctx.stroke()

  ctx.beginPath()
  ctx.arc(x+12*W/24, y+12*H/24, r, 0, Math.PI*2)
  ctx.stroke()

  ctx.beginPath()
  ctx.arc(x+14*W/24, y+12*H/24, r, 0, Math.PI*2)
  ctx.stroke()

  ctx.beginPath()
  ctx.arc(x+14*W/24, y+14*H/24, r, 0, Math.PI*2)
  ctx.stroke()

  ctx.beginPath()
  ctx.arc(x+12*W/24, y+14*H/24, r, 0, Math.PI*2)
  ctx.stroke()

  ctx.beginPath()
  ctx.arc(x+10*W/24, y+14*H/24, r, 0, Math.PI*2)
  ctx.stroke()
}

function monitorAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+6*H/24)
  ctx.lineTo(x+8*W/24, y+18*H/24)
  ctx.lineTo(x+22*W/24, y+18*H/24)
  ctx.lineTo(x+22*W/24, y+4*H/24)
  ctx.lineTo(x+8*W/24, y+4*H/24)
  ctx.lineTo(x+8*W/24, y+6*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+4*H/24)
  ctx.lineTo(x+6*W/24, y+4*H/24)
  ctx.lineTo(x+6*W/24, y+17*H/24)
  ctx.lineTo(x+8*W/24, y+18*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+16*H/24)
  ctx.lineTo(x+2*W/24, y+14*H/24)
  ctx.lineTo(x+2*W/24, y+5*H/24)
  ctx.lineTo(x+6*W/24, y+5*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+6*H/24)
  ctx.lineTo(x+3*W/24, y+8*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+6*H/24)
  ctx.lineTo(x+4*W/24, y+8*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+6*H/24)
  ctx.lineTo(x+5*W/24, y+8*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+5*H/24)
  ctx.lineTo(x+9*W/24, y+16*H/24)
  ctx.lineTo(x+21*W/24, y+16*H/24)
  ctx.lineTo(x+21*W/24, y+5*H/24)
  ctx.lineTo(x+9*W/24, y+5*H/24)
  ctx.stroke()
  let r = W/96
  ctx.beginPath()
  ctx.arc(x+10*W/24, y+17*H/24, r, 0, Math.PI*2)
  ctx.stroke()

  ctx.beginPath()
  ctx.arc(x+11*W/24, y+17*H/24, r, 0, Math.PI*2)
  ctx.stroke()

  ctx.beginPath()
  ctx.arc(x+19*W/24, y+17*H/24, r, 0, Math.PI*2)
  ctx.stroke()

  ctx.beginPath()
  ctx.arc(x+20*W/24, y+17*H/24, r, 0, Math.PI*2)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+18*H/24)
  ctx.lineTo(x+13*W/24, y+20*H/24)
  ctx.lineTo(x+15*W/24, y+20*H/24)
  ctx.lineTo(x+15*W/24, y+18*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+19*H/24)
  cpx = x+11*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+20*H/24)
  cpx = x+11*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+21*H/24)
  cpx = x+17*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+20*H/24)
  cpx = x+17*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+19*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+20*H/24)
  cpx = x+10*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+21*H/24)
  cpx = x+11*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+22*H/24)
  cpx = x+17*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+21*H/24)
  cpx = x+18*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+20*H/24)
  ctx.stroke()
}

function entanglementAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+20*H/24)
  cpx = x+6*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+22*H/24)
  cpx = x+2*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+20*H/24)
  cpx = x+2*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+18*H/24)
  cpx = x+6*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+20*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+6*H/24)
  cpx = x+18*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+4*H/24)
  cpx = x+18*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+2*H/24)
  cpx = x+22*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+4*H/24)
  cpx = x+22*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+6*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+18*H/24)
  cpx = x+5*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+16*H/24)
  cpx = x+11*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+14*H/24)
  cpx = x+9*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+12*H/24)
  cpx = x+15*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+10*H/24)
  cpx = x+13*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+8*H/24)
  cpx = x+19*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+6*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+5*H/24)
  ctx.lineTo(x+20*W/24, y+3*H/24)
  ctx.lineTo(x+19*W/24, y+4*H/24)
  ctx.lineTo(x+20*W/24, y+3*H/24)
  ctx.lineTo(x+21*W/24, y+4*H/24)
  ctx.lineTo(x+20*W/24, y+3*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+19*H/24)
  ctx.lineTo(x+4*W/24, y+21*H/24)
  ctx.lineTo(x+5*W/24, y+20*H/24)
  ctx.lineTo(x+4*W/24, y+21*H/24)
  ctx.lineTo(x+3*W/24, y+20*H/24)
  ctx.lineTo(x+4*W/24, y+21*H/24)
  ctx.stroke()
}

function mushroomAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+22*H/24)
  cpx = x+16*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+18*H/24)
  cpx = x+15*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+10*H/24)
  cpx = x+12*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+10*H/24)
  cpx = x+9*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+18*H/24)
  cpx = x+8*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+22*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+13*H/24)
  cpx = x+4*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+10*H/24)
  cpx = x+2*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+6*H/24)
  cpx = x+22*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+10*H/24)
  cpx = x+20*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+13*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+10*H/24)
  cpx = x+2*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+2*H/24)
  cpx = x+22*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+10*H/24)
  ctx.stroke()
}

function airplaneAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+13*H/24)
  ctx.lineTo(x+9*W/24, y+16*H/24)
  ctx.lineTo(x+22*W/24, y+5*H/24)
  ctx.lineTo(x+2*W/24, y+13*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+22*W/24, y+5*H/24)
  ctx.lineTo(x+12*W/24, y+17*H/24)
  ctx.lineTo(x+20*W/24, y+20*H/24)
  ctx.lineTo(x+22*W/24, y+5*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+18*H/24)
  ctx.lineTo(x+11*W/24, y+21*H/24)
  ctx.lineTo(x+12*W/24, y+17*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+21*H/24)
  ctx.lineTo(x+9*W/24, y+16*H/24)
  ctx.stroke()
}

function fossilAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+16*H/24)
  cpx = x+20*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+12*H/24)
  cpx = x+20*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+8*H/24)
  cpx = x+16*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+16*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+8*H/24)
  ctx.lineTo(x+13*W/24, y+16*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+9*H/24)
  ctx.lineTo(x+10*W/24, y+15*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+10*H/24)
  ctx.lineTo(x+7*W/24, y+14*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+12*H/24)
  cpx = x+4*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+9*H/24)
  cpx = x+1*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+1*W/24, y+15*H/24)
  cpx = x+4*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+12*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+12*H/24)
  ctx.lineTo(x+16*W/24, y+12*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+12*H/24)
  cpx = x+17*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+11*H/24)
  cpx = x+17*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+10*H/24)
  cpx = x+19*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+11*H/24)
  cpx = x+19*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+12*H/24)
  ctx.stroke()
}


function nice_thingsAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+22*H/24)
  cpx = x+3*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+16*H/24)
  cpx = x+3*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+10*H/24)
  cpx = x+7*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+14*H/24)
  ctx.lineTo(x+10*W/24, y+14*H/24)
  ctx.lineTo(x+11*W/24, y+13*H/24)
  ctx.lineTo(x+10*W/24, y+14*H/24)
  ctx.lineTo(x+9*W/24, y+14*H/24)
  ctx.lineTo(x+11*W/24, y+15*H/24)
  ctx.lineTo(x+9*W/24, y+14*H/24)
  ctx.lineTo(x+7*W/24, y+16*H/24)
  cpx = x+7*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+22*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+10*H/24)
  cpx = x+12*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+15*H/24)
  ctx.lineTo(x+16*W/24, y+15*H/24)
  ctx.lineTo(x+14*W/24, y+16*H/24)
  cpx = x+12*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+22*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+19*W/24, y+13*H/24)
  ctx.lineTo(x+18*W/24, y+15*H/24)
  ctx.lineTo(x+18*W/24, y+20*H/24)
  cpx = x+18*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+21*H/24)
  cpx = x+14*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+22*H/24)
  cpx = x+23*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+22*H/24)
  cpx = x+23*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+21*H/24)
  cpx = x+19*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+20*H/24)
  cpx = x+19*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+13*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+18*H/24)
  ctx.lineTo(x+6*W/24, y+17*H/24)
  ctx.lineTo(x+3*W/24, y+18*H/24)
  ctx.lineTo(x+4*W/24, y+18*H/24)
  ctx.lineTo(x+5*W/24, y+18*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+22*H/24)
  ctx.lineTo(x+13*W/24, y+21*H/24)
  ctx.lineTo(x+13*W/24, y+22*H/24)
  ctx.lineTo(x+10*W/24, y+22*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+19*W/24, y+18*H/24)
  ctx.lineTo(x+21*W/24, y+21*H/24)
  ctx.lineTo(x+22*W/24, y+20*H/24)
  ctx.lineTo(x+19*W/24, y+18*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+22*H/24)
  ctx.lineTo(x+8*W/24, y+21*H/24)
  ctx.lineTo(x+9*W/24, y+20*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+21*H/24)
  ctx.lineTo(x+3*W/24, y+22*H/24)
  ctx.lineTo(x+2*W/24, y+22*H/24)
  ctx.lineTo(x+2*W/24, y+21*H/24)
  ctx.stroke()
}

function tissue_boxAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+19*H/24)
  ctx.lineTo(x+18*W/24, y+19*H/24)
  ctx.lineTo(x+22*W/24, y+14*H/24)
  ctx.lineTo(x+22*W/24, y+6*H/24)
  ctx.lineTo(x+18*W/24, y+11*H/24)
  ctx.lineTo(x+14*W/24, y+11*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+19*H/24)
  ctx.lineTo(x+2*W/24, y+11*H/24)
  ctx.lineTo(x+6*W/24, y+11*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+11*H/24)
  ctx.lineTo(x+6*W/24, y+6*H/24)
  ctx.lineTo(x+22*W/24, y+6*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+11*H/24)
  cpx = x+6*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+15*H/24)
  cpx = x+14*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+11*H/24)
  cpx = x+16*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+8*H/24)
  cpx = x+8*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+11*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+12*H/24)
  ctx.lineTo(x+14*W/24, y+12*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+11*H/24)
  ctx.lineTo(x+18*W/24, y+19*H/24)
  ctx.stroke()

}

  function d_rAt (x,y,W,color) {
    let canvas = document.getElementById("myCanvas")
    let ctx = canvas.getContext("2d")
    let H = W, cpx, cpy, points = []
    let colors = shuffle(getCurrentPalette(true,13))
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
    ctx.strokeStyle = color
    ctx.lineCap = "square"
    ctx.lineJoin = "bevel"
  
    ctx.beginPath()
    ctx.moveTo(x+14*W/24, y+12*H/24)
    cpx = x+21*W/24
    cpy = y+11*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+11*H/24)
    cpx = x+22*W/24
    cpy = y+11*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+10*H/24)
    cpx = x+22*W/24
    cpy = y+9*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+9*H/24)
    cpx = x+14*W/24
    cpy = y+10*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+10*H/24)
    ctx.stroke()
    
    ctx.beginPath()
    ctx.moveTo(x+14*W/24, y+14*H/24)
    cpx = x+20*W/24
    cpy = y+14*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+14*H/24)
    cpx = x+22*W/24
    cpy = y+14*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+13*H/24)
    cpx = x+22*W/24
    cpy = y+12*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+12*H/24)
    cpx = x+14*W/24
    cpy = y+12*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+12*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+14*W/24, y+10*H/24)
    cpx = x+14*W/24
    cpy = y+5*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+5*H/24)
    cpx = x+4*W/24
    cpy = y+5*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+10*H/24)
    cpx = x+4*W/24
    cpy = y+14*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+15*H/24)
    cpx = x+7*W/24
    cpy = y+17*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+19*H/24)
    cpx = x+4*W/24
    cpy = y+20*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+22*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+14*W/24, y+14*H/24)
    cpx = x+14*W/24
    cpy = y+16*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+18*H/24)
    cpx = x+13*W/24
    cpy = y+19*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+20*H/24)
    cpx = x+18*W/24
    cpy = y+21*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+22*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+10*W/24, y+10*H/24)
    cpx = x+9*W/24
    cpy = y+10*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+9*H/24)
    cpx = x+9*W/24
    cpy = y+8*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+8*H/24)
    cpx = x+11*W/24
    cpy = y+8*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+9*H/24)
    cpx = x+11*W/24
    cpy = y+10*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+10*H/24)
    ctx.stroke()
    
    if (Math.random() > 0.5)
      rcc()
  }

function negative_spaceAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+18*H/24)
  ctx.lineTo(x+2*W/24, y+22*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+18*H/24)
  ctx.lineTo(x+4*W/24, y+22*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+18*H/24)
  ctx.lineTo(x+6*W/24, y+22*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+18*H/24)
  ctx.lineTo(x+8*W/24, y+22*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+18*H/24)
  ctx.lineTo(x+10*W/24, y+22*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+18*H/24)
  ctx.lineTo(x+12*W/24, y+22*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+18*H/24)
  ctx.lineTo(x+14*W/24, y+22*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+22*H/24)
  ctx.lineTo(x+22*W/24, y+16*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+22*H/24)
  ctx.lineTo(x+22*W/24, y+18*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+22*H/24)
  ctx.lineTo(x+22*W/24, y+20*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+16*H/24)
  ctx.lineTo(x+2*W/24, y+20*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+14*H/24)
  ctx.lineTo(x+2*W/24, y+18*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+12*H/24)
  ctx.lineTo(x+2*W/24, y+16*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+18*H/24)
  ctx.lineTo(x+22*W/24, y+14*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+16*H/24)
  ctx.lineTo(x+22*W/24, y+12*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+14*H/24)
  ctx.lineTo(x+22*W/24, y+10*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+14*H/24)
  ctx.lineTo(x+6*W/24, y+10*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+12*H/24)
  ctx.lineTo(x+6*W/24, y+8*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+10*H/24)
  ctx.lineTo(x+6*W/24, y+6*H/24)
  ctx.lineTo(x+10*W/24, y+2*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+8*H/24)
  ctx.lineTo(x+8*W/24, y+2*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+6*H/24)
  ctx.lineTo(x+6*W/24, y+2*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+4*H/24)
  ctx.lineTo(x+4*W/24, y+2*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+6*H/24)
  ctx.lineTo(x+12*W/24, y+2*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+12*H/24)
  ctx.lineTo(x+22*W/24, y+8*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+10*H/24)
  ctx.lineTo(x+22*W/24, y+6*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+8*H/24)
  ctx.lineTo(x+22*W/24, y+4*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+6*H/24)
  ctx.lineTo(x+22*W/24, y+2*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+6*H/24)
  ctx.lineTo(x+20*W/24, y+2*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+6*H/24)
  ctx.lineTo(x+18*W/24, y+2*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+6*H/24)
  ctx.lineTo(x+16*W/24, y+2*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+6*H/24)
  ctx.lineTo(x+14*W/24, y+2*H/24)
  ctx.stroke()
}

function plate_tectonicsAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+18*H/24)
  ctx.lineTo(x+18*W/24, y+18*H/24)
  ctx.lineTo(x+22*W/24, y+14*H/24)
  ctx.lineTo(x+22*W/24, y+6*H/24)
  ctx.lineTo(x+18*W/24, y+10*H/24)
  ctx.lineTo(x+18*W/24, y+18*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+12*H/24)
  ctx.lineTo(x+22*W/24, y+8*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+18*H/24)
  ctx.lineTo(x+2*W/24, y+12*H/24)
  ctx.lineTo(x+2*W/24, y+10*H/24)
  ctx.lineTo(x+6*W/24, y+6*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+10*H/24)
  ctx.lineTo(x+9*W/24, y+10*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+10*H/24)
  cpx = x+13*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+18*H/24)
  cpx = x+13*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+18*H/24)
  cpx = x+15*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+12*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+10*H/24)
  cpx = x+12*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+13*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+13*H/24)
  ctx.lineTo(x+17*W/24, y+8*H/24)
  cpx = x+19*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+6*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+6*H/24)
  cpx = x+14*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+6*H/24)
  cpx = x+16*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+8*H/24)
  ctx.stroke()
  //
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+12*H/24)
  cpx = x+9*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+12*H/24)
  cpx = x+12*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+15*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+6*H/24)
  cpx = x+13*W/24
  cpy = y+6*H/24
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+4*H/24)
  ctx.lineTo(x+12*W/24, y+4*H/24)
  ctx.lineTo(x+11*W/24, y+5*H/24)
  ctx.lineTo(x+12*W/24, y+4*H/24)
  ctx.lineTo(x+11*W/24, y+3*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+22*W/24, y+4*H/24)
  ctx.lineTo(x+18*W/24, y+4*H/24)
  ctx.lineTo(x+19*W/24, y+3*H/24)
  ctx.lineTo(x+18*W/24, y+4*H/24)
  ctx.lineTo(x+19*W/24, y+5*H/24)
  ctx.stroke()
}

function misheard_lyricsAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+18*H/24)
  cpx = x+16*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+16*H/24)
  cpx = x+16*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+14*H/24)
  cpx = x+14*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+15*H/24)
  cpx = x+14*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+16*H/24)
  cpx = x+10*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+15*H/24)
  cpx = x+10*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+14*H/24)
  cpx = x+8*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+16*H/24)
  cpx = x+8*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+18*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+15*H/24)
  cpx = x+11*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+14*H/24)
  cpx = x+11*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+13*H/24)
  cpx = x+13*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+14*H/24)
  cpx = x+13*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+15*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+12*H/24)
  ctx.lineTo(x+11*W/24, y+12*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+13*H/24)
  ctx.lineTo(x+10*W/24, y+11*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+12*H/24)
  ctx.lineTo(x+15*W/24, y+12*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+13*H/24)
  ctx.lineTo(x+14*W/24, y+11*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+15*H/24)
  cpx = x+9*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+17*H/24)
  cpx = x+15*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+15*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+13*H/24)
  cpx = x+7*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+19*H/24)
  cpx = x+17*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+13*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+9*H/24)
  cpx = x+16*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+9*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+9*H/24)
  cpx = x+9*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+6*H/24)
  cpx = x+15*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+9*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+22*H/24)
  cpx = x+6*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+22*H/24)
  cpx = x+5*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+21*H/24)
  cpx = x+5*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+4*H/24)
  cpx = x+5*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+3*H/24)
  cpx = x+19*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+4*H/24)
  cpx = x+19*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+5*H/24)
  cpx = x+5*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+4*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+19*W/24, y+4*H/24)
  cpx = x+19*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+21*H/24)
  cpx = x+19*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+22*H/24)
  cpx = x+12*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+22*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+19*W/24, y+7*H/24)
  cpx = x+21*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+7*H/24)
  cpx = x+22*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+8*H/24)
  cpx = x+22*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+14*H/24)
  cpx = x+22*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+15*H/24)
  cpx = x+19*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+15*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+13*H/24)
  cpx = x+7*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+9*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+13*H/24)
  cpx = x+17*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+9*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+19*W/24, y+8*H/24)
  cpx = x+20*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+8*H/24)
  cpx = x+21*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+9*H/24)
  cpx = x+21*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+13*H/24)
  cpx = x+21*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+14*H/24)
  cpx = x+19*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+14*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+13*H/24)
  cpx = x+6*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+9*H/24)
  cpx = x+7*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+10*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+13*H/24)
  cpx = x+18*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+9*H/24)
  cpx = x+17*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+10*H/24)
  ctx.stroke()
}

function gas_station_shrubberyAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+18*H/24)
  cpx = x+17*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+16*H/24)
  cpx = x+15*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+18*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+18*H/24)
  cpx = x+15*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+16*H/24)
  cpx = x+13*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+18*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+16*H/24)
  cpx = x+16*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+14*H/24)
  cpx = x+14*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+16*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+18*H/24)
  cpx = x+6*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+21*H/24)
  cpx = x+6*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+21*H/24)
  cpx = x+6*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+22*H/24)
  cpx = x+17*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+22*H/24)
  cpx = x+18*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+21*H/24)
  cpx = x+18*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+18*H/24)
  cpx = x+6*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+18*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+18*H/24)
  cpx = x+8*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+16*H/24)
  cpx = x+6*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+18*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+14*H/24)
  cpx = x+12*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+12*H/24)
  cpx = x+10*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+14*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+12*H/24)
  cpx = x+10*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+10*H/24)
  cpx = x+8*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+12*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+16*H/24)
  cpx = x+13*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+14*H/24)
  cpx = x+11*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+16*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+18*H/24)
  cpx = x+12*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+16*H/24)
  cpx = x+10*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+18*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+18*H/24)
  cpx = x+8*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+16*H/24)
  cpx = x+9*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+18*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+12*H/24)
  cpx = x+14*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+10*H/24)
  cpx = x+12*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+12*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+15*H/24)
  cpx = x+14*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+12*H/24)
  cpx = x+12*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+15*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+18*H/24)
  cpx = x+13*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+15*H/24)
  cpx = x+12*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+18*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+16*H/24)
  cpx = x+10*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+15*H/24)
  cpx = x+10*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+14*H/24)
  cpx = x+8*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+16*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+13*H/24)
  cpx = x+14*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+12*H/24)
  cpx = x+16*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+13*H/24)
  cpx = x+16*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+13*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+13*H/24)
  cpx = x+9*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+13*H/24)
  cpx = x+8*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+14*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+16*H/24)
  cpx = x+8*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+14*H/24)
  cpx = x+6*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+16*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+18*H/24)
  cpx = x+18*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+16*H/24)
  cpx = x+17*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+18*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+12*H/24)
  cpx = x+16*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+10*H/24)
  cpx = x+14*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+12*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+11*H/24)
  cpx = x+11*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+10*H/24)
  cpx = x+10*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+12*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+12*H/24)
  cpx = x+8*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+10*H/24)
  cpx = x+6*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+12*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+10*H/24)
  cpx = x+15*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+7*H/24)
  cpx = x+13*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+10*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+12*H/24)
  cpx = x+18*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+12*H/24)
  cpx = x+17*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+12*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+19*W/24, y+20*H/24)
  cpx = x+19*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+22*H/24)
  cpx = x+21*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+20*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+10*H/24)
  cpx = x+12*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+7*H/24)
  cpx = x+10*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+10*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+10*H/24)
  cpx = x+13*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+7*H/24)
  cpx = x+12*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+10*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+8*H/24)
  cpx = x+8*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+6*H/24)
  cpx = x+10*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+8*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+8*H/24)
  cpx = x+8*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+10*H/24)
  cpx = x+10*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+8*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+14*H/24)
  cpx = x+17*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+14*H/24)
  cpx = x+17*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+14*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+11*H/24)
  cpx = x+18*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+9*H/24)
  cpx = x+17*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+11*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+8*H/24)
  cpx = x+13*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+5*H/24)
  cpx = x+11*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+8*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+8*H/24)
  cpx = x+7*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+8*H/24)
  cpx = x+6*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+8*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+14*H/24)
  cpx = x+5*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+16*H/24)
  cpx = x+5*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+14*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+10*H/24)
  cpx = x+16*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+9*H/24)
  cpx = x+17*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+9*H/24)
  cpx = x+14*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+10*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+9*H/24)
  cpx = x+16*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+6*H/24)
  cpx = x+15*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+9*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+7*H/24)
  cpx = x+13*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+5*H/24)
  cpx = x+15*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+7*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+7*H/24)
  cpx = x+11*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+5*H/24)
  cpx = x+9*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+7*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+19*H/24)
  cpx = x+17*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+19*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+5*H/24)
  cpx = x+14*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+3*H/24)
  cpx = x+12*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+5*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+5*H/24)
  cpx = x+10*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+4*H/24)
  cpx = x+9*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+5*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+6*H/24)
  cpx = x+8*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+4*H/24)
  cpx = x+7*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+6*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+5*H/24)
  cpx = x+12*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+3*H/24)
  cpx = x+10*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+5*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+5*H/24)
  cpx = x+15*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+3*H/24)
  cpx = x+14*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+5*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+4*H/24)
  cpx = x+9*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+2*H/24)
  cpx = x+8*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+4*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+21*H/24)
  cpx = x+17*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+21*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+3*H/24)
  cpx = x+13*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+1*H/24)
  cpx = x+11*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+3*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+8*H/24)
  cpx = x+18*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+6*H/24)
  cpx = x+17*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+8*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+12*H/24)
  cpx = x+5*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+13*H/24)
  cpx = x+7*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+12*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+15*H/24)
  cpx = x+17*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+16*H/24)
  cpx = x+18*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+15*H/24)
  ctx.stroke()
  
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+21*H/24)
  cpx = x+4*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+21*H/24)
  cpx = x+4*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+21*H/24)
  ctx.stroke()
  
  // bare twigs
  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+6*H/24)
  ctx.lineTo(x+16*W/24, y+5*H/24)
  ctx.lineTo(x+18*W/24, y+5*H/24)
  ctx.lineTo(x+16*W/24, y+5*H/24)
  ctx.lineTo(x+17*W/24, y+4*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+3*H/24)
  ctx.lineTo(x+10*W/24, y+2*H/24)
  ctx.lineTo(x+9*W/24, y+2*H/24)
  ctx.lineTo(x+10*W/24, y+2*H/24)
  ctx.lineTo(x+10*W/24, y+1*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+7*H/24)
  ctx.lineTo(x+6*W/24, y+6*H/24)
  ctx.lineTo(x+4*W/24, y+6*H/24)
  ctx.lineTo(x+5*W/24, y+6*H/24)
  ctx.lineTo(x+5*W/24, y+5*H/24)
  ctx.stroke()

}

  
function chatAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.beginPath()
  ctx.moveTo(x+22*W/24, y+20*H/24)
  ctx.lineTo(x+20*W/24, y+18*H/24)
  ctx.lineTo(x+9*W/24, y+18*H/24)
  cpx = x+8*W/24
  cpy = y+18*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+17*H/24)
  cpx = x+8*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+15*H/24)
  cpx = x+8*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+14*H/24)
  cpx = x+20*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+14*H/24)
  cpx = x+21*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+15*H/24)
  cpx = x+21*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+17*H/24)
  cpx = x+22*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+20*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+14*H/24)
  ctx.lineTo(x+4*W/24, y+12*H/24)
  ctx.lineTo(x+15*W/24, y+12*H/24)
  cpx = x+16*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+11*H/24)
  cpx = x+16*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+9*H/24)
  cpx = x+16*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+8*H/24)
  cpx = x+4*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+8*H/24)
  cpx = x+3*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+9*H/24)
  cpx = x+3*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+11*H/24)
  cpx = x+2*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+14*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+22*W/24, y+8*H/24)
  ctx.lineTo(x+20*W/24, y+6*H/24)
  ctx.lineTo(x+9*W/24, y+6*H/24)
  cpx = x+8*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+5*H/24)
  cpx = x+8*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+3*H/24)
  cpx = x+8*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+2*H/24)
  cpx = x+20*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+2*H/24)
  cpx = x+21*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+3*H/24)
  cpx = x+21*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+5*H/24)
  cpx = x+22*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+8*H/24)
  ctx.stroke()

  let r = ctx.lineWidth
  ctx.beginPath()
  ctx.arc(x+3*W/24, y+21*H/24, r, 0, Math.PI*2)
  ctx.stroke()

  ctx.beginPath()
  ctx.arc(x+5*W/24, y+21*H/24, r, 0, Math.PI*2)
  ctx.stroke()

  ctx.beginPath()
  ctx.arc(x+7*W/24, y+21*H/24, r, 0, Math.PI*2)
  ctx.stroke()
}

function two_ingredient_brownieAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+6*H/24)
  cpx = x+8*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+2*H/24)
  ctx.lineTo(x+18*W/24, y+3*H/24)
  ctx.lineTo(x+15*W/24, y+6*H/24)
  cpx = x+11*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+7*H/24)
  ctx.lineTo(x+4*W/24, y+6*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+6*H/24)
  ctx.lineTo(x+4*W/24, y+9*H/24)
  ctx.lineTo(x+10*W/24, y+10*H/24)
  cpx = x+12*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+9*H/24)
  ctx.lineTo(x+15*W/24, y+6*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+9*H/24)
  ctx.lineTo(x+18*W/24, y+6*H/24)
  ctx.lineTo(x+18*W/24, y+3*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+7*H/24)
  ctx.lineTo(x+10*W/24, y+10*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+13*H/24)
  ctx.lineTo(x+19*W/24, y+9*H/24)
  ctx.lineTo(x+17*W/24, y+7*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+13*H/24)
  ctx.lineTo(x+5*W/24, y+9*H/24)
  ctx.lineTo(x+5*W/24, y+13*H/24)
  ctx.lineTo(x+8*W/24, y+16*H/24)
  ctx.lineTo(x+19*W/24, y+12*H/24)
  ctx.lineTo(x+19*W/24, y+9*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+13*H/24)
  ctx.lineTo(x+8*W/24, y+16*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+15*H/24)
  ctx.lineTo(x+17*W/24, y+16*H/24)
  ctx.lineTo(x+18*W/24, y+13*H/24)
  ctx.lineTo(x+18*W/24, y+17*H/24)
  ctx.lineTo(x+17*W/24, y+19*H/24)
  ctx.lineTo(x+17*W/24, y+16*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+19*H/24)
  ctx.lineTo(x+5*W/24, y+18*H/24)
  ctx.lineTo(x+5*W/24, y+15*H/24)
  ctx.lineTo(x+7*W/24, y+15*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+15*H/24)
  ctx.lineTo(x+6*W/24, y+14*H/24)
  ctx.stroke()
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+13*H/24)
  ctx.lineTo(x+17*W/24, y+13*H/24)
  ctx.stroke()
  
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+10*H/24)
  cpx = x+2*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+16*H/24)
  cpx = x+2*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+22*H/24)
  cpx = x+22*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+16*H/24)
  cpx = x+22*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+10*H/24)
  ctx.stroke()
}

function clickbaitAt (x,y,W,color) {
  if (Math.random() > 0.5)
    cb2At (x,y,W,color)
  else
    cb3At (x,y,W,color)
  return
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+23*H/24)
  cpx = x+6*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+12*H/24)
  cpx = x+9*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+11*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+14*H/24)
  cpx = x+6*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+13*H/24)
  cpx = x+7*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+13*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+1*H/24)
  cpx = x+7*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+8*H/24)
  cpx = x+11*W/24
  cpy = y+9*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+8*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+11*H/24)
  cpx = x+12*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+9*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+18*H/24)
  cpx = x+12*W/24
  cpy = y+21*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+23*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+7*H/24)
  ctx.lineTo(x+11*W/24, y+6*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+3*H/24)
  ctx.lineTo(x+8*W/24, y+6*H/24)
  ctx.lineTo(x+9*W/24, y+6*H/24)
  ctx.lineTo(x+10*W/24, y+5*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+2*H/24)
  ctx.lineTo(x+11*W/24, y+1*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+3*H/24)
  ctx.lineTo(x+6*W/24, y+3*H/24)
  ctx.stroke()

  // rightmost curve
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+8*H/24)
  cpx = x+24*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+23*W/24, y+23*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+8*H/24)
  cpx = x+17*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+1*H/24)
  ctx.stroke()


  //left eye  
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+4*H/24)
  cpx = x+8*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+4*H/24)
  ctx.stroke()
  // spine
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+13*H/24)
  cpx = x+19*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+23*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+8*H/24)
  cpx = x+15*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+10*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+3*H/24)
  cpx = x+11*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+2*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+4*H/24)
  cpx = x+15*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+1*H/24)
  cpx = x+14*W/24
  cpy = y+1*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+2*H/24)
  ctx.stroke()

  ctx.setLineDash([4,5])
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+12*H/24)
  ctx.lineTo(x+2*W/24, y+12*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+11*H/24)
  ctx.lineTo(x+4*W/24, y+9*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+11*H/24)
  ctx.lineTo(x+7*W/24, y+8*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+14*H/24)
  cpx = x+5*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+13*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+15*H/24)
  cpx = x+3*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+17*H/24)
  ctx.stroke()

  ctx.setLineDash([])
  }

  function tissue_boxAt (x,y,W,color) {
    let canvas = document.getElementById("myCanvas")
    let ctx = canvas.getContext("2d")
    let H = W, cpx, cpy, points = []
    let colors = shuffle(getCurrentPalette(true,13))
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
    ctx.strokeStyle = color
    ctx.lineCap = "square"
    ctx.lineJoin = "bevel"
  
    ctx.beginPath()
    ctx.moveTo(x+4*W/24, y+18*H/24)
    ctx.lineTo(x+18*W/24, y+18*H/24)
    ctx.lineTo(x+22*W/24, y+14*H/24)
    ctx.lineTo(x+22*W/24, y+8*H/24)
    ctx.lineTo(x+18*W/24, y+12*H/24)
    ctx.lineTo(x+14*W/24, y+12*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+18*W/24, y+18*H/24)
    ctx.lineTo(x+18*W/24, y+12*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+4*W/24, y+18*H/24)
    ctx.lineTo(x+2*W/24, y+18*H/24)
    ctx.lineTo(x+2*W/24, y+12*H/24)
    ctx.lineTo(x+6*W/24, y+12*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+2*W/24, y+12*H/24)
    ctx.lineTo(x+6*W/24, y+8*H/24)
    ctx.lineTo(x+22*W/24, y+8*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+6*W/24, y+12*H/24)
    cpx = x+8*W/24
    cpy = y+10*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+10*H/24)
    cpx = x+16*W/24
    cpy = y+10*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+12*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+14*W/24, y+12*H/24)
    cpx = x+14*W/24
    cpy = y+14*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+14*H/24)
    cpx = x+6*W/24
    cpy = y+14*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+12*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+7*W/24, y+12*H/24)
    ctx.lineTo(x+13*W/24, y+12*H/24)
    ctx.stroke()
  }

function narcissusAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/25
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, d = 0, angle = 0
  let c = 0, i = 0
  for (; c < 2; c++) {
    //1 eraser
    ctx.beginPath()
    p = rotatePoint(x+9*W/24+pet(d), y+2*H/24+pet(d) ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    cpx = x+10*W/24+pet(d)
    cpy = y+1*H/24+pet(d)
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+11*W/24+pet(d), y+2*H/24+pet(d),cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    cpx = x+12*W/24+pet(d)
    cpy = y+3*H/24+pet(d)
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+11*W/24+pet(d), y+4*H/24+pet(d),cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    cpx = x+9*W/24+pet(d)
    cpy = y+2*H/24+pet(d)
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+9*W/24+pet(d), y+2*H/24+pet(d),cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    ctx.globalAlpha = 0.5
    ctx.fill()
    ctx.globalAlpha = 1
    ctx.stroke()
    //3 pencil lead
    ctx.beginPath()
    p = rotatePoint(x+1.3*W/24+pet(d), y+11*H/24+pet(d) ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    p = rotatePoint(x+1*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+2*W/24+pet(d), y+11.7*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    ctx.globalAlpha = 0.5
    ctx.fill()
    ctx.globalAlpha = 1
    //2 pencil point (not tip)
    ctx.beginPath()
    p = rotatePoint(x+4*W/24+pet(d), y+11*H/24+pet(d) ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    p = rotatePoint(x+1*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+2*W/24+pet(d), y+9*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    ctx.stroke()

  //1////////////////////////////
    ctx.beginPath()
    p = rotatePoint(x+8*W/24+pet(d), y+11*H/24+pet(d) ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    cpx = x+7*W/24+pet(d)
    cpy = y+11*H/24+pet(d)
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+7*W/24+pet(d), y+10*H/24+pet(d),cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    cpx = x+8*W/24+pet(d)
    cpy = y+9*H/24+pet(d)
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+8*W/24+pet(d), y+9*H/24+pet(d),cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    cpx = x+9*W/24+pet(d)
    cpy = y+9*H/24+pet(d)
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+9*W/24+pet(d), y+10*H/24+pet(d),cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    ctx.stroke()
    //2 thumbnail
    x -= 0.25*W/24
    y += 0.25*H/24
    ctx.beginPath()
    p = rotatePoint(x+1.1*W/24+pet(d), y+6*H/24+pet(d) ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    cpx = x+1*W/24+pet(d)
    cpy = y+7*H/24+pet(d)
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+2*W/24+pet(d), y+7*H/24+pet(d),cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    cpx = x+3*W/24+pet(d)
    cpy = y+6*H/24+pet(d)
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+3*W/24+pet(d), y+6*H/24+pet(d),cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    cpx = x+3*W/24+pet(d)
    cpy = y+5*H/24+pet(d)
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+2.2*W/24+pet(d), y+4.7*H/24+pet(d),cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    ctx.stroke()
    x += 0.25*W/24
    y -= 0.25*H/24
    //5 nail
    ctx.beginPath()
    p = rotatePoint(x+3*W/24+pet(d), y+10*H/24+pet(d) ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    p = rotatePoint(x+10*W/24+pet(d), y+3*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    ctx.stroke()
    //1
    ctx.beginPath()
    p = rotatePoint(x+4*W/24+pet(d), y+11*H/24+pet(d) ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    p = rotatePoint(x+11*W/24+pet(d), y+4*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+9*W/24+pet(d), y+2*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+2*W/24+pet(d), y+9*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+4*W/24+pet(d), y+11*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    ctx.stroke()

    //4 finger main
    ctx.beginPath()
    p = rotatePoint(x+3*W/24+pet(d), y+8*H/24+pet(d) ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    cpx = x+2*W/24+pet(d)
    cpy = y+9*H/24+pet(d)
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+1*W/24+pet(d), y+8*H/24+pet(d),cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    cpx = x+0*W/24+pet(d)
    cpy = y+7.2*H/24+pet(d)
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+0.8*W/24+pet(d), y+6.3*H/24+pet(d),cx,cy,angle) // left ft
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    cpx = x+4*W/24+pet(d)
    cpy = y+1.8*H/24+pet(d)
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+9.7*W/24+pet(d), y+1.7*H/24+pet(d),cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    ctx.stroke()

    //5
    ctx.beginPath()
    p = rotatePoint(x+10.8*W/24+pet(d), y+1.8*H/24+pet(d) ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    cpx = x+20*W/24+pet(d)
    cpy = y+3*H/24+pet(d)
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+23*W/24+pet(d), y+12*H/24+pet(d),cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    ctx.stroke()

    //14
    ctx.beginPath()
    p = rotatePoint(x+7*W/24+pet(d), y+8*H/24+pet(d) ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    cpx = x+6*W/24+pet(d)
    cpy = y+9*H/24+pet(d)
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+6*W/24+pet(d), y+10*H/24+pet(d),cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    cpx = x+6*W/24+pet(d)
    cpy = y+11*H/24+pet(d)
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+8*W/24+pet(d), y+11*H/24+pet(d),cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    cpx = x+9.5*W/24+pet(d)
    cpy = y+9.5*H/24+pet(d)
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+11*W/24+pet(d), y+8*H/24+pet(d),cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    cpx = x+14*W/24+pet(d)
    cpy = y+8*H/24+pet(d)
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+15.5*W/24+pet(d), y+11*H/24+pet(d),cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    ctx.stroke()

    //7
    ctx.beginPath()
    p = rotatePoint(x+3*W/24+pet(d), y+8*H/24+pet(d) ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    cpx = x+5*W/24+pet(d)
    cpy = y+5*H/24+pet(d)
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+6*W/24+pet(d), y+5*H/24+pet(d),cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    ctx.stroke()
    // minor curve for thumb
    ctx.beginPath()
    p = rotatePoint(x+7*W/24+pet(d), y+8*H/24+pet(d) ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    cpx = x+9*W/24+pet(d)
    cpy = y+7*H/24+pet(d)
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+9*W/24+pet(d), y+6*H/24+pet(d),cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    ctx.stroke()

    ctx.lineCap = "round"
    ctx.lineWidth *= 1.4
    ctx.beginPath()
    p = rotatePoint(x+22.67*W/24+pet(d), y+11*H/24+pet(d) ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    p = rotatePoint(x+22.2*W/24+pet(d), y+10*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    ctx.stroke()
    ctx.lineWidth /= 1.4
    ctx.lineWidth *= 1.9
    ctx.beginPath()
    p = rotatePoint(x+23*W/24+pet(d), y+11.9*H/24+pet(d) ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    p = rotatePoint(x+22.65*W/24+pet(d), y+11*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    ctx.stroke()
    ctx.lineWidth /= 1.9
    ctx.lineWidth *= 2.2
    ctx.beginPath()
    p = rotatePoint(x+23*W/24+pet(d), y+11.9*H/24+pet(d) ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    p = rotatePoint(x+22.85*W/24+pet(d), y+11.5*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    ctx.stroke()
    ctx.lineWidth /= 2.2
    ctx.lineCap = "square"
    angle = 180
  }
  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function undoingAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/25
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "miter"
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, d = 0, angle = 0
  let cx0 = cx, cy0 = cy
  //2
  let c = 0, i = 0
  for (; c < 2; c++) {
    ctx.beginPath()
    p = rotatePoint(x+2*W/24+pet(d), y+9*H/24+pet(d) ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    cpx = x+1*W/24+pet(d)
    cpy = y+10*H/24+pet(d)
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+2*W/24+pet(d), y+11*H/24+pet(d),cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    cpx = x+3*W/24+pet(d)
    cpy = y+12*H/24+pet(d)
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+4*W/24+pet(d), y+11*H/24+pet(d),cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    cpx = x+2*W/24+pet(d)
    cpy = y+9*H/24+pet(d)
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+2*W/24+pet(d), y+9*H/24+pet(d),cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    ctx.globalAlpha = 0.5
    ctx.fill()

    ctx.beginPath()
    p = rotatePoint(x+11*W/24+pet(d), y+1.27*H/24+pet(d) ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    p = rotatePoint(x+12*W/24+pet(d), y+1*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+11.73*W/24+pet(d), y+2*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    ctx.fill()
    ctx.globalAlpha = 1

  //1
    ctx.beginPath()
    p = rotatePoint(x+8*W/24+pet(d), y+11*H/24+pet(d) ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    cpx = x+7*W/24+pet(d)
    cpy = y+11*H/24+pet(d)
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+7*W/24+pet(d), y+10*H/24+pet(d),cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    cpx = x+8*W/24+pet(d)
    cpy = y+9*H/24+pet(d)
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+8*W/24+pet(d), y+9*H/24+pet(d),cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    cpx = x+9*W/24+pet(d)
    cpy = y+9*H/24+pet(d)
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+9*W/24+pet(d), y+10*H/24+pet(d),cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    ctx.stroke()
    //2 thumbnail
    x -= 0.25*W/24
    y += 0.25*H/24
    ctx.beginPath()
    p = rotatePoint(x+1.1*W/24+pet(d), y+6*H/24+pet(d) ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    cpx = x+1*W/24+pet(d)
    cpy = y+7*H/24+pet(d)
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+2*W/24+pet(d), y+7*H/24+pet(d),cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    cpx = x+3*W/24+pet(d)
    cpy = y+6*H/24+pet(d)
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+3*W/24+pet(d), y+6*H/24+pet(d),cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    cpx = x+3*W/24+pet(d)
    cpy = y+5*H/24+pet(d)
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+2.2*W/24+pet(d), y+4.7*H/24+pet(d),cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    ctx.stroke()
    x += 0.25*W/24
    y -= 0.25*H/24
    //5 nail
    ctx.beginPath()
    p = rotatePoint(x+3*W/24+pet(d), y+10*H/24+pet(d) ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    p = rotatePoint(x+10*W/24+pet(d), y+3*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    ctx.stroke()
    //1
    ctx.beginPath()
    p = rotatePoint(x+4*W/24+pet(d), y+11*H/24+pet(d) ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    p = rotatePoint(x+11*W/24+pet(d), y+4*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+9*W/24+pet(d), y+2*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+2*W/24+pet(d), y+9*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+4*W/24+pet(d), y+11*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    ctx.stroke()

    //2 pencil point
    ctx.beginPath()
    p = rotatePoint(x+9*W/24+pet(d), y+2*H/24+pet(d) ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    p = rotatePoint(x+12*W/24+pet(d), y+1*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    p = rotatePoint(x+11*W/24+pet(d), y+4*H/24+pet(d) ,cx,cy,angle)
    ctx.lineTo(p[0],p[1])
    ctx.stroke()

    //3
    ctx.beginPath()
    p = rotatePoint(x+2*W/24+pet(d), y+9*H/24+pet(d) ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    cpx = x+1*W/24+pet(d)
    cpy = y+10*H/24+pet(d)
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+2*W/24+pet(d), y+11*H/24+pet(d),cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    cpx = x+3*W/24+pet(d)
    cpy = y+12*H/24+pet(d)
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+4*W/24+pet(d), y+11*H/24+pet(d),cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    ctx.stroke()

    //4 finger main
    ctx.beginPath()
    p = rotatePoint(x+3*W/24+pet(d), y+8*H/24+pet(d) ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    cpx = x+2*W/24+pet(d)
    cpy = y+9*H/24+pet(d)
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+1*W/24+pet(d), y+8*H/24+pet(d),cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    cpx = x+0*W/24+pet(d)
    cpy = y+7.2*H/24+pet(d)
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+0.8*W/24+pet(d), y+6.3*H/24+pet(d),cx,cy,angle) // left ft
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    cpx = x+4*W/24+pet(d)
    cpy = y+1.8*H/24+pet(d)
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+9.7*W/24+pet(d), y+1.7*H/24+pet(d),cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    ctx.stroke()

    //5
    ctx.beginPath()
    p = rotatePoint(x+11.8*W/24+pet(d), y+1.9*H/24+pet(d) ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    cpx = x+20*W/24+pet(d)
    cpy = y+3*H/24+pet(d)
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+23*W/24+pet(d), y+12*H/24+pet(d),cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    ctx.stroke()

    //14
    ctx.beginPath()
    p = rotatePoint(x+7*W/24+pet(d), y+8*H/24+pet(d) ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    cpx = x+6*W/24+pet(d)
    cpy = y+9*H/24+pet(d)
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+6*W/24+pet(d), y+10*H/24+pet(d),cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    cpx = x+6*W/24+pet(d)
    cpy = y+11*H/24+pet(d)
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+8*W/24+pet(d), y+11*H/24+pet(d),cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    cpx = x+9.5*W/24+pet(d)
    cpy = y+9.5*H/24+pet(d)
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+11*W/24+pet(d), y+8*H/24+pet(d),cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    cpx = x+14*W/24+pet(d)
    cpy = y+8*H/24+pet(d)
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+15.5*W/24+pet(d), y+11*H/24+pet(d),cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    ctx.stroke()

    //7
    ctx.beginPath()
    p = rotatePoint(x+3*W/24+pet(d), y+8*H/24+pet(d) ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    cpx = x+5*W/24+pet(d)
    cpy = y+5*H/24+pet(d)
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+6*W/24+pet(d), y+5*H/24+pet(d),cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    ctx.stroke()

    // minor curve for thumb
    ctx.beginPath()
    p = rotatePoint(x+7*W/24+pet(d), y+8*H/24+pet(d) ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    cpx = x+9*W/24+pet(d)
    cpy = y+7*H/24+pet(d)
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+9*W/24+pet(d), y+6*H/24+pet(d),cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    ctx.stroke()

    ///8 erase strokes below ==================
    ctx.globalAlpha = 0.4
    ctx.strokeStyle = savedF
    ctx.lineWidth *= 3
    //8
    ctx.beginPath()
    p = rotatePoint(x+23*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    cpx = x+19*W/24+pet(d)
    cpy = y+4*H/24+pet(d)
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+16*W/24+pet(d), y+3*H/24+pet(d),cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    ctx.stroke()

    //9
    ctx.beginPath()
    p = rotatePoint(x+23*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    cpx = x+21*W/24+pet(d)
    cpy = y+6*H/24+pet(d)
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+18*W/24+pet(d), y+4*H/24+pet(d),cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    ctx.stroke()

    //10
    ctx.beginPath()
    p = rotatePoint(x+23*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    cpx = x+21*W/24+pet(d)
    cpy = y+7*H/24+pet(d)
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+20*W/24+pet(d), y+6*H/24+pet(d),cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    ctx.stroke()

    //11
    ctx.beginPath()
    p = rotatePoint(x+23*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    cpx = x+21*W/24+pet(d)
    cpy = y+8*H/24+pet(d)
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+21*W/24+pet(d), y+8*H/24+pet(d),cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    ctx.stroke()

    //12
    ctx.beginPath()
    p = rotatePoint(x+23*W/24+pet(d), y+12*H/24+pet(d) ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    cpx = x+22*W/24+pet(d)
    cpy = y+10*H/24+pet(d)
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+22*W/24+pet(d), y+10*H/24+pet(d),cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    ctx.stroke()

    ctx.globalAlpha = 1
    ctx.strokeStyle = color
    ctx.lineWidth /= 3
    
    //erased
    ctx.globalAlpha *= 0.7
    ctx.shadowBlur = W/120
    ctx.shadowColor = color
    ctx.shadowOffsetX = W/150
    ctx.shadowOffsetY  = W/150
    i = 0
    for (; i < 7; i++) {
      cx = x+0.4*W/24+Math.random()*3*W/24
      cy = y+H/2 + Math.random()*4*H/24
      p = rotatePoint(cx, cy, cx0,cy0,angle)
      chip2At (p[0],p[1],W/250+Math.random()*W/300,color)
    }
    ctx.shadowBlur = 0
    ctx.shadowOffsetX = 0
    ctx.shadowOffsetY  = 0
    ctx.globalAlpha /= 0.7
    
    cx = cx0, cy = cy0
    angle = 180
  }
  cx = cx0, cy = cy0
  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

  function relicAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  y -= 2*H/24
  ctx.beginPath()
  ctx.moveTo(x+8*W/24+pet(d), y+25*H/24+pet(d))
  ctx.lineTo(x+8*W/24+pet(d), y+24*H/24+pet(d))
  cpx = x+2*W/24
  cpy = y+22*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+2*W/24+pet(d), y+18*H/24+pet(d))
  cpx = x+2*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+2*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+2*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+3.25*W/24+pet(d), y+10.25*H/24+pet(d))
  cpx = x+5*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+5*W/24+pet(d), y+12*H/24+pet(d))
  cpx = x+5*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+7*W/24+pet(d), y+15*H/24+pet(d))
  cpx = x+14*W/24
  cpy = y+15*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+14*W/24+pet(d), y+21*H/24+pet(d))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+7*W/24+pet(d), y+15*H/24+pet(d))
  cpx = x+7*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+7*W/24+pet(d), y+6*H/24+pet(d))
  cpx = x+7*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+8*W/24+pet(d), y+4*H/24+pet(d))
  cpx = x+10*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+10*W/24+pet(d), y+6*H/24+pet(d))
  cpx = x+10*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+10*W/24+pet(d), y+13*H/24+pet(d))
  cpx = x+11*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+11*W/24+pet(d), y+13*H/24+pet(d))
  cpx = x+11*W/24
  cpy = y+5*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+11*W/24+pet(d), y+5*H/24+pet(d))
  cpx = x+11*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+12*W/24+pet(d), y+3*H/24+pet(d))
  cpx = x+14*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+14*W/24+pet(d), y+5*H/24+pet(d))
  cpx = x+14*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+14*W/24+pet(d), y+13*H/24+pet(d))
  cpx = x+15*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+15*W/24+pet(d), y+13*H/24+pet(d))
  cpx = x+15*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+15*W/24+pet(d), y+6*H/24+pet(d))
  cpx = x+15*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+16*W/24+pet(d), y+4*H/24+pet(d))
  cpx = x+18*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*W/24+pet(d), y+6*H/24+pet(d))
  cpx = x+18*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*W/24+pet(d), y+13*H/24+pet(d))
  cpx = x+19*W/24
  cpy = y+13*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+19*W/24+pet(d), y+13*H/24+pet(d))
  cpx = x+19*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+19*W/24+pet(d), y+8*H/24+pet(d))
  cpx = x+19*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20*W/24+pet(d), y+6*H/24+pet(d))
  cpx = x+22*W/24
  cpy = y+6*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+22*W/24+pet(d), y+8*H/24+pet(d))
  cpx = x+22*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+22*W/24+pet(d), y+20*H/24+pet(d))
  cpx = x+22*W/24
  cpy = y+24*H/24
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+20*W/24+pet(d), y+24*H/24+pet(d))
  ctx.lineTo(x+20*W/24+pet(d), y+25*H/24+pet(d))
  ctx.stroke()

  let f = randomPick(["lighterAt", "car_keyAt", "thumb_driveAt"])
  let saint = randomPick(names)
  defs["relicAt"].u = "The "+f.slice(0,f.length-2).replace("_"," ") + " of Saint " + saint
  defs["relicAt"].i = "The "+f.slice(0,f.length-2).replace("_"," ") + " of Saint " + saint
  window [f] (x+7*W/24, y+9.6*H/24, W/1.8, color)

  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function untitled_drawing_appAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  ctx.fillStyle = "#ffffff"
  y -= 1.5*H/24
  let x0 = x, y0 = y
  ctx.fillRect(x+1*W/24, y+1*H/24, W-2*W/24, H-2*H/24)
  ctx.strokeStyle = "#cccccc"
  let w = W-2*W/24, h = w, inc = w/20, max = 20
  let i = 0
  for (; i < max; i++) {
    ctx.beginPath()
    ctx.moveTo(x+1*W/24+i*inc, y+1*H/24)
    ctx.lineTo(x+1*W/24+i*inc, y+1*H/24+h)
    if (i % 2 === 1)
      ctx.lineWidth = 1
    else
      ctx.lineWidth = 2
    ctx.stroke()
    ctx.beginPath()
    ctx.moveTo(x+1*W/24, y+1*H/24+i*inc)
    ctx.lineTo(x+1*W/24+w, y+1*H/24+i*inc)
    ctx.stroke()
  }
  ctx.fillStyle = "#000000"
  ctx.font = (W*0.03)+"pt serif"

  ctx.fillText("grid:", x+1.2*W/24, y+25*H/24)
  w = ctx.measureText("grid:").width
  ctx.lineWidth = 1
  ctx.strokeStyle = "#000000"
  ctx.fillStyle = "#ffffff"
  ctx.fillRect(x+1.5*W/24+w+4, y+24*H/24, 2*W/24, 1.3*W/24)
  ctx.strokeRect(x+1.5*W/24+w+4, y+24*H/24, 2*W/24, 1.3*W/24)

  ctx.fillRect(x+4.3*W/24+w+4,   y+24.2*H/24,   0.9*W/24, 0.9*W/24)
  ctx.strokeRect(x+4.3*W/24+w+4, y+24.2*H/24, 0.9*W/24, 0.9*W/24)

  ctx.fillStyle = "#000000"
  ctx.fillText("20\u{2304}", x+3.7*W/24, y+25*H/24)
  ctx.fillText("quad", x+7.4*W/24, y+25*H/24)
  ctx.fillStyle = "#ffffff"
  i = 0, inc = 2.2*W/24
  for (; i < 6; i++)
    ctx.fillRect(x+10*W/24+i*inc, y+23.5*H/24, 1.9*W/24, 1.9*H/24)
  
  app_iconsAt("stop",x+10.2*W/24, y+23.7*H/24, 1.5*W/24)
  app_iconsAt("undo",x+10.2*W/24+inc, y+23.7*H/24, 1.5*W/24)
  app_iconsAt("upload",x+10.2*W/24+2*inc, y+23.7*H/24, 1.5*W/24)
  app_iconsAt("download",x+10.2*W/24+3*inc, y+23.7*H/24, 1.5*W/24)
  app_iconsAt("copy",x+10.2*W/24+4*inc, y+23.7*H/24, 1.5*W/24)
  app_iconsAt("trash",x+10.2*W/24+5*inc, y+23.7*H/24, 1.5*W/24)

  x = x0, y = y0
  ctx.lineWidth = 2
  ctx.strokeStyle = "#ff0000"
  ctx.fillStyle = "#000000"
  ctx.beginPath()
   ctx.fillRect(x+W/24+3*inc-4, y+H/24+3*inc-4,8,8)
  ctx.moveTo(x+W/24+3*inc, y+H/24+3*inc)
   ctx.fillRect(x+W/24+6*inc-4, y+H/24+3*inc-4,8,8)
  ctx.lineTo(x+W/24+6*inc, y+H/24+3*inc)
   ctx.fillRect(x+W/24+6*inc-4, y+H/24+6*inc-4,8,8)
  ctx.lineTo(x+W/24+6*inc, y+H/24+6*inc)
   ctx.fillRect(x+W/24+3*inc-4, y+H/24+6*inc-4,8,8)
  ctx.lineTo(x+W/24+3*inc, y+H/24+6*inc)
  ctx.lineTo(x+W/24+3*inc, y+H/24+3*inc)
  ctx.closePath()
  ctx.stroke()
  ctx.beginPath()
  ctx.moveTo(x+W/24+6*inc, y+H/24+3*inc)
  ctx.fillRect(x+W/24+7*inc-4, y+H/24+4*inc-4,8,8)
  ctx.lineTo(x+W/24+7*inc, y+H/24+4*inc)
  ctx.fillRect(x+W/24+7*inc-4, y+H/24+7*inc-4,8,8)
  ctx.lineTo(x+W/24+7*inc, y+H/24+7*inc)
  ctx.fillRect(x+W/24+4*inc-4, y+H/24+7*inc-4,8,8)
  ctx.lineTo(x+W/24+4*inc, y+H/24+7*inc)
  ctx.lineTo(x+W/24+3*inc, y+H/24+6*inc)

  ctx.moveTo(x+W/24+6*inc, y+H/24+6*inc)
  ctx.lineTo(x+W/24+7*inc, y+H/24+7*inc)
ctx.closePath()
  ctx.stroke()

  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function app_iconsAt (icon,x,y,W) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1.5// + document.getElementById("featuresize").value/200
  ctx.strokeStyle = "#000000"
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  switch (icon) {
  //1
  case "stop":
  ctx.beginPath()
  ctx.moveTo(x+4*W/20+pet(d), y+16*H/20+pet(d))
  ctx.lineTo(x+16*W/20+pet(d), y+10*H/20+pet(d))
  ctx.lineTo(x+4*W/20+pet(d), y+4*H/20+pet(d))
  ctx.lineTo(x+4*W/20+pet(d), y+16*H/20+pet(d))
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+16*W/20+pet(d), y+4*H/20+pet(d))
  ctx.lineTo(x+16*W/20+pet(d), y+16*H/20+pet(d))
  ctx.stroke()
  break;
  case "undo":
  //3
   ctx.beginPath()
  ctx.moveTo(x+2*W/20+pet(d), y+10*H/20+pet(d))
  cpx = x+2*W/20
  cpy = y+18*H/20
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+10*W/20+pet(d), y+18*H/20+pet(d))
  cpx = x+18*W/20
  cpy = y+18*H/20
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+18*W/20+pet(d), y+10*H/20+pet(d))
  cpx = x+18*W/20
  cpy = y+2*H/20
  ctx.quadraticCurveTo(cpx+pet(d), cpy+pet(d), x+10*W/20+pet(d), y+2*H/20+pet(d))
  ctx.lineTo(x+12*W/20+pet(d), y+0*H/20+pet(d))
  ctx.lineTo(x+10*W/20+pet(d), y+2*H/20+pet(d))
  ctx.lineTo(x+12*W/20+pet(d), y+4*H/20+pet(d))
  ctx.stroke()
  break;
  case "upload":
  //4
  ctx.beginPath()
  ctx.moveTo(x+2*W/20+pet(d), y+15*H/20+pet(d))
  ctx.lineTo(x+2*W/20+pet(d), y+18*H/20+pet(d))
  ctx.lineTo(x+18*W/20+pet(d), y+18*H/20+pet(d))
  ctx.lineTo(x+18*W/20+pet(d), y+15*H/20+pet(d))
  ctx.stroke()
  
  //5
  ctx.beginPath()
  ctx.moveTo(x+10*W/20+pet(d), y+14*H/20+pet(d))
  ctx.lineTo(x+10*W/20+pet(d), y+2*H/20+pet(d))
  ctx.lineTo(x+7*W/20+pet(d), y+4*H/20+pet(d))
  ctx.lineTo(x+10*W/20+pet(d), y+2*H/20+pet(d))
  ctx.lineTo(x+13*W/20+pet(d), y+4*H/20+pet(d))
  ctx.stroke()
  break;
  case "download":
  //4
  ctx.beginPath()
  ctx.moveTo(x+2*W/20+pet(d), y+15*H/20+pet(d))
  ctx.lineTo(x+2*W/20+pet(d), y+18*H/20+pet(d))
  ctx.lineTo(x+18*W/20+pet(d), y+18*H/20+pet(d))
  ctx.lineTo(x+18*W/20+pet(d), y+15*H/20+pet(d))
  ctx.stroke()
  ctx.beginPath()
  ctx.moveTo(x+10*W/20+pet(d), y+2*H/20+pet(d))
  ctx.lineTo(x+10*W/20+pet(d), y+14*H/20+pet(d))
  ctx.lineTo(x+13*W/20+pet(d), y+12*H/20+pet(d))
  ctx.lineTo(x+10*W/20+pet(d), y+14*H/20+pet(d))
  ctx.lineTo(x+7*W/20+pet(d), y+12*H/20+pet(d))
  ctx.stroke()
  break;
  case "copy":
  //6
  ctx.beginPath()
  ctx.moveTo(x+4*W/20+pet(d), y+6*H/20+pet(d))
  ctx.lineTo(x+3*W/20+pet(d), y+6*H/20+pet(d))
  ctx.lineTo(x+2*W/20+pet(d), y+7*H/20+pet(d))
  ctx.lineTo(x+2*W/20+pet(d), y+17*H/20+pet(d))
  ctx.lineTo(x+3*W/20+pet(d), y+18*H/20+pet(d))
  ctx.lineTo(x+13*W/20+pet(d), y+18*H/20+pet(d))
  ctx.lineTo(x+14*W/20+pet(d), y+18*H/20+pet(d))
  ctx.lineTo(x+15*W/20+pet(d), y+17*H/20+pet(d))
  ctx.lineTo(x+15*W/20+pet(d), y+16*H/20+pet(d))
  ctx.stroke()
  
  //7
  ctx.beginPath()
  ctx.moveTo(x+5*W/20+pet(d), y+2*H/20+pet(d))
  ctx.lineTo(x+4*W/20+pet(d), y+3*H/20+pet(d))
  ctx.lineTo(x+4*W/20+pet(d), y+15*H/20+pet(d))
  ctx.lineTo(x+5*W/20+pet(d), y+16*H/20+pet(d))
  ctx.lineTo(x+17*W/20+pet(d), y+16*H/20+pet(d))
  ctx.lineTo(x+18*W/20+pet(d), y+15*H/20+pet(d))
  ctx.lineTo(x+18*W/20+pet(d), y+3*H/20+pet(d))
  ctx.lineTo(x+17*W/20+pet(d), y+2*H/20+pet(d))
  ctx.lineTo(x+5*W/20+pet(d), y+2*H/20+pet(d))
  ctx.stroke()
  break;
  case "trash":
    ctx.beginPath()
  ctx.moveTo(x+5*W/20+pet(d), y+18*H/20+pet(d))
  ctx.lineTo(x+15*W/20+pet(d), y+18*H/20+pet(d))
  ctx.lineTo(x+16*W/20+pet(d), y+4*H/20+pet(d))
  ctx.lineTo(x+4*W/20+pet(d), y+4*H/20+pet(d))
  ctx.lineTo(x+5*W/20+pet(d), y+18*H/20+pet(d))
  ctx.closePath()
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+5*W/20+pet(d), y+4*H/20+pet(d))
  ctx.lineTo(x+5*W/20+pet(d), y+3*H/20+pet(d))
  ctx.lineTo(x+15*W/20+pet(d), y+3*H/20+pet(d))
  ctx.lineTo(x+15*W/20+pet(d), y+4*H/20+pet(d))
  ctx.closePath()
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+8*W/20+pet(d), y+3*H/20+pet(d))
  ctx.lineTo(x+8*W/20+pet(d), y+2*H/20+pet(d))
  ctx.lineTo(x+12*W/20+pet(d), y+2*H/20+pet(d))
  ctx.lineTo(x+12*W/20+pet(d), y+3*H/20+pet(d))
   ctx.closePath()
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+10*W/20+pet(d), y+5*H/20+pet(d))
  ctx.lineTo(x+10*W/20+pet(d), y+17*H/20+pet(d))
   ctx.closePath()
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+7*W/20+pet(d), y+5*H/20+pet(d))
  ctx.lineTo(x+7.5*W/20+pet(d), y+17*H/20+pet(d))
   ctx.closePath()
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+13*W/20+pet(d), y+5*H/20+pet(d))
  ctx.lineTo(x+12.5*W/20+pet(d), y+17*H/20+pet(d))
   ctx.closePath()
  ctx.stroke()
  break;
  }
  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}

function acAt (x,y,W,color) {
    let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let savedF = ctx.fillStyle, savedS = ctx.strokeStyle, d = 0
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  y += H/24

  //4
  ctx.beginPath()
  ctx.moveTo(x+7*W/24+pet(d), y+20*H/24+pet(d))
  ctx.lineTo(x+7*W/24+pet(d), y+21*H/24+pet(d))
  ctx.lineTo(x+3*W/24+pet(d), y+21*H/24+pet(d))
  ctx.lineTo(x+3*W/24+pet(d), y+22*H/24+pet(d))
  ctx.lineTo(x+7*W/24+pet(d), y+22*H/24+pet(d))
  ctx.lineTo(x+7*W/24+pet(d), y+25*H/24+pet(d))
  ctx.lineTo(x+18*W/24+pet(d), y+25*H/24+pet(d))
  ctx.lineTo(x+18*W/24+pet(d), y+22*H/24+pet(d))
  ctx.lineTo(x+19*W/24+pet(d), y+22*H/24+pet(d))
  ctx.lineTo(x+21*W/24+pet(d), y+22*H/24+pet(d))
  ctx.lineTo(x+21*W/24+pet(d), y+21*H/24+pet(d))
  ctx.lineTo(x+19*W/24+pet(d), y+21*H/24+pet(d))
  ctx.lineTo(x+19*W/24+pet(d), y+22*H/24+pet(d))
  ctx.lineTo(x+18*W/24+pet(d), y+22*H/24+pet(d))
  ctx.lineTo(x+9*W/24+pet(d), y+22*H/24+pet(d))
  ctx.lineTo(x+7*W/24+pet(d), y+20*H/24+pet(d))
  ctx.fillStyle = color
  ctx.globalAlpha /= 3
  ctx.fill()
  ctx.globalAlpha *= 3
  //1
  ctx.beginPath()
  ctx.moveTo(x+8*W/24+pet(d), y+21*H/24+pet(d))
  ctx.lineTo(x+3*W/24+pet(d), y+21*H/24+pet(d))
  ctx.lineTo(x+3*W/24+pet(d), y+0*H/24+pet(d))
  ctx.lineTo(x+21*W/24+pet(d), y+0*H/24+pet(d))
  ctx.lineTo(x+21*W/24+pet(d), y+21*H/24+pet(d))
  ctx.lineTo(x+19*W/24+pet(d), y+21*H/24+pet(d))
  ctx.lineTo(x+19*W/24+pet(d), y+20*H/24+pet(d))
  ctx.lineTo(x+20*W/24+pet(d), y+20*H/24+pet(d))
  ctx.lineTo(x+20*W/24+pet(d), y+11*H/24+pet(d))
  ctx.lineTo(x+4*W/24+pet(d), y+11*H/24+pet(d))
  ctx.lineTo(x+4*W/24+pet(d), y+20*H/24+pet(d))
  ctx.lineTo(x+7*W/24+pet(d), y+20*H/24+pet(d))
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+4*W/24+pet(d), y+10*H/24+pet(d))
  ctx.lineTo(x+11.5*W/24+pet(d), y+10*H/24+pet(d))
  ctx.lineTo(x+11.5*W/24+pet(d), y+1*H/24+pet(d))
  ctx.lineTo(x+4*W/24+pet(d), y+1*H/24+pet(d))
  ctx.lineTo(x+4*W/24+pet(d), y+10*H/24+pet(d))
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+12.5*W/24+pet(d), y+10*H/24+pet(d))
  ctx.lineTo(x+20*W/24+pet(d), y+10*H/24+pet(d))
  ctx.lineTo(x+20*W/24+pet(d), y+1*H/24+pet(d))
  ctx.lineTo(x+12.5*W/24+pet(d), y+1*H/24+pet(d))
  ctx.lineTo(x+12.5*W/24+pet(d), y+10*H/24+pet(d))
  ctx.stroke()
  //5
  ctx.beginPath()
  ctx.moveTo(x+7*W/24+pet(d), y+11*H/24+pet(d))
  ctx.lineTo(x+7*W/24+pet(d), y+20*H/24+pet(d))
  ctx.lineTo(x+9*W/24+pet(d), y+22*H/24+pet(d))
  ctx.lineTo(x+19*W/24+pet(d), y+22*H/24+pet(d))
  ctx.lineTo(x+19*W/24+pet(d), y+13*H/24+pet(d))
  ctx.lineTo(x+17*W/24+pet(d), y+11*H/24+pet(d))
  ctx.lineTo(x+7*W/24+pet(d), y+11*H/24+pet(d))
  ctx.lineTo(x+9*W/24+pet(d), y+13*H/24+pet(d))
  ctx.lineTo(x+19*W/24+pet(d), y+13*H/24+pet(d))
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+9*W/24+pet(d), y+13*H/24+pet(d))
  ctx.lineTo(x+9*W/24+pet(d), y+22*H/24+pet(d))
  ctx.stroke()
  
  let i = 0
  for (; i < 17; i++) {
    ctx.beginPath()
    ctx.moveTo(x+10*W/24+pet(d), y+14*H/24+pet(d))
    ctx.lineTo(x+10*W/24+pet(d), y+21*H/24+pet(d))
    ctx.stroke()
    x += 0.5*W/24
  }

  ctx.strokeStyle = savedS
  ctx.fillStyle = savedF
}
  
  function big_fishAt (x,y,W,color) {
    let canvas = document.getElementById("myCanvas")
    let ctx = canvas.getContext("2d")
    let H = W, cpx, cpy, points = []
    let colors = shuffle(getCurrentPalette(true,13))
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
    ctx.strokeStyle = color
    ctx.lineCap = "square"
    ctx.lineJoin = "bevel"
  
    ctx.beginPath()
    ctx.moveTo(x+2*W/24, y+12*H/24)
    cpx = x+4*W/24
    cpy = y+10*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+10*H/24)
    cpx = x+8*W/24
    cpy = y+10*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+12*H/24)
    cpx = x+11*W/24
    cpy = y+14*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+14*H/24)
    cpx = x+12*W/24
    cpy = y+10*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+10*H/24)
    cpx = x+11*W/24
    cpy = y+10*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+12*H/24)
    cpx = x+8*W/24
    cpy = y+14*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+14*H/24)
    cpx = x+4*W/24
    cpy = y+14*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+12*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.arc(x+4*W/24, y+12*H/24, W/48, 0, Math.PI*2)
    ctx.stroke()
    
    ctx.beginPath()
    ctx.moveTo(x+22*W/24, y+22*H/24)
    cpx = x+18*W/24
    cpy = y+22*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+19*H/24)
    cpx = x+16*W/24
    cpy = y+12*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+12*H/24)
    cpx = x+8*W/24
    cpy = y+4*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+4*H/24)
    cpx = x+16*W/24
    cpy = y+2*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+2*H/24)
    ctx.stroke()
   // eye
    ctx.beginPath()
    ctx.moveTo(x+18*W/24, y+9*H/24)
    cpx = x+16*W/24
    cpy = y+9*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+7*H/24)
    cpx = x+16*W/24
    cpy = y+5*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+5*H/24)
    cpx = x+20*W/24
    cpy = y+5*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+7*H/24)
    cpx = x+20*W/24
    cpy = y+9*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+9*H/24)
    ctx.stroke()
  }
  
function gateAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+22*H/24)
  ctx.lineTo(x+4*W/24, y+22*H/24)
  ctx.lineTo(x+4*W/24, y+8*H/24)
  ctx.lineTo(x+3*W/24, y+6*H/24)
  ctx.lineTo(x+2*W/24, y+8*H/24)
  ctx.lineTo(x+2*W/24, y+22*H/24)
  ctx.stroke()
  //2
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+22*H/24)
  ctx.lineTo(x+22*W/24, y+22*H/24)
  ctx.lineTo(x+22*W/24, y+8*H/24)
  ctx.lineTo(x+21*W/24, y+6*H/24)
  ctx.lineTo(x+20*W/24, y+8*H/24)
  ctx.lineTo(x+20*W/24, y+22*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+8*H/24)
  ctx.lineTo(x+12*W/24, y+4*H/24)
  ctx.lineTo(x+20*W/24, y+8*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+20*W/24, y+9*H/24)
  ctx.lineTo(x+12*W/24, y+5*H/24)
  ctx.lineTo(x+4*W/24, y+9*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+21*H/24)
  ctx.lineTo(x+20*W/24, y+21*H/24)
  ctx.stroke()
  
  ctx.lineWidth *= 1.2
  //6
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+4*H/24)
  ctx.lineTo(x+12*W/24, y+22*H/24)
  ctx.stroke()
  ctx.lineWidth *= 0.8
  //7
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+6*H/24)
  ctx.lineTo(x+10*W/24, y+21*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+7*H/24)
  ctx.lineTo(x+8*W/24, y+20*H/24)
  ctx.lineTo(x+8*W/24, y+21*H/24)
  ctx.stroke()

  //9
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+8*H/24)
  ctx.lineTo(x+6*W/24, y+21*H/24)
  ctx.stroke()

  //10
  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+6*H/24)
  ctx.lineTo(x+14*W/24, y+21*H/24)
  ctx.stroke()

  //11
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+7*H/24)
  ctx.lineTo(x+16*W/24, y+21*H/24)
  ctx.stroke()

  //12
  ctx.beginPath()
  ctx.moveTo(x+18*W/24, y+8*H/24)
  ctx.lineTo(x+18*W/24, y+21*H/24)
  ctx.stroke()

  //13
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+14*H/24)
  ctx.lineTo(x+11*W/24, y+14*H/24)
  ctx.lineTo(x+11*W/24, y+13*H/24)
  ctx.lineTo(x+12*W/24, y+13*H/24)
  ctx.stroke()

  //14
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+14*H/24)
  ctx.lineTo(x+20*W/24, y+14*H/24)
  ctx.stroke()

  //15
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+22*H/24)
  ctx.lineTo(x+20*W/24, y+22*H/24)
  ctx.stroke()
// 2nd ary
  //16
  ctx.beginPath()
  ctx.moveTo(x+19*W/24, y+9*H/24)
  ctx.lineTo(x+19*W/24, y+21*H/24)
  ctx.stroke()

  //17
  ctx.beginPath()
  ctx.moveTo(x+17*W/24, y+8*H/24)
  ctx.lineTo(x+17*W/24, y+21*H/24)
  ctx.stroke()

  //18
  ctx.beginPath()
  ctx.moveTo(x+15*W/24, y+7*H/24)
  ctx.lineTo(x+15*W/24, y+21*H/24)
  ctx.stroke()

  //19
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+6*H/24)
  ctx.lineTo(x+13*W/24, y+21*H/24)
  ctx.stroke()

  //20
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+6*H/24)
  ctx.lineTo(x+11*W/24, y+21*H/24)
  ctx.stroke()

  //21
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+7*H/24)
  ctx.lineTo(x+9*W/24, y+21*H/24)
  ctx.stroke()

  //22
  ctx.beginPath()
  ctx.moveTo(x+7*W/24, y+8*H/24)
  ctx.lineTo(x+7*W/24, y+21*H/24)
  ctx.stroke()

  //23
  ctx.beginPath()
  ctx.moveTo(x+5*W/24, y+9*H/24)
  ctx.lineTo(x+5*W/24, y+21*H/24)
  ctx.stroke()

}
function observatoryAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.fillStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  ctx.globalAlpha /= 3
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+8*H/24)
  cpx = x+14*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+6*H/24)
  cpx = x+14*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+4*H/24)
  cpx = x+10*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+6*H/24)
  cpx = x+10*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+8*H/24)
  cpx = x+12*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+11*H/24)
  cpx = x+9*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+11*H/24)
  cpx = x+9*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+2*H/24)
  cpx = x+15*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+11*H/24)
  cpx = x+12*W/24
  cpy = y+11*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+11*H/24)
  cpx = x+12*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+8*H/24)
  ctx.fill()
  ctx.globalAlpha *= 3
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+13*H/24)
  ctx.lineTo(x+3*W/24, y+22*H/24)
  ctx.lineTo(x+21*W/24, y+22*H/24)
  ctx.lineTo(x+21*W/24, y+13*H/24)
  ctx.lineTo(x+3*W/24, y+13*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+13*H/24)
  ctx.lineTo(x+2*W/24, y+13*H/24)
  ctx.lineTo(x+2*W/24, y+11*H/24)
  ctx.lineTo(x+22*W/24, y+11*H/24)
  ctx.lineTo(x+22*W/24, y+13*H/24)
  ctx.lineTo(x+21*W/24, y+13*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+11*H/24)
  cpx = x+3*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+2*H/24)
  cpx = x+21*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+11*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+2*H/24)
  cpx = x+15*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+11*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+2*H/24)
  cpx = x+9*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+11*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+8*H/24)
  cpx = x+10*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+6*H/24)
  cpx = x+10*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+4*H/24)
  cpx = x+14*W/24
  cpy = y+4*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+6*H/24)
  cpx = x+14*W/24
  cpy = y+8*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+8*H/24)
  ctx.stroke()
}

function mountainAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+20*H/24)
  ctx.lineTo(x+6*W/24, y+16*H/24)
  ctx.lineTo(x+8*W/24, y+15*H/24)
  ctx.lineTo(x+8*W/24, y+11*H/24)
  ctx.lineTo(x+11*W/24, y+8*H/24)
  ctx.lineTo(x+12*W/24, y+6*H/24)
  ctx.lineTo(x+13*W/24, y+2*H/24)
  ctx.lineTo(x+15*W/24, y+3*H/24)
  ctx.lineTo(x+16*W/24, y+6*H/24)
  ctx.lineTo(x+18*W/24, y+10*H/24)
  ctx.lineTo(x+21*W/24, y+12*H/24)
  ctx.lineTo(x+22*W/24, y+17*H/24)
  ctx.lineTo(x+23*W/24, y+19*H/24)
  ctx.lineTo(x+23*W/24, y+20*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+14*W/24, y+4*H/24)
  ctx.lineTo(x+14*W/24, y+6*H/24)
  ctx.lineTo(x+15*W/24, y+6*H/24)
  ctx.lineTo(x+14*W/24, y+9*H/24)
  ctx.lineTo(x+16*W/24, y+10*H/24)
  ctx.lineTo(x+17*W/24, y+12*H/24)
  ctx.lineTo(x+17*W/24, y+16*H/24)
  ctx.lineTo(x+19*W/24, y+18*H/24)
  ctx.lineTo(x+18*W/24, y+20*H/24)
  ctx.stroke()

  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+8*H/24)
  ctx.lineTo(x+11*W/24, y+11*H/24)
  ctx.lineTo(x+11*W/24, y+14*H/24)
  ctx.lineTo(x+10*W/24, y+13*H/24)
  ctx.lineTo(x+10*W/24, y+17*H/24)
  ctx.lineTo(x+9*W/24, y+18*H/24)
  ctx.lineTo(x+8*W/24, y+20*H/24)
  ctx.stroke()
}
  function forestAt (x,y,W,color) {
    let canvas = document.getElementById("myCanvas")
    let ctx = canvas.getContext("2d")
    let H = W, cpx, cpy, points = []
    let colors = shuffle(getCurrentPalette(true,13))
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
    ctx.strokeStyle = color
    ctx.lineCap = "square"
    ctx.lineJoin = "bevel"
  
    ctx.beginPath()
    ctx.moveTo(x+4*W/24, y+22*H/24)
    ctx.lineTo(x+4*W/24, y+21*H/24)
    ctx.lineTo(x+5*W/24, y+21*H/24)
    ctx.lineTo(x+4*W/24, y+18*H/24)
    ctx.lineTo(x+3*W/24, y+21*H/24)
    ctx.lineTo(x+4*W/24, y+21*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+8*W/24, y+20*H/24)
    ctx.lineTo(x+8*W/24, y+19*H/24)
    ctx.lineTo(x+9*W/24, y+19*H/24)
    ctx.lineTo(x+8*W/24, y+16*H/24)
    ctx.lineTo(x+7*W/24, y+19*H/24)
    ctx.lineTo(x+8*W/24, y+19*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+5*W/24, y+16*H/24)
    ctx.lineTo(x+5*W/24, y+15*H/24)
    ctx.lineTo(x+6*W/24, y+15*H/24)
    ctx.lineTo(x+5*W/24, y+12*H/24)
    ctx.lineTo(x+4*W/24, y+15*H/24)
    ctx.lineTo(x+5*W/24, y+15*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+11*W/24, y+17*H/24)
    ctx.lineTo(x+11*W/24, y+16*H/24)
    ctx.lineTo(x+10*W/24, y+16*H/24)
    ctx.lineTo(x+11*W/24, y+13*H/24)
    ctx.lineTo(x+12*W/24, y+16*H/24)
    ctx.lineTo(x+11*W/24, y+16*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+9*W/24, y+13*H/24)
    ctx.lineTo(x+9*W/24, y+12*H/24)
    ctx.lineTo(x+10*W/24, y+12*H/24)
    ctx.lineTo(x+9*W/24, y+9*H/24)
    ctx.lineTo(x+8*W/24, y+12*H/24)
    ctx.lineTo(x+9*W/24, y+12*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+13*W/24, y+12*H/24)
    ctx.lineTo(x+13*W/24, y+11*H/24)
    ctx.lineTo(x+12*W/24, y+11*H/24)
    ctx.lineTo(x+13*W/24, y+8*H/24)
    ctx.lineTo(x+14*W/24, y+11*H/24)
    ctx.lineTo(x+13*W/24, y+11*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+3*W/24, y+11*H/24)
    ctx.lineTo(x+3*W/24, y+10*H/24)
    ctx.lineTo(x+2*W/24, y+10*H/24)
    ctx.lineTo(x+3*W/24, y+7*H/24)
    ctx.lineTo(x+4*W/24, y+10*H/24)
    ctx.lineTo(x+3*W/24, y+10*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+11*W/24, y+22*H/24)
    ctx.lineTo(x+11*W/24, y+21*H/24)
    ctx.lineTo(x+12*W/24, y+21*H/24)
    ctx.lineTo(x+11*W/24, y+18*H/24)
    ctx.lineTo(x+10*W/24, y+21*H/24)
    ctx.lineTo(x+11*W/24, y+21*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+6*W/24, y+10*H/24)
    ctx.lineTo(x+6*W/24, y+9*H/24)
    ctx.lineTo(x+7*W/24, y+9*H/24)
    ctx.lineTo(x+6*W/24, y+6*H/24)
    ctx.lineTo(x+5*W/24, y+9*H/24)
    ctx.lineTo(x+6*W/24, y+9*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+14*W/24, y+21*H/24)
    ctx.lineTo(x+14*W/24, y+20*H/24)
    ctx.lineTo(x+13*W/24, y+20*H/24)
    ctx.lineTo(x+14*W/24, y+17*H/24)
    ctx.lineTo(x+15*W/24, y+20*H/24)
    ctx.lineTo(x+14*W/24, y+20*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+11*W/24, y+8*H/24)
    ctx.lineTo(x+11*W/24, y+7*H/24)
    ctx.lineTo(x+12*W/24, y+7*H/24)
    ctx.lineTo(x+11*W/24, y+4*H/24)
    ctx.lineTo(x+10*W/24, y+7*H/24)
    ctx.lineTo(x+11*W/24, y+7*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+18*W/24, y+21*H/24)
    ctx.lineTo(x+18*W/24, y+22*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+17*W/24, y+21*H/24)
    ctx.lineTo(x+19*W/24, y+21*H/24)
    ctx.lineTo(x+18*W/24, y+18*H/24)
    ctx.lineTo(x+17*W/24, y+21*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+15*W/24, y+16*H/24)
    ctx.lineTo(x+15*W/24, y+15*H/24)
    ctx.lineTo(x+14*W/24, y+15*H/24)
    ctx.lineTo(x+15*W/24, y+12*H/24)
    ctx.lineTo(x+16*W/24, y+15*H/24)
    ctx.lineTo(x+15*W/24, y+15*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+3*W/24, y+5*H/24)
    ctx.lineTo(x+3*W/24, y+4*H/24)
    ctx.lineTo(x+2*W/24, y+4*H/24)
    ctx.lineTo(x+3*W/24, y+1*H/24)
    ctx.lineTo(x+4*W/24, y+4*H/24)
    ctx.lineTo(x+3*W/24, y+4*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+8*W/24, y+6*H/24)
    ctx.lineTo(x+8*W/24, y+5*H/24)
    ctx.lineTo(x+7*W/24, y+5*H/24)
    ctx.lineTo(x+8*W/24, y+2*H/24)
    ctx.lineTo(x+9*W/24, y+5*H/24)
    ctx.lineTo(x+8*W/24, y+5*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+21*W/24, y+21*H/24)
    ctx.lineTo(x+21*W/24, y+20*H/24)
    ctx.lineTo(x+22*W/24, y+20*H/24)
    ctx.lineTo(x+21*W/24, y+17*H/24)
    ctx.lineTo(x+20*W/24, y+20*H/24)
    ctx.lineTo(x+21*W/24, y+20*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+21*W/24, y+12*H/24)
    ctx.lineTo(x+21*W/24, y+11*H/24)
    ctx.lineTo(x+22*W/24, y+11*H/24)
    ctx.lineTo(x+21*W/24, y+8*H/24)
    ctx.lineTo(x+20*W/24, y+11*H/24)
    ctx.lineTo(x+21*W/24, y+11*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+20*W/24, y+16*H/24)
    ctx.lineTo(x+20*W/24, y+15*H/24)
    ctx.lineTo(x+21*W/24, y+15*H/24)
    ctx.lineTo(x+20*W/24, y+12*H/24)
    ctx.lineTo(x+19*W/24, y+15*H/24)
    ctx.lineTo(x+20*W/24, y+15*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+17*W/24, y+14*H/24)
    ctx.lineTo(x+17*W/24, y+13*H/24)
    ctx.lineTo(x+18*W/24, y+13*H/24)
    ctx.lineTo(x+17*W/24, y+10*H/24)
    ctx.lineTo(x+16*W/24, y+13*H/24)
    ctx.lineTo(x+17*W/24, y+13*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+15*W/24, y+9*H/24)
    ctx.lineTo(x+15*W/24, y+8*H/24)
    ctx.lineTo(x+14*W/24, y+8*H/24)
    ctx.lineTo(x+15*W/24, y+5*H/24)
    ctx.lineTo(x+16*W/24, y+8*H/24)
    ctx.lineTo(x+15*W/24, y+8*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+19*W/24, y+9*H/24)
    ctx.lineTo(x+19*W/24, y+8*H/24)
    ctx.lineTo(x+18*W/24, y+8*H/24)
    ctx.lineTo(x+19*W/24, y+5*H/24)
    ctx.lineTo(x+20*W/24, y+8*H/24)
    ctx.lineTo(x+19*W/24, y+8*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+17*W/24, y+6*H/24)
    ctx.lineTo(x+17*W/24, y+5*H/24)
    ctx.lineTo(x+18*W/24, y+5*H/24)
    ctx.lineTo(x+17*W/24, y+2*H/24)
    ctx.lineTo(x+16*W/24, y+5*H/24)
    ctx.lineTo(x+17*W/24, y+5*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+21*W/24, y+6*H/24)
    ctx.lineTo(x+21*W/24, y+5*H/24)
    ctx.lineTo(x+22*W/24, y+5*H/24)
    ctx.lineTo(x+21*W/24, y+2*H/24)
    ctx.lineTo(x+20*W/24, y+5*H/24)
    ctx.lineTo(x+21*W/24, y+5*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+13*W/24, y+5*H/24)
    ctx.lineTo(x+13*W/24, y+4*H/24)
    ctx.lineTo(x+14*W/24, y+4*H/24)
    ctx.lineTo(x+13*W/24, y+1*H/24)
    ctx.lineTo(x+12*W/24, y+4*H/24)
    ctx.lineTo(x+13*W/24, y+4*H/24)
    ctx.stroke()
  }
  
  function bee_hiveAt (x,y,W,color) {
    let canvas = document.getElementById("myCanvas")
    let ctx = canvas.getContext("2d")
    let H = W, cpx, cpy, points = []
    let colors = shuffle(getCurrentPalette(true,13))
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
    ctx.strokeStyle = color
    ctx.lineCap = "square"
    ctx.lineJoin = "bevel"
  
    ctx.beginPath()
    ctx.moveTo(x+5*W/24, y+22*H/24)
    cpx = x+4*W/24
    cpy = y+22*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+21*H/24)
    cpx = x+4*W/24
    cpy = y+20*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+20*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+4*W/24, y+20*H/24)
    cpx = x+3*W/24
    cpy = y+20*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+19*H/24)
    cpx = x+3*W/24
    cpy = y+18*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+18*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+3*W/24, y+18*H/24)
    cpx = x+2*W/24
    cpy = y+18*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+17*H/24)
    cpx = x+2*W/24
    cpy = y+16*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+16*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+3*W/24, y+16*H/24)
    cpx = x+2*W/24
    cpy = y+16*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+15*H/24)
    cpx = x+2*W/24
    cpy = y+14*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+14*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+3*W/24, y+14*H/24)
    cpx = x+2*W/24
    cpy = y+14*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+13*H/24)
    cpx = x+2*W/24
    cpy = y+12*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+12*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+4*W/24, y+12*H/24)
    cpx = x+3*W/24
    cpy = y+12*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+11*H/24)
    cpx = x+3*W/24
    cpy = y+10*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+10*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+5*W/24, y+10*H/24)
    cpx = x+4*W/24
    cpy = y+10*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+9*H/24)
    cpx = x+4*W/24
    cpy = y+8*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+8*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+6*W/24, y+8*H/24)
    cpx = x+5*W/24
    cpy = y+8*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+7*H/24)
    cpx = x+5*W/24
    cpy = y+6*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+6*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+7*W/24, y+6*H/24)
    cpx = x+6*W/24
    cpy = y+6*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+5*H/24)
    cpx = x+6*W/24
    cpy = y+4*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+4*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+8*W/24, y+4*H/24)
    cpx = x+7*W/24
    cpy = y+4*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+3*H/24)
    cpx = x+7*W/24
    cpy = y+2*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+2*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+19*W/24, y+22*H/24)
    cpx = x+20*W/24
    cpy = y+22*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+21*H/24)
    cpx = x+20*W/24
    cpy = y+20*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+20*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+20*W/24, y+20*H/24)
    cpx = x+21*W/24
    cpy = y+20*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+19*H/24)
    cpx = x+21*W/24
    cpy = y+18*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+18*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+21*W/24, y+18*H/24)
    cpx = x+22*W/24
    cpy = y+18*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+17*H/24)
    cpx = x+22*W/24
    cpy = y+16*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+16*H/24)
    cpx = x+22*W/24
    cpy = y+16*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+15*H/24)
    cpx = x+22*W/24
    cpy = y+14*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+14*H/24)
    cpx = x+22*W/24
    cpy = y+14*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+13*H/24)
    cpx = x+22*W/24
    cpy = y+12*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+12*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+20*W/24, y+12*H/24)
    cpx = x+21*W/24
    cpy = y+12*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+11*H/24)
    cpx = x+21*W/24
    cpy = y+10*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+10*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+19*W/24, y+10*H/24)
    cpx = x+20*W/24
    cpy = y+10*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+9*H/24)
    cpx = x+20*W/24
    cpy = y+8*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+8*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+18*W/24, y+8*H/24)
    cpx = x+19*W/24
    cpy = y+8*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+7*H/24)
    cpx = x+19*W/24
    cpy = y+6*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+6*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+17*W/24, y+6*H/24)
    cpx = x+18*W/24
    cpy = y+6*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+5*H/24)
    cpx = x+18*W/24
    cpy = y+4*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+4*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+16*W/24, y+4*H/24)
    cpx = x+17*W/24
    cpy = y+4*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+3*H/24)
    cpx = x+17*W/24
    cpy = y+2*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+2*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+8*W/24, y+2*H/24)
    ctx.lineTo(x+16*W/24, y+2*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+5*W/24, y+22*H/24)
    ctx.lineTo(x+19*W/24, y+22*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+8*W/24, y+4*H/24)
    ctx.lineTo(x+16*W/24, y+4*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+7*W/24, y+6*H/24)
    ctx.lineTo(x+17*W/24, y+6*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+6*W/24, y+8*H/24)
    ctx.lineTo(x+18*W/24, y+8*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+5*W/24, y+10*H/24)
    ctx.lineTo(x+19*W/24, y+10*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+4*W/24, y+12*H/24)
    ctx.lineTo(x+20*W/24, y+12*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+12*W/24, y+21*H/24)
    cpx = x+11*W/24
    cpy = y+21*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+20*H/24)
    cpx = x+11*W/24
    cpy = y+19*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+19*H/24)
    cpx = x+13*W/24
    cpy = y+19*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+20*H/24)
    cpx = x+13*W/24
    cpy = y+21*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+21*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+3*W/24, y+14*H/24)
    ctx.lineTo(x+21*W/24, y+14*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+3*W/24, y+16*H/24)
    ctx.lineTo(x+21*W/24, y+16*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+4*W/24, y+18*H/24)
    ctx.lineTo(x+20*W/24, y+18*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+5*W/24, y+20*H/24)
    ctx.lineTo(x+11*W/24, y+20*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+13*W/24, y+20*H/24)
    ctx.lineTo(x+19*W/24, y+20*H/24)
    ctx.stroke()
  }
  
  function flat_tireAt (x,y,W,color) {
    let canvas = document.getElementById("myCanvas")
    let ctx = canvas.getContext("2d")
    let H = W, cpx, cpy, points = []
    let colors = shuffle(getCurrentPalette(true,13))
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
    ctx.strokeStyle = color
    ctx.lineCap = "square"
    ctx.lineJoin = "bevel"
  
      //1
  ctx.beginPath()
  ctx.moveTo(x+3*W/24, y+21*H/24)
  ctx.lineTo(x+21*W/24, y+21*H/24)
  cpx = x+21*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+20*H/24)
  cpx = x+22*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+12*H/24)
  cpx = x+22*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+3*H/24)
  cpx = x+2*W/24
  cpy = y+3*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+12*H/24)
  cpx = x+2*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+20*H/24)
  cpx = x+3*W/24
  cpy = y+20*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+21*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+19*H/24)
  cpx = x+18*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+13*H/24)
  cpx = x+18*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+7*H/24)
  cpx = x+6*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+13*H/24)
  cpx = x+6*W/24
  cpy = y+19*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+19*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+14*H/24)
  cpx = x+13*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+13*H/24)
  cpx = x+13*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+12*H/24)
  cpx = x+11*W/24
  cpy = y+12*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+13*H/24)
  cpx = x+11*W/24
  cpy = y+14*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+14*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+12*W/24, y+12*H/24)
  ctx.lineTo(x+12*W/24, y+7*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+14*H/24)
  ctx.lineTo(x+8*W/24, y+18*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+14*H/24)
  ctx.lineTo(x+16*W/24, y+18*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+17.5*W/24, y+11*H/24)
  ctx.lineTo(x+13*W/24, y+12.5*H/24)
  ctx.stroke()

  //8
  ctx.beginPath()
  ctx.moveTo(x+11*W/24, y+12.5*H/24)
  ctx.lineTo(x+6.5*W/24, y+11*H/24)
  ctx.stroke()
   
  }
  
function swingAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"

  //2
  ctx.beginPath()
  ctx.moveTo(x+6*W/24, y+10*H/24)
  ctx.lineTo(x+18*W/24, y+2*H/24)
  ctx.stroke()

  //1
  ctx.beginPath()
  ctx.moveTo(x+8*W/24, y+9*H/24)
  cpx = x+8*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+16*H/24)
  cpx = x+10*W/24
  cpy = y+17*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+15*H/24)
  cpx = x+11*W/24
  cpy = y+7*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+7*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+13*W/24, y+5.5*H/24)
  cpx = x+13*W/24
  cpy = y+12.5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+12.5*H/24)
  cpx = x+15*W/24
  cpy = y+13.5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+11.5*H/24)
  cpx = x+16*W/24
  cpy = y+3.5*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+3.5*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+16*H/24)
  cpx = x+8*W/24
  cpy = y+16*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+16*H/24)
  ctx.stroke()
  //6
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+22*H/24)
  ctx.lineTo(x+6*W/24, y+10*H/24)
  ctx.lineTo(x+10*W/24, y+22*H/24)
  ctx.stroke()
  //9
  ctx.beginPath()
  ctx.moveTo(x+22*W/24, y+14*H/24)
  ctx.lineTo(x+18*W/24, y+2*H/24)
  ctx.lineTo(x+14*W/24, y+14*H/24)
  ctx.stroke()
  //8
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+8*H/24)
  ctx.lineTo(x+20*W/24, y+8*H/24)
  ctx.stroke()
}

function wife_beaterAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+4*W/24, y+23*H/24)
  cpx = x+4*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+10*H/24)
  cpx = x+6*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+2*H/24)
  cpx = x+8*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+2*H/24)
  cpx = x+8*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+10*H/24)
  cpx = x+16*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+2*H/24)
  cpx = x+18*W/24
  cpy = y+2*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+2*H/24)
  cpx = x+18*W/24
  cpy = y+10*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+10*H/24)
  cpx = x+20*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+23*H/24)
  cpx = x+4*W/24
  cpy = y+23*H/24
  ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+23*H/24)
  ctx.stroke()
}
  
  function body_of_waterAt (x,y,W,color) {
    let canvas = document.getElementById("myCanvas")
    let ctx = canvas.getContext("2d")
    let H = W, cpx, cpy, points = []
    let colors = shuffle(getCurrentPalette(true,13))
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
    ctx.strokeStyle = color
    ctx.lineCap = "square"
    ctx.lineJoin = "bevel"
  
    ctx.beginPath()
    ctx.moveTo(x+4*W/24, y+18*H/24)
    cpx = x+6*W/24
    cpy = y+18*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+16*H/24)
    cpx = x+6*W/24
    cpy = y+18*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+18*H/24)
    cpx = x+10*W/24
    cpy = y+18*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+16*H/24)
    cpx = x+10*W/24
    cpy = y+18*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+18*H/24)
    cpx = x+14*W/24
    cpy = y+18*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+16*H/24)
    cpx = x+14*W/24
    cpy = y+18*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+18*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+6*W/24, y+14*H/24)
    cpx = x+8*W/24
    cpy = y+14*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+12*H/24)
    cpx = x+8*W/24
    cpy = y+14*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+14*H/24)
    cpx = x+12*W/24
    cpy = y+14*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+12*H/24)
    cpx = x+12*W/24
    cpy = y+14*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+14*H/24)
    cpx = x+16*W/24
    cpy = y+14*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+12*H/24)
    cpx = x+16*W/24
    cpy = y+14*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+14*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+11*W/24, y+10*H/24)
    cpx = x+13*W/24
    cpy = y+10*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+8*H/24)
    cpx = x+13*W/24
    cpy = y+10*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+10*H/24)
    cpx = x+17*W/24
    cpy = y+10*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+8*H/24)
    cpx = x+17*W/24
    cpy = y+10*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+10*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+12*W/24, y+6*H/24)
    cpx = x+14*W/24
    cpy = y+6*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+4*H/24)
    cpx = x+14*W/24
    cpy = y+6*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+6*H/24)
    cpx = x+18*W/24
    cpy = y+6*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+4*H/24)
    cpx = x+18*W/24
    cpy = y+6*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+6*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+10*W/24, y+22*H/24)
    cpx = x+2*W/24
    cpy = y+22*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+16*H/24)
    cpx = x+3*W/24
    cpy = y+12*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+11*H/24)
    cpx = x+10*W/24
    cpy = y+10*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+7*H/24)
    cpx = x+10*W/24
    cpy = y+2*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+2*H/24)
    cpx = x+22*W/24
    cpy = y+2*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+8*H/24)
    cpx = x+22*W/24
    cpy = y+20*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+22*H/24)
    ctx.stroke()
  }
  
  function not_blind_eyeAt (x,y,W,color) {
    let canvas = document.getElementById("myCanvas")
    let ctx = canvas.getContext("2d")
    let H = W, cpx, cpy, points = []
    let colors = shuffle(getCurrentPalette(true,13))
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
    ctx.strokeStyle = color
    ctx.lineCap = "square"
    ctx.lineJoin = "bevel"
  
    ctx.beginPath()
    ctx.moveTo(x+2*W/24, y+12*H/24)
    cpx = x+12*W/24
    cpy = y+18*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+12*H/24)
    cpx = x+12*W/24
    cpy = y+4*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+12*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+12*W/24, y+14*H/24)
    cpx = x+8*W/24
    cpy = y+14*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+9*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+12*W/24, y+14*H/24)
    cpx = x+16*W/24
    cpy = y+14*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+9*H/24)
    ctx.stroke()
  }

  function blind_eyeAt (x,y,W,color) {
    let canvas = document.getElementById("myCanvas")
    let ctx = canvas.getContext("2d")
    let H = W, cpx, cpy, points = []
    let colors = shuffle(getCurrentPalette(true,13))
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
    ctx.strokeStyle = color
    ctx.lineCap = "square"
    ctx.lineJoin = "bevel"
  
    ctx.beginPath()
    ctx.moveTo(x+2*W/24, y+2*H/24)
    ctx.lineTo(x+22*W/24, y+22*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+2*W/24, y+12*H/24)
    cpx = x+12*W/24
    cpy = y+18*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+22*W/24, y+12*H/24)
    cpx = x+12*W/24
    cpy = y+4*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+2*W/24, y+12*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+12*W/24, y+14*H/24)
    cpx = x+8*W/24
    cpy = y+14*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+9*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+12*W/24, y+14*H/24)
    cpx = x+16*W/24
    cpy = y+14*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+9*H/24)
    ctx.stroke()
  }
  
  function crazy_wallAt (x,y,W,color) {
    let canvas = document.getElementById("myCanvas")
    let ctx = canvas.getContext("2d")
    let H = W, cpx, cpy, points = []
    let colors = shuffle(getCurrentPalette(true,13))
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
    ctx.strokeStyle = color
    ctx.lineCap = "square"
    ctx.lineJoin = "bevel"
  
    ctx.beginPath()
    ctx.moveTo(x+3*W/24, y+2*H/24)
    ctx.lineTo(x+3*W/24, y+8*H/24)
    ctx.lineTo(x+8*W/24, y+8*H/24)
    ctx.lineTo(x+8*W/24, y+2*H/24)
    ctx.lineTo(x+3*W/24, y+2*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+16*W/24, y+3*H/24)
    ctx.lineTo(x+22*W/24, y+3*H/24)
    ctx.lineTo(x+22*W/24, y+9*H/24)
    ctx.lineTo(x+16*W/24, y+9*H/24)
    ctx.lineTo(x+16*W/24, y+3*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+2*W/24, y+17*H/24)
    ctx.lineTo(x+8*W/24, y+17*H/24)
    ctx.lineTo(x+8*W/24, y+22*H/24)
    ctx.lineTo(x+2*W/24, y+22*H/24)
    ctx.lineTo(x+2*W/24, y+17*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+18*W/24, y+14*H/24)
    ctx.lineTo(x+18*W/24, y+21*H/24)
    ctx.lineTo(x+23*W/24, y+21*H/24)
    ctx.lineTo(x+23*W/24, y+16*H/24)
    ctx.lineTo(x+21*W/24, y+14*H/24)
    ctx.lineTo(x+18*W/24, y+14*H/24)
    ctx.stroke()
   
    ctx.beginPath()
    ctx.moveTo(x+4*W/24, y+4*H/24)
    cpx = x+7*W/24
    cpy = y+20*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+20*H/24)
    ctx.stroke()

    ctx.beginPath()
    ctx.moveTo(x+5*W/24, y+4*H/24)
    cpx = x+12*W/24
    cpy = y+8*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+5*H/24)
    ctx.stroke()

    ctx.beginPath()
    ctx.moveTo(x+8*W/24, y+11*H/24)
    ctx.lineTo(x+14*W/24, y+9*H/24)
    ctx.lineTo(x+16*W/24, y+16*H/24)
    ctx.lineTo(x+10*W/24, y+18*H/24)
    ctx.lineTo(x+8*W/24, y+11*H/24)
    ctx.stroke()
    
    ctx.beginPath()
    ctx.moveTo(x+19*W/24, y+5*H/24)
    cpx = x+18*W/24
    cpy = y+11*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+12*H/24)
    ctx.stroke()

    ctx.beginPath()
    ctx.moveTo(x+11*W/24, y+13*H/24)
    cpx = x+11*W/24
    cpy = y+18*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+5*W/24, y+19*H/24)
    ctx.stroke()

    ctx.beginPath()
    ctx.moveTo(x+12*W/24, y+13*H/24)
    cpx = x+17*W/24
    cpy = y+18*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+21*W/24, y+17*H/24)
    ctx.stroke()

    ctx.beginPath()
    ctx.moveTo(x+20*W/24, y+6*H/24)
    ctx.lineTo(x+19*W/24, y+16*H/24)
    ctx.stroke()

    ctx.beginPath()
    ctx.moveTo(x+4*W/24, y+4*H/24)
    ctx.lineTo(x+7*W/24, y+20*H/24)
    ctx.stroke()
    
    
    // drop corner
    ctx.beginPath()
    ctx.moveTo(x+21*W/24, y+14*H/24)
    ctx.lineTo(x+21*W/24, y+16*H/24)
    ctx.lineTo(x+23*W/24, y+16*H/24)
    ctx.stroke()
    ctx.beginPath()
    ctx.moveTo(x+20*W/24, y+15*H/24)
    ctx.lineTo(x+5*W/24, y+5*H/24)
    ctx.stroke()
    
    //tacks
    let r = W/72
    ctx.beginPath()
    ctx.arc(x+4*W/24, y+4*H/24, r, 0, Math.PI*2)
    ctx.stroke()

    ctx.beginPath()
    ctx.arc( x+7*W/24, y+20*H/24, r, 0, Math.PI*2)
    ctx.stroke()

    ctx.beginPath()
    ctx.arc(x+5*W/24, y+4*H/24, r, 0, Math.PI*2)
    ctx.stroke()

    ctx.beginPath()
    ctx.arc(x+18*W/24, y+5*H/24, r, 0, Math.PI*2)
    ctx.stroke()

    ctx.beginPath()
    ctx.arc(x+19*W/24, y+5*H/24, r, 0, Math.PI*2)
    ctx.stroke()

    ctx.beginPath()
    ctx.arc(cx+12*W/24, y+12*H/24, r, 0, Math.PI*2)
    ctx.stroke()

    ctx.beginPath()
    ctx.arc(x+11*W/24, y+13*H/24, r, 0, Math.PI*2)
    ctx.stroke()

    ctx.beginPath()
    ctx.arc( x+5*W/24, y+19*H/24, r, 0, Math.PI*2)
    ctx.stroke()

    ctx.beginPath()
    ctx.arc(x+12*W/24, y+13*H/24, r, 0, Math.PI*2)
    ctx.stroke()

    ctx.beginPath()
    ctx.arc(x+21*W/24, y+17*H/24, r, 0, Math.PI*2)
    ctx.stroke()

    ctx.beginPath()
    ctx.arc(x+20*W/24, y+6*H/24, r, 0, Math.PI*2)
    ctx.stroke()

    ctx.beginPath()
    ctx.arc(x+19*W/24, y+16*H/24, r, 0, Math.PI*2)
    ctx.stroke()

    ctx.beginPath()
    ctx.arc(x+4*W/24, y+4*H/24, r, 0, Math.PI*2)
    ctx.stroke()

    ctx.beginPath()
    ctx.arc(x+7*W/24, y+20*H/24, r, 0, Math.PI*2)
    ctx.stroke()
    
    ctx.beginPath()
    ctx.arc(x+12*W/24, y+12*H/24, r, 0, Math.PI*2)
    ctx.stroke()
    
    ctx.beginPath()
    ctx.arc(x+20*W/24, y+15*H/24, r, 0, Math.PI*2)
    ctx.stroke()
    
    ctx.beginPath()
    ctx.arc(x+5*W/24, y+5*H/24, r, 0, Math.PI*2)
    ctx.stroke()
  }
  
  function flipflopAt (x,y,W,color) {
    let canvas = document.getElementById("myCanvas")
    let ctx = canvas.getContext("2d")
    let H = W, cpx, cpy, points = []
    let colors = shuffle(getCurrentPalette(true,13))
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
    ctx.strokeStyle = color
    ctx.lineCap = "square"
    ctx.lineJoin = "bevel"
  
    ctx.beginPath()
    ctx.moveTo(x+12*W/24, y+22*H/24)
    cpx = x+17*W/24
    cpy = y+22*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+10*H/24)
    cpx = x+17*W/24
    cpy = y+2*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+2*H/24)
    cpx = x+7*W/24
    cpy = y+2*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+10*H/24)
    cpx = x+9*W/24
    cpy = y+14*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+18*H/24)
    cpx = x+8*W/24
    cpy = y+22*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+22*H/24)
    ctx.stroke()

    ctx.beginPath()
    ctx.moveTo(x+9*W/24, y+9*H/24)
    cpx = x+9*W/24
    cpy = y+5*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+5*H/24)
    cpx = x+16*W/24
    cpy = y+5*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+9*H/24)
    ctx.stroke()

    ctx.beginPath()
    ctx.moveTo(x+12*W/24, y+5*H/24)
    cpx = x+12*W/24
    cpy = y+3*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+3*H/24)
    ctx.stroke()
    
    let r = W/48
    
    ctx.beginPath()
    ctx.arc(x+12*W/24, y+3*H/24, r, 0, Math.PI*2)
    ctx.stroke()

    ctx.beginPath()
    ctx.arc(x+16*W/24, y+9*H/24, r, 0, Math.PI*2)
    ctx.stroke()

    ctx.beginPath()
    ctx.arc(x+9*W/24, y+9*H/24, r, 0, Math.PI*2)
    ctx.stroke()
    
    ctx.beginPath()
    ctx.moveTo(x+12*W/24, y+2*H/24)
    cpx = x+18*W/24
    cpy = y+2*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+10*H/24)
    cpx = x+18*W/24
    cpy = y+22*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+22*H/24)
    ctx.stroke()
  }
  /*
  function greenwashingOGAt (x,y,W,color) {
    let canvas = document.getElementById("myCanvas")
    let ctx = canvas.getContext("2d")
    let H = W, cpx, cpy, points = []
    let colors = shuffle(getCurrentPalette(true,13))
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
    ctx.strokeStyle = color
    ctx.lineCap = "square"
    ctx.lineJoin = "bevel"
    ctx.beginPath()
    ctx.moveTo(x+12*W/24, y+22*H/24)
    cpx = x+4*W/24
    cpy = y+22*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+4*W/24, y+14*H/24)
    cpx = x+4*W/24
    cpy = y+9*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+7*H/24)
    cpx = x+11*W/24
    cpy = y+5*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+2*H/24)
    cpx = x+13*W/24
    cpy = y+5*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+7*H/24)
    cpx = x+20*W/24
    cpy = y+9*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+20*W/24, y+14*H/24)
    cpx = x+20*W/24
    cpy = y+22*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+22*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+8*W/24, y+18*H/24)
    cpx = x+10*W/24
    cpy = y+18*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+16*H/24)
    cpx = x+10*W/24
    cpy = y+14*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+14*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+12*W/24, y+14*H/24)
    cpx = x+12*W/24
    cpy = y+18*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+18*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+12*W/24, y+13*H/24)
    cpx = x+12*W/24
    cpy = y+12*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+13*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+7*W/24, y+18*H/24)
    ctx.lineTo(x+7*W/24, y+11*H/24)
    ctx.stroke()
    //b loop
    ctx.beginPath()
    ctx.moveTo(x+7*W/24, y+14*H/24)
    cpx = x+8*W/24
    cpy = y+14*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+14*H/24)
    cpx = x+10*W/24
    cpy = y+14*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+16*H/24)
    cpx = x+10*W/24
    cpy = y+18*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+18*H/24)
    cpx = x+7*W/24
    cpy = y+18*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+18*H/24)
    ctx.stroke()

    ctx.beginPath()
    ctx.moveTo(x+16*W/24, y+18*H/24)
    cpx = x+14*W/24
    cpy = y+18*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+16*H/24)
    cpx = x+14*W/24
    cpy = y+14*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+14*H/24)
    cpx = x+18*W/24
    cpy = y+14*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+16*H/24)
    cpx = x+18*W/24
    cpy = y+18*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+16*W/24, y+18*H/24)
    ctx.stroke()
    
  }*/
  
  function bribeAt (x,y,W,color) {
    let canvas = document.getElementById("myCanvas")
    let ctx = canvas.getContext("2d")
    let H = W, cpx, cpy, points = []
    let colors = shuffle(getCurrentPalette(true,13))
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
    ctx.strokeStyle = color
    ctx.lineCap = "square"
    ctx.lineJoin = "bevel"
  
    ctx.beginPath()
    ctx.moveTo(x+15*W/24, y+7*H/24)
    cpx = x+12*W/24
    cpy = y+7*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+7*H/24)
    cpx = x+9*W/24
    cpy = y+7*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+10*H/24)
    cpx = x+9*W/24
    cpy = y+13*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+13*H/24)
    cpx = x+15*W/24
    cpy = y+13*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+16*H/24)
    cpx = x+15*W/24
    cpy = y+19*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+19*H/24)
    cpx = x+9*W/24
    cpy = y+19*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+19*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+12*W/24, y+6*H/24)
    ctx.lineTo(x+12*W/24, y+20*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+4*W/24, y+22*H/24)
    ctx.lineTo(x+20*W/24, y+22*H/24)
    ctx.lineTo(x+20*W/24, y+2*H/24)
    ctx.lineTo(x+4*W/24, y+2*H/24)
    ctx.lineTo(x+4*W/24, y+22*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+4*W/24, y+2*H/24)
    ctx.lineTo(x+5*W/24, y+4*H/24)
    ctx.lineTo(x+19*W/24, y+4*H/24)
    ctx.lineTo(x+20*W/24, y+2*H/24)
    ctx.stroke()
    
    ctx.setLineDash([W/96,W/32])
  
    ctx.beginPath()
    ctx.moveTo(x+17*W/24, y+19*H/24)
    ctx.lineTo(x+19*W/24, y+21*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+17*W/24, y+7*H/24)
    ctx.lineTo(x+19*W/24, y+5*H/24)
    ctx.stroke()
    
    ctx.beginPath()
    ctx.moveTo(x+7*W/24, y+19*H/24)
    ctx.lineTo(x+5*W/24, y+21*H/24)
    ctx.stroke()

    ctx.beginPath()
    ctx.moveTo(x+7*W/24, y+7*H/24)
    ctx.lineTo(x+5*W/24, y+5*H/24)
    ctx.stroke()
  
    ctx.setLineDash([])
  }
  
  function deadlockAt (x,y,W,color) {
    let canvas = document.getElementById("myCanvas")
    let ctx = canvas.getContext("2d")
    let H = W, cpx, cpy, points = []
    let colors = shuffle(getCurrentPalette(true,13))
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
    ctx.strokeStyle = color
    ctx.lineCap = "square"
    ctx.lineJoin = "bevel"
  
    ctx.beginPath()
    ctx.moveTo(x+2*W/24, y+10*H/24)
    ctx.lineTo(x+2*W/24, y+14*H/24)
    ctx.lineTo(x+6*W/24, y+14*H/24)
    ctx.lineTo(x+6*W/24, y+10*H/24)
    ctx.lineTo(x+2*W/24, y+10*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+18*W/24, y+10*H/24)
    ctx.lineTo(x+22*W/24, y+10*H/24)
    ctx.lineTo(x+22*W/24, y+14*H/24)
    ctx.lineTo(x+18*W/24, y+14*H/24)
    ctx.lineTo(x+18*W/24, y+11*H/24)
    ctx.lineTo(x+18*W/24, y+10*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+12*W/24, y+22*H/24)
    cpx = x+10*W/24
    cpy = y+22*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+20*H/24)
    cpx = x+10*W/24
    cpy = y+18*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+18*H/24)
    cpx = x+14*W/24
    cpy = y+18*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+20*H/24)
    cpx = x+14*W/24
    cpy = y+22*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+22*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+12*W/24, y+2*H/24)
    cpx = x+14*W/24
    cpy = y+2*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+4*H/24)
    cpx = x+14*W/24
    cpy = y+6*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+6*H/24)
    cpx = x+10*W/24
    cpy = y+6*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+4*H/24)
    cpx = x+10*W/24
    cpy = y+2*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+2*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+17*W/24, y+15*H/24)
    ctx.lineTo(x+14*W/24, y+18*H/24)
    ctx.lineTo(x+14*W/24, y+16*H/24)
    ctx.lineTo(x+14*W/24, y+18*H/24)
    ctx.lineTo(x+16*W/24, y+18*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+7*W/24, y+9*H/24)
    ctx.lineTo(x+10*W/24, y+6*H/24)
    ctx.lineTo(x+10*W/24, y+8*H/24)
    ctx.lineTo(x+10*W/24, y+6*H/24)
    ctx.lineTo(x+8*W/24, y+6*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+7*W/24, y+15*H/24)
    ctx.lineTo(x+7*W/24, y+17*H/24)
    ctx.lineTo(x+7*W/24, y+15*H/24)
    ctx.lineTo(x+9*W/24, y+15*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+15*W/24, y+9*H/24)
    ctx.lineTo(x+17*W/24, y+9*H/24)
    ctx.lineTo(x+17*W/24, y+7*H/24)
    ctx.stroke()
    
    ctx.setLineDash([W/32, W/32])
    
    ctx.beginPath()
    ctx.moveTo(x+7*W/24, y+15*H/24)
    ctx.lineTo(x+10*W/24, y+18*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+14*W/24, y+6*H/24)
    ctx.lineTo(x+17*W/24, y+9*H/24)
    ctx.stroke()
    ctx.setLineDash([])
  } 
  
  function starsAt (x,y,W,color) {
    let canvas = document.getElementById("myCanvas")
    let ctx = canvas.getContext("2d")
    let H = W, cpx, cpy, points = []
    let colors = shuffle(getCurrentPalette(true,13))
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
    ctx.strokeStyle = color
    ctx.lineCap = "square"
    ctx.lineJoin = "bevel"
  
    ctx.beginPath()
    ctx.moveTo(x+22*W/24, y+15*H/24)
    ctx.lineTo(x+19*W/24, y+19*H/24)
    ctx.lineTo(x+12*W/24, y+15*H/24)
    ctx.lineTo(x+13*W/24, y+10*H/24)
    ctx.lineTo(x+22*W/24, y+15*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+10*W/24, y+7*H/24)
    ctx.lineTo(x+13*W/24, y+10*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+10*W/24, y+7*H/24)
    ctx.lineTo(x+8*W/24, y+4*H/24)
    ctx.lineTo(x+2*W/24, y+3*H/24)
    ctx.stroke()
    // arcs 
    let r = ctx.lineWidth
    ctx.beginPath()
    ctx.arc(x+22*W/24, y+15*H/24, r, 0, Math.PI*2)
    ctx.stroke()
    ctx.beginPath()
    ctx.arc(x+19*W/24, y+19*H/24, r, 0, Math.PI*2)
    ctx.stroke()
    ctx.beginPath()
    ctx.arc(x+12*W/24, y+15*H/24, r, 0, Math.PI*2)
    ctx.stroke()
    ctx.beginPath()
    ctx.arc(x+13*W/24, y+10*H/24, r, 0, Math.PI*2)
    ctx.stroke()
    ctx.beginPath()
    ctx.arc(x+22*W/24, y+15*H/24, r, 0, Math.PI*2)
    ctx.stroke()
    ctx.beginPath()
    ctx.arc(x+10*W/24, y+7*H/24, r, 0, Math.PI*2)
    ctx.stroke()
    ctx.beginPath()
    ctx.arc(x+8*W/24, y+4*H/24, r, 0, Math.PI*2)
    ctx.stroke()
    ctx.beginPath()
    ctx.arc(x+2*W/24, y+3*H/24, r, 0, Math.PI*2)
    ctx.stroke()
  }
  
  function mirrorAt (x,y,W,color) {
    let canvas = document.getElementById("myCanvas")
    let ctx = canvas.getContext("2d")
    W *= 1.25
    x -= 2*W/24
    y -= 2*W/24
    let H = W, cpx, cpy, points = []
    let colors = shuffle(getCurrentPalette(true,13))
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
    ctx.strokeStyle = color
    ctx.lineCap = "square"
    ctx.lineJoin = "bevel"
  
    ctx.beginPath()
    ctx.moveTo(x+12*W/24, y+22*H/24)
    cpx = x+14*W/24
    cpy = y+22*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+20*H/24)
    cpx = x+14*W/24
    cpy = y+18*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+14*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+12*W/24, y+22*H/24)
    cpx = x+10*W/24
    cpy = y+22*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+20*H/24)
    cpx = x+10*W/24
    cpy = y+18*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+14*H/24)
    cpx = x+6*W/24
    cpy = y+14*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+8*H/24)
    cpx = x+6*W/24
    cpy = y+2*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+2*H/24)
    cpx = x+18*W/24
    cpy = y+2*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+8*H/24)
    cpx = x+18*W/24
    cpy = y+14*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+14*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+12*W/24, y+13*H/24)
    cpx = x+7*W/24
    cpy = y+13*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+8*H/24)
    cpx = x+7*W/24
    cpy = y+3*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+3*H/24)
    cpx = x+17*W/24
    cpy = y+3*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+8*H/24)
    cpx = x+17*W/24
    cpy = y+13*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+13*H/24)
    ctx.stroke()
  }
  
  function phoneAt (x,y,W,color) {
    let canvas = document.getElementById("myCanvas")
    let ctx = canvas.getContext("2d")
    let H = W, cpx, cpy, points = []
    let colors = shuffle(getCurrentPalette(true,13))
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
    ctx.strokeStyle = color
    ctx.lineCap = "square"
    ctx.lineJoin = "bevel"
  
    ctx.beginPath()
    ctx.moveTo(x+6*W/24, y+3*H/24)
    cpx = x+6*W/24
    cpy = y+2*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+2*H/24)
    cpx = x+17*W/24
    cpy = y+2*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+2*H/24)
    cpx = x+18*W/24
    cpy = y+2*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+3*H/24)
    cpx = x+18*W/24
    cpy = y+21*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+18*W/24, y+21*H/24)
    cpx = x+18*W/24
    cpy = y+22*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+22*H/24)
    cpx = x+7*W/24
    cpy = y+22*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+7*W/24, y+22*H/24)
    cpx = x+6*W/24
    cpy = y+22*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+21*H/24)
    cpx = x+6*W/24
    cpy = y+3*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+6*W/24, y+3*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+12*W/24, y+21*H/24)
    cpx = x+11*W/24
    cpy = y+21*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+11*W/24, y+20*H/24)
    cpx = x+11*W/24
    cpy = y+19*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+19*H/24)
    cpx = x+13*W/24
    cpy = y+19*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+20*H/24)
    cpx = x+13*W/24
    cpy = y+21*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+12*W/24, y+21*H/24)
    ctx.stroke()

  
    ctx.beginPath()
    ctx.moveTo(x+17*W/24, y+22*H/24)
    cpx = x+19*W/24
    cpy = y+22*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+21*H/24)
    cpx = x+19*W/24
    cpy = y+3*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+19*W/24, y+3*H/24)
    cpx = x+19*W/24
    cpy = y+2*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+17*W/24, y+2*H/24)
    ctx.stroke()
    
    ctx.beginPath()
    ctx.moveTo(x+15*W/24, y+2*H/24)
    cpx = x+15*W/24
    cpy = y+3*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+14*W/24, y+3*H/24)
    cpx = x+10*W/24
    cpy = y+3*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+10*W/24, y+3*H/24)
    cpx = x+9*W/24
    cpy = y+3*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+9*W/24, y+2*H/24)
    ctx.stroke()
  }
  
  function uapAt (x,y,W,color) {
    let canvas = document.getElementById("myCanvas")
    let ctx = canvas.getContext("2d")
    let H = W, cpx, cpy, points = []
    let colors = shuffle(getCurrentPalette(true,13))
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
    ctx.strokeStyle = color
    let saved = ctx.fillStyle
    ctx.fillStyle = color
    ctx.lineCap = "square"
    ctx.lineJoin = "bevel"
  
    ctx.beginPath()
    ctx.moveTo(x+8*W/24, y+21*H/24)
    cpx = x+3*W/24
    cpy = y+21*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+3*W/24, y+18*H/24)
    cpx = x+3*W/24
    cpy = y+15*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+15*H/24)
    cpx = x+13*W/24
    cpy = y+15*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+18*H/24)
    cpx = x+13*W/24
    cpy = y+21*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+8*W/24, y+21*H/24)
   // ctx.stroke()
    ctx.globalAlpha /= 2
    ctx.fill()
    ctx.globalAlpha *= 2
  
    ctx.beginPath()
    ctx.moveTo(x+2*W/24, y+15*H/24)
    ctx.lineTo(x+2*W/24, y+21*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+14*W/24, y+15*H/24)
    ctx.lineTo(x+14*W/24, y+20*H/24)
    ctx.lineTo(x+14*W/24, y+21*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+18*W/24, y+16*H/24)
    ctx.lineTo(x+21*W/24, y+13*H/24)
    ctx.lineTo(x+17*W/24, y+9*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.arc(x+16*W/24, y+8*H/24, W/24, 0, Math.PI*2)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+15*W/24, y+7*H/24)
    ctx.lineTo(x+11*W/24, y+3*H/24)
    ctx.lineTo(x+8*W/24, y+6*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+17*W/24, y+8*H/24)
    ctx.lineTo(x+19*W/24, y+8*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+15*W/24, y+8*H/24)
    ctx.lineTo(x+13*W/24, y+8*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+16*W/24, y+7*H/24)
    ctx.lineTo(x+16*W/24, y+5*H/24)
    ctx.stroke()
    saved = ctx.fillStyle = saved
  }
  
  function cigarettesAt (x,y,W,color) {
    let canvas = document.getElementById("myCanvas")
    let ctx = canvas.getContext("2d")
    let H = W, cpx, cpy, points = []
    let colors = shuffle(getCurrentPalette(true,13))
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
    ctx.strokeStyle = color
    ctx.lineCap = "square"
    ctx.lineJoin = "bevel"
  
    ctx.beginPath()
    ctx.moveTo(x+4*W/24, y+8*H/24)
    ctx.lineTo(x+7*W/24, y+6*H/24)
    ctx.lineTo(x+5*W/24, y+3*H/24)
    ctx.lineTo(x+2*W/24, y+5*H/24)
    ctx.lineTo(x+4*W/24, y+8*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+4*W/24, y+8*H/24)
    ctx.lineTo(x+4*W/24, y+22*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+14*W/24, y+2*H/24)
    ctx.lineTo(x+16*W/24, y+2*H/24)
    ctx.lineTo(x+16*W/24, y+8*H/24)
    ctx.lineTo(x+14*W/24, y+8*H/24)
    ctx.lineTo(x+14*W/24, y+2*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+16*W/24, y+5*H/24)
    ctx.lineTo(x+18*W/24, y+5*H/24)
    ctx.lineTo(x+18*W/24, y+8*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+7*W/24, y+6*H/24)
    ctx.lineTo(x+14*W/24, y+6*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+5*W/24, y+3*H/24)
    ctx.lineTo(x+14*W/24, y+3*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+19*W/24, y+6*H/24)
    ctx.lineTo(x+17*W/24, y+3*H/24)
    ctx.lineTo(x+16*W/24, y+3*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+18*W/24, y+6*H/24)
    ctx.lineTo(x+19*W/24, y+6*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+19*W/24, y+6*H/24)
    ctx.lineTo(x+18*W/24, y+7*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+7*W/24, y+8*H/24)
    ctx.lineTo(x+7*W/24, y+20*H/24)
    ctx.lineTo(x+4*W/24, y+22*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+17*W/24, y+22*H/24)
    ctx.lineTo(x+19*W/24, y+20*H/24)
    ctx.lineTo(x+7*W/24, y+20*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+11*W/24, y+8*H/24)
    cpx = x+11*W/24
    cpy = y+10*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+13*W/24, y+10*H/24)
    cpx = x+15*W/24
    cpy = y+10*H/24
    ctx.quadraticCurveTo(cpx, cpy, x+15*W/24, y+8*H/24)
    ctx.stroke()
    
    // top of opening
    ctx.beginPath()
    ctx.moveTo(x+4*W/24, y+8*H/24)
    ctx.lineTo(x+19*W/24, y+8*H/24)
    ctx.stroke()
    // rt side and bottom
    ctx.beginPath()
    ctx.moveTo(x+19*W/24, y+8*H/24)
    ctx.lineTo(x+19*W/24, y+20*H/24)
    ctx.lineTo(x+17*W/24, y+22*H/24)
    ctx.lineTo(x+4*W/24, y+22*H/24)
    ctx.stroke()
    
    ctx.beginPath()
    ctx.moveTo(x+8*W/24, y+12*H/24)
    ctx.lineTo(x+8*W/24, y+15*H/24)
    ctx.lineTo(x+18*W/24, y+14*H/24)
    ctx.lineTo(x+18*W/24, y+11*H/24)
    ctx.lineTo(x+8*W/24, y+12*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+10*W/24, y+17*H/24)
    ctx.lineTo(x+10*W/24, y+18*H/24)
    ctx.lineTo(x+16*W/24, y+18*H/24)
    ctx.lineTo(x+16*W/24, y+17*H/24)
    ctx.lineTo(x+10*W/24, y+17*H/24)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.moveTo(x+14*W/24, y+7*H/24)
    ctx.lineTo(x+16*W/24, y+7*H/24)
    ctx.stroke()
  }
  
  function bicycleAt (x,y,W,color) { 
    let canvas = document.getElementById("myCanvas")
    let ctx = canvas.getContext("2d")
    let H = W, cpx, cpy, points = []
    let colors = shuffle(getCurrentPalette(true,13))
    ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
    ctx.strokeStyle = color
    ctx.lineCap = "square"
    ctx.lineJoin = "bevel"

    ctx.beginPath()
    ctx.arc(x+5*W/24, y+14*H/24, 4.4*W/24, 0, Math.PI*2)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.arc(x+12*W/24, y+14*H/24, 1*W/24, 0, Math.PI*2)
    ctx.stroke()
  
    ctx.beginPath()
    ctx.arc(x+19*W/24, y+14*H/24, 4.4*W/24, 0, Math.PI*2)
    ctx.stroke()
    
    ctx.beginPath()
    ctx.moveTo(x+5*W/24, y+14*H/24)
    ctx.lineTo(x+12*W/24, y+14*H/24)
    ctx.lineTo(x+8*W/24, y+9*H/24)
    ctx.lineTo(x+5*W/24, y+14*H/24)
    ctx.stroke()

    ctx.beginPath()
    ctx.moveTo(x+8*W/24, y+9*H/24)
    ctx.lineTo(x+17*W/24, y+7*H/24)
    ctx.stroke()

    ctx.beginPath()
    ctx.moveTo(x+19*W/24, y+14*H/24)
    ctx.lineTo(x+16*W/24, y+5*H/24)
    ctx.lineTo(x+18*W/24, y+4*H/24)
    ctx.stroke()

    ctx.beginPath()
    ctx.moveTo(x+17*W/24, y+8*H/24)
    ctx.lineTo(x+12*W/24, y+14*H/24)
    ctx.stroke()

    ctx.beginPath()
    ctx.moveTo(x+5*W/24, y+6*H/24)
    ctx.lineTo(x+8*W/24, y+9*H/24)
    ctx.stroke()

    ctx.beginPath()
    ctx.moveTo(x+4*W/24, y+6*H/24)
    ctx.lineTo(x+7*W/24, y+6*H/24)
    ctx.stroke()
  }
  
  function neighborsAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  let colors = shuffle(getCurrentPalette(true,13))
  ctx.lineWidth = 1 + document.getElementById("featuresize").value/50
  ctx.strokeStyle = color
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  //1
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+2*H/24)
  ctx.lineTo(x+9*W/24, y+2*H/24)
  ctx.lineTo(x+16*W/24, y+2*H/24)
  ctx.lineTo(x+23*W/24, y+2*H/24)
  ctx.lineTo(x+23*W/24, y+23*H/24)
  ctx.lineTo(x+2*W/24, y+23*H/24)
  ctx.lineTo(x+2*W/24, y+2*H/24)
  ctx.stroke()

  //2
  ctx.beginPath()
  ctx.moveTo(x+9*W/24, y+2*H/24)
  ctx.lineTo(x+9*W/24, y+23*H/24)
  ctx.lineTo(x+9*W/24, y+23*H/24)
  ctx.stroke()

  //3
  ctx.beginPath()
  ctx.moveTo(x+16*W/24, y+2*H/24)
  ctx.lineTo(x+16*W/24, y+23*H/24)
  ctx.stroke()

  //4
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+16*H/24)
  ctx.lineTo(x+23*W/24, y+16*H/24)
  ctx.stroke()

  //5
  ctx.beginPath()
  ctx.moveTo(x+2*W/24, y+9*H/24)
  ctx.lineTo(x+23*W/24, y+9*H/24)
  ctx.stroke()

  //6
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+10*H/24)
  ctx.lineTo(x+15*W/24, y+15*H/24)
  ctx.stroke()

  //7
  ctx.beginPath()
  ctx.moveTo(x+10*W/24, y+15*H/24)
  ctx.lineTo(x+15*W/24, y+10*H/24)
  ctx.stroke()
}
  
 function lavaAt (x,y,W,color) {
  let canvas = document.getElementById("myCanvas")
  let ctx = canvas.getContext("2d")
  let H = W, cpx, cpy, points = []
  ctx.strokeStyle = 'white'
  ctx.fillStyle = color//randomPick(['orange','red','yellow'])
  ctx.lineCap = "square"
  ctx.lineJoin = "bevel"
  ctx.lineWidth = 1
  let p = [], cp = [], lastp = []
  let cx = x+W/2, cy = y+H/2, angle = 0//s-60 + Math.random() * 120
  if (Math.random() > 0.5) {
    ctx.beginPath()
    p = rotatePoint(x+12*W/24, y+23*H/24 ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    cpx = x+22*W/24
    cpy = y+23*H/24
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+22*W/24, y+14*H/24,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    cpx = x+21*W/24
    cpy = y+11*H/24
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+23*W/24, y+8*H/24,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    cpx = x+17*W/24
    cpy = y+8*H/24
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+17*W/24, y+11*H/24,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    cpx = x+15*W/24
    cpy = y+11*H/24
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+15*W/24, y+7*H/24,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    cpx = x+17*W/24
    cpy = y+4*H/24
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+19*W/24, y+1*H/24,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    cpx = x+7*W/24
    cpy = y+3*H/24
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+8*W/24, y+12*H/24,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    cpx = x+5*W/24
    cpy = y+12*H/24
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+5*W/24, y+8*H/24,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    cpx = x+7*W/24
    cpy = y+4*H/24
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+9*W/24, y+3*H/24,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    cpx = x+1*W/24
    cpy = y+3*H/24
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+1*W/24, y+12*H/24,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    cpx = x+2*W/24
    cpy = y+23*H/24
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+12*W/24, y+23*H/24,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    ctx.fill()
    ctx.stroke()
  } else {
    ctx.beginPath()
    p = rotatePoint(x+12*W/24, y+23*H/24 ,cx,cy,angle)
    ctx.moveTo(p[0],p[1])
    cpx = x+2*W/24
    cpy = y+23*H/24
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+2*W/24, y+14*H/24,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    cpx = x+3*W/24
    cpy = y+11*H/24
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+1*W/24, y+7*H/24,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    cpx = x+7*W/24
    cpy = y+8*H/24
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+7*W/24, y+12*H/24,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    cpx = x+9*W/24
    cpy = y+11*H/24
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+9*W/24, y+7*H/24,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    cpx = x+7*W/24
    cpy = y+3*H/24
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+4*W/24, y+1*H/24,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    cpx = x+13*W/24
    cpy = y+2*H/24
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+16*W/24, y+6*H/24,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    cpx = x+17*W/24
    cpy = y+8*H/24
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+16*W/24, y+12*H/24,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    cpx = x+19*W/24
    cpy = y+12*H/24
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+19*W/24, y+8*H/24,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    cpx = x+17*W/24
    cpy = y+4*H/24
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+15*W/24, y+3*H/24,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    cpx = x+23*W/24
    cpy = y+3*H/24
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+23*W/24, y+12*H/24,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    cpx = x+22*W/24
    cpy = y+23*H/24
    cp = rotatePoint(cpx,cpy,cx,cy,angle)
    p = rotatePoint(x+12*W/24, y+23*H/24,cx,cy,angle)
    ctx.quadraticCurveTo(cp[0],cp[1],p[0],p[1])
    ctx.fill()
    ctx.stroke()
  }
}